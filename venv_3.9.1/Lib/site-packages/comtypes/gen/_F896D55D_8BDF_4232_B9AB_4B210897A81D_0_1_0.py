# -*- coding: mbcs -*-
typelib_path = 'C:\\Program Files\\Computers and Structures\\ETABS 19\\CSiAPIv1.tlb'
_lcid = 0 # change this if required
from ctypes import *
import comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0
from comtypes import GUID
from comtypes import BSTR
from ctypes import HRESULT
from comtypes import helpstring
from comtypes import COMMETHOD
from comtypes import dispid
from comtypes.automation import _midlSAFEARRAY
from ctypes.wintypes import VARIANT_BOOL
import comtypes.gen._BED7F4EA_1A96_11D2_8F08_00A0C9A6186D_0_2_4
from comtypes.automation import VARIANT
from comtypes import CoClass
from comtypes.automation import VARIANT


class cBDRS_AA_L_07_CSlabFlex(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{57B3FA4D-B8B6-45F7-8DAA-A3DB552FAAEA}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_AA_L_07_CSlabFlex._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_CSlabFlex implementation
##class cBDRS_AA_L_07_CSlabFlex_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBDRS_AA_L_07_PCCMinBarRt(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{619F71CA-55C6-45EE-AB43-488946967A51}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_AA_L_07_PCCMinBarRt._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_PCCMinBarRt implementation
##class cBDRS_AA_L_07_PCCMinBarRt_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cGroup(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{8357BFBC-7095-4195-BF44-2CE46D786043}')
    _idlflags_ = ['dual', 'oleautomation']
cGroup._methods_ = [
    COMMETHOD([dispid(3)], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetAssignments',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ObjectType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetGroup',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForSelection' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForSectionCutDefinition' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForSteelDesign' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForConcreteDesign' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForAluminumDesign' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForColdFormedDesign' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForStaticNLActiveStage' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForBridgeResponseOutput' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForAutoSeismicOutput' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForAutoWindOutput' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForMassAndWeight' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'SetGroup',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForSelection', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForSectionCutDefinition', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForSteelDesign', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForConcreteDesign', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForAluminumDesign', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForColdFormedDesign', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForStaticNLActiveStage', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForBridgeResponseOutput', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForAutoSeismicOutput', False ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForAutoWindOutput', False ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForMassAndWeight', True ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(1)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Clear',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetGroup_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForSelection' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForSectionCutDefinition' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForSteelDesign' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForConcreteDesign' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForAluminumDesign' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForStaticNLActiveStage' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForAutoSeismicOutput' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForAutoWindOutput' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForMassAndWeight' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForSteelJoistDesign' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForWallDesign' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForBasePlateDesign' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForConnectionDesign' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'SetGroup_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForSelection', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForSectionCutDefinition', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForSteelDesign', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForConcreteDesign', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForAluminumDesign', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForStaticNLActiveStage', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForAutoSeismicOutput', False ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForAutoWindOutput', False ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForMassAndWeight', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForSteelJoistDesign', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForWallDesign', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForBasePlateDesign', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForConnectionDesign', True ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cGroup implementation
##class cGroup_Impl(object):
##    def Count(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetAssignments(self, Name):
##        '-no docstring-'
##        #return NumberItems, ObjectType, ObjectName, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetGroup(self, Name):
##        '-no docstring-'
##        #return Color, SpecifiedForSelection, SpecifiedForSectionCutDefinition, SpecifiedForSteelDesign, SpecifiedForConcreteDesign, SpecifiedForAluminumDesign, SpecifiedForColdFormedDesign, SpecifiedForStaticNLActiveStage, SpecifiedForBridgeResponseOutput, SpecifiedForAutoSeismicOutput, SpecifiedForAutoWindOutput, SpecifiedForMassAndWeight, pRetVal
##
##    def SetGroup(self, Name, Color, SpecifiedForSelection, SpecifiedForSectionCutDefinition, SpecifiedForSteelDesign, SpecifiedForConcreteDesign, SpecifiedForAluminumDesign, SpecifiedForColdFormedDesign, SpecifiedForStaticNLActiveStage, SpecifiedForBridgeResponseOutput, SpecifiedForAutoSeismicOutput, SpecifiedForAutoWindOutput, SpecifiedForMassAndWeight):
##        '-no docstring-'
##        #return pRetVal
##
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Clear(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetGroup_1(self, Name):
##        '-no docstring-'
##        #return Color, SpecifiedForSelection, SpecifiedForSectionCutDefinition, SpecifiedForSteelDesign, SpecifiedForConcreteDesign, SpecifiedForAluminumDesign, SpecifiedForStaticNLActiveStage, SpecifiedForAutoSeismicOutput, SpecifiedForAutoWindOutput, SpecifiedForMassAndWeight, SpecifiedForSteelJoistDesign, SpecifiedForWallDesign, SpecifiedForBasePlateDesign, SpecifiedForConnectionDesign, pRetVal
##
##    def SetGroup_1(self, Name, Color, SpecifiedForSelection, SpecifiedForSectionCutDefinition, SpecifiedForSteelDesign, SpecifiedForConcreteDesign, SpecifiedForAluminumDesign, SpecifiedForStaticNLActiveStage, SpecifiedForAutoSeismicOutput, SpecifiedForAutoWindOutput, SpecifiedForMassAndWeight, SpecifiedForSteelJoistDesign, SpecifiedForWallDesign, SpecifiedForBasePlateDesign, SpecifiedForConnectionDesign):
##        '-no docstring-'
##        #return pRetVal
##


# values for enumeration 'eFramePropType'
eFramePropType_I = 1
eFramePropType_Channel = 2
eFramePropType_T = 3
eFramePropType_Angle = 4
eFramePropType_DblAngle = 5
eFramePropType_Box = 6
eFramePropType_Pipe = 7
eFramePropType_Rectangular = 8
eFramePropType_Circle = 9
eFramePropType_General = 10
eFramePropType_DbChannel = 11
eFramePropType_Auto = 12
eFramePropType_SD = 13
eFramePropType_Variable = 14
eFramePropType_Joist = 15
eFramePropType_Bridge = 16
eFramePropType_Cold_C = 17
eFramePropType_Cold_2C = 18
eFramePropType_Cold_Z = 19
eFramePropType_Cold_L = 20
eFramePropType_Cold_2L = 21
eFramePropType_Cold_Hat = 22
eFramePropType_BuiltupICoverplate = 23
eFramePropType_PCCGirderI = 24
eFramePropType_PCCGirderU = 25
eFramePropType_BuiltupIHybrid = 26
eFramePropType_BuiltupUHybrid = 27
eFramePropType_Concrete_L = 28
eFramePropType_FilledTube = 29
eFramePropType_FilledPipe = 30
eFramePropType_EncasedRectangle = 31
eFramePropType_EncasedCircle = 32
eFramePropType_BucklingRestrainedBrace = 33
eFramePropType_CoreBrace_BRB = 34
eFramePropType_ConcreteTee = 35
eFramePropType_ConcreteBox = 36
eFramePropType_ConcretePipe = 37
eFramePropType_ConcreteCross = 38
eFramePropType_SteelPlate = 39
eFramePropType_SteelRod = 40
eFramePropType = c_int # enum
class cBDRS_AASHTO_LRFD_2007(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{EE97876B-76FC-403D-A184-E409196BC71A}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_CBoxFlex(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{95B58FA2-E336-46B4-991F-10122FA67EA8}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_CBoxFlexRt(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{5B8F1825-3932-44E7-9B3A-53AB00718F99}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_CBoxMinBarRt(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{A2303515-CD6E-4212-A815-2EE0D9CB8327}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_CBoxPrin(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{1053D63D-BD76-430B-B511-16C711DC5BED}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_CBoxShear(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{E1B7E9D2-4412-4B4F-BE0E-2CE12CA4DA11}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_CBoxShearRt(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{CF87AC4A-1FEC-467C-8B2D-0F61856A6FE1}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_CBoxStress(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{C82204EF-B9FA-4C78-A2DA-88B6063BCC17}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_CBox2Flex(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{A3696A72-CDF8-4190-AB40-017DF651A3BA}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_CBox2FlexRt(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{5117934D-4F02-42D1-B5C9-A473147E1188}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_CBox2MinBarRt(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{3F3C934C-1EF4-413A-AF50-2980F25AE3BA}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_CBox2Shear(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{87BF033F-595E-4C3F-9EA5-1B3940AE1958}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_CBox2ShearRt(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{6F42DBC4-C460-4741-8431-E7FFF8BDB41D}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_CBox2Stress(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{C070A7B2-8694-4FF4-BE6A-A8DB5E137544}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_PCCompFlex(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{DFA3CFCC-468A-412E-8ED5-70DE71259B56}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_PCCFlexRt(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{A8376528-F801-4B4D-862A-F5DDCCB77A16}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_PCCompShear(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{A4B5D9FA-16D5-43C9-B0E3-0AA282AA8D98}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_PCCShearRt(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{D68FCAF1-775E-42A5-9AAF-4F6010F10427}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_PCCompStress(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{B1D1B994-8F46-4B70-905A-03AB72435B04}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_SICompConstr(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{F8B82A21-338B-4E7B-A3E7-158507AC724F}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_SICompConstNS(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{F92373F3-F5A1-4B87-ACFE-0A5E9E002969}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_SICompServ(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{C6835A58-3F08-4DFF-81DF-0A6C4B0C3A98}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_SICompServRt(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{14BF929C-0331-4B99-B9E7-4A51F97454CC}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_SICompStr(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{02936F37-3019-4315-8A6F-7C7C663BF800}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_SICompStrRt(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{9108E863-F102-4B3B-94B3-76E8C0B0BA73}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_SINCompServRt(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{9DF3513F-399E-4474-B16A-46EC6DDFDDFA}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_SINCompStrRt(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{C1D7381C-01E5-4119-AF31-5EFB769528E2}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_SUCompConstr(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{B6CF5F15-6F11-49CF-8B89-77CCA0BC4AF9}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_SUCompConstNS(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{18309BE7-F7A7-4348-A2BC-550BABF2DC7A}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_SUCompServ(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{5226FF01-EE35-4DF0-BFB7-CB1DF0B72F9D}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_SUCompStr(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{383103B2-1D58-4B26-8136-55F1FFB2CCC5}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_SICompFatig(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{E9F37684-0B8C-48A7-81CD-706F3E09F2A1}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_CSlabStress(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{A259FE92-0D81-4072-A8B6-D5A3557D4BA6}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_CSlabShear(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{98BC4B32-1772-4994-953D-D25CDFBB1DFA}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_SUCompStrRt(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{4F24348B-20B1-49F9-A51E-67EA7E83CED4}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_SUCompServRt(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{E5B5DD69-760F-4F30-9FFF-4312BF6CD27D}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_CSlabServiceRt(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{6190373E-1F1C-42C6-9F11-810E9AE0BC60}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_CBoxServiceRt(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{B4619FD5-9D8F-40E3-A7CD-7DFF226C3E24}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_CBox2ServiceRt(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{BD0DE421-DA49-4AAA-9E22-4B4C9521BFE0}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_PCCServiceRt(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{AC395294-F2D1-4D2A-B08D-FE48850E09C5}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_PCCompPrincipal(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{113F16C9-CD63-4AD4-8A36-B852B45C8F49}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_CBoxTendon(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{0E18AC26-2436-49ED-B2D2-47CD7B2FBE04}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_CTBeamStress(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{CD938357-5994-4BDC-9C4A-008D3D5B530B}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_CTBeamShear(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{B4117B0E-6F8F-4BD6-BFC9-2E3310E417E2}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_CTBeamFlex(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{82766900-9D29-4B65-A479-1017B6A851BF}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_CTBeamFlexRt(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{A9D43BB8-550E-498F-8191-B84B57F558AB}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_CTBeamMinBarRt(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{B1001FCC-62A3-4B1E-B377-9829543DA61F}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_CTBeamShearRt(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{58D6B413-EF33-4744-A5C8-3307E1FABAD1}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_L_07_CTBeamServiceRt(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{050D225F-DF20-4BDB-823C-388A1A5CEF8A}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_AASHTO_LRFD_2007._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'ConcBoxFlexure',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_CBoxFlex)), 'pRetVal' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'ConcBoxFlexureRating',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_CBoxFlexRt)), 'pRetVal' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'ConcBoxMinBarRating',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_CBoxMinBarRt)), 'pRetVal' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'ConcBoxPrincipal',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_CBoxPrin)), 'pRetVal' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'ConcBoxShear',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_CBoxShear)), 'pRetVal' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'ConcBoxShearRating',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_CBoxShearRt)), 'pRetVal' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'ConcBoxStress',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_CBoxStress)), 'pRetVal' )),
    COMMETHOD([dispid(8), 'propget'], HRESULT, 'ConcBox2Flexure',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_CBox2Flex)), 'pRetVal' )),
    COMMETHOD([dispid(9), 'propget'], HRESULT, 'ConcBox2FlexureRating',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_CBox2FlexRt)), 'pRetVal' )),
    COMMETHOD([dispid(10), 'propget'], HRESULT, 'ConcBox2MinBarRating',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_CBox2MinBarRt)), 'pRetVal' )),
    COMMETHOD([dispid(11), 'propget'], HRESULT, 'ConcBox2Shear',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_CBox2Shear)), 'pRetVal' )),
    COMMETHOD([dispid(12), 'propget'], HRESULT, 'ConcBox2ShearRating',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_CBox2ShearRt)), 'pRetVal' )),
    COMMETHOD([dispid(13), 'propget'], HRESULT, 'ConcBox2Stress',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_CBox2Stress)), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'GetCheckType',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in', 'out'], POINTER(c_int), 'CheckType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'GetLiveLoadDistrib',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16), 'propget'], HRESULT, 'PrecastCompFlexure',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_PCCompFlex)), 'pRetVal' )),
    COMMETHOD([dispid(17), 'propget'], HRESULT, 'PrecastCompFlexureRating',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_PCCFlexRt)), 'pRetVal' )),
    COMMETHOD([dispid(18), 'propget'], HRESULT, 'PrecastCompMinBarRating',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_PCCMinBarRt)), 'pRetVal' )),
    COMMETHOD([dispid(19), 'propget'], HRESULT, 'PrecastCompShear',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_PCCompShear)), 'pRetVal' )),
    COMMETHOD([dispid(20), 'propget'], HRESULT, 'PrecastCompShearRating',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_PCCShearRt)), 'pRetVal' )),
    COMMETHOD([dispid(21), 'propget'], HRESULT, 'PrecastCompStress',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_PCCompStress)), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'SetCheckType',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'CheckType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(23)], HRESULT, 'SetLiveLoadDistrib',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(24), 'propget'], HRESULT, 'SteelICompConstruct',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_SICompConstr)), 'pRetVal' )),
    COMMETHOD([dispid(25), 'propget'], HRESULT, 'SteelICompConstructNonStgd',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_SICompConstNS)), 'pRetVal' )),
    COMMETHOD([dispid(26), 'propget'], HRESULT, 'SteelICompService',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_SICompServ)), 'pRetVal' )),
    COMMETHOD([dispid(27), 'propget'], HRESULT, 'SteelICompServiceRating',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_SICompServRt)), 'pRetVal' )),
    COMMETHOD([dispid(28), 'propget'], HRESULT, 'SteelICompStrength',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_SICompStr)), 'pRetVal' )),
    COMMETHOD([dispid(29), 'propget'], HRESULT, 'SteelICompStrengthRating',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_SICompStrRt)), 'pRetVal' )),
    COMMETHOD([dispid(30), 'propget'], HRESULT, 'SteelINonCompServiceRating',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_SINCompServRt)), 'pRetVal' )),
    COMMETHOD([dispid(31), 'propget'], HRESULT, 'SteelINonCompStrengthRating',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_SINCompStrRt)), 'pRetVal' )),
    COMMETHOD([dispid(32), 'propget'], HRESULT, 'SteelUCompConstruct',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_SUCompConstr)), 'pRetVal' )),
    COMMETHOD([dispid(33), 'propget'], HRESULT, 'SteelUCompConstructNonStgd',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_SUCompConstNS)), 'pRetVal' )),
    COMMETHOD([dispid(34), 'propget'], HRESULT, 'SteelUCompService',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_SUCompServ)), 'pRetVal' )),
    COMMETHOD([dispid(35), 'propget'], HRESULT, 'SteelUCompStrength',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_SUCompStr)), 'pRetVal' )),
    COMMETHOD([dispid(36), 'propget'], HRESULT, 'SteelICompFatigue',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_SICompFatig)), 'pRetVal' )),
    COMMETHOD([dispid(37), 'propget'], HRESULT, 'ConcSlabStress',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_CSlabStress)), 'pRetVal' )),
    COMMETHOD([dispid(38), 'propget'], HRESULT, 'ConcSlabShear',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_CSlabShear)), 'pRetVal' )),
    COMMETHOD([dispid(39), 'propget'], HRESULT, 'ConcSlabFlexure',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_CSlabFlex)), 'pRetVal' )),
    COMMETHOD([dispid(40), 'propget'], HRESULT, 'SteelUCompStrengthRating',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_SUCompStrRt)), 'pRetVal' )),
    COMMETHOD([dispid(41), 'propget'], HRESULT, 'SteelUCompServiceRating',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_SUCompServRt)), 'pRetVal' )),
    COMMETHOD([dispid(42), 'propget'], HRESULT, 'ConcSlabServiceRating',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_CSlabServiceRt)), 'pRetVal' )),
    COMMETHOD([dispid(43), 'propget'], HRESULT, 'ConcBoxServiceRating',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_CBoxServiceRt)), 'pRetVal' )),
    COMMETHOD([dispid(44), 'propget'], HRESULT, 'ConcBox2ServiceRating',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_CBox2ServiceRt)), 'pRetVal' )),
    COMMETHOD([dispid(45), 'propget'], HRESULT, 'PrecastCompServiceRating',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_PCCServiceRt)), 'pRetVal' )),
    COMMETHOD([dispid(46), 'propget'], HRESULT, 'PrecastCompPrincipal',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_PCCompPrincipal)), 'pRetVal' )),
    COMMETHOD([dispid(47), 'propget'], HRESULT, 'ConcBoxTendon',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_CBoxTendon)), 'pRetVal' )),
    COMMETHOD([dispid(48), 'propget'], HRESULT, 'ConcTBeamStress',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_CTBeamStress)), 'pRetVal' )),
    COMMETHOD([dispid(49), 'propget'], HRESULT, 'ConcTBeamShear',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_CTBeamShear)), 'pRetVal' )),
    COMMETHOD([dispid(50), 'propget'], HRESULT, 'ConcTBeamFlexure',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_CTBeamFlex)), 'pRetVal' )),
    COMMETHOD([dispid(51), 'propget'], HRESULT, 'ConcTBeamFlexureRating',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_CTBeamFlexRt)), 'pRetVal' )),
    COMMETHOD([dispid(52), 'propget'], HRESULT, 'ConcTBeamMinBarRating',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_CTBeamMinBarRt)), 'pRetVal' )),
    COMMETHOD([dispid(53), 'propget'], HRESULT, 'ConcTBeamShearRating',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_CTBeamShearRt)), 'pRetVal' )),
    COMMETHOD([dispid(54), 'propget'], HRESULT, 'ConcTBeamServiceRating',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_L_07_CTBeamServiceRt)), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AASHTO_LRFD_2007 implementation
##class cBDRS_AASHTO_LRFD_2007_Impl(object):
##    @property
##    def ConcBoxFlexure(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBoxFlexureRating(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBoxMinBarRating(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBoxPrincipal(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBoxShear(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBoxShearRating(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBoxStress(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBox2Flexure(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBox2FlexureRating(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBox2MinBarRating(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBox2Shear(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBox2ShearRating(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBox2Stress(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetCheckType(self, RequestName):
##        '-no docstring-'
##        #return CheckType, pRetVal
##
##    def GetLiveLoadDistrib(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    @property
##    def PrecastCompFlexure(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PrecastCompFlexureRating(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PrecastCompMinBarRating(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PrecastCompShear(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PrecastCompShearRating(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PrecastCompStress(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCheckType(self, RequestName, CheckType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLiveLoadDistrib(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelICompConstruct(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelICompConstructNonStgd(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelICompService(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelICompServiceRating(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelICompStrength(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelICompStrengthRating(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelINonCompServiceRating(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelINonCompStrengthRating(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelUCompConstruct(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelUCompConstructNonStgd(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelUCompService(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelUCompStrength(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelICompFatigue(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcSlabStress(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcSlabShear(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcSlabFlexure(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelUCompStrengthRating(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelUCompServiceRating(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcSlabServiceRating(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBoxServiceRating(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBox2ServiceRating(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PrecastCompServiceRating(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PrecastCompPrincipal(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBoxTendon(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcTBeamStress(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcTBeamShear(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcTBeamFlexure(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcTBeamFlexureRating(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcTBeamMinBarRating(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcTBeamShearRating(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcTBeamServiceRating(self):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_AA_L_07_SICompServRt._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_SICompServRt implementation
##class cBDRS_AA_L_07_SICompServRt_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_AA_L_07_PCCompPrincipal._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], BSTR, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_PCCompPrincipal implementation
##class cBDRS_AA_L_07_PCCompPrincipal_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetCapacityParamString(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCapacityParamString(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##


# values for enumeration 'eBridgeResponseDesignRating'
eBridgeResponseDesignRating_S11_Longitudinal_Top_Left = 0
eBridgeResponseDesignRating_S11_Longitudinal_Top_Center = 1
eBridgeResponseDesignRating_S11_Longitudinal_Top_Right = 2
eBridgeResponseDesignRating_S11_Longitudinal_Top_Envelope = 3
eBridgeResponseDesignRating_S11_Longitudinal_Slab_Top_Left = 4
eBridgeResponseDesignRating_S11_Longitudinal_Slab_Top_Center = 5
eBridgeResponseDesignRating_S11_Longitudinal_Slab_Top_Beam_Center = 6
eBridgeResponseDesignRating_S11_Longitudinal_Slab_Top_Right = 7
eBridgeResponseDesignRating_S11_Longitudinal_Slab_Top_Envelope = 8
eBridgeResponseDesignRating_S11_Longitudinal_Beam_Top_Left = 9
eBridgeResponseDesignRating_S11_Longitudinal_Beam_Top_Center = 10
eBridgeResponseDesignRating_S11_Longitudinal_Beam_Top_Right = 11
eBridgeResponseDesignRating_S11_Longitudinal_Beam_Top_Envelope = 12
eBridgeResponseDesignRating_S11_Longitudinal_Bot_Left = 13
eBridgeResponseDesignRating_S11_Longitudinal_Bot_Left_Corner = 14
eBridgeResponseDesignRating_S11_Longitudinal_Bot_Center = 15
eBridgeResponseDesignRating_S11_Longitudinal_Bot_Right = 16
eBridgeResponseDesignRating_S11_Longitudinal_Bot_Right_Corner = 17
eBridgeResponseDesignRating_S11_Longitudinal_Bot_Envelope = 18
eBridgeResponseDesignRating_S11_Longitudinal_Girder_Bot_Left = 19
eBridgeResponseDesignRating_S11_Longitudinal_Girder_Bot_Right = 20
eBridgeResponseDesignRating_S11_Longitudinal_Girder_Bot_Envelope = 21
eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Left = 22
eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Beam_Left = 23
eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Beam_Center = 24
eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Beam_Right = 25
eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Center = 26
eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Right = 27
eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Envelope = 28
eBridgeResponseDesignRating_S11_Longitudinal_Beam_Bot_Left = 29
eBridgeResponseDesignRating_S11_Longitudinal_Beam_Bot_Center = 39
eBridgeResponseDesignRating_S11_Longitudinal_Beam_Bot_Right = 31
eBridgeResponseDesignRating_S11_Longitudinal_Beam_Bot_Envelope = 32
eBridgeResponseDesignRating_Design_Shear_Demand_Concrete_Shear_Capacity_Ratio = 33
eBridgeResponseDesignRating_Design_Shear_Controlling_Shear_DC_Ratio = 34
eBridgeResponseDesignRating_Design_Shear_Controlling_Torsion_DC_Ratio = 35
eBridgeResponseDesignRating_Design_Shear_Required_Extra_Shear_Rebar_Area_PerL = 36
eBridgeResponseDesignRating_Design_Shear_Required_Extra_Longit_Rebar_Area = 37
eBridgeResponseDesignRating_Design_Shear_Required_Extra_Longit_Rebar_Area_For_Torsion = 38
eBridgeResponseDesignRating_Design_Shear_Required_Extra_Longit_Rebar_Area_Bot_Slab = 39
eBridgeResponseDesignRating_Design_Shear_Required_Extra_Longit_Rebar_Area_Top_Slab = 40
eBridgeResponseDesignRating_Design_Shear_Required_Extra_Longit_Rebar_Area_Slab = 41
eBridgeResponseDesignRating_Design_Shear_Required_Extra_Longit_Rebar_Area_Beam = 42
eBridgeResponseDesignRating_Design_Shear_Controlling_DC_Ratio = 43
eBridgeResponseDesignRating_Design_Shear_Rebar_Area_PerL = 44
eBridgeResponseDesignRating_Design_Shear_Longit_Rebar_Area = 45
eBridgeResponseDesignRating_Design_Shear_Longit_Rebar_Area_Bot_Slab = 46
eBridgeResponseDesignRating_Design_Shear_Longit_Rebar_Area_Top_Slab = 47
eBridgeResponseDesignRating_Design_Shear_Longit_Rebar_Area_Bot_Flange = 48
eBridgeResponseDesignRating_Design_Shear_Longit_Rebar_Area_Slab = 49
eBridgeResponseDesignRating_Design_Shear_Longit_Rebar_Area_Beam = 50
eBridgeResponseDesignRating_Design_Shear_Longit_Torsional_Rebar_Area_PerL = 51
eBridgeResponseDesignRating_Design_Shear_Torsion_Rebar_Area_PerL = 52
eBridgeResponseDesignRating_Design_Shear_Torsion_Plus_Shear_Rebar_Area_PerL = 53
eBridgeResponseDesignRating_Design_Crack_Top_Crack_Width = 54
eBridgeResponseDesignRating_Design_Crack_Bot_Crack_Width = 55
eBridgeResponseDesignRating_Design_Crack_Top_Bot_Crack_Widths = 56
eBridgeResponseDesignRating_Design_Principal_Stress_Envelope = 57
eBridgeResponseDesignRating_Design_Principal_Stress_Web_Top = 58
eBridgeResponseDesignRating_Design_Principal_Stress_Web_Bot = 59
eBridgeResponseDesignRating_Design_Principal_Stress_Beam_Web_Top = 60
eBridgeResponseDesignRating_Design_Principal_Stress_Beam_Web_Bot = 61
eBridgeResponseDesignRating_Design_Principal_Stress_Neutral_Axis = 62
eBridgeResponseDesignRating_Design_Tendon_Stress_Controlling_DC_Ratio = 63
eBridgeResponseDesignRating_Design_Flexure_Moment_About_Horizontal_Axis_M3 = 64
eBridgeResponseDesignRating_Design_Strength_DC_Ratio_Positive_Moment = 65
eBridgeResponseDesignRating_Design_Strength_DC_Ratio_Negative_Moment = 66
eBridgeResponseDesignRating_Design_Strength_DC_Ratio_Shear = 67
eBridgeResponseDesignRating_Design_Strength_DC_Ratio_Net_Section_Fracture_Pos = 68
eBridgeResponseDesignRating_Design_Strength_DC_Ratio_Net_Section_Fracture_Neg = 69
eBridgeResponseDesignRating_Design_Strength_DC_Ratio_FlexureShearInteract_Pos = 70
eBridgeResponseDesignRating_Design_Strength_DC_Ratio_FlexureShearInteract_Neg = 71
eBridgeResponseDesignRating_Design_Strength_Total_Nominal_Shear_Force_6_10_10_4_2 = 72
eBridgeResponseDesignRating_Design_Fatigue_Top_Flange_Tensile_Stress_Range_Without_FLB = 73
eBridgeResponseDesignRating_Design_Fatigue_Bot_Flange_Tensile_Stress_Range_Without_FLB = 74
eBridgeResponseDesignRating_Design_Fatigue_Bot_Flange_Lateral_Bending_Stress_Range = 75
eBridgeResponseDesignRating_Design_Fatigue_DC_Ratio_Web_Shear = 76
eBridgeResponseDesignRating_Rating_Shear = 77
eBridgeResponseDesignRating_Rating_Shear_Factored_Shear_Resistance = 78
eBridgeResponseDesignRating_Rating_Shear_Factored_Shear_Resistance_UVr = 79
eBridgeResponseDesignRating_Rating_Shear_Live_load_Capacity_Factor_F = 80
eBridgeResponseDesignRating_Rating_Flexure = 81
eBridgeResponseDesignRating_Rating_Flexure_Factored_Moment_Resistance = 82
eBridgeResponseDesignRating_Rating_Flexure_Factored_Moment_Resistance_UMr = 83
eBridgeResponseDesignRating_Rating_Flexure_Live_load_Capacity_Factor_F = 84
eBridgeResponseDesignRating_Rating_Strength_Shear_Rating = 85
eBridgeResponseDesignRating_Rating_Strength_Flexure_Rating = 86
eBridgeResponseDesignRating_Rating_Strength_Live_load_Capacity_Factor_F_Moment_M3 = 87
eBridgeResponseDesignRating_Rating_Strength_Live_load_Capacity_Factor_F_Shear_V2 = 88
eBridgeResponseDesignRating_Rating_Service_Flexure_Rating = 89
eBridgeResponseDesignRating_Rating_MinRebar_Min_Of_Abs_1_2Mcr_And_Abs_1_33Mu_For_Pos = 90
eBridgeResponseDesignRating_Rating_MinRebar_Min_Of_Abs_1_2Mcr_And_Abs_1_33Mu_For_Neg = 91
eBridgeResponseDesignRating_Rating_MinRebar_Flexure_Rating = 92
eBridgeResponseDesignRating_Rating_Service = 93
eBridgeResponseDesignRating = c_int # enum
cBDRS_AA_L_07_CBoxFlexRt._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_CBoxFlexRt implementation
##class cBDRS_AA_L_07_CBoxFlexRt_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBDRS_EUROCODE_PCCompStr(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{40BBF393-FA29-460E-A379-3394B33A76A0}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_EUROCODE_PCCompStr._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_EUROCODE_PCCompStr implementation
##class cBDRS_EUROCODE_PCCompStr_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cDStASCE_10_97(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{A9A6663A-0799-447D-89C5-386F24119D34}')
    _idlflags_ = ['dual', 'oleautomation']

# values for enumeration 'eItemType'
eItemType_Objects = 0
eItemType_Group = 1
eItemType_SelectedObjects = 2
eItemType = c_int # enum
cDStASCE_10_97._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDStASCE_10_97 implementation
##class cDStASCE_10_97_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##


# values for enumeration 'eHingeLocationType'
eHingeLocationType_RelativeDistance = 1
eHingeLocationType_OffsetFromIEnd = 2
eHingeLocationType_OffsetFromJEnd = 3
eHingeLocationType = c_int # enum
class cDesignConcreteSlab(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{CA956367-BE9F-4587-8129-7781076E2CF4}')
    _idlflags_ = ['dual', 'oleautomation']
class cDConcSlabACI318_14(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{2C9C6D53-83F2-479E-B4D5-08FD35FE75B4}')
    _idlflags_ = ['dual', 'oleautomation']
class cDesignStrip(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{FC4A4879-5479-4DA9-B53A-511F07D855AB}')
    _idlflags_ = ['dual', 'oleautomation']
cDesignConcreteSlab._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'ACI318_14',
              ( ['out', 'retval'], POINTER(POINTER(cDConcSlabACI318_14)), 'pRetVal' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'DesignStrip',
              ( ['out', 'retval'], POINTER(POINTER(cDesignStrip)), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetFlexureAndShear',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StoryName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'DesignStripName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Station' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ConcWidth' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FTopCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FTopMoment' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FTopArea' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FTopAMin' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FBotCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FBotMoment' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FBotArea' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FBotAMin' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AxialForce' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'VCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VForce' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VArea' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Status' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GlobalX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GlobalY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Layer' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetSummaryResultsFlexureAndShear',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StoryName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'DesignStripName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SpanID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Location' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FTopCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FTopMoment' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FTopArea' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FBotCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FBotMoment' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FBotArea' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'VCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VForce' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VArea' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Status' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Layer' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetSummaryResultsSpanDefinition',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StoryName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'DesignStripName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SpanID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SpanLength' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartDist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndDist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GlobalX1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GlobalY1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GlobalX2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GlobalY2' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDesignConcreteSlab implementation
##class cDesignConcreteSlab_Impl(object):
##    @property
##    def ACI318_14(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def DesignStrip(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetFlexureAndShear(self):
##        '-no docstring-'
##        #return StoryName, DesignStripName, Station, ConcWidth, FTopCombo, FTopMoment, FTopArea, FTopAMin, FBotCombo, FBotMoment, FBotArea, FBotAMin, AxialForce, VCombo, VForce, VArea, Status, GlobalX, GlobalY, Layer, pRetVal
##
##    def GetSummaryResultsFlexureAndShear(self):
##        '-no docstring-'
##        #return StoryName, DesignStripName, SpanID, Location, FTopCombo, FTopMoment, FTopArea, FBotCombo, FBotMoment, FBotArea, VCombo, VForce, VArea, Status, Layer, pRetVal
##
##    def GetSummaryResultsSpanDefinition(self):
##        '-no docstring-'
##        #return StoryName, DesignStripName, SpanID, SpanLength, StartDist, EndDist, GlobalX1, GlobalY1, GlobalX2, GlobalY2, pRetVal
##

cBDRS_AA_L_07_CBoxFlex._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_CBoxFlex implementation
##class cBDRS_AA_L_07_CBoxFlex_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cCaseDirectHistoryNonlinear(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{A34699D9-4C3D-4899-A815-949B02A304D7}')
    _idlflags_ = ['dual', 'oleautomation']
cCaseDirectHistoryNonlinear._methods_ = [
    COMMETHOD([dispid(4)], HRESULT, 'GetLoads',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Func' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Tf' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'At' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ang' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(1)], HRESULT, 'GetDampProportional',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'DampType' ),
              ( ['in', 'out'], POINTER(c_double), 'DampA' ),
              ( ['in', 'out'], POINTER(c_double), 'DampB' ),
              ( ['in', 'out'], POINTER(c_double), 'DampF1' ),
              ( ['in', 'out'], POINTER(c_double), 'DampF2' ),
              ( ['in', 'out'], POINTER(c_double), 'DampD1' ),
              ( ['in', 'out'], POINTER(c_double), 'DampD2' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetGeometricNonlinearity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NLGeomType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetInitialCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'InitialCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetSolControlParameters',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'DTMax' ),
              ( ['in', 'out'], POINTER(c_double), 'DTMin' ),
              ( ['in', 'out'], POINTER(c_int), 'MaxIterCS' ),
              ( ['in', 'out'], POINTER(c_int), 'MaxIterNR' ),
              ( ['in', 'out'], POINTER(c_double), 'TolConvD' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UseEventStepping' ),
              ( ['in', 'out'], POINTER(c_double), 'TolEventD' ),
              ( ['in', 'out'], POINTER(c_int), 'MaxLineSearchPerIter' ),
              ( ['in', 'out'], POINTER(c_double), 'TolLineSearch' ),
              ( ['in', 'out'], POINTER(c_double), 'LineSearchStepFact' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetTimeIntegration',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'IntegrationType' ),
              ( ['in', 'out'], POINTER(c_double), 'Alpha' ),
              ( ['in', 'out'], POINTER(c_double), 'Beta' ),
              ( ['in', 'out'], POINTER(c_double), 'Gamma' ),
              ( ['in', 'out'], POINTER(c_double), 'Theta' ),
              ( ['in', 'out'], POINTER(c_double), 'M' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetTimeStep',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NStep' ),
              ( ['in', 'out'], POINTER(c_double), 'Dt' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'SetCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'SetDampProportional',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'DampType' ),
              ( ['in'], c_double, 'DampA' ),
              ( ['in'], c_double, 'DampB' ),
              ( ['in'], c_double, 'DampF1' ),
              ( ['in'], c_double, 'DampF2' ),
              ( ['in'], c_double, 'DampD1' ),
              ( ['in'], c_double, 'DampD2' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'SetGeometricNonlinearity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NLGeomType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'SetInitialCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'InitialCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'SetLoads',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Func' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Tf' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'At' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ang' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'SetSolControlParameters',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'DTMax' ),
              ( ['in'], c_double, 'DTMin' ),
              ( ['in'], c_int, 'MaxIterCS' ),
              ( ['in'], c_int, 'MaxIterNR' ),
              ( ['in'], c_double, 'TolConvD' ),
              ( ['in'], VARIANT_BOOL, 'UseEventStepping' ),
              ( ['in'], c_double, 'TolEventD' ),
              ( ['in'], c_int, 'MaxLineSearchPerIter' ),
              ( ['in'], c_double, 'TolLineSearch' ),
              ( ['in'], c_double, 'LineSearchStepFact' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'SetTimeIntegration',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'IntegrationType' ),
              ( ['in'], c_double, 'Alpha' ),
              ( ['in'], c_double, 'Beta' ),
              ( ['in'], c_double, 'Gamma' ),
              ( ['in'], c_double, 'Theta' ),
              ( ['in', 'optional'], c_double, 'M', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'SetTimeStep',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NStep' ),
              ( ['in'], c_double, 'Dt' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'GetMassSource',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'mSource' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'SetMassSource',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'mSource' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cCaseDirectHistoryNonlinear implementation
##class cCaseDirectHistoryNonlinear_Impl(object):
##    def GetLoads(self, Name):
##        '-no docstring-'
##        #return NumberLoads, LoadType, LoadName, Func, SF, Tf, At, CSys, Ang, pRetVal
##
##    def GetDampProportional(self, Name):
##        '-no docstring-'
##        #return DampType, DampA, DampB, DampF1, DampF2, DampD1, DampD2, pRetVal
##
##    def GetGeometricNonlinearity(self, Name):
##        '-no docstring-'
##        #return NLGeomType, pRetVal
##
##    def GetInitialCase(self, Name):
##        '-no docstring-'
##        #return InitialCase, pRetVal
##
##    def GetSolControlParameters(self, Name):
##        '-no docstring-'
##        #return DTMax, DTMin, MaxIterCS, MaxIterNR, TolConvD, UseEventStepping, TolEventD, MaxLineSearchPerIter, TolLineSearch, LineSearchStepFact, pRetVal
##
##    def GetTimeIntegration(self, Name):
##        '-no docstring-'
##        #return IntegrationType, Alpha, Beta, Gamma, Theta, M, pRetVal
##
##    def GetTimeStep(self, Name):
##        '-no docstring-'
##        #return NStep, Dt, pRetVal
##
##    def SetCase(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDampProportional(self, Name, DampType, DampA, DampB, DampF1, DampF2, DampD1, DampD2):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetGeometricNonlinearity(self, Name, NLGeomType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetInitialCase(self, Name, InitialCase):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoads(self, Name, NumberLoads):
##        '-no docstring-'
##        #return LoadType, LoadName, Func, SF, Tf, At, CSys, Ang, pRetVal
##
##    def SetSolControlParameters(self, Name, DTMax, DTMin, MaxIterCS, MaxIterNR, TolConvD, UseEventStepping, TolEventD, MaxLineSearchPerIter, TolLineSearch, LineSearchStepFact):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetTimeIntegration(self, Name, IntegrationType, Alpha, Beta, Gamma, Theta, M):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetTimeStep(self, Name, NStep, Dt):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetMassSource(self, Name):
##        '-no docstring-'
##        #return mSource, pRetVal
##
##    def SetMassSource(self, Name, mSource):
##        '-no docstring-'
##        #return pRetVal
##

class cEditArea(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{72C88327-0F13-427D-BCAE-F1F777FF35AB}')
    _idlflags_ = ['dual', 'oleautomation']
cEditArea._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'ChangeConnectivity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Point' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Divide',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'MeshType' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberAreas' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName' ),
              ( ['in', 'optional'], c_int, 'N1', 2 ),
              ( ['in', 'optional'], c_int, 'N2', 2 ),
              ( ['in', 'optional'], c_double, 'MaxSize1', 0.0 ),
              ( ['in', 'optional'], c_double, 'MaxSize2', 0.0 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'PointOnEdgeFromGrid', False ),
              ( ['in', 'optional'], VARIANT_BOOL, 'PointOnEdgeFromLine', False ),
              ( ['in', 'optional'], VARIANT_BOOL, 'PointOnEdgeFromPoint', False ),
              ( ['in', 'optional'], VARIANT_BOOL, 'ExtendCookieCutLines', False ),
              ( ['in', 'optional'], c_double, 'Rotation', 0.0 ),
              ( ['in', 'optional'], c_double, 'MaxSizeGeneral', 0.0 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'LocalAxesOnEdge', False ),
              ( ['in', 'optional'], VARIANT_BOOL, 'LocalAxesOnFace', False ),
              ( ['in', 'optional'], VARIANT_BOOL, 'RestraintsOnEdge', False ),
              ( ['in', 'optional'], VARIANT_BOOL, 'RestraintsOnFace', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'ExpandShrink',
              ( ['in'], c_int, 'OffsetType' ),
              ( ['in'], c_double, 'Offset' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'Merge',
              ( ['in', 'out'], POINTER(c_int), 'NumberAreas' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'PointAdd',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'PointRemove',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cEditArea implementation
##class cEditArea_Impl(object):
##    def ChangeConnectivity(self, Name, NumberPoints):
##        '-no docstring-'
##        #return Point, pRetVal
##
##    def Divide(self, Name, MeshType, N1, N2, MaxSize1, MaxSize2, PointOnEdgeFromGrid, PointOnEdgeFromLine, PointOnEdgeFromPoint, ExtendCookieCutLines, Rotation, MaxSizeGeneral, LocalAxesOnEdge, LocalAxesOnFace, RestraintsOnEdge, RestraintsOnFace):
##        '-no docstring-'
##        #return NumberAreas, AreaName, pRetVal
##
##    def ExpandShrink(self, OffsetType, Offset):
##        '-no docstring-'
##        #return pRetVal
##
##    def Merge(self):
##        '-no docstring-'
##        #return NumberAreas, AreaName, pRetVal
##
##    def PointAdd(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def PointRemove(self):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_AA_L_07_PCCompShear._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], BSTR, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_PCCompShear implementation
##class cBDRS_AA_L_07_PCCompShear_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetCapacityParamString(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCapacityParamString(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cAnalysisResults(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{10CFC9A0-2794-4E4F-BD98-EA3F9450FC56}')
    _idlflags_ = ['dual', 'oleautomation']

# values for enumeration 'eItemTypeElm'
eItemTypeElm_ObjectElm = 0
eItemTypeElm_Element = 1
eItemTypeElm_GroupElm = 2
eItemTypeElm_SelectionElm = 3
eItemTypeElm = c_int # enum
class cAnalysisResultsSetup(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{30C26337-CB36-432A-B7AA-B5AC0719A349}')
    _idlflags_ = ['dual', 'oleautomation']
class cBASConcBox2Result(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{0B565284-810E-40CF-9797-6A75AFF7E271}')
    _idlflags_ = ['dual', 'oleautomation']
class cBASPrecastCompResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{0EB604CE-75D7-4BD1-9B49-4F6DC2177AB9}')
    _idlflags_ = ['dual', 'oleautomation']
class cBASSteelICompResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{0A0490D3-EAF6-4E09-9A1D-1479AFC2CAD7}')
    _idlflags_ = ['dual', 'oleautomation']
class cBASSteelUCompResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{F44169D8-2C09-4203-81DA-C0CAF48293FA}')
    _idlflags_ = ['dual', 'oleautomation']
class cBASConcSlabResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{A11323A9-454B-4E37-A467-2749E7032367}')
    _idlflags_ = ['dual', 'oleautomation']
class cBASConcSolidResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{ADA8FF9A-83F9-4667-BE28-CE95297D70BE}')
    _idlflags_ = ['dual', 'oleautomation']
class cBASConcTBeamResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{0EA8D1A1-9431-465B-89BD-12D1F4D99846}')
    _idlflags_ = ['dual', 'oleautomation']
cAnalysisResults._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'AreaForceShell',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointElm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F11' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F22' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F12' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FMax' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FMin' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FAngle' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FVM' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M11' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M22' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M12' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MMax' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MMin' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MAngle' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V13' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V23' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VMax' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VAngle' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'AreaJointForceShell',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointElm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'AreaStressShell',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointElm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S11Top' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S22Top' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S12Top' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SMaxTop' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SMinTop' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SAngleTop' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SVMTop' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S11Bot' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S22Bot' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S12Bot' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SMaxBot' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SMinBot' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SAngleBot' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SVMBot' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S13Avg' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S23Avg' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SMaxAvg' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SAngleAvg' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'AreaStressShellLayered',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Layer' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'IntPtNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'IntPtLoc' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointElm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S11' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S22' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S12' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SMax' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SMin' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SAngle' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SVM' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S13Avg' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S23Avg' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SMaxAvg' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SAngleAvg' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'AssembledJointMass',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointElm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'BaseReact',
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ParamMy' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MZ' ),
              ( ['in', 'out'], POINTER(c_double), 'GX' ),
              ( ['in', 'out'], POINTER(c_double), 'GY' ),
              ( ['in', 'out'], POINTER(c_double), 'GZ' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'BaseReactWithCentroid',
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ParamMy' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MZ' ),
              ( ['in', 'out'], POINTER(c_double), 'GX' ),
              ( ['in', 'out'], POINTER(c_double), 'GY' ),
              ( ['in', 'out'], POINTER(c_double), 'GZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'XCentroidForFX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'YCentroidForFX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ZCentroidForFX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'XCentroidForFY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'YCentroidForFY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ZCentroidForFY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'XCentroidForFZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'YCentroidForFZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ZCentroidForFZ' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'BucklingFactor',
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Factor' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'FrameForce',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ObjSta' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ElmSta' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'P' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'FrameJointForce',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointElm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GeneralizedDispl',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GD' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'DType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'JointAcc',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'JointAccAbs',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'JointDispl',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'JointDisplAbs',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'JointReact',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'JointVel',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'JointVelAbs',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'LinkDeformation',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'LinkForce',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointElm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'P' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'LinkJointForce',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointElm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'ModalLoadParticipationRatios',
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ItemType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Item' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Stat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dyn' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(23)], HRESULT, 'ModalParticipatingMassRatios',
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Period' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'UX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'UY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'UZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SumUX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SumUY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SumUZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SumRX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SumRY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SumRZ' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(24)], HRESULT, 'ModalParticipationFactors',
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Period' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'UX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'UY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'UZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ModalMass' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ModalStiff' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(25)], HRESULT, 'ModalPeriod',
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Period' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Frequency' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CircFreq' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EigenValue' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(26)], HRESULT, 'ModeShape',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(27)], HRESULT, 'PanelZoneDeformation',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(28)], HRESULT, 'PanelZoneForce',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointElm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'P' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(29)], HRESULT, 'SectionCutAnalysis',
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SCut' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(30)], HRESULT, 'SectionCutDesign',
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SCut' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'P' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(31), 'propget'], HRESULT, 'Setup',
              ( ['out', 'retval'], POINTER(POINTER(cAnalysisResultsSetup)), 'pRetVal' )),
    COMMETHOD([dispid(52)], HRESULT, 'AreaStrainShell',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointElm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'e11top' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'e22top' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'g12top' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'emaxtop' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'emintop' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'eangletop' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'evmtop' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'e11bot' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'e22bot' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'g12bot' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'emaxbot' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'eminbot' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'eanglebot' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'evmbot' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'g13avg' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'g23avg' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'gmaxavg' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'gangleavg' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(53)], HRESULT, 'AreaStrainShellLayered',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Layer' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'IntPtNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'IntPtLoc' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointElm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'E11' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'E22' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'G12' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EMax' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EMin' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EAngle' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EVM' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'g13avg' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'g23avg' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'gmaxavg' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'gangleavg' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(32)], HRESULT, 'AreaJointForcePlane',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointElm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(33)], HRESULT, 'AreaStressPlane',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointElm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S11' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S22' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S33' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S12' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SMax' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SMin' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SAngle' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SVM' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(50)], HRESULT, 'AssembledJointMass_1',
              ( ['in'], BSTR, 'MassSourceName' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointElm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MassSource' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(41)], HRESULT, 'SolidJointForce',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointElm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(42)], HRESULT, 'SolidStress',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointElm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S11' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S22' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S33' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S12' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S13' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S23' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SMax' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SMid' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SMin' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SVM' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DirCosMax1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DirCosMax2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DirCosMax3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DirCosMid1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DirCosMid2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DirCosMid3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DirCosMin1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DirCosMin2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DirCosMin3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(43)], HRESULT, 'StepLabel',
              ( ['in'], BSTR, 'LoadCase' ),
              ( ['in'], c_double, 'StepNum' ),
              ( ['in', 'out'], POINTER(BSTR), 'Label' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(46)], HRESULT, 'JointRespSpec',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in'], BSTR, 'NamedSet' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CoordSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Dir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Damping' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SpecWidening' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AbscissaValue' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'OrdinateValue' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(54)], HRESULT, 'SolidStrain',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointElm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'E11' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'E22' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'E33' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'G12' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'G13' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'G23' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EMax' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EMid' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EMin' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EVM' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DirCosMax1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DirCosMax2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DirCosMax3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DirCosMid1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DirCosMid2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DirCosMid3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DirCosMin1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DirCosMin2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DirCosMin3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(34), 'propget'], HRESULT, 'BASConcBox2Result',
              ( ['out', 'retval'], POINTER(POINTER(cBASConcBox2Result)), 'pRetVal' )),
    COMMETHOD([dispid(35), 'propget'], HRESULT, 'BASPrecastCompResult',
              ( ['out', 'retval'], POINTER(POINTER(cBASPrecastCompResult)), 'pRetVal' )),
    COMMETHOD([dispid(36), 'propget'], HRESULT, 'BASSteelICompResult',
              ( ['out', 'retval'], POINTER(POINTER(cBASSteelICompResult)), 'pRetVal' )),
    COMMETHOD([dispid(37), 'propget'], HRESULT, 'BASSteelUCompResult',
              ( ['out', 'retval'], POINTER(POINTER(cBASSteelUCompResult)), 'pRetVal' )),
    COMMETHOD([dispid(38)], HRESULT, 'BridgeSuperCutForces',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], VARIANT_BOOL, 'ResultF1' ),
              ( ['in'], VARIANT_BOOL, 'ResultF2' ),
              ( ['in'], VARIANT_BOOL, 'ResultF3' ),
              ( ['in'], VARIANT_BOOL, 'ResultM1' ),
              ( ['in'], VARIANT_BOOL, 'ResultM2' ),
              ( ['in'], VARIANT_BOOL, 'ResultM3' ),
              ( ['in'], c_int, 'ResponseType' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(39)], HRESULT, 'BridgeSuperCutLongitStress',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'PointIndex' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Stress' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(40)], HRESULT, 'BridgeSuperCutPrincStressWeb',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'WebIndex' ),
              ( ['in'], c_int, 'PointIndex' ),
              ( ['in'], c_double, 'ShearFactor' ),
              ( ['in'], c_double, 'TorsionFactor' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SMax' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SMin' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SAngle' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'TypeCorresp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(49), 'propget'], HRESULT, 'BASConcSlabResult',
              ( ['out', 'retval'], POINTER(POINTER(cBASConcSlabResult)), 'pRetVal' )),
    COMMETHOD([dispid(51), 'propget'], HRESULT, 'BASConcSolidResult',
              ( ['out', 'retval'], POINTER(POINTER(cBASConcSolidResult)), 'pRetVal' )),
    COMMETHOD([dispid(55), 'propget'], HRESULT, 'BASConcTBeamResult',
              ( ['out', 'retval'], POINTER(POINTER(cBASConcTBeamResult)), 'pRetVal' )),
    COMMETHOD([dispid(44)], HRESULT, 'PierForce',
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StoryName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PierName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Location' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'P' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(45)], HRESULT, 'SpandrelForce',
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StoryName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SpandrelName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Location' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'P' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(47)], HRESULT, 'JointDrifts',
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Story' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Label' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DisplacementX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DisplacementY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DriftX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DriftY' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(48)], HRESULT, 'StoryDrifts',
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Story' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Direction' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Drift' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Label' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cAnalysisResults implementation
##class cAnalysisResults_Impl(object):
##    def AreaForceShell(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Obj, Elm, PointElm, LoadCase, StepType, StepNum, F11, F22, F12, FMax, FMin, FAngle, FVM, M11, M22, M12, MMax, MMin, MAngle, V13, V23, VMax, VAngle, pRetVal
##
##    def AreaJointForceShell(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Obj, Elm, PointElm, LoadCase, StepType, StepNum, F1, F2, F3, M1, M2, M3, pRetVal
##
##    def AreaStressShell(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Obj, Elm, PointElm, LoadCase, StepType, StepNum, S11Top, S22Top, S12Top, SMaxTop, SMinTop, SAngleTop, SVMTop, S11Bot, S22Bot, S12Bot, SMaxBot, SMinBot, SAngleBot, SVMBot, S13Avg, S23Avg, SMaxAvg, SAngleAvg, pRetVal
##
##    def AreaStressShellLayered(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Obj, Elm, Layer, IntPtNum, IntPtLoc, PointElm, LoadCase, StepType, StepNum, S11, S22, S12, SMax, SMin, SAngle, SVM, S13Avg, S23Avg, SMaxAvg, SAngleAvg, pRetVal
##
##    def AssembledJointMass(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, PointElm, U1, U2, U3, R1, R2, R3, pRetVal
##
##    def BaseReact(self):
##        '-no docstring-'
##        #return NumberResults, LoadCase, StepType, StepNum, FX, FY, FZ, MX, ParamMy, MZ, GX, GY, GZ, pRetVal
##
##    def BaseReactWithCentroid(self):
##        '-no docstring-'
##        #return NumberResults, LoadCase, StepType, StepNum, FX, FY, FZ, MX, ParamMy, MZ, GX, GY, GZ, XCentroidForFX, YCentroidForFX, ZCentroidForFX, XCentroidForFY, YCentroidForFY, ZCentroidForFY, XCentroidForFZ, YCentroidForFZ, ZCentroidForFZ, pRetVal
##
##    def BucklingFactor(self):
##        '-no docstring-'
##        #return NumberResults, LoadCase, StepType, StepNum, Factor, pRetVal
##
##    def FrameForce(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Obj, ObjSta, Elm, ElmSta, LoadCase, StepType, StepNum, P, V2, V3, T, M2, M3, pRetVal
##
##    def FrameJointForce(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Obj, Elm, PointElm, LoadCase, StepType, StepNum, F1, F2, F3, M1, M2, M3, pRetVal
##
##    def GeneralizedDispl(self, Name):
##        '-no docstring-'
##        #return NumberResults, GD, LoadCase, StepType, StepNum, DType, Value, pRetVal
##
##    def JointAcc(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Obj, Elm, LoadCase, StepType, StepNum, U1, U2, U3, R1, R2, R3, pRetVal
##
##    def JointAccAbs(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Obj, Elm, LoadCase, StepType, StepNum, U1, U2, U3, R1, R2, R3, pRetVal
##
##    def JointDispl(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Obj, Elm, LoadCase, StepType, StepNum, U1, U2, U3, R1, R2, R3, pRetVal
##
##    def JointDisplAbs(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Obj, Elm, LoadCase, StepType, StepNum, U1, U2, U3, R1, R2, R3, pRetVal
##
##    def JointReact(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Obj, Elm, LoadCase, StepType, StepNum, F1, F2, F3, M1, M2, M3, pRetVal
##
##    def JointVel(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Obj, Elm, LoadCase, StepType, StepNum, U1, U2, U3, R1, R2, R3, pRetVal
##
##    def JointVelAbs(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Obj, Elm, LoadCase, StepType, StepNum, U1, U2, U3, R1, R2, R3, pRetVal
##
##    def LinkDeformation(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Obj, Elm, LoadCase, StepType, StepNum, U1, U2, U3, R1, R2, R3, pRetVal
##
##    def LinkForce(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Obj, Elm, PointElm, LoadCase, StepType, StepNum, P, V2, V3, T, M2, M3, pRetVal
##
##    def LinkJointForce(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Obj, Elm, PointElm, LoadCase, StepType, StepNum, F1, F2, F3, M1, M2, M3, pRetVal
##
##    def ModalLoadParticipationRatios(self):
##        '-no docstring-'
##        #return NumberResults, LoadCase, ItemType, Item, Stat, Dyn, pRetVal
##
##    def ModalParticipatingMassRatios(self):
##        '-no docstring-'
##        #return NumberResults, LoadCase, StepType, StepNum, Period, UX, UY, UZ, SumUX, SumUY, SumUZ, RX, RY, RZ, SumRX, SumRY, SumRZ, pRetVal
##
##    def ModalParticipationFactors(self):
##        '-no docstring-'
##        #return NumberResults, LoadCase, StepType, StepNum, Period, UX, UY, UZ, RX, RY, RZ, ModalMass, ModalStiff, pRetVal
##
##    def ModalPeriod(self):
##        '-no docstring-'
##        #return NumberResults, LoadCase, StepType, StepNum, Period, Frequency, CircFreq, EigenValue, pRetVal
##
##    def ModeShape(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Obj, Elm, LoadCase, StepType, StepNum, U1, U2, U3, R1, R2, R3, pRetVal
##
##    def PanelZoneDeformation(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Elm, LoadCase, StepType, StepNum, U1, U2, U3, R1, R2, R3, pRetVal
##
##    def PanelZoneForce(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Elm, PointElm, LoadCase, StepType, StepNum, P, V2, V3, T, M2, M3, pRetVal
##
##    def SectionCutAnalysis(self):
##        '-no docstring-'
##        #return NumberResults, SCut, LoadCase, StepType, StepNum, F1, F2, F3, M1, M2, M3, pRetVal
##
##    def SectionCutDesign(self):
##        '-no docstring-'
##        #return NumberResults, SCut, LoadCase, StepType, StepNum, P, V2, V3, T, M2, M3, pRetVal
##
##    @property
##    def Setup(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def AreaStrainShell(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Obj, Elm, PointElm, LoadCase, StepType, StepNum, e11top, e22top, g12top, emaxtop, emintop, eangletop, evmtop, e11bot, e22bot, g12bot, emaxbot, eminbot, eanglebot, evmbot, g13avg, g23avg, gmaxavg, gangleavg, pRetVal
##
##    def AreaStrainShellLayered(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Obj, Elm, Layer, IntPtNum, IntPtLoc, PointElm, LoadCase, StepType, StepNum, E11, E22, G12, EMax, EMin, EAngle, EVM, g13avg, g23avg, gmaxavg, gangleavg, pRetVal
##
##    def AreaJointForcePlane(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Obj, Elm, PointElm, LoadCase, StepType, StepNum, F1, F2, F3, M1, M2, M3, pRetVal
##
##    def AreaStressPlane(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Obj, Elm, PointElm, LoadCase, StepType, StepNum, S11, S22, S33, S12, SMax, SMin, SAngle, SVM, pRetVal
##
##    def AssembledJointMass_1(self, MassSourceName, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, PointElm, MassSource, U1, U2, U3, R1, R2, R3, pRetVal
##
##    def SolidJointForce(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Obj, Elm, PointElm, LoadCase, StepType, StepNum, F1, F2, F3, M1, M2, M3, pRetVal
##
##    def SolidStress(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Obj, Elm, PointElm, LoadCase, StepType, StepNum, S11, S22, S33, S12, S13, S23, SMax, SMid, SMin, SVM, DirCosMax1, DirCosMax2, DirCosMax3, DirCosMid1, DirCosMid2, DirCosMid3, DirCosMin1, DirCosMin2, DirCosMin3, pRetVal
##
##    def StepLabel(self, LoadCase, StepNum):
##        '-no docstring-'
##        #return Label, pRetVal
##
##    def JointRespSpec(self, Name, ItemTypeElm, NamedSet):
##        '-no docstring-'
##        #return NumberResults, Obj, Elm, LoadCase, CoordSys, Dir, Damping, SpecWidening, AbscissaValue, OrdinateValue, pRetVal
##
##    def SolidStrain(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Obj, Elm, PointElm, LoadCase, StepType, StepNum, E11, E22, E33, G12, G13, G23, EMax, EMid, EMin, EVM, DirCosMax1, DirCosMax2, DirCosMax3, DirCosMid1, DirCosMid2, DirCosMid3, DirCosMin1, DirCosMin2, DirCosMin3, pRetVal
##
##    @property
##    def BASConcBox2Result(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def BASPrecastCompResult(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def BASSteelICompResult(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def BASSteelUCompResult(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def BridgeSuperCutForces(self, Name, CutIndex, ResultF1, ResultF2, ResultF3, ResultM1, ResultM2, ResultM3, ResponseType):
##        '-no docstring-'
##        #return NumberResults, LoadCase, StepType, StepNum, F1, F2, F3, M1, M2, M3, pRetVal
##
##    def BridgeSuperCutLongitStress(self, Name, CutIndex, PointIndex):
##        '-no docstring-'
##        #return NumberResults, LoadCase, StepType, StepNum, Stress, pRetVal
##
##    def BridgeSuperCutPrincStressWeb(self, Name, CutIndex, WebIndex, PointIndex, ShearFactor, TorsionFactor):
##        '-no docstring-'
##        #return NumberResults, LoadCase, StepType, StepNum, SMax, SMin, SAngle, TypeCorresp, pRetVal
##
##    @property
##    def BASConcSlabResult(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def BASConcSolidResult(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def BASConcTBeamResult(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def PierForce(self):
##        '-no docstring-'
##        #return NumberResults, StoryName, PierName, LoadCase, Location, P, V2, V3, T, M2, M3, pRetVal
##
##    def SpandrelForce(self):
##        '-no docstring-'
##        #return NumberResults, StoryName, SpandrelName, LoadCase, Location, P, V2, V3, T, M2, M3, pRetVal
##
##    def JointDrifts(self):
##        '-no docstring-'
##        #return NumberResults, Story, Label, Name, LoadCase, StepType, StepNum, DisplacementX, DisplacementY, DriftX, DriftY, pRetVal
##
##    def StoryDrifts(self):
##        '-no docstring-'
##        #return NumberResults, Story, LoadCase, StepType, StepNum, Direction, Drift, Label, X, Y, Z, pRetVal
##

class cBASConcSolid(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{FE7219E2-3FC3-4854-8106-ABF0300AECC8}')
    _idlflags_ = ['dual', 'oleautomation']
cBASConcSolid._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'CountSuperCutStressPointGirder',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in', 'out'], POINTER(c_int), 'CountPoint' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetSuperCutGirderNames',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'sname' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetSuperCutGirderRebarLong',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'Mat' ),
              ( ['in', 'out'], POINTER(c_int), 'RebarCount' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RebarX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RebarY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'DType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'RebarSize' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberBars' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetSuperCutGirderRebarTransv',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_double, 'DistBefore' ),
              ( ['in'], c_double, 'DistAfter' ),
              ( ['in', 'out'], POINTER(BSTR), 'Mat' ),
              ( ['in', 'out'], POINTER(c_double), 'RebarTransV' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetSuperCutGirderTendonNames',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_int, 'TendonIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'BridgeTendon' ),
              ( ['in', 'out'], POINTER(BSTR), 'TendonObj' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetSuperCutGirderTendonValues',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_int, 'TendonIndex' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetSuperCutGirderValues',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetSuperCutSectionValues',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetSuperCutStressPointGirder',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_int, 'PointIndex' ),
              ( ['in', 'out'], POINTER(c_double), 'X' ),
              ( ['in', 'out'], POINTER(c_double), 'Y' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_int), 'Location' ),
              ( ['in', 'out'], POINTER(BSTR), 'Note' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetSuperCutWebCoordsAtY',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_double, 'Y' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberWebs' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'WebIsCut' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WebLeft' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WebRight' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetSuperCutGirderRebarTransvSpac',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_int, 'DirectionFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'RebarSpacing' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetSuperCutGirderRebarLong_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'Mat' ),
              ( ['in', 'out'], POINTER(c_int), 'RebarCount' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RebarX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RebarY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'DType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'RebarSize' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AreaFactor' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBASConcSolid implementation
##class cBASConcSolid_Impl(object):
##    def CountSuperCutStressPointGirder(self, Name, CutIndex, GirderIndex):
##        '-no docstring-'
##        #return CountPoint, pRetVal
##
##    def GetSuperCutGirderNames(self, Name, CutIndex, GirderIndex, Item):
##        '-no docstring-'
##        #return sname, pRetVal
##
##    def GetSuperCutGirderRebarLong(self, Name, CutIndex, GirderIndex):
##        '-no docstring-'
##        #return Mat, RebarCount, RebarX, RebarY, DType, RebarSize, NumberBars, pRetVal
##
##    def GetSuperCutGirderRebarTransv(self, Name, CutIndex, GirderIndex, DistBefore, DistAfter):
##        '-no docstring-'
##        #return Mat, RebarTransV, pRetVal
##
##    def GetSuperCutGirderTendonNames(self, Name, CutIndex, GirderIndex, TendonIndex):
##        '-no docstring-'
##        #return BridgeTendon, TendonObj, pRetVal
##
##    def GetSuperCutGirderTendonValues(self, Name, CutIndex, GirderIndex, TendonIndex, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetSuperCutGirderValues(self, Name, CutIndex, GirderIndex, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetSuperCutSectionValues(self, Name, CutIndex, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetSuperCutStressPointGirder(self, Name, CutIndex, GirderIndex, PointIndex):
##        '-no docstring-'
##        #return X, Y, MatProp, Location, Note, pRetVal
##
##    def GetSuperCutWebCoordsAtY(self, Name, CutIndex, Y):
##        '-no docstring-'
##        #return NumberWebs, WebIsCut, WebLeft, WebRight, pRetVal
##
##    def GetSuperCutGirderRebarTransvSpac(self, Name, CutIndex, GirderIndex, DirectionFlag):
##        '-no docstring-'
##        #return RebarSpacing, pRetVal
##
##    def GetSuperCutGirderRebarLong_1(self, Name, CutIndex, GirderIndex):
##        '-no docstring-'
##        #return Mat, RebarCount, RebarX, RebarY, DType, RebarSize, NumberBars, AreaFactor, pRetVal
##

cBDRS_AA_L_07_SICompStr._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_SICompStr implementation
##class cBDRS_AA_L_07_SICompStr_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##


# values for enumeration 'eBridgeObjectFoundationPart'
eBridgeObjectFoundationPart_Footing = 1
eBridgeObjectFoundationPart_PileCap = 2
eBridgeObjectFoundationPart_Pile = 3
eBridgeObjectFoundationPart_FoundationSpring = 4
eBridgeObjectFoundationPart = c_int # enum
cBDRS_AA_L_07_SUCompStrRt._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_SUCompStrRt implementation
##class cBDRS_AA_L_07_SUCompStrRt_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cDesignForces(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{2F3E09BF-8A2C-474B-88D3-E1335703EEA7}')
    _idlflags_ = ['dual', 'oleautomation']
cDesignForces._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'BeamDesignForces',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ComboName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Station' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'P' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'BraceDesignForces',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ComboName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Station' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'P' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'ColumnDesignForces',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ComboName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Station' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'P' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'PierDesignForces',
              ( ['in'], BSTR, 'InputPierLabel' ),
              ( ['in'], BSTR, 'InputStoryName' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Story' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PierLabel' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ComboName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Location' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'P' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'SpandrelDesignForces',
              ( ['in'], BSTR, 'InputSpandrelLabel' ),
              ( ['in'], BSTR, 'InputStoryName' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Story' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SpandrelLabel' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ComboName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Location' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'P' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDesignForces implementation
##class cDesignForces_Impl(object):
##    def BeamDesignForces(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberResults, FrameName, ComboName, Station, P, V2, V3, T, M2, M3, pRetVal
##
##    def BraceDesignForces(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberResults, FrameName, ComboName, Station, P, V2, V3, T, M2, M3, pRetVal
##
##    def ColumnDesignForces(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberResults, FrameName, ComboName, Station, P, V2, V3, T, M2, M3, pRetVal
##
##    def PierDesignForces(self, InputPierLabel, InputStoryName):
##        '-no docstring-'
##        #return NumberResults, Story, PierLabel, ComboName, Location, P, V2, V3, T, M2, M3, pRetVal
##
##    def SpandrelDesignForces(self, InputSpandrelLabel, InputStoryName):
##        '-no docstring-'
##        #return NumberResults, Story, SpandrelLabel, ComboName, Location, P, V2, V3, T, M2, M3, pRetVal
##

cBDRS_AA_L_07_CBoxTendon._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_CBoxTendon implementation
##class cBDRS_AA_L_07_CBoxTendon_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_AA_L_07_CBoxMinBarRt._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_CBoxMinBarRt implementation
##class cBDRS_AA_L_07_CBoxMinBarRt_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cDCoSingapore_CP_65_99(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{FBE7F25D-340A-4F52-8015-A70F7340B2F8}')
    _idlflags_ = ['dual', 'oleautomation']
cDCoSingapore_CP_65_99._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDCoSingapore_CP_65_99 implementation
##class cDCoSingapore_CP_65_99_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cDCoKCI_1999(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{32A0B76B-A786-45E7-9F1C-89875735AC92}')
    _idlflags_ = ['dual', 'oleautomation']
cDCoKCI_1999._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDCoKCI_1999 implementation
##class cDCoKCI_1999_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBD_AASHTO_STD_2002(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{70190437-2421-4412-8DDA-497BC3D6C2DD}')
    _idlflags_ = ['dual', 'oleautomation']
cBD_AASHTO_STD_2002._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBD_AASHTO_STD_2002 implementation
##class cBD_AASHTO_STD_2002_Impl(object):
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cLineElm(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{D7BF5FCF-25ED-4588-BAEA-4514759C134C}')
    _idlflags_ = ['dual', 'oleautomation']
cLineElm._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetEndLengthOffset',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Length1' ),
              ( ['in', 'out'], POINTER(c_double), 'Length2' ),
              ( ['in', 'out'], POINTER(c_double), 'RZ' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetInsertionPoint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset2' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetLoadDistributed',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LineName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Dir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RD1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RD2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Val1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Val2' ),
              ( ['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetLoadPoint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LineName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Dir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RelDist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Val' ),
              ( ['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetLoadTemperature',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LineName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Val' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName' ),
              ( ['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetLocalAxes',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Ang' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetMaterialOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetModifiers',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetObj',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'Obj' ),
              ( ['in', 'out'], POINTER(c_int), 'ObjType' ),
              ( ['in', 'out'], POINTER(c_double), 'RDI' ),
              ( ['in', 'out'], POINTER(c_double), 'RDJ' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetPoints',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'Point1' ),
              ( ['in', 'out'], POINTER(BSTR), 'Point2' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'GetProperty',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['in', 'out'], POINTER(c_int), 'ObjType' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Var' ),
              ( ['in', 'out'], POINTER(c_double), 'SVarRelStartLoc' ),
              ( ['in', 'out'], POINTER(c_double), 'SVarTotalLength' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'GetReleases',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'II' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'JJ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartValue' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndValue' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'GetTCLimits',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'LimitCompressionExists' ),
              ( ['in', 'out'], POINTER(c_double), 'LimitCompression' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'LimitTensionExists' ),
              ( ['in', 'out'], POINTER(c_double), 'LimitTension' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'GetTransformationMatrix',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'GetLoadDeformation',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LineName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF4' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF5' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF6' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3' ),
              ( ['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'GetLoadGravity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LineName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z' ),
              ( ['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'GetLoadStrain',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LineName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Val' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName' ),
              ( ['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'GetLoadTargetForce',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LineName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF4' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF5' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF6' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'P' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T4' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T5' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T6' ),
              ( ['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'GetMatTemp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Temp' ),
              ( ['in', 'out'], POINTER(BSTR), 'PatternName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'GetPDeltaForce',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberForces' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PDeltaForce' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Dir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cLineElm implementation
##class cLineElm_Impl(object):
##    def Count(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetEndLengthOffset(self, Name):
##        '-no docstring-'
##        #return Length1, Length2, RZ, pRetVal
##
##    def GetInsertionPoint(self, Name):
##        '-no docstring-'
##        #return Offset1, Offset2, pRetVal
##
##    def GetLoadDistributed(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberItems, LineName, LoadPat, MyType, CSys, Dir, RD1, RD2, Dist1, Dist2, Val1, Val2, pRetVal
##
##    def GetLoadPoint(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberItems, LineName, LoadPat, MyType, CSys, Dir, RelDist, Dist, Val, pRetVal
##
##    def GetLoadTemperature(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberItems, LineName, LoadPat, MyType, Val, PatternName, pRetVal
##
##    def GetLocalAxes(self, Name):
##        '-no docstring-'
##        #return Ang, pRetVal
##
##    def GetMaterialOverwrite(self, Name):
##        '-no docstring-'
##        #return PropName, pRetVal
##
##    def GetModifiers(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetObj(self, Name):
##        '-no docstring-'
##        #return Obj, ObjType, RDI, RDJ, pRetVal
##
##    def GetPoints(self, Name):
##        '-no docstring-'
##        #return Point1, Point2, pRetVal
##
##    def GetProperty(self, Name):
##        '-no docstring-'
##        #return PropName, ObjType, Var, SVarRelStartLoc, SVarTotalLength, pRetVal
##
##    def GetReleases(self, Name):
##        '-no docstring-'
##        #return II, JJ, StartValue, EndValue, pRetVal
##
##    def GetTCLimits(self, Name):
##        '-no docstring-'
##        #return LimitCompressionExists, LimitCompression, LimitTensionExists, LimitTension, pRetVal
##
##    def GetTransformationMatrix(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetLoadDeformation(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberItems, LineName, LoadPat, DOF1, DOF2, DOF3, DOF4, DOF5, DOF6, U1, U2, U3, R1, R2, R3, pRetVal
##
##    def GetLoadGravity(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberItems, LineName, LoadPat, CSys, X, Y, Z, pRetVal
##
##    def GetLoadStrain(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberItems, LineName, LoadPat, DOF, Val, PatternName, pRetVal
##
##    def GetLoadTargetForce(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberItems, LineName, LoadPat, DOF1, DOF2, DOF3, DOF4, DOF5, DOF6, P, V2, V3, T, M2, M3, T1, T2, T3, T4, T5, T6, pRetVal
##
##    def GetMatTemp(self, Name):
##        '-no docstring-'
##        #return Temp, PatternName, pRetVal
##
##    def GetPDeltaForce(self, Name):
##        '-no docstring-'
##        #return NumberForces, PDeltaForce, Dir, CSys, pRetVal
##

cBDRS_AA_L_07_PCCShearRt._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], BSTR, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_PCCShearRt implementation
##class cBDRS_AA_L_07_PCCShearRt_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetCapacityParamString(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCapacityParamString(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBD_AASHTO_LRFD_2007(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{C41CCACF-3CB3-41BC-9157-DD0A1F788F32}')
    _idlflags_ = ['dual', 'oleautomation']
cBD_AASHTO_LRFD_2007._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBD_AASHTO_LRFD_2007 implementation
##class cBD_AASHTO_LRFD_2007_Impl(object):
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_AA_L_07_SICompStrRt._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_SICompStrRt implementation
##class cBDRS_AA_L_07_SICompStrRt_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cDStChinese_2002(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{EDAC6785-E0BF-45EE-B7C7-D8734C65D629}')
    _idlflags_ = ['dual', 'oleautomation']
cDStChinese_2002._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDStChinese_2002 implementation
##class cDStChinese_2002_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##


# values for enumeration 'eAreaDesignOrientation'
eAreaDesignOrientation_Wall = 1
eAreaDesignOrientation_Floor = 2
eAreaDesignOrientation_Ramp_DO_NOT_USE = 3
eAreaDesignOrientation_Null = 4
eAreaDesignOrientation_Other = 5
eAreaDesignOrientation = c_int # enum
class cBD_RussianSNiP(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{9EB60DEE-BD50-462D-854C-7FC247911218}')
    _idlflags_ = ['dual', 'oleautomation']
cBD_RussianSNiP._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBD_RussianSNiP implementation
##class cBD_RussianSNiP_Impl(object):
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##


# values for enumeration 'eMatType'
eMatType_Steel = 1
eMatType_Concrete = 2
eMatType_NoDesign = 3
eMatType_Aluminum = 4
eMatType_ColdFormed = 5
eMatType_Rebar = 6
eMatType_Tendon = 7
eMatType_Masonry = 8
eMatType = c_int # enum
cBDRS_AA_L_07_SUCompServRt._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_SUCompServRt implementation
##class cBDRS_AA_L_07_SUCompServRt_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBD_BS5400(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{2F011EF8-AEA1-4D06-B553-046B9FC23811}')
    _idlflags_ = ['dual', 'oleautomation']
cBD_BS5400._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBD_BS5400 implementation
##class cBD_BS5400_Impl(object):
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_AA_L_07_CBoxPrin._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_CBoxPrin implementation
##class cBDRS_AA_L_07_CBoxPrin_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cDStAISC360_10(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{0866475B-478B-47D7-A36B-F1B9A58CF934}')
    _idlflags_ = ['dual', 'oleautomation']
cDStAISC360_10._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDStAISC360_10 implementation
##class cDStAISC360_10_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_AA_L_07_CTBeamStress._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_CTBeamStress implementation
##class cBDRS_AA_L_07_CTBeamStress_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cPropMaterialTD(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{927E829B-0609-43E7-A0F0-FE49BF25F5CC}')
    _idlflags_ = ['dual', 'oleautomation']
cPropMaterialTD._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetConcreteCEBFIP90',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ConsiderConcreteAge' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ConsiderConcreteCreep' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ConsiderConcreteShrinkage' ),
              ( ['in', 'out'], POINTER(c_double), 'CEBFIPsCoefficient' ),
              ( ['in', 'out'], POINTER(c_double), 'RelativeHumidity' ),
              ( ['in', 'out'], POINTER(c_double), 'NotionalSize' ),
              ( ['in', 'out'], POINTER(c_double), 'ShrinkageCoefficient' ),
              ( ['in', 'out'], POINTER(c_double), 'ShrinkageStartAge' ),
              ( ['in', 'out'], POINTER(c_int), 'UseSeries' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberSeriesTerms' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetTendonCEBFIP90',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ConsiderSteelRelaxation' ),
              ( ['in', 'out'], POINTER(c_int), 'CEBFIPClass' ),
              ( ['in', 'out'], POINTER(c_int), 'UseSeries' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberSeriesTerms' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetConcreteCEBFIP90',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'ConsiderConcreteAge' ),
              ( ['in'], VARIANT_BOOL, 'ConsiderConcreteCreep' ),
              ( ['in'], VARIANT_BOOL, 'ConsiderConcreteShrinkage' ),
              ( ['in'], c_double, 'CEBFIPsCoefficient' ),
              ( ['in'], c_double, 'RelativeHumidity' ),
              ( ['in'], c_double, 'NotionalSize' ),
              ( ['in'], c_double, 'ShrinkageCoefficient' ),
              ( ['in'], c_double, 'ShrinkageStartAge' ),
              ( ['in'], c_int, 'UseSeries' ),
              ( ['in'], c_int, 'NumberSeriesTerms' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetTendonCEBFIP90',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'ConsiderSteelRelaxation' ),
              ( ['in'], c_int, 'CEBFIPClass' ),
              ( ['in'], c_int, 'UseSeries' ),
              ( ['in'], c_int, 'NumberSeriesTerms' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetConcreteScaleFactors',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'ScaleFactorAge' ),
              ( ['in', 'out'], POINTER(c_double), 'ScaleFactorCreep' ),
              ( ['in', 'out'], POINTER(c_double), 'ScaleFactorShrinkage' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'SetConcreteScaleFactors',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'ScaleFactorAge' ),
              ( ['in'], c_double, 'ScaleFactorCreep' ),
              ( ['in'], c_double, 'ScaleFactorShrinkage' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetTendonScaleFactors',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'ScaleFactorRelaxation' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'SetTendonScaleFactors',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'ScaleFactorRelaxation' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cPropMaterialTD implementation
##class cPropMaterialTD_Impl(object):
##    def GetConcreteCEBFIP90(self, Name, Temp):
##        '-no docstring-'
##        #return ConsiderConcreteAge, ConsiderConcreteCreep, ConsiderConcreteShrinkage, CEBFIPsCoefficient, RelativeHumidity, NotionalSize, ShrinkageCoefficient, ShrinkageStartAge, UseSeries, NumberSeriesTerms, pRetVal
##
##    def GetTendonCEBFIP90(self, Name, Temp):
##        '-no docstring-'
##        #return ConsiderSteelRelaxation, CEBFIPClass, UseSeries, NumberSeriesTerms, pRetVal
##
##    def SetConcreteCEBFIP90(self, Name, ConsiderConcreteAge, ConsiderConcreteCreep, ConsiderConcreteShrinkage, CEBFIPsCoefficient, RelativeHumidity, NotionalSize, ShrinkageCoefficient, ShrinkageStartAge, UseSeries, NumberSeriesTerms, Temp):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetTendonCEBFIP90(self, Name, ConsiderSteelRelaxation, CEBFIPClass, UseSeries, NumberSeriesTerms, Temp):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetConcreteScaleFactors(self, Name, Temp):
##        '-no docstring-'
##        #return ScaleFactorAge, ScaleFactorCreep, ScaleFactorShrinkage, pRetVal
##
##    def SetConcreteScaleFactors(self, Name, ScaleFactorAge, ScaleFactorCreep, ScaleFactorShrinkage, Temp):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetTendonScaleFactors(self, Name, Temp):
##        '-no docstring-'
##        #return ScaleFactorRelaxation, pRetVal
##
##    def SetTendonScaleFactors(self, Name, ScaleFactorRelaxation, Temp):
##        '-no docstring-'
##        #return pRetVal
##

class cBDRS_EUROCODE_SICmpCnstr(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{7D1BAF8D-0940-4823-B9B5-2E028B46075E}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_EUROCODE_SICmpCnstr._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_EUROCODE_SICmpCnstr implementation
##class cBDRS_EUROCODE_SICmpCnstr_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBD_CAN_CSA_S6_06(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{E09C13F8-113D-445C-B09D-56402F39EE79}')
    _idlflags_ = ['dual', 'oleautomation']
cBD_CAN_CSA_S6_06._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBD_CAN_CSA_S6_06 implementation
##class cBD_CAN_CSA_S6_06_Impl(object):
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cExternalAnalysisResults(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{3E78C79D-ED83-4893-B630-1E4F67CD1E59}')
    _idlflags_ = ['dual', 'oleautomation']
cExternalAnalysisResults._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'DeleteAllFrameForces',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'DeleteFrameForces',
              ( ['in', 'out'], POINTER(BSTR), 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetFrameForce',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadCase' ),
              ( ['in'], c_int, 'StepNum' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberStations' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'P' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetFrameStations',
              ( ['in', 'out'], POINTER(BSTR), 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberStations' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ObjSta' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'PresetFrameCases',
              ( ['in', 'out'], POINTER(BSTR), 'Name' ),
              ( ['in'], c_int, 'Count' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'SetFrameForce',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadCase' ),
              ( ['in'], c_int, 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'P' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'SetFrameStations',
              ( ['in', 'out'], POINTER(BSTR), 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ObjSta' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'SetFrameForceMultiple',
              ( ['in'], c_int, 'NumberFrameNames' ),
              ( ['in'], _midlSAFEARRAY(BSTR), 'FrameName' ),
              ( ['in'], c_int, 'NumberLoadCases' ),
              ( ['in'], _midlSAFEARRAY(BSTR), 'LoadCase' ),
              ( ['in'], _midlSAFEARRAY(c_int), 'FirstStep' ),
              ( ['in'], _midlSAFEARRAY(c_int), 'LastStep' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'P' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cExternalAnalysisResults implementation
##class cExternalAnalysisResults_Impl(object):
##    def DeleteAllFrameForces(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteFrameForces(self):
##        '-no docstring-'
##        #return Name, pRetVal
##
##    def GetFrameForce(self, Name, LoadCase, StepNum):
##        '-no docstring-'
##        #return NumberStations, P, V2, V3, T, M2, M3, pRetVal
##
##    def GetFrameStations(self):
##        '-no docstring-'
##        #return Name, NumberStations, ObjSta, pRetVal
##
##    def PresetFrameCases(self, Count):
##        '-no docstring-'
##        #return Name, LoadCase, pRetVal
##
##    def SetFrameForce(self, Name, LoadCase, StepNum):
##        '-no docstring-'
##        #return P, V2, V3, T, M2, M3, pRetVal
##
##    def SetFrameStations(self):
##        '-no docstring-'
##        #return Name, ObjSta, pRetVal
##
##    def SetFrameForceMultiple(self, NumberFrameNames, FrameName, NumberLoadCases, LoadCase, FirstStep, LastStep):
##        '-no docstring-'
##        #return P, V2, V3, T, M2, M3, pRetVal
##

class cDCoChinese_2002(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{6686AB3C-7AE0-4181-80CA-6EC8FC52FB18}')
    _idlflags_ = ['dual', 'oleautomation']
cDCoChinese_2002._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDCoChinese_2002 implementation
##class cDCoChinese_2002_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_AA_L_07_SINCompServRt._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_SINCompServRt implementation
##class cBDRS_AA_L_07_SINCompServRt_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBDRS_EUROCODE_SICmpCnstNS(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{FDC1C6EB-9AD6-493F-B07D-4E3B5D0AA227}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_EUROCODE_SICmpCnstNS._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetDemandParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], BSTR, 'DemandName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetDemandParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], BSTR, 'DemandName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_EUROCODE_SICmpCnstNS implementation
##class cBDRS_EUROCODE_SICmpCnstNS_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetDemandParam(self, RequestName, DemandName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDemandParam(self, RequestName, DemandName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cDesignShearWall(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{164BC83D-9849-498B-8DD8-C5EED377200A}')
    _idlflags_ = ['dual', 'oleautomation']
cDesignShearWall._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetPierSummaryResults',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Story' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PierLabel' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Station' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'DesignType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PierSecType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'EdgeBar' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'EndBar' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BarSpacing' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ReinfPercent' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CurrPercent' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DCRatio' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PierLeg' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LegX1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LegY1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LegX2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LegY2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EdgeLeft' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EdgeRight' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AsLeft' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AsRight' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ShearAv' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StressCompLeft' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StressCompRight' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StressLimitLeft' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StressLimitRight' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CDepthLeft' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CLimitLeft' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CDepthRight' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CLimitRight' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'InelasticRotDemand' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'InelasticRotCapacity' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'NormCompStress' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'NormCompStressLimit' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CDepth' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BZoneL' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BZoneR' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BZoneLength' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'WarnMsg' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ErrMsg' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetRebar',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaObjName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StoryName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PierLabel' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StationLocation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LegID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LeftX1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LeftY1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RightX2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RightY2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Length' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Thickness' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Fc' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'fys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Flexural' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ShearAndConfinement' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetSpandrelSummaryResults',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Story' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Spandrel' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Station' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TopRebar' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TopRebarRatio' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TopRebarCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MuTop' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BotRebar' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BotRebarRatio' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BotRebarCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MuBot' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AVert' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AHorz' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ShearCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Vu' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ADiag' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ShearDiagCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VuDiag' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'WarnMsg' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ErrMsg' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetRebarPrefsPier',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetRebarPrefsSpandrel',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDesignShearWall implementation
##class cDesignShearWall_Impl(object):
##    def GetPierSummaryResults(self):
##        '-no docstring-'
##        #return Story, PierLabel, Station, DesignType, PierSecType, EdgeBar, EndBar, BarSpacing, ReinfPercent, CurrPercent, DCRatio, PierLeg, LegX1, LegY1, LegX2, LegY2, EdgeLeft, EdgeRight, AsLeft, AsRight, ShearAv, StressCompLeft, StressCompRight, StressLimitLeft, StressLimitRight, CDepthLeft, CLimitLeft, CDepthRight, CLimitRight, InelasticRotDemand, InelasticRotCapacity, NormCompStress, NormCompStressLimit, CDepth, BZoneL, BZoneR, BZoneLength, WarnMsg, ErrMsg, pRetVal
##
##    def GetRebar(self):
##        '-no docstring-'
##        #return AreaObjName, StoryName, PierLabel, StationLocation, LegID, LeftX1, LeftY1, RightX2, RightY2, Length, Thickness, Fc, FY, fys, Flexural, ShearAndConfinement, pRetVal
##
##    def GetSpandrelSummaryResults(self):
##        '-no docstring-'
##        #return Story, Spandrel, Station, TopRebar, TopRebarRatio, TopRebarCombo, MuTop, BotRebar, BotRebarRatio, BotRebarCombo, MuBot, AVert, AHorz, ShearCombo, Vu, ADiag, ShearDiagCombo, VuDiag, WarnMsg, ErrMsg, pRetVal
##
##    def GetRebarPrefsPier(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetRebarPrefsSpandrel(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##

cBDRS_AA_L_07_CSlabServiceRt._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], BSTR, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_CSlabServiceRt implementation
##class cBDRS_AA_L_07_CSlabServiceRt_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetCapacityParamString(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCapacityParamString(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cDStNorsok_N0042013(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{2E3FFFF4-C13F-4CD4-8FE0-1644D2BEC802}')
    _idlflags_ = ['dual', 'oleautomation']
cDStNorsok_N0042013._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDStNorsok_N0042013 implementation
##class cDStNorsok_N0042013_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_AA_L_07_PCCompStress._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_PCCompStress implementation
##class cBDRS_AA_L_07_PCCompStress_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_AA_L_07_CBoxShear._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], BSTR, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_CBoxShear implementation
##class cBDRS_AA_L_07_CBoxShear_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetCapacityParamString(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCapacityParamString(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cDesignStrip._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetDesignStrip',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Point' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GlobalX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GlobalY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GlobalZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WBLeft' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WBRight' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WALeft' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WARight' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'AutoWiden' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetGUID',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetDesignStrip_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'DesignType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Point' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GlobalX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GlobalY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GlobalZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WBLeft' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WBRight' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WALeft' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WARight' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'AutoWiden' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'SetGUID',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDesignStrip implementation
##class cDesignStrip_Impl(object):
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetDesignStrip(self, Name):
##        '-no docstring-'
##        #return Point, GlobalX, GlobalY, GlobalZ, WBLeft, WBRight, WALeft, WARight, AutoWiden, pRetVal
##
##    def GetGUID(self, Name):
##        '-no docstring-'
##        #return GUID, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetDesignStrip_1(self, Name):
##        '-no docstring-'
##        #return DesignType, Point, GlobalX, GlobalY, GlobalZ, WBLeft, WBRight, WALeft, WARight, AutoWiden, pRetVal
##
##    def SetGUID(self, Name, GUID):
##        '-no docstring-'
##        #return pRetVal
##

class cBD_EUROCODE(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{30C8F24B-7AF9-408C-B72E-83B8FBEE64EF}')
    _idlflags_ = ['dual', 'oleautomation']
cBD_EUROCODE._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBD_EUROCODE implementation
##class cBD_EUROCODE_Impl(object):
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_AA_L_07_CTBeamShear._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], BSTR, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_CTBeamShear implementation
##class cBDRS_AA_L_07_CTBeamShear_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetCapacityParamString(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCapacityParamString(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cDConcSlabACI318_14._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'textValue' ),
              ( ['in', 'out'], POINTER(c_double), 'numericValue' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDConcSlabACI318_14 implementation
##class cDConcSlabACI318_14_Impl(object):
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return textValue, numericValue, pRetVal
##

class cPropRebar(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{936BC821-4013-41F7-9E56-CDEB8FBAFDBD}')
    _idlflags_ = ['dual', 'oleautomation']
cPropRebar._methods_ = [
    COMMETHOD([dispid(3)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(1)], HRESULT, 'GetRebarProps',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Area' ),
              ( ['in', 'out'], POINTER(c_double), 'Diameter' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetProp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Area' ),
              ( ['in', 'out'], POINTER(c_double), 'Diameter' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'SetProp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'Area' ),
              ( ['in'], c_double, 'Diameter' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetRebarPropsWithGUID',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Area' ),
              ( ['in', 'out'], POINTER(c_double), 'Diameter' ),
              ( ['in', 'out'], POINTER(BSTR), 'MyGUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetNameListWithData',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Areas' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Diameters' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyGUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cPropRebar implementation
##class cPropRebar_Impl(object):
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetRebarProps(self, Name):
##        '-no docstring-'
##        #return Area, Diameter, pRetVal
##
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetProp(self, Name):
##        '-no docstring-'
##        #return Area, Diameter, pRetVal
##
##    def SetProp(self, Name, Area, Diameter):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetRebarPropsWithGUID(self, Name):
##        '-no docstring-'
##        #return Area, Diameter, MyGUID, pRetVal
##
##    def GetNameListWithData(self):
##        '-no docstring-'
##        #return NumberNames, MyName, Areas, Diameters, MyGUID, pRetVal
##

class cBDRS_EUROCODE_CBox2Shr(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{9FF67672-6616-455E-9556-D80E2A001E7C}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_EUROCODE_CBox2Shr._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], BSTR, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_EUROCODE_CBox2Shr implementation
##class cBDRS_EUROCODE_CBox2Shr_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetCapacityParamString(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCapacityParamString(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBDRS_BS5400_SICompServ(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{4309EA62-595F-426B-84DD-739DE0748463}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_BS5400_SICompServ._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_BS5400_SICompServ implementation
##class cBDRS_BS5400_SICompServ_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cFunction(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{9ACFF135-398F-4231-8092-D5997DFEC417}')
    _idlflags_ = ['dual', 'oleautomation']
class cFunctionRS(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{C457E4BF-B77A-4F0D-838D-44352A3A4F13}')
    _idlflags_ = ['dual', 'oleautomation']
class cFunctionTH(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{CB61DEAE-ADB6-4D62-A990-61383848910A}')
    _idlflags_ = ['dual', 'oleautomation']
class cFunctionPSD(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{237FDEBB-D436-4F29-96D6-053E696D2E8C}')
    _idlflags_ = ['dual', 'oleautomation']
class cFunctionSS(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{5AB323B9-4C46-4480-89DF-692CE954079D}')
    _idlflags_ = ['dual', 'oleautomation']
cFunction._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'ConvertToUser',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'Count',
              ( ['in', 'optional'], c_int, 'FuncType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'FuncRS',
              ( ['out', 'retval'], POINTER(POINTER(cFunctionRS)), 'pRetVal' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'FuncTH',
              ( ['out', 'retval'], POINTER(POINTER(cFunctionTH)), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'optional'], c_int, 'FuncType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetTypeOAPI',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'FuncType' ),
              ( ['in', 'out'], POINTER(c_int), 'AddType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetValues',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MyTime' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10), 'propget'], HRESULT, 'FuncPSD',
              ( ['out', 'retval'], POINTER(POINTER(cFunctionPSD)), 'pRetVal' )),
    COMMETHOD([dispid(11), 'propget'], HRESULT, 'FuncSS',
              ( ['out', 'retval'], POINTER(POINTER(cFunctionSS)), 'pRetVal' )),
]
################################################################
## code template for cFunction implementation
##class cFunction_Impl(object):
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def ConvertToUser(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self, FuncType):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def FuncRS(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def FuncTH(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetNameList(self, FuncType):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetTypeOAPI(self, Name):
##        '-no docstring-'
##        #return FuncType, AddType, pRetVal
##
##    def GetValues(self, Name):
##        '-no docstring-'
##        #return NumberItems, MyTime, Value, pRetVal
##
##    @property
##    def FuncPSD(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def FuncSS(self):
##        '-no docstring-'
##        #return pRetVal
##

class cBDRS_RussianSNiP_CBoxFlexure(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{22F1417D-B693-44EE-96A3-DEA579857B39}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_RussianSNiP_CBoxFlexure._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_RussianSNiP_CBoxFlexure implementation
##class cBDRS_RussianSNiP_CBoxFlexure_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cDesignColdFormed(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{367F358F-AB9A-4282-8F76-3846BEE9C1CD}')
    _idlflags_ = ['dual', 'oleautomation']
class cDCdAISI_ASD96(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{542183A5-5979-4581-9366-68544A42502B}')
    _idlflags_ = ['dual', 'oleautomation']
class cDCdAISI_LRFD96(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{B1AC3331-7B15-4AF3-9EDA-A449C534D325}')
    _idlflags_ = ['dual', 'oleautomation']
class cDCdAISI_16(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{E2058FEA-9500-4962-AC22-F76DCF719BC9}')
    _idlflags_ = ['dual', 'oleautomation']
cDesignColdFormed._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'AISI_ASD96',
              ( ['out', 'retval'], POINTER(POINTER(cDCdAISI_ASD96)), 'pRetVal' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'AISI_LRFD96',
              ( ['out', 'retval'], POINTER(POINTER(cDCdAISI_LRFD96)), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'DeleteResults',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetCode',
              ( ['in', 'out'], POINTER(BSTR), 'CodeName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'GetComboAutoGenerate',
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'AutoGenerate' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetComboDeflection',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetComboStrength',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetDesignSection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetGroup',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'GetResultsAvailable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetSummaryResults',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ratio' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'RatioType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Location' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ComboName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ErrorSummary' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'WarningSummary' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'ResetOverwrites',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'SetAutoSelectNull',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'SetCode',
              ( ['in'], BSTR, 'CodeName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'SetComboAutoGenerate',
              ( ['in'], VARIANT_BOOL, 'AutoGenerate' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'SetComboDeflection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'Selected' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'SetComboStrength',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'Selected' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'SetDesignSection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'PropName' ),
              ( ['in'], VARIANT_BOOL, 'LastAnalysis' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'SetGroup',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'Selected' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'StartDesign',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'VerifyPassed',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(c_int), 'N1' ),
              ( ['in', 'out'], POINTER(c_int), 'N2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'VerifySections',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(23), 'propget'], HRESULT, 'AISI_16',
              ( ['out', 'retval'], POINTER(POINTER(cDCdAISI_16)), 'pRetVal' )),
]
################################################################
## code template for cDesignColdFormed implementation
##class cDesignColdFormed_Impl(object):
##    @property
##    def AISI_ASD96(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def AISI_LRFD96(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteResults(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetCode(self):
##        '-no docstring-'
##        #return CodeName, pRetVal
##
##    def GetComboAutoGenerate(self):
##        '-no docstring-'
##        #return AutoGenerate, pRetVal
##
##    def GetComboDeflection(self):
##        '-no docstring-'
##        #return NumberItems, MyName, pRetVal
##
##    def GetComboStrength(self):
##        '-no docstring-'
##        #return NumberItems, MyName, pRetVal
##
##    def GetDesignSection(self, Name):
##        '-no docstring-'
##        #return PropName, pRetVal
##
##    def GetGroup(self):
##        '-no docstring-'
##        #return NumberItems, MyName, pRetVal
##
##    def GetResultsAvailable(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetSummaryResults(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, FrameName, Ratio, RatioType, Location, ComboName, ErrorSummary, WarningSummary, pRetVal
##
##    def ResetOverwrites(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetAutoSelectNull(self, Name, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCode(self, CodeName):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetComboAutoGenerate(self, AutoGenerate):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetComboDeflection(self, Name, Selected):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetComboStrength(self, Name, Selected):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDesignSection(self, Name, PropName, LastAnalysis, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetGroup(self, Name, Selected):
##        '-no docstring-'
##        #return pRetVal
##
##    def StartDesign(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def VerifyPassed(self):
##        '-no docstring-'
##        #return NumberItems, N1, N2, MyName, pRetVal
##
##    def VerifySections(self):
##        '-no docstring-'
##        #return NumberItems, MyName, pRetVal
##
##    @property
##    def AISI_16(self):
##        '-no docstring-'
##        #return pRetVal
##


# values for enumeration 'e2DFrameType'
e2DFrameType_PortalFrame = 0
e2DFrameType_ConcentricBraced = 1
e2DFrameType_EccentricBraced = 2
e2DFrameType = c_int # enum
class cBDRS_IRC2011_CBoxFlex(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{566DC7FB-CF80-4D79-86C5-82629024B180}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_IRC2011_CBoxFlex._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_IRC2011_CBoxFlex implementation
##class cBDRS_IRC2011_CBoxFlex_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_AA_L_07_CBox2Stress._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_CBox2Stress implementation
##class cBDRS_AA_L_07_CBox2Stress_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBDRS_EUROCODE_ConTBeamShr(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{BAF93827-A169-4197-BFF0-108DB104F06F}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_EUROCODE_ConTBeamShr._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], BSTR, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_EUROCODE_ConTBeamShr implementation
##class cBDRS_EUROCODE_ConTBeamShr_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetCapacityParamString(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCapacityParamString(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBDRS_IRC2011_CBox2Str(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{D769EC90-D7A3-4065-ACB9-05EDF9D31EAE}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_IRC2011_CBox2Str._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_IRC2011_CBox2Str implementation
##class cBDRS_IRC2011_CBox2Str_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBDRS_EUROCODE_ConcSlabShr(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{65CA4F8A-7399-44C1-B19B-F7C73755643A}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_EUROCODE_ConcSlabShr._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], BSTR, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_EUROCODE_ConcSlabShr implementation
##class cBDRS_EUROCODE_ConcSlabShr_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetCapacityParamString(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCapacityParamString(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##


# values for enumeration 'e3DFrameType'
e3DFrameType_OpenFrame = 0
e3DFrameType_PerimeterFrame = 1
e3DFrameType_BeamSlab = 2
e3DFrameType_FlatPlate = 3
e3DFrameType = c_int # enum
class cCoordSys(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{21F7136C-8A6D-4828-95E7-A76ED3D6BFCF}')
    _idlflags_ = ['dual', 'oleautomation']
cCoordSys._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetCoordSys',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'X' ),
              ( ['in', 'out'], POINTER(c_double), 'Y' ),
              ( ['in', 'out'], POINTER(c_double), 'Z' ),
              ( ['in', 'out'], POINTER(c_double), 'RZ' ),
              ( ['in', 'out'], POINTER(c_double), 'RY' ),
              ( ['in', 'out'], POINTER(c_double), 'RX' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetTransformationMatrix',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'SetCoordSys',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'X' ),
              ( ['in'], c_double, 'Y' ),
              ( ['in'], c_double, 'Z' ),
              ( ['in'], c_double, 'RZ' ),
              ( ['in'], c_double, 'RY' ),
              ( ['in'], c_double, 'RX' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetCoordSys_2',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'X' ),
              ( ['in', 'out'], POINTER(c_double), 'Y' ),
              ( ['in', 'out'], POINTER(c_double), 'Z' ),
              ( ['in', 'out'], POINTER(c_double), 'RZ' ),
              ( ['in', 'out'], POINTER(c_double), 'RY' ),
              ( ['in', 'out'], POINTER(c_double), 'RX' ),
              ( ['in', 'out'], POINTER(c_int), 'NumXLines' ),
              ( ['in', 'out'], POINTER(c_int), 'NumYLines' ),
              ( ['in', 'out'], POINTER(c_int), 'NumZLines' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GridLineIDX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GridLineIDY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GridLineIDZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CoordinateX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CoordinateY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CoordinateZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LineTypeX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LineTypeY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LineTypeZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'VisibleX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'VisibleY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'VisibleZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BubbleLocX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BubbleLocY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BubbleLocZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ColorX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ColorY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ColorZ' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetCoordSysCylindrical',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'X' ),
              ( ['in', 'out'], POINTER(c_double), 'Y' ),
              ( ['in', 'out'], POINTER(c_double), 'Z' ),
              ( ['in', 'out'], POINTER(c_double), 'RZ' ),
              ( ['in', 'out'], POINTER(c_double), 'RY' ),
              ( ['in', 'out'], POINTER(c_double), 'RX' ),
              ( ['in', 'out'], POINTER(c_int), 'NumRLines' ),
              ( ['in', 'out'], POINTER(c_int), 'NumTLines' ),
              ( ['in', 'out'], POINTER(c_int), 'NumZLines' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GridLineIDR' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GridLineIDT' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GridLineIDZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CoordinateR' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CoordinateT' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CoordinateZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LineTypeR' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LineTypeT' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LineTypeZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'VisibleR' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'VisibleT' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'VisibleZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BubbleLocR' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BubbleLocT' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BubbleLocZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ColorR' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ColorT' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ColorZ' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetCoordSysType',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'GridSysType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cCoordSys implementation
##class cCoordSys_Impl(object):
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetCoordSys(self, Name):
##        '-no docstring-'
##        #return X, Y, Z, RZ, RY, RX, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetTransformationMatrix(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCoordSys(self, Name, X, Y, Z, RZ, RY, RX):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetCoordSys_2(self, Name):
##        '-no docstring-'
##        #return X, Y, Z, RZ, RY, RX, NumXLines, NumYLines, NumZLines, GridLineIDX, GridLineIDY, GridLineIDZ, CoordinateX, CoordinateY, CoordinateZ, LineTypeX, LineTypeY, LineTypeZ, VisibleX, VisibleY, VisibleZ, BubbleLocX, BubbleLocY, BubbleLocZ, ColorX, ColorY, ColorZ, pRetVal
##
##    def GetCoordSysCylindrical(self, Name):
##        '-no docstring-'
##        #return X, Y, Z, RZ, RY, RX, NumRLines, NumTLines, NumZLines, GridLineIDR, GridLineIDT, GridLineIDZ, CoordinateR, CoordinateT, CoordinateZ, LineTypeR, LineTypeT, LineTypeZ, VisibleR, VisibleT, VisibleZ, BubbleLocR, BubbleLocT, BubbleLocZ, ColorR, ColorT, ColorZ, pRetVal
##
##    def GetCoordSysType(self, Name):
##        '-no docstring-'
##        #return GridSysType, pRetVal
##

class cDStEurocode_3_2005(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{D102DE85-178E-4F72-A6F8-7B0CEADF969A}')
    _idlflags_ = ['dual', 'oleautomation']
cDStEurocode_3_2005._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDStEurocode_3_2005 implementation
##class cDStEurocode_3_2005_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBDRS_EUROCODE_CBox2Str(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{2781A5B4-4F40-4B6F-BE19-72A07CBE2AAA}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_EUROCODE_CBox2Str._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_EUROCODE_CBox2Str implementation
##class cBDRS_EUROCODE_CBox2Str_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBDRS_RussianSNiP_CBoxStress(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{F5BEA5DA-206E-40D6-8B40-6AA5988DF8F5}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_RussianSNiP_CBoxStress._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_RussianSNiP_CBoxStress implementation
##class cBDRS_RussianSNiP_CBoxStress_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cPropFrame(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{3DC450D1-17FF-45AC-8740-E67F66312E0D}')
    _idlflags_ = ['dual', 'oleautomation']
class cPropFrameSDShape(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{76DD17DD-C169-4C7D-9497-9773B286B4EB}')
    _idlflags_ = ['dual', 'oleautomation']
cPropFrame._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Count',
              ( ['in', 'optional'], eFramePropType, 'PropType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetAngle',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_double), 'T2' ),
              ( ['in', 'out'], POINTER(c_double), 'Tf' ),
              ( ['in', 'out'], POINTER(c_double), 'Tw' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetAutoSelectSteel',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SectName' ),
              ( ['in', 'out'], POINTER(BSTR), 'AutoStartSection' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetChannel',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_double), 'T2' ),
              ( ['in', 'out'], POINTER(c_double), 'Tf' ),
              ( ['in', 'out'], POINTER(c_double), 'Tw' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetCircle',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetCoverPlatedI',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'SectName' ),
              ( ['in', 'out'], POINTER(c_double), 'FyTopFlange' ),
              ( ['in', 'out'], POINTER(c_double), 'FyWeb' ),
              ( ['in', 'out'], POINTER(c_double), 'FyBotFlange' ),
              ( ['in', 'out'], POINTER(c_double), 'Tc' ),
              ( ['in', 'out'], POINTER(c_double), 'Bc' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatPropTop' ),
              ( ['in', 'out'], POINTER(c_double), 'Tcb' ),
              ( ['in', 'out'], POINTER(c_double), 'Bcb' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatPropBot' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetDblAngle',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_double), 'T2' ),
              ( ['in', 'out'], POINTER(c_double), 'Tf' ),
              ( ['in', 'out'], POINTER(c_double), 'Tw' ),
              ( ['in', 'out'], POINTER(c_double), 'Dis' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetDblChannel',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_double), 'T2' ),
              ( ['in', 'out'], POINTER(c_double), 'Tf' ),
              ( ['in', 'out'], POINTER(c_double), 'Tw' ),
              ( ['in', 'out'], POINTER(c_double), 'Dis' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetGeneral',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_double), 'T2' ),
              ( ['in', 'out'], POINTER(c_double), 'Area' ),
              ( ['in', 'out'], POINTER(c_double), 'As2' ),
              ( ['in', 'out'], POINTER(c_double), 'As3' ),
              ( ['in', 'out'], POINTER(c_double), 'Torsion' ),
              ( ['in', 'out'], POINTER(c_double), 'I22' ),
              ( ['in', 'out'], POINTER(c_double), 'I33' ),
              ( ['in', 'out'], POINTER(c_double), 'S22' ),
              ( ['in', 'out'], POINTER(c_double), 'S33' ),
              ( ['in', 'out'], POINTER(c_double), 'Z22' ),
              ( ['in', 'out'], POINTER(c_double), 'Z33' ),
              ( ['in', 'out'], POINTER(c_double), 'R22' ),
              ( ['in', 'out'], POINTER(c_double), 'R33' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetISection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_double), 'T2' ),
              ( ['in', 'out'], POINTER(c_double), 'Tf' ),
              ( ['in', 'out'], POINTER(c_double), 'Tw' ),
              ( ['in', 'out'], POINTER(c_double), 'T2b' ),
              ( ['in', 'out'], POINTER(c_double), 'Tfb' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'GetModifiers',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'GetNameInPropFile',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'NameInFile' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(eFramePropType), 'PropType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'optional'], eFramePropType, 'PropType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'GetNonPrismatic',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StartSec' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'EndSec' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MyLength' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'EI33' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'EI22' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'GetPipe',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_double), 'Tw' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'GetPropFileNameList',
              ( ['in'], BSTR, 'FileName' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(eFramePropType)), 'MyPropType' ),
              ( ['in', 'optional'], eFramePropType, 'PropType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'GetRebarBeam',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatPropLong' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatPropConfine' ),
              ( ['in', 'out'], POINTER(c_double), 'CoverTop' ),
              ( ['in', 'out'], POINTER(c_double), 'CoverBot' ),
              ( ['in', 'out'], POINTER(c_double), 'TopLeftArea' ),
              ( ['in', 'out'], POINTER(c_double), 'TopRightArea' ),
              ( ['in', 'out'], POINTER(c_double), 'BotLeftArea' ),
              ( ['in', 'out'], POINTER(c_double), 'BotRightArea' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'GetRebarColumn',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatPropLong' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatPropConfine' ),
              ( ['in', 'out'], POINTER(c_int), 'Pattern' ),
              ( ['in', 'out'], POINTER(c_int), 'ConfineType' ),
              ( ['in', 'out'], POINTER(c_double), 'Cover' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberCBars' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberR3Bars' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberR2Bars' ),
              ( ['in', 'out'], POINTER(BSTR), 'RebarSize' ),
              ( ['in', 'out'], POINTER(BSTR), 'TieSize' ),
              ( ['in', 'out'], POINTER(c_double), 'TieSpacingLongit' ),
              ( ['in', 'out'], POINTER(c_int), 'Number2DirTieBars' ),
              ( ['in', 'out'], POINTER(c_int), 'Number3DirTieBars' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ToBeDesigned' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'GetRectangle',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_double), 'T2' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(23)], HRESULT, 'GetSectProps',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Area' ),
              ( ['in', 'out'], POINTER(c_double), 'As2' ),
              ( ['in', 'out'], POINTER(c_double), 'As3' ),
              ( ['in', 'out'], POINTER(c_double), 'Torsion' ),
              ( ['in', 'out'], POINTER(c_double), 'I22' ),
              ( ['in', 'out'], POINTER(c_double), 'I33' ),
              ( ['in', 'out'], POINTER(c_double), 'S22' ),
              ( ['in', 'out'], POINTER(c_double), 'S33' ),
              ( ['in', 'out'], POINTER(c_double), 'Z22' ),
              ( ['in', 'out'], POINTER(c_double), 'Z33' ),
              ( ['in', 'out'], POINTER(c_double), 'R22' ),
              ( ['in', 'out'], POINTER(c_double), 'R33' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(24)], HRESULT, 'GetTee',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_double), 'T2' ),
              ( ['in', 'out'], POINTER(c_double), 'Tf' ),
              ( ['in', 'out'], POINTER(c_double), 'Tw' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(25)], HRESULT, 'GetTube',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_double), 'T2' ),
              ( ['in', 'out'], POINTER(c_double), 'Tf' ),
              ( ['in', 'out'], POINTER(c_double), 'Tw' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(26)], HRESULT, 'GetTypeOAPI',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(eFramePropType), 'PropType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(27)], HRESULT, 'GetTypeRebar',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'MyType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(28)], HRESULT, 'ImportProp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], BSTR, 'FileName' ),
              ( ['in'], BSTR, 'PropName' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(29), 'propget'], HRESULT, 'SDShape',
              ( ['out', 'retval'], POINTER(POINTER(cPropFrameSDShape)), 'pRetVal' )),
    COMMETHOD([dispid(30)], HRESULT, 'SetAngle',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'T3' ),
              ( ['in'], c_double, 'T2' ),
              ( ['in'], c_double, 'Tf' ),
              ( ['in'], c_double, 'Tw' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(31)], HRESULT, 'SetAutoSelectSteel',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SectName' ),
              ( ['in', 'optional'], BSTR, 'AutoStartSection', 'Median' ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(32)], HRESULT, 'SetChannel',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'T3' ),
              ( ['in'], c_double, 'T2' ),
              ( ['in'], c_double, 'Tf' ),
              ( ['in'], c_double, 'Tw' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(33)], HRESULT, 'SetCircle',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'T3' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(34)], HRESULT, 'SetCoverPlatedI',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'SectName' ),
              ( ['in'], c_double, 'FyTopFlange' ),
              ( ['in'], c_double, 'FyWeb' ),
              ( ['in'], c_double, 'FyBotFlange' ),
              ( ['in'], c_double, 'Tc' ),
              ( ['in'], c_double, 'Bc' ),
              ( ['in'], BSTR, 'MatPropTop' ),
              ( ['in'], c_double, 'Tcb' ),
              ( ['in'], c_double, 'Bcb' ),
              ( ['in'], BSTR, 'MatPropBot' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(35)], HRESULT, 'SetDblAngle',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'T3' ),
              ( ['in'], c_double, 'T2' ),
              ( ['in'], c_double, 'Tf' ),
              ( ['in'], c_double, 'Tw' ),
              ( ['in'], c_double, 'Dis' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(36)], HRESULT, 'SetDblChannel',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'T3' ),
              ( ['in'], c_double, 'T2' ),
              ( ['in'], c_double, 'Tf' ),
              ( ['in'], c_double, 'Tw' ),
              ( ['in'], c_double, 'Dis' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(37)], HRESULT, 'SetGeneral',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'T3' ),
              ( ['in'], c_double, 'T2' ),
              ( ['in'], c_double, 'Area' ),
              ( ['in'], c_double, 'As2' ),
              ( ['in'], c_double, 'As3' ),
              ( ['in'], c_double, 'Torsion' ),
              ( ['in'], c_double, 'I22' ),
              ( ['in'], c_double, 'I33' ),
              ( ['in'], c_double, 'S22' ),
              ( ['in'], c_double, 'S33' ),
              ( ['in'], c_double, 'Z22' ),
              ( ['in'], c_double, 'Z33' ),
              ( ['in'], c_double, 'R22' ),
              ( ['in'], c_double, 'R33' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(38)], HRESULT, 'SetISection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'T3' ),
              ( ['in'], c_double, 'T2' ),
              ( ['in'], c_double, 'Tf' ),
              ( ['in'], c_double, 'Tw' ),
              ( ['in'], c_double, 'T2b' ),
              ( ['in'], c_double, 'Tfb' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(39)], HRESULT, 'SetModifiers',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(40)], HRESULT, 'SetNonPrismatic',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StartSec' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'EndSec' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MyLength' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'EI33' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'EI22' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(41)], HRESULT, 'SetPipe',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'T3' ),
              ( ['in'], c_double, 'Tw' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(42)], HRESULT, 'SetRebarBeam',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatPropLong' ),
              ( ['in'], BSTR, 'MatPropConfine' ),
              ( ['in'], c_double, 'CoverTop' ),
              ( ['in'], c_double, 'CoverBot' ),
              ( ['in'], c_double, 'TopLeftArea' ),
              ( ['in'], c_double, 'TopRightArea' ),
              ( ['in'], c_double, 'BotLeftArea' ),
              ( ['in'], c_double, 'BotRightArea' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(43)], HRESULT, 'SetRebarColumn',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatPropLong' ),
              ( ['in'], BSTR, 'MatPropConfine' ),
              ( ['in'], c_int, 'Pattern' ),
              ( ['in'], c_int, 'ConfineType' ),
              ( ['in'], c_double, 'Cover' ),
              ( ['in'], c_int, 'NumberCBars' ),
              ( ['in'], c_int, 'NumberR3Bars' ),
              ( ['in'], c_int, 'NumberR2Bars' ),
              ( ['in'], BSTR, 'RebarSize' ),
              ( ['in'], BSTR, 'TieSize' ),
              ( ['in'], c_double, 'TieSpacingLongit' ),
              ( ['in'], c_int, 'Number2DirTieBars' ),
              ( ['in'], c_int, 'Number3DirTieBars' ),
              ( ['in'], VARIANT_BOOL, 'ToBeDesigned' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(44)], HRESULT, 'SetRectangle',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'T3' ),
              ( ['in'], c_double, 'T2' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(46)], HRESULT, 'SetTee',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'T3' ),
              ( ['in'], c_double, 'T2' ),
              ( ['in'], c_double, 'Tf' ),
              ( ['in'], c_double, 'Tw' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(47)], HRESULT, 'SetTube',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'T3' ),
              ( ['in'], c_double, 'T2' ),
              ( ['in'], c_double, 'Tf' ),
              ( ['in'], c_double, 'Tw' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'GetSDSection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ShapeName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(c_int), 'DesignType' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(45)], HRESULT, 'SetSDSection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in', 'optional'], c_int, 'DesignType', 0 ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(88)], HRESULT, 'GetMaterial',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(89)], HRESULT, 'SetMaterial',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(73)], HRESULT, 'GetTrapezoidal',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_double), 'T2' ),
              ( ['in', 'out'], POINTER(c_double), 'T2b' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(74)], HRESULT, 'SetTrapezoidal',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'T3' ),
              ( ['in'], c_double, 'T2' ),
              ( ['in'], c_double, 'T2b' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(48)], HRESULT, 'GetAutoSelectAluminum',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SectName' ),
              ( ['in', 'out'], POINTER(BSTR), 'AutoStartSection' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(49)], HRESULT, 'GetAutoSelectColdFormed',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SectName' ),
              ( ['in', 'out'], POINTER(BSTR), 'AutoStartSection' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(50)], HRESULT, 'GetColdC',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_double), 'T2' ),
              ( ['in', 'out'], POINTER(c_double), 'Thickness' ),
              ( ['in', 'out'], POINTER(c_double), 'Radius' ),
              ( ['in', 'out'], POINTER(c_double), 'LipDepth' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(51)], HRESULT, 'GetColdHat',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_double), 'T2' ),
              ( ['in', 'out'], POINTER(c_double), 'Thickness' ),
              ( ['in', 'out'], POINTER(c_double), 'Radius' ),
              ( ['in', 'out'], POINTER(c_double), 'LipDepth' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(52)], HRESULT, 'GetColdZ',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_double), 'T2' ),
              ( ['in', 'out'], POINTER(c_double), 'Thickness' ),
              ( ['in', 'out'], POINTER(c_double), 'Radius' ),
              ( ['in', 'out'], POINTER(c_double), 'LipDepth' ),
              ( ['in', 'out'], POINTER(c_double), 'LipAngle' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(53)], HRESULT, 'GetGeneral_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_double), 'T2' ),
              ( ['in', 'out'], POINTER(c_double), 'Area' ),
              ( ['in', 'out'], POINTER(c_double), 'As2' ),
              ( ['in', 'out'], POINTER(c_double), 'As3' ),
              ( ['in', 'out'], POINTER(c_double), 'Torsion' ),
              ( ['in', 'out'], POINTER(c_double), 'I22' ),
              ( ['in', 'out'], POINTER(c_double), 'I33' ),
              ( ['in', 'out'], POINTER(c_double), 'I23' ),
              ( ['in', 'out'], POINTER(c_double), 'S22' ),
              ( ['in', 'out'], POINTER(c_double), 'S33' ),
              ( ['in', 'out'], POINTER(c_double), 'Z22' ),
              ( ['in', 'out'], POINTER(c_double), 'Z33' ),
              ( ['in', 'out'], POINTER(c_double), 'R22' ),
              ( ['in', 'out'], POINTER(c_double), 'R33' ),
              ( ['in', 'out'], POINTER(c_double), 'EccV2' ),
              ( ['in', 'out'], POINTER(c_double), 'EccV3' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(54)], HRESULT, 'GetHybridISection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatPropTopFlange' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatPropWeb' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatPropBotFlange' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_double), 'T2' ),
              ( ['in', 'out'], POINTER(c_double), 'Tf' ),
              ( ['in', 'out'], POINTER(c_double), 'Tw' ),
              ( ['in', 'out'], POINTER(c_double), 'T2b' ),
              ( ['in', 'out'], POINTER(c_double), 'Tfb' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(55)], HRESULT, 'GetHybridUSection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'WebMaterial' ),
              ( ['in', 'out'], POINTER(BSTR), 'TopFlangeMaterial' ),
              ( ['in', 'out'], POINTER(BSTR), 'BotFlangeMaterial' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(56)], HRESULT, 'GetNotionalSize',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'stype' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(57)], HRESULT, 'GetPrecastI',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'B' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'D' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(71)], HRESULT, 'GetPrecastI_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'B' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'D' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T' ),
              ( ['in', 'out'], POINTER(c_double), 'C' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(58)], HRESULT, 'GetPrecastU',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'B' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'D' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(59)], HRESULT, 'GetSectProps_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Area' ),
              ( ['in', 'out'], POINTER(c_double), 'As2' ),
              ( ['in', 'out'], POINTER(c_double), 'As3' ),
              ( ['in', 'out'], POINTER(c_double), 'Torsion' ),
              ( ['in', 'out'], POINTER(c_double), 'I22' ),
              ( ['in', 'out'], POINTER(c_double), 'I33' ),
              ( ['in', 'out'], POINTER(c_double), 'I23' ),
              ( ['in', 'out'], POINTER(c_double), 'S22' ),
              ( ['in', 'out'], POINTER(c_double), 'S33' ),
              ( ['in', 'out'], POINTER(c_double), 'Z22' ),
              ( ['in', 'out'], POINTER(c_double), 'Z33' ),
              ( ['in', 'out'], POINTER(c_double), 'R22' ),
              ( ['in', 'out'], POINTER(c_double), 'R33' ),
              ( ['in', 'out'], POINTER(c_double), 'EccV2' ),
              ( ['in', 'out'], POINTER(c_double), 'EccV3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(60)], HRESULT, 'SetAutoSelectAluminum',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SectName' ),
              ( ['in', 'optional'], BSTR, 'AutoStartSection', 'Median' ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(61)], HRESULT, 'SetAutoSelectColdFormed',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SectName' ),
              ( ['in', 'optional'], BSTR, 'AutoStartSection', 'Median' ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(62)], HRESULT, 'SetColdC',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'T3' ),
              ( ['in'], c_double, 'T2' ),
              ( ['in'], c_double, 'Thickness' ),
              ( ['in'], c_double, 'Radius' ),
              ( ['in'], c_double, 'LipDepth' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(63)], HRESULT, 'SetColdHat',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'T3' ),
              ( ['in'], c_double, 'T2' ),
              ( ['in'], c_double, 'Thickness' ),
              ( ['in'], c_double, 'Radius' ),
              ( ['in'], c_double, 'LipDepth' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(64)], HRESULT, 'SetColdZ',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'T3' ),
              ( ['in'], c_double, 'T2' ),
              ( ['in'], c_double, 'Thickness' ),
              ( ['in'], c_double, 'Radius' ),
              ( ['in'], c_double, 'LipDepth' ),
              ( ['in'], c_double, 'LipAngle' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(65)], HRESULT, 'SetGeneral_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'T3' ),
              ( ['in'], c_double, 'T2' ),
              ( ['in'], c_double, 'Area' ),
              ( ['in'], c_double, 'As2' ),
              ( ['in'], c_double, 'As3' ),
              ( ['in'], c_double, 'Torsion' ),
              ( ['in'], c_double, 'I22' ),
              ( ['in'], c_double, 'I33' ),
              ( ['in'], c_double, 'I23' ),
              ( ['in'], c_double, 'S22' ),
              ( ['in'], c_double, 'S33' ),
              ( ['in'], c_double, 'Z22' ),
              ( ['in'], c_double, 'Z33' ),
              ( ['in'], c_double, 'R22' ),
              ( ['in'], c_double, 'R33' ),
              ( ['in'], c_double, 'EccV2' ),
              ( ['in'], c_double, 'EccV3' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(66)], HRESULT, 'SetHybridISection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatPropTopFlange' ),
              ( ['in'], BSTR, 'MatPropWeb' ),
              ( ['in'], BSTR, 'MatPropBotFlange' ),
              ( ['in'], c_double, 'T3' ),
              ( ['in'], c_double, 'T2' ),
              ( ['in'], c_double, 'Tf' ),
              ( ['in'], c_double, 'Tw' ),
              ( ['in'], c_double, 'T2b' ),
              ( ['in'], c_double, 'Tfb' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(67)], HRESULT, 'SetHybridUSection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'WebMaterial' ),
              ( ['in'], BSTR, 'TopFlangeMaterial' ),
              ( ['in'], BSTR, 'BotFlangeMaterial' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(68)], HRESULT, 'SetNotionalSize',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'stype' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(69)], HRESULT, 'SetPrecastI',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'B' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'D' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(72)], HRESULT, 'SetPrecastI_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'B' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'D' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T' ),
              ( ['in', 'out'], POINTER(c_double), 'C' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(70)], HRESULT, 'SetPrecastU',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'B' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'D' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(92)], HRESULT, 'GetColdL',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_double), 'Thickness' ),
              ( ['in', 'out'], POINTER(c_double), 'Radius' ),
              ( ['in', 'out'], POINTER(c_double), 'LipDepth' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(93)], HRESULT, 'GetColdI',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_double), 'T2' ),
              ( ['in', 'out'], POINTER(c_double), 'T2b' ),
              ( ['in', 'out'], POINTER(c_double), 'Thickness' ),
              ( ['in', 'out'], POINTER(c_double), 'Radius' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(94)], HRESULT, 'GetColdT',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_double), 'T2' ),
              ( ['in', 'out'], POINTER(c_double), 'Thickness' ),
              ( ['in', 'out'], POINTER(c_double), 'Radius' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(95)], HRESULT, 'GetColdBox',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_double), 'T2' ),
              ( ['in', 'out'], POINTER(c_double), 'Thickness' ),
              ( ['in', 'out'], POINTER(c_double), 'Radius' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(96)], HRESULT, 'GetColdPipe',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_double), 'Thickness' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(97)], HRESULT, 'SetColdL',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'T3' ),
              ( ['in'], c_double, 'Thickness' ),
              ( ['in'], c_double, 'Radius' ),
              ( ['in'], c_double, 'LipDepth' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(98)], HRESULT, 'SetColdI',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'T3' ),
              ( ['in'], c_double, 'T2' ),
              ( ['in'], c_double, 'T2b' ),
              ( ['in'], c_double, 'Thickness' ),
              ( ['in'], c_double, 'Radius' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(99)], HRESULT, 'SetColdT',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'T3' ),
              ( ['in'], c_double, 'T2' ),
              ( ['in'], c_double, 'Thickness' ),
              ( ['in'], c_double, 'Radius' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(100)], HRESULT, 'SetColdBox',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'T3' ),
              ( ['in'], c_double, 'T2' ),
              ( ['in'], c_double, 'Thickness' ),
              ( ['in'], c_double, 'Radius' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(101)], HRESULT, 'SetColdPipe',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'T3' ),
              ( ['in'], c_double, 'Thickness' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(86)], HRESULT, 'GetConcreteL',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_double), 'T2' ),
              ( ['in', 'out'], POINTER(c_double), 'Tf' ),
              ( ['in', 'out'], POINTER(c_double), 'TwC' ),
              ( ['in', 'out'], POINTER(c_double), 'TwT' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'MirrorAbout2' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'MirrorAbout3' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(82)], HRESULT, 'GetConcreteTee',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_double), 'T2' ),
              ( ['in', 'out'], POINTER(c_double), 'Tf' ),
              ( ['in', 'out'], POINTER(c_double), 'TwF' ),
              ( ['in', 'out'], POINTER(c_double), 'TwT' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'MirrorAbout3' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(77)], HRESULT, 'GetPlate',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_double), 'T2' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(75)], HRESULT, 'GetRod',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(84)], HRESULT, 'GetSteelAngle',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_double), 'T2' ),
              ( ['in', 'out'], POINTER(c_double), 'Tf' ),
              ( ['in', 'out'], POINTER(c_double), 'Tw' ),
              ( ['in', 'out'], POINTER(c_double), 'R' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'MirrorAbout2' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'MirrorAbout3' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(80)], HRESULT, 'GetSteelTee',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_double), 'T2' ),
              ( ['in', 'out'], POINTER(c_double), 'Tf' ),
              ( ['in', 'out'], POINTER(c_double), 'Tw' ),
              ( ['in', 'out'], POINTER(c_double), 'R' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'MirrorAbout3' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(87)], HRESULT, 'SetConcreteL',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'T3' ),
              ( ['in'], c_double, 'T2' ),
              ( ['in'], c_double, 'Tf' ),
              ( ['in'], c_double, 'TwC' ),
              ( ['in'], c_double, 'TwT' ),
              ( ['in'], VARIANT_BOOL, 'MirrorAbout2' ),
              ( ['in'], VARIANT_BOOL, 'MirrorAbout3' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(83)], HRESULT, 'SetConcreteTee',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'T3' ),
              ( ['in'], c_double, 'T2' ),
              ( ['in'], c_double, 'Tf' ),
              ( ['in'], c_double, 'TwF' ),
              ( ['in'], c_double, 'TwT' ),
              ( ['in'], VARIANT_BOOL, 'MirrorAbout3' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(78)], HRESULT, 'SetPlate',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'T3' ),
              ( ['in'], c_double, 'T2' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(76)], HRESULT, 'SetRod',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'T3' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(85)], HRESULT, 'SetSteelAngle',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'T3' ),
              ( ['in'], c_double, 'T2' ),
              ( ['in'], c_double, 'Tf' ),
              ( ['in'], c_double, 'Tw' ),
              ( ['in'], c_double, 'R' ),
              ( ['in'], VARIANT_BOOL, 'MirrorAbout2' ),
              ( ['in'], VARIANT_BOOL, 'MirrorAbout3' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(81)], HRESULT, 'SetSteelTee',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'T3' ),
              ( ['in'], c_double, 'T2' ),
              ( ['in'], c_double, 'Tf' ),
              ( ['in'], c_double, 'Tw' ),
              ( ['in'], c_double, 'R' ),
              ( ['in'], VARIANT_BOOL, 'MirrorAbout3' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(79)], HRESULT, 'GetAllFrameProperties',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(eFramePropType)), 'PropType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Tf' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Tw' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T2b' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Tfb' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(90)], HRESULT, 'GetAllFrameProperties_2',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(eFramePropType)), 'PropType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Tf' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Tw' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T2b' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Tfb' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Area' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(91)], HRESULT, 'GetRebarColumn_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatPropLong' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatPropConfine' ),
              ( ['in', 'out'], POINTER(c_int), 'Pattern' ),
              ( ['in', 'out'], POINTER(c_int), 'ConfineType' ),
              ( ['in', 'out'], POINTER(c_double), 'Cover' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberCBars' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberR3Bars' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberR2Bars' ),
              ( ['in', 'out'], POINTER(BSTR), 'RebarSize' ),
              ( ['in', 'out'], POINTER(BSTR), 'TieSize' ),
              ( ['in', 'out'], POINTER(c_double), 'TieSpacingLongit' ),
              ( ['in', 'out'], POINTER(c_int), 'Number2DirTieBars' ),
              ( ['in', 'out'], POINTER(c_int), 'Number3DirTieBars' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ToBeDesigned' ),
              ( ['in', 'out'], POINTER(BSTR), 'LongitCornerRebarSize' ),
              ( ['in', 'out'], POINTER(c_double), 'LongitRebarArea' ),
              ( ['in', 'out'], POINTER(c_double), 'LongitCornerRebarArea' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cPropFrame implementation
##class cPropFrame_Impl(object):
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self, PropType):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetAngle(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, T3, T2, Tf, Tw, Color, Notes, GUID, pRetVal
##
##    def GetAutoSelectSteel(self, Name):
##        '-no docstring-'
##        #return NumberItems, SectName, AutoStartSection, Notes, GUID, pRetVal
##
##    def GetChannel(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, T3, T2, Tf, Tw, Color, Notes, GUID, pRetVal
##
##    def GetCircle(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, T3, Color, Notes, GUID, pRetVal
##
##    def GetCoverPlatedI(self, Name):
##        '-no docstring-'
##        #return SectName, FyTopFlange, FyWeb, FyBotFlange, Tc, Bc, MatPropTop, Tcb, Bcb, MatPropBot, Color, Notes, GUID, pRetVal
##
##    def GetDblAngle(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, T3, T2, Tf, Tw, Dis, Color, Notes, GUID, pRetVal
##
##    def GetDblChannel(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, T3, T2, Tf, Tw, Dis, Color, Notes, GUID, pRetVal
##
##    def GetGeneral(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, T3, T2, Area, As2, As3, Torsion, I22, I33, S22, S33, Z22, Z33, R22, R33, Color, Notes, GUID, pRetVal
##
##    def GetISection(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, T3, T2, Tf, Tw, T2b, Tfb, Color, Notes, GUID, pRetVal
##
##    def GetModifiers(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetNameInPropFile(self, Name):
##        '-no docstring-'
##        #return NameInFile, FileName, MatProp, PropType, pRetVal
##
##    def GetNameList(self, PropType):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetNonPrismatic(self, Name):
##        '-no docstring-'
##        #return NumberItems, StartSec, EndSec, MyLength, MyType, EI33, EI22, Color, Notes, GUID, pRetVal
##
##    def GetPipe(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, T3, Tw, Color, Notes, GUID, pRetVal
##
##    def GetPropFileNameList(self, FileName, PropType):
##        '-no docstring-'
##        #return NumberNames, MyName, MyPropType, pRetVal
##
##    def GetRebarBeam(self, Name):
##        '-no docstring-'
##        #return MatPropLong, MatPropConfine, CoverTop, CoverBot, TopLeftArea, TopRightArea, BotLeftArea, BotRightArea, pRetVal
##
##    def GetRebarColumn(self, Name):
##        '-no docstring-'
##        #return MatPropLong, MatPropConfine, Pattern, ConfineType, Cover, NumberCBars, NumberR3Bars, NumberR2Bars, RebarSize, TieSize, TieSpacingLongit, Number2DirTieBars, Number3DirTieBars, ToBeDesigned, pRetVal
##
##    def GetRectangle(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, T3, T2, Color, Notes, GUID, pRetVal
##
##    def GetSectProps(self, Name):
##        '-no docstring-'
##        #return Area, As2, As3, Torsion, I22, I33, S22, S33, Z22, Z33, R22, R33, pRetVal
##
##    def GetTee(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, T3, T2, Tf, Tw, Color, Notes, GUID, pRetVal
##
##    def GetTube(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, T3, T2, Tf, Tw, Color, Notes, GUID, pRetVal
##
##    def GetTypeOAPI(self, Name):
##        '-no docstring-'
##        #return PropType, pRetVal
##
##    def GetTypeRebar(self, Name):
##        '-no docstring-'
##        #return MyType, pRetVal
##
##    def ImportProp(self, Name, MatProp, FileName, PropName, Color, Notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SDShape(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetAngle(self, Name, MatProp, T3, T2, Tf, Tw, Color, Notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetAutoSelectSteel(self, Name, NumberItems, AutoStartSection, Notes, GUID):
##        '-no docstring-'
##        #return SectName, pRetVal
##
##    def SetChannel(self, Name, MatProp, T3, T2, Tf, Tw, Color, Notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCircle(self, Name, MatProp, T3, Color, Notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCoverPlatedI(self, Name, SectName, FyTopFlange, FyWeb, FyBotFlange, Tc, Bc, MatPropTop, Tcb, Bcb, MatPropBot, Color, Notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDblAngle(self, Name, MatProp, T3, T2, Tf, Tw, Dis, Color, Notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDblChannel(self, Name, MatProp, T3, T2, Tf, Tw, Dis, Color, Notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetGeneral(self, Name, MatProp, T3, T2, Area, As2, As3, Torsion, I22, I33, S22, S33, Z22, Z33, R22, R33, Color, Notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetISection(self, Name, MatProp, T3, T2, Tf, Tw, T2b, Tfb, Color, Notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetModifiers(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetNonPrismatic(self, Name, NumberItems, Color, Notes, GUID):
##        '-no docstring-'
##        #return StartSec, EndSec, MyLength, MyType, EI33, EI22, pRetVal
##
##    def SetPipe(self, Name, MatProp, T3, Tw, Color, Notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetRebarBeam(self, Name, MatPropLong, MatPropConfine, CoverTop, CoverBot, TopLeftArea, TopRightArea, BotLeftArea, BotRightArea):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetRebarColumn(self, Name, MatPropLong, MatPropConfine, Pattern, ConfineType, Cover, NumberCBars, NumberR3Bars, NumberR2Bars, RebarSize, TieSize, TieSpacingLongit, Number2DirTieBars, Number3DirTieBars, ToBeDesigned):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetRectangle(self, Name, MatProp, T3, T2, Color, Notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetTee(self, Name, MatProp, T3, T2, Tf, Tw, Color, Notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetTube(self, Name, MatProp, T3, T2, Tf, Tw, Color, Notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetSDSection(self, Name):
##        '-no docstring-'
##        #return MatProp, NumberItems, ShapeName, MyType, DesignType, Color, Notes, GUID, pRetVal
##
##    def SetSDSection(self, Name, MatProp, DesignType, Color, Notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetMaterial(self, Name):
##        '-no docstring-'
##        #return MatProp, pRetVal
##
##    def SetMaterial(self, Name, MatProp):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetTrapezoidal(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, T3, T2, T2b, Color, Notes, GUID, pRetVal
##
##    def SetTrapezoidal(self, Name, MatProp, T3, T2, T2b, Color, Notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetAutoSelectAluminum(self, Name):
##        '-no docstring-'
##        #return NumberItems, SectName, AutoStartSection, Notes, GUID, pRetVal
##
##    def GetAutoSelectColdFormed(self, Name):
##        '-no docstring-'
##        #return NumberItems, SectName, AutoStartSection, Notes, GUID, pRetVal
##
##    def GetColdC(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, T3, T2, Thickness, Radius, LipDepth, Color, Notes, GUID, pRetVal
##
##    def GetColdHat(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, T3, T2, Thickness, Radius, LipDepth, Color, Notes, GUID, pRetVal
##
##    def GetColdZ(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, T3, T2, Thickness, Radius, LipDepth, LipAngle, Color, Notes, GUID, pRetVal
##
##    def GetGeneral_1(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, T3, T2, Area, As2, As3, Torsion, I22, I33, I23, S22, S33, Z22, Z33, R22, R33, EccV2, EccV3, Color, Notes, GUID, pRetVal
##
##    def GetHybridISection(self, Name):
##        '-no docstring-'
##        #return MatPropTopFlange, MatPropWeb, MatPropBotFlange, T3, T2, Tf, Tw, T2b, Tfb, Color, Notes, GUID, pRetVal
##
##    def GetHybridUSection(self, Name):
##        '-no docstring-'
##        #return WebMaterial, TopFlangeMaterial, BotFlangeMaterial, T, Color, Notes, GUID, pRetVal
##
##    def GetNotionalSize(self, Name):
##        '-no docstring-'
##        #return stype, Value, pRetVal
##
##    def GetPrecastI(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, B, D, Color, Notes, GUID, pRetVal
##
##    def GetPrecastI_1(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, B, D, T, C, Color, Notes, GUID, pRetVal
##
##    def GetPrecastU(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, B, D, Color, Notes, GUID, pRetVal
##
##    def GetSectProps_1(self, Name):
##        '-no docstring-'
##        #return Area, As2, As3, Torsion, I22, I33, I23, S22, S33, Z22, Z33, R22, R33, EccV2, EccV3, pRetVal
##
##    def SetAutoSelectAluminum(self, Name, NumberItems, AutoStartSection, Notes, GUID):
##        '-no docstring-'
##        #return SectName, pRetVal
##
##    def SetAutoSelectColdFormed(self, Name, NumberItems, AutoStartSection, Notes, GUID):
##        '-no docstring-'
##        #return SectName, pRetVal
##
##    def SetColdC(self, Name, MatProp, T3, T2, Thickness, Radius, LipDepth, Color, Notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetColdHat(self, Name, MatProp, T3, T2, Thickness, Radius, LipDepth, Color, Notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetColdZ(self, Name, MatProp, T3, T2, Thickness, Radius, LipDepth, LipAngle, Color, Notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetGeneral_1(self, Name, MatProp, T3, T2, Area, As2, As3, Torsion, I22, I33, I23, S22, S33, Z22, Z33, R22, R33, EccV2, EccV3, Color, Notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetHybridISection(self, Name, MatPropTopFlange, MatPropWeb, MatPropBotFlange, T3, T2, Tf, Tw, T2b, Tfb, Color, Notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetHybridUSection(self, Name, WebMaterial, TopFlangeMaterial, BotFlangeMaterial, Color, Notes, GUID):
##        '-no docstring-'
##        #return T, pRetVal
##
##    def SetNotionalSize(self, Name, stype, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPrecastI(self, Name, MatProp, Color, Notes, GUID):
##        '-no docstring-'
##        #return B, D, pRetVal
##
##    def SetPrecastI_1(self, Name, MatProp, Color, Notes, GUID):
##        '-no docstring-'
##        #return B, D, T, C, pRetVal
##
##    def SetPrecastU(self, Name, MatProp, Color, Notes, GUID):
##        '-no docstring-'
##        #return B, D, pRetVal
##
##    def GetColdL(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, T3, Thickness, Radius, LipDepth, Color, Notes, GUID, pRetVal
##
##    def GetColdI(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, T3, T2, T2b, Thickness, Radius, Color, Notes, GUID, pRetVal
##
##    def GetColdT(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, T3, T2, Thickness, Radius, Color, Notes, GUID, pRetVal
##
##    def GetColdBox(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, T3, T2, Thickness, Radius, Color, Notes, GUID, pRetVal
##
##    def GetColdPipe(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, T3, Thickness, Color, Notes, GUID, pRetVal
##
##    def SetColdL(self, Name, MatProp, T3, Thickness, Radius, LipDepth, Color, Notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetColdI(self, Name, MatProp, T3, T2, T2b, Thickness, Radius, Color, Notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetColdT(self, Name, MatProp, T3, T2, Thickness, Radius, Color, Notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetColdBox(self, Name, MatProp, T3, T2, Thickness, Radius, Color, Notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetColdPipe(self, Name, MatProp, T3, Thickness, Color, Notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetConcreteL(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, T3, T2, Tf, TwC, TwT, MirrorAbout2, MirrorAbout3, Color, Notes, GUID, pRetVal
##
##    def GetConcreteTee(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, T3, T2, Tf, TwF, TwT, MirrorAbout3, Color, Notes, GUID, pRetVal
##
##    def GetPlate(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, T3, T2, Color, Notes, GUID, pRetVal
##
##    def GetRod(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, T3, Color, Notes, GUID, pRetVal
##
##    def GetSteelAngle(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, T3, T2, Tf, Tw, R, MirrorAbout2, MirrorAbout3, Color, Notes, GUID, pRetVal
##
##    def GetSteelTee(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, T3, T2, Tf, Tw, R, MirrorAbout3, Color, Notes, GUID, pRetVal
##
##    def SetConcreteL(self, Name, MatProp, T3, T2, Tf, TwC, TwT, MirrorAbout2, MirrorAbout3, Color, Notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetConcreteTee(self, Name, MatProp, T3, T2, Tf, TwF, TwT, MirrorAbout3, Color, Notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPlate(self, Name, MatProp, T3, T2, Color, Notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetRod(self, Name, MatProp, T3, Color, Notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSteelAngle(self, Name, MatProp, T3, T2, Tf, Tw, R, MirrorAbout2, MirrorAbout3, Color, Notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSteelTee(self, Name, MatProp, T3, T2, Tf, Tw, R, MirrorAbout3, Color, Notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetAllFrameProperties(self):
##        '-no docstring-'
##        #return NumberNames, MyName, PropType, T3, T2, Tf, Tw, T2b, Tfb, pRetVal
##
##    def GetAllFrameProperties_2(self):
##        '-no docstring-'
##        #return NumberNames, MyName, PropType, T3, T2, Tf, Tw, T2b, Tfb, Area, pRetVal
##
##    def GetRebarColumn_1(self, Name):
##        '-no docstring-'
##        #return MatPropLong, MatPropConfine, Pattern, ConfineType, Cover, NumberCBars, NumberR3Bars, NumberR2Bars, RebarSize, TieSize, TieSpacingLongit, Number2DirTieBars, Number3DirTieBars, ToBeDesigned, LongitCornerRebarSize, LongitRebarArea, LongitCornerRebarArea, pRetVal
##

class cBDRS_IRC2011_CBoxStr(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{8B03CB7B-0BE1-4A41-9CB8-F9200F3D2187}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_IRC2011_CBoxStr._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_IRC2011_CBoxStr implementation
##class cBDRS_IRC2011_CBoxStr_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cDAlAA_LRFD_2000(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{E4E88781-32E2-4BD8-8636-5869E97DF43C}')
    _idlflags_ = ['dual', 'oleautomation']
cDAlAA_LRFD_2000._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDAlAA_LRFD_2000 implementation
##class cDAlAA_LRFD_2000_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cCaseResponseSpectrum(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{6CF0F745-603D-4280-91ED-28AD5822B013}')
    _idlflags_ = ['dual', 'oleautomation']
cCaseResponseSpectrum._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetDampConstant',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Damp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetDampInterpolated',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'DampType' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Time' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Damp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetDampOverrides',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Mode' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Damp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetDampProportional',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'DampType' ),
              ( ['in', 'out'], POINTER(c_double), 'DampA' ),
              ( ['in', 'out'], POINTER(c_double), 'DampB' ),
              ( ['in', 'out'], POINTER(c_double), 'DampF1' ),
              ( ['in', 'out'], POINTER(c_double), 'DampF2' ),
              ( ['in', 'out'], POINTER(c_double), 'DampD1' ),
              ( ['in', 'out'], POINTER(c_double), 'DampD2' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetDampType',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'DampType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetDiaphragmEccentricityOverride',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'Num' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Diaph' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Eccen' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetDirComb',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'MyType' ),
              ( ['in', 'out'], POINTER(c_double), 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetEccentricity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Eccen' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetLoads',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Func' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ang' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetModalCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'ModalCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetModalComb',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'MyType' ),
              ( ['in', 'out'], POINTER(c_double), 'F1' ),
              ( ['in', 'out'], POINTER(c_double), 'F2' ),
              ( ['in', 'out'], POINTER(c_double), 'Td' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetModalComb_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'MyType' ),
              ( ['in', 'out'], POINTER(c_double), 'F1' ),
              ( ['in', 'out'], POINTER(c_double), 'F2' ),
              ( ['in', 'out'], POINTER(c_int), 'PeriodicRigidCombType' ),
              ( ['in', 'out'], POINTER(c_double), 'Td' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'SetCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'SetEccentricity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'Eccen' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'SetLoads',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Func' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ang' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'SetModalCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'ModalCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'SetDampConstant',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'Damp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'SetDampInterpolated',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'DampType' ),
              ( ['in'], c_int, 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Time' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Damp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'SetDampOverrides',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Mode' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Damp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'SetDampProportional',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'DampType' ),
              ( ['in'], c_double, 'DampA' ),
              ( ['in'], c_double, 'DampB' ),
              ( ['in'], c_double, 'DampF1' ),
              ( ['in'], c_double, 'DampF2' ),
              ( ['in'], c_double, 'DampD1' ),
              ( ['in'], c_double, 'DampD2' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'SetDiaphragmEccentricityOverride',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Diaph' ),
              ( ['in'], c_double, 'Eccen' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Delete', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'SetDirComb',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'MyType' ),
              ( ['in'], c_double, 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(23)], HRESULT, 'SetModalComb',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'MyType' ),
              ( ['in', 'optional'], c_double, 'F1', 1.0 ),
              ( ['in', 'optional'], c_double, 'F2', 0.0 ),
              ( ['in', 'optional'], c_double, 'Td', 60.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(24)], HRESULT, 'SetModalComb_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'MyType' ),
              ( ['in', 'optional'], c_double, 'F1', 1.0 ),
              ( ['in', 'optional'], c_double, 'F2', 0.0 ),
              ( ['in', 'optional'], c_int, 'PeriodicRigidCombType', 1 ),
              ( ['in', 'optional'], c_double, 'Td', 60.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cCaseResponseSpectrum implementation
##class cCaseResponseSpectrum_Impl(object):
##    def GetDampConstant(self, Name):
##        '-no docstring-'
##        #return Damp, pRetVal
##
##    def GetDampInterpolated(self, Name):
##        '-no docstring-'
##        #return DampType, NumberItems, Time, Damp, pRetVal
##
##    def GetDampOverrides(self, Name):
##        '-no docstring-'
##        #return NumberItems, Mode, Damp, pRetVal
##
##    def GetDampProportional(self, Name):
##        '-no docstring-'
##        #return DampType, DampA, DampB, DampF1, DampF2, DampD1, DampD2, pRetVal
##
##    def GetDampType(self, Name):
##        '-no docstring-'
##        #return DampType, pRetVal
##
##    def GetDiaphragmEccentricityOverride(self, Name):
##        '-no docstring-'
##        #return Num, Diaph, Eccen, pRetVal
##
##    def GetDirComb(self, Name):
##        '-no docstring-'
##        #return MyType, SF, pRetVal
##
##    def GetEccentricity(self, Name):
##        '-no docstring-'
##        #return Eccen, pRetVal
##
##    def GetLoads(self, Name):
##        '-no docstring-'
##        #return NumberLoads, LoadName, Func, SF, CSys, Ang, pRetVal
##
##    def GetModalCase(self, Name):
##        '-no docstring-'
##        #return ModalCase, pRetVal
##
##    def GetModalComb(self, Name):
##        '-no docstring-'
##        #return MyType, F1, F2, Td, pRetVal
##
##    def GetModalComb_1(self, Name):
##        '-no docstring-'
##        #return MyType, F1, F2, PeriodicRigidCombType, Td, pRetVal
##
##    def SetCase(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetEccentricity(self, Name, Eccen):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoads(self, Name, NumberLoads):
##        '-no docstring-'
##        #return LoadName, Func, SF, CSys, Ang, pRetVal
##
##    def SetModalCase(self, Name, ModalCase):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDampConstant(self, Name, Damp):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDampInterpolated(self, Name, DampType, NumberItems):
##        '-no docstring-'
##        #return Time, Damp, pRetVal
##
##    def SetDampOverrides(self, Name, NumberItems):
##        '-no docstring-'
##        #return Mode, Damp, pRetVal
##
##    def SetDampProportional(self, Name, DampType, DampA, DampB, DampF1, DampF2, DampD1, DampD2):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDiaphragmEccentricityOverride(self, Name, Diaph, Eccen, Delete):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDirComb(self, Name, MyType, SF):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetModalComb(self, Name, MyType, F1, F2, Td):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetModalComb_1(self, Name, MyType, F1, F2, PeriodicRigidCombType, Td):
##        '-no docstring-'
##        #return pRetVal
##

class cDCoACI318_14(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{C6D9A2B9-A173-4423-8440-6511514EC74A}')
    _idlflags_ = ['dual', 'oleautomation']
cDCoACI318_14._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDCoACI318_14 implementation
##class cDCoACI318_14_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBDRS_EUROCODE_ConTBeamStr(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{4921080B-287F-435B-A160-D7D229BA5C25}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_EUROCODE_ConTBeamStr._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_EUROCODE_ConTBeamStr implementation
##class cBDRS_EUROCODE_ConTBeamStr_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cDAlAA_ASD_2000(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{A53FA94E-E0FA-40C7-8A7C-42B026E257F2}')
    _idlflags_ = ['dual', 'oleautomation']
cDAlAA_ASD_2000._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDAlAA_ASD_2000 implementation
##class cDAlAA_ASD_2000_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##

class cBDRS_BS5400_SICompStr(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{373E489E-399A-4D95-97DE-FE05DEC03BC0}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_BS5400_SICompStr._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_BS5400_SICompStr implementation
##class cBDRS_BS5400_SICompStr_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##


# values for enumeration 'eConstraintType'
eConstraintType_Body = 1
eConstraintType_Diaphragm = 2
eConstraintType_Plate = 3
eConstraintType_Rod = 4
eConstraintType_Beam = 5
eConstraintType_Equal = 6
eConstraintType_Local = 7
eConstraintType_Weld = 8
eConstraintType_Line = 13
eConstraintType = c_int # enum
class cBDRS_EUROCODE_ConcSlabStr(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{112392AB-97E9-408E-ABFF-B60D825EF40A}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_EUROCODE_ConcSlabStr._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_EUROCODE_ConcSlabStr implementation
##class cBDRS_EUROCODE_ConcSlabStr_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_AA_L_07_SICompConstr._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_SICompConstr implementation
##class cBDRS_AA_L_07_SICompConstr_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cModifierFrame(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{E236E6C7-A01A-43D1-86DB-D8FA6208AE36}')
    _idlflags_ = ['dual', 'oleautomation']
cModifierFrame._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetModifiers',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'SetModifiers',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cModifierFrame implementation
##class cModifierFrame_Impl(object):
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetModifiers(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def SetModifiers(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##

cBDRS_AA_L_07_SICompConstNS._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetDemandParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], BSTR, 'DemandName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetDemandParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], BSTR, 'DemandName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_SICompConstNS implementation
##class cBDRS_AA_L_07_SICompConstNS_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetDemandParam(self, RequestName, DemandName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDemandParam(self, RequestName, DemandName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cDStCanadian_S16_14(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{F57299EE-6E59-40B1-AE69-14C5A54FBA34}')
    _idlflags_ = ['dual', 'oleautomation']
cDStCanadian_S16_14._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDStCanadian_S16_14 implementation
##class cDStCanadian_S16_14_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBDRS_RussianSNiP_CBox2Flexure(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{A155FA4F-F0BF-4F04-986E-A75CF1B0A634}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_RussianSNiP_CBox2Flexure._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_RussianSNiP_CBox2Flexure implementation
##class cBDRS_RussianSNiP_CBox2Flexure_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBDRS_IRC2011_CBox2Flex(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{ACCD31D8-DE52-494C-981A-2077A01F4065}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_IRC2011_CBox2Flex._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_IRC2011_CBox2Flex implementation
##class cBDRS_IRC2011_CBox2Flex_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBDRS_EUROCODE_ConTBeamCrack(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{491CE205-0093-4E1F-A757-F2546F82B4EC}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_EUROCODE_ConTBeamCrack._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_EUROCODE_ConTBeamCrack implementation
##class cBDRS_EUROCODE_ConTBeamCrack_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_AA_L_07_PCCompFlex._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_PCCompFlex implementation
##class cBDRS_AA_L_07_PCCompFlex_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBDRS_IRC2011_PCCompFlex(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{1532E2CA-0BD2-4733-80DE-5A8CDAC01210}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_IRC2011_PCCompFlex._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_IRC2011_PCCompFlex implementation
##class cBDRS_IRC2011_PCCompFlex_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBASConcSlab(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{A1D5373B-8842-4008-8214-439B721A8345}')
    _idlflags_ = ['dual', 'oleautomation']
cBASConcSlabResult._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'BASConcSlab',
              ( ['out', 'retval'], POINTER(POINTER(cBASConcSlab)), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'BridgeSuperCutLongitStress',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'PointIndex' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Stress' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBASConcSlabResult implementation
##class cBASConcSlabResult_Impl(object):
##    @property
##    def BASConcSlab(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def BridgeSuperCutLongitStress(self, Name, CutIndex, PointIndex):
##        '-no docstring-'
##        #return NumberResults, LoadCase, StepType, StepNum, Stress, pRetVal
##

class cBDRS_EUROCODE_ConcSlabCrack(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{74C2CAC6-59D9-4180-9981-DD5960A869AB}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_EUROCODE_ConcSlabCrack._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_EUROCODE_ConcSlabCrack implementation
##class cBDRS_EUROCODE_ConcSlabCrack_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_AA_L_07_SICompServ._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_SICompServ implementation
##class cBDRS_AA_L_07_SICompServ_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##


# values for enumeration 'eBridgeTendonCategory'
eBridgeTendonCategory_General = 0
eBridgeTendonCategory_Cantilever = 1
eBridgeTendonCategory_BottomSpan = 2
eBridgeTendonCategory_TopSpan = 3
eBridgeTendonCategory_Continuity = 4
eBridgeTendonCategory = c_int # enum
class cCombo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{16FA996C-70E8-4A47-8E2C-0676459E0BEB}')
    _idlflags_ = ['dual', 'oleautomation']

# values for enumeration 'eCNameType'
eCNameType_LoadCase = 0
eCNameType_LoadCombo = 1
eCNameType = c_int # enum
cCombo._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'Add',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ComboType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'AddDesignDefaultCombos',
              ( ['in'], VARIANT_BOOL, 'DesignSteel' ),
              ( ['in'], VARIANT_BOOL, 'DesignConcrete' ),
              ( ['in'], VARIANT_BOOL, 'DesignAluminum' ),
              ( ['in'], VARIANT_BOOL, 'DesignColdFormed' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'DeleteCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eCNameType, 'CNameType' ),
              ( ['in'], BSTR, 'CName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetCaseList',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(eCNameType)), 'CNameType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'SetCaseList',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(eCNameType), 'CNameType' ),
              ( ['in'], BSTR, 'CName' ),
              ( ['in'], c_double, 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'GetTypeOAPI',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'ComboType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'GetCaseList_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(eCNameType)), 'CNameType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ModeNumber' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'SetCaseList_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(eCNameType), 'CNameType' ),
              ( ['in'], BSTR, 'CName' ),
              ( ['in'], c_int, 'ModeNumber' ),
              ( ['in'], c_double, 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'CountCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'Count' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetDesignType',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'ComboDesignType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetNote',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'Note' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'SetNote',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Note' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'SetType',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ComboType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'SetTypeOAPI',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ComboType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetTypeCombo',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'ComboType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cCombo implementation
##class cCombo_Impl(object):
##    def Add(self, Name, ComboType):
##        '-no docstring-'
##        #return pRetVal
##
##    def AddDesignDefaultCombos(self, DesignSteel, DesignConcrete, DesignAluminum, DesignColdFormed):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteCase(self, Name, CNameType, CName):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetCaseList(self, Name):
##        '-no docstring-'
##        #return NumberItems, CNameType, CName, SF, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def SetCaseList(self, Name, CName, SF):
##        '-no docstring-'
##        #return CNameType, pRetVal
##
##    def GetTypeOAPI(self, Name):
##        '-no docstring-'
##        #return ComboType, pRetVal
##
##    def GetCaseList_1(self, Name):
##        '-no docstring-'
##        #return NumberItems, CNameType, CName, ModeNumber, SF, pRetVal
##
##    def SetCaseList_1(self, Name, CName, ModeNumber, SF):
##        '-no docstring-'
##        #return CNameType, pRetVal
##
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def CountCase(self, Name):
##        '-no docstring-'
##        #return Count, pRetVal
##
##    def GetDesignType(self, Name):
##        '-no docstring-'
##        #return ComboDesignType, pRetVal
##
##    def GetNote(self, Name):
##        '-no docstring-'
##        #return Note, pRetVal
##
##    def SetNote(self, Name, Note):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetType(self, Name, ComboType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetTypeOAPI(self, Name, ComboType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetTypeCombo(self, Name):
##        '-no docstring-'
##        #return ComboType, pRetVal
##

cBDRS_AA_L_07_PCCFlexRt._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_PCCFlexRt implementation
##class cBDRS_AA_L_07_PCCFlexRt_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBDRS_IRC2011_PCCompShr(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{04599784-3FF8-44AF-A2A9-022640291657}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_IRC2011_PCCompShr._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], BSTR, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_IRC2011_PCCompShr implementation
##class cBDRS_IRC2011_PCCompShr_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetCapacityParamString(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCapacityParamString(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBDRS_EUROCODE_PCCompFlex(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{70454A55-81BD-4006-BCBF-A66D6A9991AE}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_EUROCODE_PCCompFlex._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_EUROCODE_PCCompFlex implementation
##class cBDRS_EUROCODE_PCCompFlex_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBDRS_RussianSNiP_CBox2Shear(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{4F7C0CC4-10D0-4C63-B76F-E4C70EAC2383}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_RussianSNiP_CBox2Shear._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], BSTR, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_RussianSNiP_CBox2Shear implementation
##class cBDRS_RussianSNiP_CBox2Shear_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetCapacityParamString(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCapacityParamString(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBDRS_IRC2011_CBox2Shr(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{B9138D6E-D5F2-46F9-A0A9-E9CC9B385C04}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_IRC2011_CBox2Shr._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], BSTR, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_IRC2011_CBox2Shr implementation
##class cBDRS_IRC2011_CBox2Shr_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetCapacityParamString(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCapacityParamString(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cStory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{216E9B60-0A8E-4BD6-9027-2A9EB4D9609A}')
    _idlflags_ = ['dual', 'oleautomation']
cStory._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetElevation',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Elevation' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetGUID',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetHeight',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Height' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetMasterStory',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IsMasterStory' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetSimilarTo',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IsMasterStory' ),
              ( ['in', 'out'], POINTER(BSTR), 'SimilarToStory' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetSplice',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpliceAbove' ),
              ( ['in', 'out'], POINTER(c_double), 'SpliceHeight' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetStories',
              ( ['in', 'out'], POINTER(c_int), 'NumberStories' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StoryNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StoryElevations' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StoryHeights' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'IsMasterStory' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SimilarToStory' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'SpliceAbove' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SpliceHeight' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'SetGUID',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'SetElevation',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'Elevation' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'SetHeight',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'Height' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'SetMasterStory',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'IsMasterStory' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'SetSimilarTo',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'SimilarToStory' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'SetSplice',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'SpliceAbove' ),
              ( ['in'], c_double, 'SpliceHeight' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'SetStories',
              ( ['in'], _midlSAFEARRAY(BSTR), 'StoryNames' ),
              ( ['in'], _midlSAFEARRAY(c_double), 'StoryElevations' ),
              ( ['in'], _midlSAFEARRAY(c_double), 'StoryHeights' ),
              ( ['in'], _midlSAFEARRAY(VARIANT_BOOL), 'IsMasterStory' ),
              ( ['in'], _midlSAFEARRAY(BSTR), 'SimilarToStory' ),
              ( ['in'], _midlSAFEARRAY(VARIANT_BOOL), 'SpliceAbove' ),
              ( ['in'], _midlSAFEARRAY(c_double), 'SpliceHeight' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'GetStories_2',
              ( ['in', 'out'], POINTER(c_double), 'BaseElevation' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberStories' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StoryNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StoryElevations' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StoryHeights' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'IsMasterStory' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SimilarToStory' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'SpliceAbove' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SpliceHeight' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Color' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'SetStories_2',
              ( ['in'], c_double, 'BaseElevation' ),
              ( ['in'], c_int, 'NumberStories' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StoryNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StoryHeights' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'IsMasterStory' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SimilarToStory' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'SpliceAbove' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SpliceHeight' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Color' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cStory implementation
##class cStory_Impl(object):
##    def GetElevation(self, Name):
##        '-no docstring-'
##        #return Elevation, pRetVal
##
##    def GetGUID(self, Name):
##        '-no docstring-'
##        #return GUID, pRetVal
##
##    def GetHeight(self, Name):
##        '-no docstring-'
##        #return Height, pRetVal
##
##    def GetMasterStory(self, Name):
##        '-no docstring-'
##        #return IsMasterStory, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetSimilarTo(self, Name):
##        '-no docstring-'
##        #return IsMasterStory, SimilarToStory, pRetVal
##
##    def GetSplice(self, Name):
##        '-no docstring-'
##        #return SpliceAbove, SpliceHeight, pRetVal
##
##    def GetStories(self):
##        '-no docstring-'
##        #return NumberStories, StoryNames, StoryElevations, StoryHeights, IsMasterStory, SimilarToStory, SpliceAbove, SpliceHeight, pRetVal
##
##    def SetGUID(self, Name, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetElevation(self, Name, Elevation):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetHeight(self, Name, Height):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetMasterStory(self, Name, IsMasterStory):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSimilarTo(self, Name, SimilarToStory):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSplice(self, Name, SpliceAbove, SpliceHeight):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetStories(self, StoryNames, StoryElevations, StoryHeights, IsMasterStory, SimilarToStory, SpliceAbove, SpliceHeight):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetStories_2(self):
##        '-no docstring-'
##        #return BaseElevation, NumberStories, StoryNames, StoryElevations, StoryHeights, IsMasterStory, SimilarToStory, SpliceAbove, SpliceHeight, Color, pRetVal
##
##    def SetStories_2(self, BaseElevation, NumberStories):
##        '-no docstring-'
##        #return StoryNames, StoryHeights, IsMasterStory, SimilarToStory, SpliceAbove, SpliceHeight, Color, pRetVal
##

class cBDRS_EUROCODE_ConcSlabFlex(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{069BCAA1-C6C8-42DC-8BE2-E9318593B689}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_EUROCODE_ConcSlabFlex._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_EUROCODE_ConcSlabFlex implementation
##class cBDRS_EUROCODE_ConcSlabFlex_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBDRS_EUROCODE_PCCompShr(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{F592D89A-63B5-45A6-A89D-07AB7861F5ED}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_EUROCODE_PCCompShr._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], BSTR, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_EUROCODE_PCCompShr implementation
##class cBDRS_EUROCODE_PCCompShr_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetCapacityParamString(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCapacityParamString(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cReleaseFrame(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{F5CC111D-D8D9-4AC0-B8F7-C6BAA52C5964}')
    _idlflags_ = ['dual', 'oleautomation']
cReleaseFrame._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetReleases',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'II' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'JJ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartValue' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndValue' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'SetReleases',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'II' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'JJ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartValue' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndValue' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cReleaseFrame implementation
##class cReleaseFrame_Impl(object):
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetReleases(self, Name):
##        '-no docstring-'
##        #return II, JJ, StartValue, EndValue, pRetVal
##
##    def SetReleases(self, Name):
##        '-no docstring-'
##        #return II, JJ, StartValue, EndValue, pRetVal
##

class cBDRS_EUROCODE_ConcSolidFlex(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{A531D40E-E72D-46AB-A08B-4BF9C468E0A3}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_EUROCODE_ConcSolidFlex._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_EUROCODE_ConcSolidFlex implementation
##class cBDRS_EUROCODE_ConcSolidFlex_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBDRM_AllCodes(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{6942BF01-DF5F-4DB7-BD68-BDEB848A15F6}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRM_AllCodes._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCheckType',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in', 'out'], POINTER(c_int), 'CheckType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRM_AllCodes implementation
##class cBDRM_AllCodes_Impl(object):
##    def GetCheckType(self, RequestName):
##        '-no docstring-'
##        #return CheckType, pRetVal
##

class cBDRS_IRC2011_ConcSlabFlex(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{239BF247-A93C-4C5E-9D4E-DCE164BDA89E}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_IRC2011_ConcSlabFlex._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_IRC2011_ConcSlabFlex implementation
##class cBDRS_IRC2011_ConcSlabFlex_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##


# values for enumeration 'eObjType'
eObjType_Point = 1
eObjType_Frame = 2
eObjType_Area = 3
eObjType_Solid = 6
eObjType = c_int # enum
class cCaseStaticNonlinearStaged(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{76AE9344-4C47-4D2A-9D67-50677DD107EF}')
    _idlflags_ = ['dual', 'oleautomation']
cCaseStaticNonlinearStaged._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetGeometricNonlinearity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NLGeomType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetHingeUnloading',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'UnloadType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetInitialCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'InitialCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetMaterialNonlinearity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'TimeDepMatProp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetResultsSaved',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'StagedSaveOption' ),
              ( ['in', 'out'], POINTER(c_int), 'StagedMinSteps' ),
              ( ['in', 'out'], POINTER(c_int), 'StagedMinStepsTD' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetSolControlParameters',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'MaxTotalSteps' ),
              ( ['in', 'out'], POINTER(c_int), 'MaxFailedSubSteps' ),
              ( ['in', 'out'], POINTER(c_int), 'MaxIterCS' ),
              ( ['in', 'out'], POINTER(c_int), 'MaxIterNR' ),
              ( ['in', 'out'], POINTER(c_double), 'TolConvD' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UseEventStepping' ),
              ( ['in', 'out'], POINTER(c_double), 'TolEventD' ),
              ( ['in', 'out'], POINTER(c_int), 'MaxLineSearchPerIter' ),
              ( ['in', 'out'], POINTER(c_double), 'TolLineSearch' ),
              ( ['in', 'out'], POINTER(c_double), 'LineSearchStepFact' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetStageData',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'Stage' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberOperations' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Operation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GroupName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Age' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetStageData_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'Stage' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberOperations' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Operation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Age' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetStageDefinitions',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberStages' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Duration' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Comment' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetStageDefinitions_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberStages' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Duration' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Output' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'OutputName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Comment' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetTargetForceParameters',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'TolConvF' ),
              ( ['in', 'out'], POINTER(c_int), 'MaxIter' ),
              ( ['in', 'out'], POINTER(c_double), 'AccelFact' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'NoStop' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'SetCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'SetGeometricNonlinearity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NLGeomType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'SetHingeUnloading',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'UnloadType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'SetInitialCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'InitialCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'SetMaterialNonlinearity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'TimeDepMatProp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'SetResultsSaved',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'StagedSaveOption' ),
              ( ['in', 'optional'], c_int, 'StagedMinSteps', 1 ),
              ( ['in', 'optional'], c_int, 'StagedMinStepsTD', 1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'SetSolControlParameters',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'MaxTotalSteps' ),
              ( ['in'], c_int, 'MaxFailedSubSteps' ),
              ( ['in'], c_int, 'MaxIterCS' ),
              ( ['in'], c_int, 'MaxIterNR' ),
              ( ['in'], c_double, 'TolConvD' ),
              ( ['in'], VARIANT_BOOL, 'UseEventStepping' ),
              ( ['in'], c_double, 'TolEventD' ),
              ( ['in'], c_int, 'MaxLineSearchPerIter' ),
              ( ['in'], c_double, 'TolLineSearch' ),
              ( ['in'], c_double, 'LineSearchStepFact' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'SetStageData',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Stage' ),
              ( ['in'], c_int, 'NumberOperations' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Operation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GroupName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Age' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'SetStageData_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Stage' ),
              ( ['in'], c_int, 'NumberOperations' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Operation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Age' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'SetStageDefinitions',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberStages' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Duration' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Comment' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'SetStageDefinitions_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberStages' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Duration' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Output' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'OutputName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Comment' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(23)], HRESULT, 'SetTargetForceParameters',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'TolConvF' ),
              ( ['in'], c_int, 'MaxIter' ),
              ( ['in'], c_double, 'AccelFact' ),
              ( ['in'], VARIANT_BOOL, 'NoStop' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(25)], HRESULT, 'GetMassSource',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'mSource' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(26)], HRESULT, 'SetMassSource',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'mSource' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(27)], HRESULT, 'GetStageData_2',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'Stage' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberOperations' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Operation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Age' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(28)], HRESULT, 'GetStageDefinitions_2',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberStages' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Duration' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Output' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'OutputName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Comment' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(29)], HRESULT, 'SetStageData_2',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Stage' ),
              ( ['in'], c_int, 'NumberOperations' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Operation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Age' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(30)], HRESULT, 'SetStageDefinitions_2',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberStages' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Duration' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Output' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'OutputName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Comment' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(24)], HRESULT, 'GetValidOperations',
              ( ['in', 'out'], POINTER(c_int), 'NumberOperations' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'OperationFlag' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cCaseStaticNonlinearStaged implementation
##class cCaseStaticNonlinearStaged_Impl(object):
##    def GetGeometricNonlinearity(self, Name):
##        '-no docstring-'
##        #return NLGeomType, pRetVal
##
##    def GetHingeUnloading(self, Name):
##        '-no docstring-'
##        #return UnloadType, pRetVal
##
##    def GetInitialCase(self, Name):
##        '-no docstring-'
##        #return InitialCase, pRetVal
##
##    def GetMaterialNonlinearity(self, Name):
##        '-no docstring-'
##        #return TimeDepMatProp, pRetVal
##
##    def GetResultsSaved(self, Name):
##        '-no docstring-'
##        #return StagedSaveOption, StagedMinSteps, StagedMinStepsTD, pRetVal
##
##    def GetSolControlParameters(self, Name):
##        '-no docstring-'
##        #return MaxTotalSteps, MaxFailedSubSteps, MaxIterCS, MaxIterNR, TolConvD, UseEventStepping, TolEventD, MaxLineSearchPerIter, TolLineSearch, LineSearchStepFact, pRetVal
##
##    def GetStageData(self, Name):
##        '-no docstring-'
##        #return Stage, NumberOperations, Operation, GroupName, Age, LoadType, LoadName, SF, pRetVal
##
##    def GetStageData_1(self, Name):
##        '-no docstring-'
##        #return Stage, NumberOperations, Operation, ObjectType, ObjectName, Age, MyType, MyName, SF, pRetVal
##
##    def GetStageDefinitions(self, Name):
##        '-no docstring-'
##        #return NumberStages, Duration, Comment, pRetVal
##
##    def GetStageDefinitions_1(self, Name):
##        '-no docstring-'
##        #return NumberStages, Duration, Output, OutputName, Comment, pRetVal
##
##    def GetTargetForceParameters(self, Name):
##        '-no docstring-'
##        #return TolConvF, MaxIter, AccelFact, NoStop, pRetVal
##
##    def SetCase(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetGeometricNonlinearity(self, Name, NLGeomType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetHingeUnloading(self, Name, UnloadType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetInitialCase(self, Name, InitialCase):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetMaterialNonlinearity(self, Name, TimeDepMatProp):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetResultsSaved(self, Name, StagedSaveOption, StagedMinSteps, StagedMinStepsTD):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSolControlParameters(self, Name, MaxTotalSteps, MaxFailedSubSteps, MaxIterCS, MaxIterNR, TolConvD, UseEventStepping, TolEventD, MaxLineSearchPerIter, TolLineSearch, LineSearchStepFact):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetStageData(self, Name, Stage, NumberOperations):
##        '-no docstring-'
##        #return Operation, GroupName, Age, LoadType, LoadName, SF, pRetVal
##
##    def SetStageData_1(self, Name, Stage, NumberOperations):
##        '-no docstring-'
##        #return Operation, ObjectType, ObjectName, Age, MyType, MyName, SF, pRetVal
##
##    def SetStageDefinitions(self, Name, NumberStages):
##        '-no docstring-'
##        #return Duration, Comment, pRetVal
##
##    def SetStageDefinitions_1(self, Name, NumberStages):
##        '-no docstring-'
##        #return Duration, Output, OutputName, Comment, pRetVal
##
##    def SetTargetForceParameters(self, Name, TolConvF, MaxIter, AccelFact, NoStop):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetMassSource(self, Name):
##        '-no docstring-'
##        #return mSource, pRetVal
##
##    def SetMassSource(self, Name, mSource):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetStageData_2(self, Name):
##        '-no docstring-'
##        #return Stage, NumberOperations, Operation, ObjectType, ObjectName, Age, MyType, MyName, SF, pRetVal
##
##    def GetStageDefinitions_2(self, Name):
##        '-no docstring-'
##        #return NumberStages, Duration, Output, OutputName, Comment, pRetVal
##
##    def SetStageData_2(self, Name, Stage, NumberOperations):
##        '-no docstring-'
##        #return Operation, ObjectType, ObjectName, Age, MyType, MyName, SF, pRetVal
##
##    def SetStageDefinitions_2(self, Name, NumberStages):
##        '-no docstring-'
##        #return Duration, Output, OutputName, Comment, pRetVal
##
##    def GetValidOperations(self):
##        '-no docstring-'
##        #return NumberOperations, OperationFlag, pRetVal
##

class cPluginCallback(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{9A17094D-D4FE-4E78-9331-92704188E782}')
    _idlflags_ = ['dual', 'oleautomation']
cPluginCallback._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'ErrorFlag',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Finish',
              ( ['in'], c_int, 'iVal' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'Finished',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for cPluginCallback implementation
##class cPluginCallback_Impl(object):
##    @property
##    def ErrorFlag(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def Finish(self, iVal):
##        '-no docstring-'
##        #return 
##
##    @property
##    def Finished(self):
##        '-no docstring-'
##        #return pRetVal
##

class cSolidElm(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{F3C5C151-5C0B-40B1-97E6-28932F2EEF06}')
    _idlflags_ = ['dual', 'oleautomation']
cSolidElm._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetLoadGravity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SolidName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z' ),
              ( ['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetLoadPorePressure',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SolidName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName' ),
              ( ['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetLoadStrain',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SolidName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Component' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName' ),
              ( ['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetLoadSurfacePressure',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SolidName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Face' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName' ),
              ( ['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetLoadTemperature',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SolidName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName' ),
              ( ['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetLocalAxes',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'A' ),
              ( ['in', 'out'], POINTER(c_double), 'B' ),
              ( ['in', 'out'], POINTER(c_double), 'C' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetMatTemp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Temp' ),
              ( ['in', 'out'], POINTER(BSTR), 'PatternName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetObj',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'Obj' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetPoints',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Point' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetProperty',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'GetTransformationMatrix',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cSolidElm implementation
##class cSolidElm_Impl(object):
##    def Count(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetLoadGravity(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberItems, SolidName, LoadPat, CSys, X, Y, Z, pRetVal
##
##    def GetLoadPorePressure(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberItems, SolidName, LoadPat, Value, PatternName, pRetVal
##
##    def GetLoadStrain(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberItems, SolidName, LoadPat, Component, Value, PatternName, pRetVal
##
##    def GetLoadSurfacePressure(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberItems, SolidName, LoadPat, Face, Value, PatternName, pRetVal
##
##    def GetLoadTemperature(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberItems, SolidName, LoadPat, Value, PatternName, pRetVal
##
##    def GetLocalAxes(self, Name):
##        '-no docstring-'
##        #return A, B, C, pRetVal
##
##    def GetMatTemp(self, Name):
##        '-no docstring-'
##        #return Temp, PatternName, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetObj(self, Name):
##        '-no docstring-'
##        #return Obj, pRetVal
##
##    def GetPoints(self, Name):
##        '-no docstring-'
##        #return Point, pRetVal
##
##    def GetProperty(self, Name):
##        '-no docstring-'
##        #return PropName, pRetVal
##
##    def GetTransformationMatrix(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##

class cDStItalianNTC2018S(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{792E02E2-8271-480F-B692-2B708F5D86C9}')
    _idlflags_ = ['dual', 'oleautomation']
cDStItalianNTC2018S._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'textValue' ),
              ( ['in', 'out'], POINTER(c_double), 'numericValue' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'textValue' ),
              ( ['in', 'out'], POINTER(c_double), 'numericValue' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], BSTR, 'textValue' ),
              ( ['in'], c_double, 'numericValue' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], BSTR, 'textValue' ),
              ( ['in'], c_double, 'numericValue' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDStItalianNTC2018S implementation
##class cDStItalianNTC2018S_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return textValue, numericValue, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return textValue, numericValue, pRetVal
##
##    def SetOverwrite(self, Name, Item, textValue, numericValue, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, textValue, numericValue):
##        '-no docstring-'
##        #return pRetVal
##

class cDCoCSA_A23_3_04(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{1F509530-AA70-4F33-A274-466387C3D385}')
    _idlflags_ = ['dual', 'oleautomation']
cDCoCSA_A23_3_04._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDCoCSA_A23_3_04 implementation
##class cDCoCSA_A23_3_04_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##


# values for enumeration 'eWallSpandrelRebarLayerType'
eWallSpandrelRebarLayerType_Horizontal_Top_Total = 1
eWallSpandrelRebarLayerType_Horizontal_Bottom_Total = 2
eWallSpandrelRebarLayerType_Horizontal_Distributed_Eachface = 3
eWallSpandrelRebarLayerType_Vertical_Ties_Distributed = 4
eWallSpandrelRebarLayerType_Diagonal_Each = 5
eWallSpandrelRebarLayerType = c_int # enum
class cOAPI(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{D17CCBBE-6665-4340-8FD7-9404E1C2CAD8}')
    _idlflags_ = ['dual', 'oleautomation']
class cSapModel(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{79B05440-8BB2-4379-B5AB-503A0D611E3B}')
    _idlflags_ = ['dual', 'oleautomation']

# values for enumeration 'eUnits'
eUnits_lb_in_F = 1
eUnits_lb_ft_F = 2
eUnits_kip_in_F = 3
eUnits_kip_ft_F = 4
eUnits_kN_mm_C = 5
eUnits_kN_m_C = 6
eUnits_kgf_mm_C = 7
eUnits_kgf_m_C = 8
eUnits_N_mm_C = 9
eUnits_N_m_C = 10
eUnits_Ton_mm_C = 11
eUnits_Ton_m_C = 12
eUnits_kN_cm_C = 13
eUnits_kgf_cm_C = 14
eUnits_N_cm_C = 15
eUnits_Ton_cm_C = 16
eUnits = c_int # enum
cOAPI._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'ApplicationExit',
              ( ['in'], VARIANT_BOOL, 'FileSave' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'SapModel',
              ( ['out', 'retval'], POINTER(POINTER(cSapModel)), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetOAPIVersionNumber',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'Hide',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'Unhide',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'Visible',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'SetAsActiveObject',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'UnsetAsActiveObject',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'ApplicationStart',
              ( ['in', 'optional'], eUnits, 'Units', 3 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Visible', True ),
              ( ['in', 'optional'], BSTR, 'FileName', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'ApplicationStart_2',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cOAPI implementation
##class cOAPI_Impl(object):
##    def ApplicationExit(self, FileSave):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SapModel(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetOAPIVersionNumber(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def Hide(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def Unhide(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def Visible(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetAsActiveObject(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def UnsetAsActiveObject(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def ApplicationStart(self, Units, Visible, FileName):
##        '-no docstring-'
##        #return pRetVal
##
##    def ApplicationStart_2(self):
##        '-no docstring-'
##        #return pRetVal
##

class cBDRS_IRC2011_ConcSlabShr(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{FF33F8D4-E5B5-48CE-B9D1-40AFCD717C29}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_IRC2011_ConcSlabShr._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], BSTR, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_IRC2011_ConcSlabShr implementation
##class cBDRS_IRC2011_ConcSlabShr_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetCapacityParamString(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCapacityParamString(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cLinkElm(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{BD697A15-2B6B-4179-A390-37E43139D0D5}')
    _idlflags_ = ['dual', 'oleautomation']
cLinkElm._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetLocalAxes',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Ang' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetObj',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'Obj' ),
              ( ['in', 'out'], POINTER(c_int), 'ObjType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetPoints',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'Point1' ),
              ( ['in', 'out'], POINTER(BSTR), 'Point2' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetProperty',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetTransformationMatrix',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetLoadDeformation',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LinkName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF4' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF5' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF6' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3' ),
              ( ['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetLoadGravity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LinkName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z' ),
              ( ['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetLoadTargetForce',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LinkName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF4' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF5' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF6' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'P' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T4' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T5' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T6' ),
              ( ['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetPropertyFD',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cLinkElm implementation
##class cLinkElm_Impl(object):
##    def Count(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetLocalAxes(self, Name):
##        '-no docstring-'
##        #return Ang, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetObj(self, Name):
##        '-no docstring-'
##        #return Obj, ObjType, pRetVal
##
##    def GetPoints(self, Name):
##        '-no docstring-'
##        #return Point1, Point2, pRetVal
##
##    def GetProperty(self, Name):
##        '-no docstring-'
##        #return PropName, pRetVal
##
##    def GetTransformationMatrix(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetLoadDeformation(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberItems, LinkName, LoadPat, DOF1, DOF2, DOF3, DOF4, DOF5, DOF6, U1, U2, U3, R1, R2, R3, pRetVal
##
##    def GetLoadGravity(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberItems, LinkName, LoadPat, CSys, X, Y, Z, pRetVal
##
##    def GetLoadTargetForce(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberItems, LinkName, LoadPat, DOF1, DOF2, DOF3, DOF4, DOF5, DOF6, P, V2, V3, T, M2, M3, T1, T2, T3, T4, T5, T6, pRetVal
##
##    def GetPropertyFD(self, Name):
##        '-no docstring-'
##        #return PropName, pRetVal
##

class Library(object):
    'CSi Application Programming Interface (API) v1'
    name = 'CSiAPIv1'
    _reg_typelib_ = ('{F896D55D-8BDF-4232-B9AB-4B210897A81D}', 1, 0)

class cAnalyze(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{93CE34E7-2FA4-47B8-BCF2-7E626E27243D}')
    _idlflags_ = ['dual', 'oleautomation']
class cAreaElm(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{7AC15234-DCE1-4B8A-A6A6-8FD62161492E}')
    _idlflags_ = ['dual', 'oleautomation']
class cAreaObj(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{88181F21-D8CE-4064-A59A-EAA8D048B4A0}')
    _idlflags_ = ['dual', 'oleautomation']
class cConstraint(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{D02F7E2C-6D00-44C8-9D81-9619418C0BA5}')
    _idlflags_ = ['dual', 'oleautomation']
class cDesignConcrete(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{F6B09100-0436-4718-A7A3-A2D1CC6ECB9C}')
    _idlflags_ = ['dual', 'oleautomation']
class cDesignSteel(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{8241E5AE-C355-4DC3-A678-B8F0CA0F0545}')
    _idlflags_ = ['dual', 'oleautomation']
class cEditFrame(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{076D73CC-A4BF-4D85-81E4-374283BAC241}')
    _idlflags_ = ['dual', 'oleautomation']
class cEditGeneral(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{B3347F9A-D0A8-4EE1-AF9C-A96DBB4D4E8A}')
    _idlflags_ = ['dual', 'oleautomation']
class cEditPoint(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{67761402-B408-4B43-A72E-4A434C5EAE78}')
    _idlflags_ = ['dual', 'oleautomation']
class cFile(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{6F4AAD68-9CA3-44C7-80F9-691B1B67814A}')
    _idlflags_ = ['dual', 'oleautomation']
class cFrameObj(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{6E3AB67B-CAE5-45EA-AB8B-43D1B34A8B07}')
    _idlflags_ = ['dual', 'oleautomation']
class cGenDispl(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{1FD84FCB-53A4-49D1-8DA8-F7CF939DF3C4}')
    _idlflags_ = ['dual', 'oleautomation']
class cLinkObj(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{AA55E1FF-6F61-4B4B-91A4-DCCA32403DAC}')
    _idlflags_ = ['dual', 'oleautomation']
class cLoadCases(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{48559B52-7B96-4D5A-9307-4B7B803AB80C}')
    _idlflags_ = ['dual', 'oleautomation']
class cLoadPatterns(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{CDE2D55F-244D-4409-B685-4CDFC91FF673}')
    _idlflags_ = ['dual', 'oleautomation']
class cOptions(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{0E6456D8-9BCD-47B8-BC37-9C15A4BEA42B}')
    _idlflags_ = ['dual', 'oleautomation']
class cPattern(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{FC38D115-EB54-487F-90E8-0CE2B550246A}')
    _idlflags_ = ['dual', 'oleautomation']
class cPointElm(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{A881024C-1A34-4426-9C43-0BDD08B8A891}')
    _idlflags_ = ['dual', 'oleautomation']
class cPointObj(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{1EEF88A6-6185-4E91-B36C-8C85B669A043}')
    _idlflags_ = ['dual', 'oleautomation']
class cPropArea(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{6673797D-EB95-4305-8EC2-F39117315758}')
    _idlflags_ = ['dual', 'oleautomation']
class cPropLink(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{BB2E5572-CC11-4A86-B04B-CBA9EDC47D2A}')
    _idlflags_ = ['dual', 'oleautomation']
class cPropMaterial(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{FC7F20CF-0341-4DD3-ABFE-99A6D737D215}')
    _idlflags_ = ['dual', 'oleautomation']
class cPropTendon(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{D19672C9-812D-49C5-B219-9FFB0A425248}')
    _idlflags_ = ['dual', 'oleautomation']
class cSelect(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{A58E86BE-C132-4731-8AD9-1D75A6F7A687}')
    _idlflags_ = ['dual', 'oleautomation']
class cTendonObj(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{EFC6075B-4320-4A06-9503-C86B0432E552}')
    _idlflags_ = ['dual', 'oleautomation']
class cView(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{8A30ECBA-3CC3-4C96-99D3-096DC9C4E889}')
    _idlflags_ = ['dual', 'oleautomation']
class cDesignResults(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{D29F9731-44C6-4BF9-8BB2-CA8710AC3AEE}')
    _idlflags_ = ['dual', 'oleautomation']
class cCableObj(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{A2DEFA8C-5616-4063-A294-1E1021BE672D}')
    _idlflags_ = ['dual', 'oleautomation']
class cEditSolid(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{632E4661-0BA0-4E49-BAB4-1C514156408C}')
    _idlflags_ = ['dual', 'oleautomation']
class cGenRefLine(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{A0E4BE4E-B7CC-477B-AC41-FEB170F47D05}')
    _idlflags_ = ['dual', 'oleautomation']
class cNamedAssign(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{3213BAA7-B279-40FD-B8DB-DF71F214C15E}')
    _idlflags_ = ['dual', 'oleautomation']
class cNamedDisplay(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{4F4AE5FA-0E58-4EFD-A7F2-89185F823720}')
    _idlflags_ = ['dual', 'oleautomation']
class cPlaneElm(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{EC95AF57-FF9D-4C55-BE54-216B19C601EC}')
    _idlflags_ = ['dual', 'oleautomation']
class cPropCable(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{908C9041-7848-4434-BC5A-69B65243D133}')
    _idlflags_ = ['dual', 'oleautomation']
class cPropSolid(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{56EECA23-1EA6-467E-95F3-3CC0DFEB6422}')
    _idlflags_ = ['dual', 'oleautomation']
class cSectionCut(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{5DBBE094-6061-47FF-989D-4C4BD675586B}')
    _idlflags_ = ['dual', 'oleautomation']
class cSolidObj(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{AFC37C37-F86E-4D81-AC37-6B7BAA247087}')
    _idlflags_ = ['dual', 'oleautomation']
class cMassSource(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{3C2FE50E-0C6B-43D3-B66F-5E8239D20609}')
    _idlflags_ = ['dual', 'oleautomation']
class cScheduler(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{A8F50A3F-FDBD-4875-A586-F4D4096BD626}')
    _idlflags_ = ['dual', 'oleautomation']
class cNamedSet(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{3A7920DC-3E71-40B0-97C8-C11B4623739F}')
    _idlflags_ = ['dual', 'oleautomation']
class cBridgeAdvancedSuper(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{9ED8E7BF-959E-4B52-99FE-DC17C94CF4DB}')
    _idlflags_ = ['dual', 'oleautomation']
class cBridgeDesign(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{4FB6BF26-06EC-4CC0-A26B-9CA8A44C9332}')
    _idlflags_ = ['dual', 'oleautomation']
class cBridge(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{46084C12-CA93-4B32-9FFB-7166F8369F46}')
    _idlflags_ = ['dual', 'oleautomation']
class cBridgeModeler(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{38C414BA-DC50-4464-8ED4-6FFD98ED144B}')
    _idlflags_ = ['dual', 'oleautomation']
class cDesignCompositeBeam(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{87CCAE5C-80AE-4949-AFE6-A2557DAF3F1E}')
    _idlflags_ = ['dual', 'oleautomation']
class cGridSys(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{6F6D7D3D-1963-4E90-9B1C-31ADE70FCDF2}')
    _idlflags_ = ['dual', 'oleautomation']
class cTower(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{F78010D6-809F-4062-B81D-49D6117FB1EA}')
    _idlflags_ = ['dual', 'oleautomation']

# values for enumeration 'eForce'
eForce_NotApplicable = 0
eForce_lb = 1
eForce_kip = 2
eForce_N = 3
eForce_kN = 4
eForce_kgf = 5
eForce_tonf = 6
eForce = c_int # enum

# values for enumeration 'eLength'
eLength_NotApplicable = 0
eLength_inch = 1
eLength_ft = 2
eLength_micron = 3
eLength_mm = 4
eLength_cm = 5
eLength_m = 6
eLength = c_int # enum

# values for enumeration 'eTemperature'
eTemperature_NotApplicable = 0
eTemperature_F = 1
eTemperature_C = 2
eTemperature = c_int # enum
class cDiaphragm(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{F15F679A-D865-4791-8C33-25B02FD68616}')
    _idlflags_ = ['dual', 'oleautomation']
class cPierLabel(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{8E3511C9-062D-4EEA-9995-8E1D3B35269F}')
    _idlflags_ = ['dual', 'oleautomation']
class cSpandrelLabel(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{D9783803-4CB0-4E40-8E61-63EF894F8C1C}')
    _idlflags_ = ['dual', 'oleautomation']
class cDetailing(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{38FD1A70-1447-48B0-A3F5-A1254CEFB34F}')
    _idlflags_ = ['dual', 'oleautomation']
class cPropPointSpring(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{CA43AFAD-6DCA-46E6-A9D7-EAF64B5C6FF9}')
    _idlflags_ = ['dual', 'oleautomation']
class cPropLineSpring(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{FE9A1E87-A858-4C72-937F-DDD1C924E8F5}')
    _idlflags_ = ['dual', 'oleautomation']
class cPropAreaSpring(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{82AA943A-C36B-4330-8715-179CC028F7E6}')
    _idlflags_ = ['dual', 'oleautomation']
class cDatabaseTables(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{E761C67F-FB0A-4422-995B-56A429CBA99E}')
    _idlflags_ = ['dual', 'oleautomation']
class cDesignAluminum(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{AFB01B29-D654-44E5-A1FD-3609CD87A040}')
    _idlflags_ = ['dual', 'oleautomation']
cSapModel._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Analyze',
              ( ['out', 'retval'], POINTER(POINTER(cAnalyze)), 'pRetVal' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'AreaElm',
              ( ['out', 'retval'], POINTER(POINTER(cAreaElm)), 'pRetVal' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'AreaObj',
              ( ['out', 'retval'], POINTER(POINTER(cAreaObj)), 'pRetVal' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'ConstraintDef',
              ( ['out', 'retval'], POINTER(POINTER(cConstraint)), 'pRetVal' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'DesignConcrete',
              ( ['out', 'retval'], POINTER(POINTER(cDesignConcrete)), 'pRetVal' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'DesignSteel',
              ( ['out', 'retval'], POINTER(POINTER(cDesignSteel)), 'pRetVal' )),
    COMMETHOD([dispid(9), 'propget'], HRESULT, 'EditArea',
              ( ['out', 'retval'], POINTER(POINTER(cEditArea)), 'pRetVal' )),
    COMMETHOD([dispid(10), 'propget'], HRESULT, 'EditFrame',
              ( ['out', 'retval'], POINTER(POINTER(cEditFrame)), 'pRetVal' )),
    COMMETHOD([dispid(11), 'propget'], HRESULT, 'EditGeneral',
              ( ['out', 'retval'], POINTER(POINTER(cEditGeneral)), 'pRetVal' )),
    COMMETHOD([dispid(12), 'propget'], HRESULT, 'EditPoint',
              ( ['out', 'retval'], POINTER(POINTER(cEditPoint)), 'pRetVal' )),
    COMMETHOD([dispid(13), 'propget'], HRESULT, 'File',
              ( ['out', 'retval'], POINTER(POINTER(cFile)), 'pRetVal' )),
    COMMETHOD([dispid(14), 'propget'], HRESULT, 'FrameObj',
              ( ['out', 'retval'], POINTER(POINTER(cFrameObj)), 'pRetVal' )),
    COMMETHOD([dispid(15), 'propget'], HRESULT, 'Func',
              ( ['out', 'retval'], POINTER(POINTER(cFunction)), 'pRetVal' )),
    COMMETHOD([dispid(16), 'propget'], HRESULT, 'GDispl',
              ( ['out', 'retval'], POINTER(POINTER(cGenDispl)), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'GetDatabaseUnits',
              ( ['out', 'retval'], POINTER(eUnits), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'GetMergeTol',
              ( ['in', 'out'], POINTER(c_double), 'MergeTol' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'GetModelFilename',
              ( ['in', 'optional'], VARIANT_BOOL, 'IncludePath', True ),
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'GetModelFilepath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'GetModelIsLocked',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'GetPresentCoordSystem',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(23)], HRESULT, 'GetPresentUnits',
              ( ['out', 'retval'], POINTER(eUnits), 'pRetVal' )),
    COMMETHOD([dispid(98)], HRESULT, 'GetProgramInfo',
              ( ['in', 'out'], POINTER(BSTR), 'ProgramName' ),
              ( ['in', 'out'], POINTER(BSTR), 'ProgramVersion' ),
              ( ['in', 'out'], POINTER(BSTR), 'ProgramLevel' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(24)], HRESULT, 'GetProjectInfo',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Item' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Data' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(26)], HRESULT, 'GetVersion',
              ( ['in', 'out'], POINTER(BSTR), 'Version' ),
              ( ['in', 'out'], POINTER(c_double), 'MyVersionNumber' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(27), 'propget'], HRESULT, 'GroupDef',
              ( ['out', 'retval'], POINTER(POINTER(cGroup)), 'pRetVal' )),
    COMMETHOD([dispid(28)], HRESULT, 'InitializeNewModel',
              ( ['in', 'optional'], eUnits, 'Units', 3 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(29), 'propget'], HRESULT, 'LineElm',
              ( ['out', 'retval'], POINTER(POINTER(cLineElm)), 'pRetVal' )),
    COMMETHOD([dispid(30), 'propget'], HRESULT, 'LinkElm',
              ( ['out', 'retval'], POINTER(POINTER(cLinkElm)), 'pRetVal' )),
    COMMETHOD([dispid(31), 'propget'], HRESULT, 'LinkObj',
              ( ['out', 'retval'], POINTER(POINTER(cLinkObj)), 'pRetVal' )),
    COMMETHOD([dispid(32), 'propget'], HRESULT, 'LoadCases',
              ( ['out', 'retval'], POINTER(POINTER(cLoadCases)), 'pRetVal' )),
    COMMETHOD([dispid(33), 'propget'], HRESULT, 'LoadPatterns',
              ( ['out', 'retval'], POINTER(POINTER(cLoadPatterns)), 'pRetVal' )),
    COMMETHOD([dispid(34), 'propget'], HRESULT, 'Options',
              ( ['out', 'retval'], POINTER(POINTER(cOptions)), 'pRetVal' )),
    COMMETHOD([dispid(35), 'propget'], HRESULT, 'PatternDef',
              ( ['out', 'retval'], POINTER(POINTER(cPattern)), 'pRetVal' )),
    COMMETHOD([dispid(36), 'propget'], HRESULT, 'PointElm',
              ( ['out', 'retval'], POINTER(POINTER(cPointElm)), 'pRetVal' )),
    COMMETHOD([dispid(37), 'propget'], HRESULT, 'PointObj',
              ( ['out', 'retval'], POINTER(POINTER(cPointObj)), 'pRetVal' )),
    COMMETHOD([dispid(38), 'propget'], HRESULT, 'PropArea',
              ( ['out', 'retval'], POINTER(POINTER(cPropArea)), 'pRetVal' )),
    COMMETHOD([dispid(39), 'propget'], HRESULT, 'PropFrame',
              ( ['out', 'retval'], POINTER(POINTER(cPropFrame)), 'pRetVal' )),
    COMMETHOD([dispid(40), 'propget'], HRESULT, 'PropLink',
              ( ['out', 'retval'], POINTER(POINTER(cPropLink)), 'pRetVal' )),
    COMMETHOD([dispid(41), 'propget'], HRESULT, 'PropMaterial',
              ( ['out', 'retval'], POINTER(POINTER(cPropMaterial)), 'pRetVal' )),
    COMMETHOD([dispid(42), 'propget'], HRESULT, 'PropRebar',
              ( ['out', 'retval'], POINTER(POINTER(cPropRebar)), 'pRetVal' )),
    COMMETHOD([dispid(43), 'propget'], HRESULT, 'PropTendon',
              ( ['out', 'retval'], POINTER(POINTER(cPropTendon)), 'pRetVal' )),
    COMMETHOD([dispid(44), 'propget'], HRESULT, 'RespCombo',
              ( ['out', 'retval'], POINTER(POINTER(cCombo)), 'pRetVal' )),
    COMMETHOD([dispid(45), 'propget'], HRESULT, 'Results',
              ( ['out', 'retval'], POINTER(POINTER(cAnalysisResults)), 'pRetVal' )),
    COMMETHOD([dispid(46), 'propget'], HRESULT, 'SelectObj',
              ( ['out', 'retval'], POINTER(POINTER(cSelect)), 'pRetVal' )),
    COMMETHOD([dispid(47)], HRESULT, 'SetMergeTol',
              ( ['in'], c_double, 'MergeTol' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(48)], HRESULT, 'SetModelIsLocked',
              ( ['in'], VARIANT_BOOL, 'Lockit' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(50)], HRESULT, 'SetPresentUnits',
              ( ['in'], eUnits, 'Units' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(51)], HRESULT, 'SetProjectInfo',
              ( ['in'], BSTR, 'Item' ),
              ( ['in'], BSTR, 'Data' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(53), 'propget'], HRESULT, 'TendonObj',
              ( ['out', 'retval'], POINTER(POINTER(cTendonObj)), 'pRetVal' )),
    COMMETHOD([dispid(54), 'propget'], HRESULT, 'View',
              ( ['out', 'retval'], POINTER(POINTER(cView)), 'pRetVal' )),
    COMMETHOD([dispid(97), 'propget'], HRESULT, 'DesignResults',
              ( ['out', 'retval'], POINTER(POINTER(cDesignResults)), 'pRetVal' )),
    COMMETHOD([dispid(49)], HRESULT, 'SetPresentCoordSystem',
              ( ['in'], BSTR, 'CSys' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(25)], HRESULT, 'GetUserComment',
              ( ['in', 'out'], POINTER(BSTR), 'Comment' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(52)], HRESULT, 'SetUserComment',
              ( ['in'], BSTR, 'Comment' ),
              ( ['in', 'optional'], c_int, 'NumLines', 1 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'CoordSys',
              ( ['out', 'retval'], POINTER(POINTER(cCoordSys)), 'pRetVal' )),
    COMMETHOD([dispid(65), 'propget'], HRESULT, 'CableObj',
              ( ['out', 'retval'], POINTER(POINTER(cCableObj)), 'pRetVal' )),
    COMMETHOD([dispid(68), 'propget'], HRESULT, 'EditSolid',
              ( ['out', 'retval'], POINTER(POINTER(cEditSolid)), 'pRetVal' )),
    COMMETHOD([dispid(69), 'propget'], HRESULT, 'ExternalAnalysisResults',
              ( ['out', 'retval'], POINTER(POINTER(cExternalAnalysisResults)), 'pRetVal' )),
    COMMETHOD([dispid(70), 'propget'], HRESULT, 'GenRefLine',
              ( ['out', 'retval'], POINTER(POINTER(cGenRefLine)), 'pRetVal' )),
    COMMETHOD([dispid(71), 'propget'], HRESULT, 'NamedAssign',
              ( ['out', 'retval'], POINTER(POINTER(cNamedAssign)), 'pRetVal' )),
    COMMETHOD([dispid(91), 'propget'], HRESULT, 'NamedDisplay',
              ( ['out', 'retval'], POINTER(POINTER(cNamedDisplay)), 'pRetVal' )),
    COMMETHOD([dispid(72), 'propget'], HRESULT, 'PlaneElm',
              ( ['out', 'retval'], POINTER(POINTER(cPlaneElm)), 'pRetVal' )),
    COMMETHOD([dispid(73), 'propget'], HRESULT, 'PropCable',
              ( ['out', 'retval'], POINTER(POINTER(cPropCable)), 'pRetVal' )),
    COMMETHOD([dispid(74), 'propget'], HRESULT, 'PropSolid',
              ( ['out', 'retval'], POINTER(POINTER(cPropSolid)), 'pRetVal' )),
    COMMETHOD([dispid(75), 'propget'], HRESULT, 'SectCut',
              ( ['out', 'retval'], POINTER(POINTER(cSectionCut)), 'pRetVal' )),
    COMMETHOD([dispid(76), 'propget'], HRESULT, 'SolidElm',
              ( ['out', 'retval'], POINTER(POINTER(cSolidElm)), 'pRetVal' )),
    COMMETHOD([dispid(77), 'propget'], HRESULT, 'SolidObj',
              ( ['out', 'retval'], POINTER(POINTER(cSolidObj)), 'pRetVal' )),
    COMMETHOD([dispid(78), 'propget'], HRESULT, 'SourceMass',
              ( ['out', 'retval'], POINTER(POINTER(cMassSource)), 'pRetVal' )),
    COMMETHOD([dispid(83), 'propget'], HRESULT, 'Scheduler',
              ( ['out', 'retval'], POINTER(POINTER(cScheduler)), 'pRetVal' )),
    COMMETHOD([dispid(84)], HRESULT, 'SetStringsExtendedEntityData',
              ( ['in'], BSTR, 'appName' ),
              ( ['in'], BSTR, 'key' ),
              ( ['in'], c_int, 'numberValues' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'values' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(85)], HRESULT, 'GetKeysWithStringsExtendedEntityData',
              ( ['in'], BSTR, 'appName' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberKeys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyKeys' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(86)], HRESULT, 'GetKeyStringsExtendedEntityData',
              ( ['in'], BSTR, 'appName' ),
              ( ['in'], BSTR, 'key' ),
              ( ['in', 'out'], POINTER(c_int), 'numberValues' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'values' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(87), 'propget'], HRESULT, 'NamedSet',
              ( ['out', 'retval'], POINTER(POINTER(cNamedSet)), 'pRetVal' )),
    COMMETHOD([dispid(79), 'propget'], HRESULT, 'BridgeAdvancedSuper',
              ( ['out', 'retval'], POINTER(POINTER(cBridgeAdvancedSuper)), 'pRetVal' )),
    COMMETHOD([dispid(80), 'propget'], HRESULT, 'BridgeDesign',
              ( ['out', 'retval'], POINTER(POINTER(cBridgeDesign)), 'pRetVal' )),
    COMMETHOD([dispid(81), 'propget'], HRESULT, 'BridgeObj',
              ( ['out', 'retval'], POINTER(POINTER(cBridge)), 'pRetVal' )),
    COMMETHOD([dispid(82), 'propget'], HRESULT, 'BridgeModeler',
              ( ['out', 'retval'], POINTER(POINTER(cBridgeModeler)), 'pRetVal' )),
    COMMETHOD([dispid(8), 'propget'], HRESULT, 'DesignCompositeBeam',
              ( ['out', 'retval'], POINTER(POINTER(cDesignCompositeBeam)), 'pRetVal' )),
    COMMETHOD([dispid(55), 'propget'], HRESULT, 'GridSys',
              ( ['out', 'retval'], POINTER(POINTER(cGridSys)), 'pRetVal' )),
    COMMETHOD([dispid(56), 'propget'], HRESULT, 'Story',
              ( ['out', 'retval'], POINTER(POINTER(cStory)), 'pRetVal' )),
    COMMETHOD([dispid(57), 'propget'], HRESULT, 'Tower',
              ( ['out', 'retval'], POINTER(POINTER(cTower)), 'pRetVal' )),
    COMMETHOD([dispid(58)], HRESULT, 'GetDatabaseUnits_2',
              ( ['in', 'out'], POINTER(eForce), 'forceUnits' ),
              ( ['in', 'out'], POINTER(eLength), 'lengthUnits' ),
              ( ['in', 'out'], POINTER(eTemperature), 'temperatureUnits' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(59)], HRESULT, 'GetPresentUnits_2',
              ( ['in', 'out'], POINTER(eForce), 'forceUnits' ),
              ( ['in', 'out'], POINTER(eLength), 'lengthUnits' ),
              ( ['in', 'out'], POINTER(eTemperature), 'temperatureUnits' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(60)], HRESULT, 'SetPresentUnits_2',
              ( ['in'], eForce, 'forceUnits' ),
              ( ['in'], eLength, 'lengthUnits' ),
              ( ['in'], eTemperature, 'temperatureUnits' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(61), 'propget'], HRESULT, 'Diaphragm',
              ( ['out', 'retval'], POINTER(POINTER(cDiaphragm)), 'pRetVal' )),
    COMMETHOD([dispid(62)], HRESULT, 'TreeIsUpdateSuspended',
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IsSuspended' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(63)], HRESULT, 'TreeResumeUpdateData',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(64)], HRESULT, 'TreeSuspendUpdateData',
              ( ['in'], VARIANT_BOOL, 'updateAtResume' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(88), 'propget'], HRESULT, 'PierLabel',
              ( ['out', 'retval'], POINTER(POINTER(cPierLabel)), 'pRetVal' )),
    COMMETHOD([dispid(89), 'propget'], HRESULT, 'SpandrelLabel',
              ( ['out', 'retval'], POINTER(POINTER(cSpandrelLabel)), 'pRetVal' )),
    COMMETHOD([dispid(90), 'propget'], HRESULT, 'Detailing',
              ( ['out', 'retval'], POINTER(POINTER(cDetailing)), 'pRetVal' )),
    COMMETHOD([dispid(92), 'propget'], HRESULT, 'PropPointSpring',
              ( ['out', 'retval'], POINTER(POINTER(cPropPointSpring)), 'pRetVal' )),
    COMMETHOD([dispid(93), 'propget'], HRESULT, 'PropLineSpring',
              ( ['out', 'retval'], POINTER(POINTER(cPropLineSpring)), 'pRetVal' )),
    COMMETHOD([dispid(94), 'propget'], HRESULT, 'PropAreaSpring',
              ( ['out', 'retval'], POINTER(POINTER(cPropAreaSpring)), 'pRetVal' )),
    COMMETHOD([dispid(95), 'propget'], HRESULT, 'DesignConcreteSlab',
              ( ['out', 'retval'], POINTER(POINTER(cDesignConcreteSlab)), 'pRetVal' )),
    COMMETHOD([dispid(96), 'propget'], HRESULT, 'DesignShearWall',
              ( ['out', 'retval'], POINTER(POINTER(cDesignShearWall)), 'pRetVal' )),
    COMMETHOD([dispid(99), 'propget'], HRESULT, 'DatabaseTables',
              ( ['out', 'retval'], POINTER(POINTER(cDatabaseTables)), 'pRetVal' )),
    COMMETHOD([dispid(66), 'propget'], HRESULT, 'DesignAluminum',
              ( ['out', 'retval'], POINTER(POINTER(cDesignAluminum)), 'pRetVal' )),
    COMMETHOD([dispid(67), 'propget'], HRESULT, 'DesignColdFormed',
              ( ['out', 'retval'], POINTER(POINTER(cDesignColdFormed)), 'pRetVal' )),
]
################################################################
## code template for cSapModel implementation
##class cSapModel_Impl(object):
##    @property
##    def Analyze(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def AreaElm(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def AreaObj(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConstraintDef(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def DesignConcrete(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def DesignSteel(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def EditArea(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def EditFrame(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def EditGeneral(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def EditPoint(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def File(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def FrameObj(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Func(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def GDispl(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetDatabaseUnits(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetMergeTol(self):
##        '-no docstring-'
##        #return MergeTol, pRetVal
##
##    def GetModelFilename(self, IncludePath):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetModelFilepath(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetModelIsLocked(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetPresentCoordSystem(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetPresentUnits(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetProgramInfo(self):
##        '-no docstring-'
##        #return ProgramName, ProgramVersion, ProgramLevel, pRetVal
##
##    def GetProjectInfo(self):
##        '-no docstring-'
##        #return NumberItems, Item, Data, pRetVal
##
##    def GetVersion(self):
##        '-no docstring-'
##        #return Version, MyVersionNumber, pRetVal
##
##    @property
##    def GroupDef(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def InitializeNewModel(self, Units):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def LineElm(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def LinkElm(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def LinkObj(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def LoadCases(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def LoadPatterns(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Options(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PatternDef(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PointElm(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PointObj(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PropArea(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PropFrame(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PropLink(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PropMaterial(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PropRebar(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PropTendon(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def RespCombo(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Results(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SelectObj(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetMergeTol(self, MergeTol):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetModelIsLocked(self, Lockit):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPresentUnits(self, Units):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetProjectInfo(self, Item, Data):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def TendonObj(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def View(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def DesignResults(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPresentCoordSystem(self, CSys):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetUserComment(self):
##        '-no docstring-'
##        #return Comment, pRetVal
##
##    def SetUserComment(self, Comment, NumLines, Replace):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def CoordSys(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def CableObj(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def EditSolid(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ExternalAnalysisResults(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def GenRefLine(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def NamedAssign(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def NamedDisplay(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PlaneElm(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PropCable(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PropSolid(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SectCut(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SolidElm(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SolidObj(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SourceMass(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Scheduler(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetStringsExtendedEntityData(self, appName, key, numberValues):
##        '-no docstring-'
##        #return values, pRetVal
##
##    def GetKeysWithStringsExtendedEntityData(self, appName):
##        '-no docstring-'
##        #return NumberKeys, MyKeys, pRetVal
##
##    def GetKeyStringsExtendedEntityData(self, appName, key):
##        '-no docstring-'
##        #return numberValues, values, pRetVal
##
##    @property
##    def NamedSet(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def BridgeAdvancedSuper(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def BridgeDesign(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def BridgeObj(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def BridgeModeler(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def DesignCompositeBeam(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def GridSys(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Story(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Tower(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetDatabaseUnits_2(self):
##        '-no docstring-'
##        #return forceUnits, lengthUnits, temperatureUnits, pRetVal
##
##    def GetPresentUnits_2(self):
##        '-no docstring-'
##        #return forceUnits, lengthUnits, temperatureUnits, pRetVal
##
##    def SetPresentUnits_2(self, forceUnits, lengthUnits, temperatureUnits):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Diaphragm(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def TreeIsUpdateSuspended(self):
##        '-no docstring-'
##        #return IsSuspended, pRetVal
##
##    def TreeResumeUpdateData(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def TreeSuspendUpdateData(self, updateAtResume):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PierLabel(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SpandrelLabel(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Detailing(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PropPointSpring(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PropLineSpring(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PropAreaSpring(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def DesignConcreteSlab(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def DesignShearWall(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def DatabaseTables(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def DesignAluminum(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def DesignColdFormed(self):
##        '-no docstring-'
##        #return pRetVal
##

cPierLabel._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetPier',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetSectionProperties',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberStories' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StoryName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AxisAngle' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumAreaObjs' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumLineObjs' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WidthBot' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ThicknessBot' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WidthTop' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ThicknessTop' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MatProp' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CGBotX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CGBotY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CGBotZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CGTopX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CGTopY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CGTopZ' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'SetPier',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cPierLabel implementation
##class cPierLabel_Impl(object):
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetPier(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetSectionProperties(self, Name):
##        '-no docstring-'
##        #return NumberStories, StoryName, AxisAngle, NumAreaObjs, NumLineObjs, WidthBot, ThicknessBot, WidthTop, ThicknessTop, MatProp, CGBotX, CGBotY, CGBotZ, CGTopX, CGTopY, CGTopZ, pRetVal
##
##    def SetPier(self, Name):
##        '-no docstring-'
##        #return pRetVal
##

class cBASConcBox2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{98503357-31AB-4DEA-9D4C-332D9DC10BDD}')
    _idlflags_ = ['dual', 'oleautomation']
cBASConcBox2Result._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'BASConcBox2',
              ( ['out', 'retval'], POINTER(POINTER(cBASConcBox2)), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'BridgeSuperCutForcesGirder',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], VARIANT_BOOL, 'ResultF1' ),
              ( ['in'], VARIANT_BOOL, 'ResultF2' ),
              ( ['in'], VARIANT_BOOL, 'ResultF3' ),
              ( ['in'], VARIANT_BOOL, 'ResultM1' ),
              ( ['in'], VARIANT_BOOL, 'ResultM2' ),
              ( ['in'], VARIANT_BOOL, 'ResultM3' ),
              ( ['in'], c_int, 'ResponseType' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'BridgeSuperCutLongitStressGirder',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_double, 'StressAveraging' ),
              ( ['in'], c_int, 'PointIndex' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Stress' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBASConcBox2Result implementation
##class cBASConcBox2Result_Impl(object):
##    @property
##    def BASConcBox2(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def BridgeSuperCutForcesGirder(self, Name, CutIndex, GirderIndex, ResultF1, ResultF2, ResultF3, ResultM1, ResultM2, ResultM3, ResponseType):
##        '-no docstring-'
##        #return NumberResults, LoadCase, StepType, StepNum, F1, F2, F3, M1, M2, M3, pRetVal
##
##    def BridgeSuperCutLongitStressGirder(self, Name, CutIndex, GirderIndex, StressAveraging, PointIndex):
##        '-no docstring-'
##        #return NumberResults, LoadCase, StepType, StepNum, Stress, pRetVal
##

cSpandrelLabel._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetSpandrel',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IsMultiStory' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'IsMultiStory' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'SetSpandrel',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'IsMultiStory' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetSectionProperties',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberStories' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StoryName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumAreaObj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumLineObj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Length' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DepthLeft' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ThickLeft' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DepthRight' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ThickRight' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MatProp' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CGLeftX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CGLeftY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CGLeftZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CGRightX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CGRightY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CGRightZ' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cSpandrelLabel implementation
##class cSpandrelLabel_Impl(object):
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetSpandrel(self, Name):
##        '-no docstring-'
##        #return IsMultiStory, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, IsMultiStory, pRetVal
##
##    def SetSpandrel(self, Name, IsMultiStory):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetSectionProperties(self, Name):
##        '-no docstring-'
##        #return NumberStories, StoryName, NumAreaObj, NumLineObj, Length, DepthLeft, ThickLeft, DepthRight, ThickRight, MatProp, CGLeftX, CGLeftY, CGLeftZ, CGRightX, CGRightY, CGRightZ, pRetVal
##


# values for enumeration 'eSlabType'
eSlabType_Slab = 0
eSlabType_Drop = 1
eSlabType_Stiff_DO_NOT_USE = 2
eSlabType_Ribbed = 3
eSlabType_Waffle = 4
eSlabType_Mat = 5
eSlabType_Footing = 6
eSlabType = c_int # enum
class cDStAPI_RP2A_LRFD97(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{6D87F799-4D0D-4489-8CCE-153513F3F0F5}')
    _idlflags_ = ['dual', 'oleautomation']
cDStAPI_RP2A_LRFD97._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDStAPI_RP2A_LRFD97 implementation
##class cDStAPI_RP2A_LRFD97_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cDStAPI_RP2A_WSD2000(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{8B6ABEBD-9377-4545-93E2-AE820DD4BE89}')
    _idlflags_ = ['dual', 'oleautomation']
cDStAPI_RP2A_WSD2000._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDStAPI_RP2A_WSD2000 implementation
##class cDStAPI_RP2A_WSD2000_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cCaseStaticNonlinearMultistep(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{51B0B41A-3F2A-4C42-B1B4-3B0A238CFF79}')
    _idlflags_ = ['dual', 'oleautomation']
cCaseStaticNonlinearMultistep._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetInitialCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'InitialCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetLoads',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'StepRange' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'FirstLoadStep' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LastLoadStep' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'StartCaseStep' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ExtrapolateOption' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetInitialCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'InitialCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'SetLoads',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'StepRange' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'FirstLoadStep' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LastLoadStep' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'StartCaseStep' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ExtrapolateOption' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cCaseStaticNonlinearMultistep implementation
##class cCaseStaticNonlinearMultistep_Impl(object):
##    def GetInitialCase(self, Name):
##        '-no docstring-'
##        #return InitialCase, pRetVal
##
##    def GetLoads(self, Name):
##        '-no docstring-'
##        #return NumberLoads, LoadType, LoadName, SF, StepRange, FirstLoadStep, LastLoadStep, StartCaseStep, ExtrapolateOption, pRetVal
##
##    def SetCase(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetInitialCase(self, Name, InitialCase):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoads(self, Name, NumberLoads):
##        '-no docstring-'
##        #return LoadType, LoadName, SF, StepRange, FirstLoadStep, LastLoadStep, StartCaseStep, ExtrapolateOption, pRetVal
##

class cBDRS_IRC2011_ConcSlabStr(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{CA7D451B-1CDB-4072-B3A4-29B1BDEA64D2}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_IRC2011_ConcSlabStr._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_IRC2011_ConcSlabStr implementation
##class cBDRS_IRC2011_ConcSlabStr_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cDCoACI318_11(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{EF1C3826-F91E-45CD-95D4-E4B99F9226A3}')
    _idlflags_ = ['dual', 'oleautomation']
cDCoACI318_11._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDCoACI318_11 implementation
##class cDCoACI318_11_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cCaseStaticLinear(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{9BF337A6-6D4A-4099-885A-5109A523FB1B}')
    _idlflags_ = ['dual', 'oleautomation']
cCaseStaticLinear._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetInitialCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'InitialCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetLoads',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetInitialCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'InitialCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'SetLoads',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cCaseStaticLinear implementation
##class cCaseStaticLinear_Impl(object):
##    def GetInitialCase(self, Name):
##        '-no docstring-'
##        #return InitialCase, pRetVal
##
##    def GetLoads(self, Name):
##        '-no docstring-'
##        #return NumberLoads, LoadType, LoadName, SF, pRetVal
##
##    def SetCase(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetInitialCase(self, Name, InitialCase):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoads(self, Name, NumberLoads):
##        '-no docstring-'
##        #return LoadType, LoadName, SF, pRetVal
##


# values for enumeration 'eBridgeObjectType'
eBridgeObjectType_General = 0
eBridgeObjectType_Segmental = 1
eBridgeObjectType = c_int # enum
class cBDRS_IRC2011(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{5DBDE99D-E957-40C1-8480-F4C5F94681F4}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_IRC2011_CBoxShr(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{940113D7-CE05-4796-ABC4-1637119A9940}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_IRC2011_PCCompStr(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{4B7D4271-ED40-4953-A9FD-5FE19F5E9BBA}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_IRC2010_SteelICompConstructibility(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{A62B1337-DEC0-4139-BB1F-A88F4D2A3359}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_IRC2010_SteelICompConstructibilityNonStgd(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{72B95BEC-172C-411D-B452-4599B04F171A}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_IRC2010_SteelICompRebar(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{37A659FB-3E20-4E65-990A-8DF807B5F536}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_IRC2010_SteelICompService(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{8E029922-E0FF-4F43-8448-6A54B8AF1014}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_IRC2010_SteelICompStrength(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{AE952B4B-3678-403F-AF2F-55A1F7225DC6}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_IRC2010_SteelUCompConstructibility(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{93B0B689-3662-4772-BEFE-5C9ED4086595}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_IRC2010_SteelUCompConstructibilityNonStgd(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{F14CB0C2-9F99-4DC0-9DBB-4A3B311C18E8}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_IRC2010_SteelUCompRebar(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{390314A1-E755-4FD5-93BA-5463B7E34C91}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_IRC2010_SteelUCompService(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{D7409A92-D1EE-4BC0-9A87-86745B271A0E}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_IRC2010_SteelUCompStrength(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{3D490763-8FC4-44FA-9CA4-CDEFFD21AA60}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_IRC2011_ConcTBeamFlex(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{6AA29077-E594-431C-A86A-DC8795047C15}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_IRC2011_ConcTBeamShr(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{60233867-F896-4BE4-82D7-AB224A7045A0}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_IRC2011_ConcTBeamStr(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{F300CB46-803A-4E3A-9C0C-5E47664C64A6}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_IRC2011._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'ConcBoxFlexure',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_IRC2011_CBoxFlex)), 'pRetVal' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'ConcBoxShear',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_IRC2011_CBoxShr)), 'pRetVal' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'ConcBoxStress',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_IRC2011_CBoxStr)), 'pRetVal' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'ConcBox2Flexure',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_IRC2011_CBox2Flex)), 'pRetVal' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'ConcBox2Shear',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_IRC2011_CBox2Shr)), 'pRetVal' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'ConcBox2Stress',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_IRC2011_CBox2Str)), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetCheckType',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in', 'out'], POINTER(c_int), 'CheckType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetLiveLoadDistrib',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9), 'propget'], HRESULT, 'PrecastCompFlexure',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_IRC2011_PCCompFlex)), 'pRetVal' )),
    COMMETHOD([dispid(10), 'propget'], HRESULT, 'PrecastCompShear',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_IRC2011_PCCompShr)), 'pRetVal' )),
    COMMETHOD([dispid(11), 'propget'], HRESULT, 'PrecastCompStress',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_IRC2011_PCCompStr)), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'SetCheckType',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'CheckType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'SetLiveLoadDistrib',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14), 'propget'], HRESULT, 'SteelICompConstruct',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_IRC2010_SteelICompConstructibility)), 'pRetVal' )),
    COMMETHOD([dispid(15), 'propget'], HRESULT, 'SteelICompConstructNonStgd',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_IRC2010_SteelICompConstructibilityNonStgd)), 'pRetVal' )),
    COMMETHOD([dispid(16), 'propget'], HRESULT, 'SteelICompRebar',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_IRC2010_SteelICompRebar)), 'pRetVal' )),
    COMMETHOD([dispid(17), 'propget'], HRESULT, 'SteelICompService',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_IRC2010_SteelICompService)), 'pRetVal' )),
    COMMETHOD([dispid(18), 'propget'], HRESULT, 'SteelICompStrength',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_IRC2010_SteelICompStrength)), 'pRetVal' )),
    COMMETHOD([dispid(19), 'propget'], HRESULT, 'SteelUCompConstruct',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_IRC2010_SteelUCompConstructibility)), 'pRetVal' )),
    COMMETHOD([dispid(20), 'propget'], HRESULT, 'SteelUCompConstructNonStgd',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_IRC2010_SteelUCompConstructibilityNonStgd)), 'pRetVal' )),
    COMMETHOD([dispid(21), 'propget'], HRESULT, 'SteelUCompRebar',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_IRC2010_SteelUCompRebar)), 'pRetVal' )),
    COMMETHOD([dispid(22), 'propget'], HRESULT, 'SteelUCompService',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_IRC2010_SteelUCompService)), 'pRetVal' )),
    COMMETHOD([dispid(23), 'propget'], HRESULT, 'SteelUCompStrength',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_IRC2010_SteelUCompStrength)), 'pRetVal' )),
    COMMETHOD([dispid(24), 'propget'], HRESULT, 'ConcSlabFlexure',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_IRC2011_ConcSlabFlex)), 'pRetVal' )),
    COMMETHOD([dispid(25), 'propget'], HRESULT, 'ConcSlabShear',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_IRC2011_ConcSlabShr)), 'pRetVal' )),
    COMMETHOD([dispid(26), 'propget'], HRESULT, 'ConcSlabStress',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_IRC2011_ConcSlabStr)), 'pRetVal' )),
    COMMETHOD([dispid(27), 'propget'], HRESULT, 'ConcTBeamFlexure',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_IRC2011_ConcTBeamFlex)), 'pRetVal' )),
    COMMETHOD([dispid(28), 'propget'], HRESULT, 'ConcTBeamShear',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_IRC2011_ConcTBeamShr)), 'pRetVal' )),
    COMMETHOD([dispid(29), 'propget'], HRESULT, 'ConcTBeamStress',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_IRC2011_ConcTBeamStr)), 'pRetVal' )),
]
################################################################
## code template for cBDRS_IRC2011 implementation
##class cBDRS_IRC2011_Impl(object):
##    @property
##    def ConcBoxFlexure(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBoxShear(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBoxStress(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBox2Flexure(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBox2Shear(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBox2Stress(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetCheckType(self, RequestName):
##        '-no docstring-'
##        #return CheckType, pRetVal
##
##    def GetLiveLoadDistrib(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    @property
##    def PrecastCompFlexure(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PrecastCompShear(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PrecastCompStress(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCheckType(self, RequestName, CheckType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLiveLoadDistrib(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelICompConstruct(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelICompConstructNonStgd(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelICompRebar(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelICompService(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelICompStrength(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelUCompConstruct(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelUCompConstructNonStgd(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelUCompRebar(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelUCompService(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelUCompStrength(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcSlabFlexure(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcSlabShear(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcSlabStress(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcTBeamFlexure(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcTBeamShear(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcTBeamStress(self):
##        '-no docstring-'
##        #return pRetVal
##


# values for enumeration 'eWallPierRebarLayerType'
eWallPierRebarLayerType_Vertical_Distributed_MiddleZone_Eachface = 1
eWallPierRebarLayerType_Horizontal_Distributed_MiddleZone_Eachface = 2
eWallPierRebarLayerType_Vertical_Distributed_EndZoneI_Total = 3
eWallPierRebarLayerType_Vertical_Distributed_EndZoneJ_Total = 4
eWallPierRebarLayerType_Confinement_EndZoneI = 5
eWallPierRebarLayerType_Confinement_EndZoneJ = 6
eWallPierRebarLayerType_Diagonal_Each = 7
eWallPierRebarLayerType = c_int # enum
cAreaObj._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'AddByCoord',
              ( ['in'], c_int, 'NumberPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z' ),
              ( ['in', 'out'], POINTER(BSTR), 'Name' ),
              ( ['in', 'optional'], BSTR, 'PropName', 'Default' ),
              ( ['in', 'optional'], BSTR, 'UserName', '' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'AddByPoint',
              ( ['in'], c_int, 'NumberPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Point' ),
              ( ['in', 'out'], POINTER(BSTR), 'Name' ),
              ( ['in', 'optional'], BSTR, 'PropName', 'Default' ),
              ( ['in', 'optional'], BSTR, 'UserName', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'DeleteLoadTemperature',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'DeleteLoadUniform',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'DeleteLoadUniformToFrame',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'DeleteLoadWindPressure',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'DeleteMass',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'DeleteModifiers',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'DeleteSpring',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'GetEdgeConstraint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ConstraintExists' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'GetElm',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NElm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'GetGUID',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'GetLoadTemperature',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'GetLoadUniform',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Dir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'GetLoadUniformToFrame',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Dir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'DistType' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'GetLoadWindPressure',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'cp' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'GetLocalAxes',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Ang' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Advanced' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(23)], HRESULT, 'GetMass',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'MassOverL2' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(24)], HRESULT, 'GetMaterialOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(25)], HRESULT, 'GetModifiers',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(26)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(56)], HRESULT, 'GetOpening',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IsOpening' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(28)], HRESULT, 'GetPoints',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Point' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(29)], HRESULT, 'GetProperty',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(30)], HRESULT, 'GetSelected',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Selected' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(31)], HRESULT, 'GetSelectedEdge',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberEdges' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Selected' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(34)], HRESULT, 'GetTransformationMatrix',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'IsGlobal', True ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(36)], HRESULT, 'SetEdgeConstraint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'ConstraintExists' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(37)], HRESULT, 'SetGroupAssign',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'GroupName' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Remove', False ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(38)], HRESULT, 'SetGUID',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(39)], HRESULT, 'SetLoadTemperature',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in'], c_int, 'MyType' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], BSTR, 'PatternName', '' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', True ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(40)], HRESULT, 'SetLoadUniform',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in'], c_int, 'Dir' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', True ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(41)], HRESULT, 'SetLoadUniformToFrame',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in'], c_int, 'Dir' ),
              ( ['in'], c_int, 'DistType' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', True ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(42)], HRESULT, 'SetLoadWindPressure',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in'], c_int, 'MyType' ),
              ( ['in'], c_double, 'cp' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(43)], HRESULT, 'SetLocalAxes',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'Ang' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(45)], HRESULT, 'SetMass',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'MassOverL2' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', False ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(46)], HRESULT, 'SetMaterialOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'PropName' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(47)], HRESULT, 'SetModifiers',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(57)], HRESULT, 'SetOpening',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'IsOpening' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(49)], HRESULT, 'SetProperty',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'PropName' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(50)], HRESULT, 'SetSelected',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'Selected' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(51)], HRESULT, 'SetSelectedEdge',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'EdgeNum' ),
              ( ['in'], VARIANT_BOOL, 'Selected' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(89)], HRESULT, 'GetGroupAssign',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberGroups' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Groups' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'GetAutoMesh',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'MeshType' ),
              ( ['in', 'out'], POINTER(c_int), 'N1' ),
              ( ['in', 'out'], POINTER(c_int), 'N2' ),
              ( ['in', 'out'], POINTER(c_double), 'MaxSize1' ),
              ( ['in', 'out'], POINTER(c_double), 'MaxSize2' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'PointOnEdgeFromLine' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'PointOnEdgeFromPoint' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ExtendCookieCutLines' ),
              ( ['in', 'out'], POINTER(c_double), 'Rotation' ),
              ( ['in', 'out'], POINTER(c_double), 'MaxSizeGeneral' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'LocalAxesOnEdge' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'LocalAxesOnFace' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'RestraintsOnEdge' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'RestraintsOnFace' ),
              ( ['in', 'out'], POINTER(BSTR), 'Group' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SubMesh' ),
              ( ['in', 'out'], POINTER(c_double), 'SubMeshSize' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(27)], HRESULT, 'GetOffsets',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'OffsetType' ),
              ( ['in', 'out'], POINTER(BSTR), 'OffsetPattern' ),
              ( ['in', 'out'], POINTER(c_double), 'OffsetPatternSF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(94)], HRESULT, 'GetLoadWindPressure_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'cp' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'DistributionType' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'GetLocalAxesAdvanced',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Active' ),
              ( ['in', 'out'], POINTER(c_int), 'Plane2' ),
              ( ['in', 'out'], POINTER(c_int), 'PlVectOpt' ),
              ( ['in', 'out'], POINTER(BSTR), 'PlCSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PlDir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PlPt' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PlVect' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(32)], HRESULT, 'GetSpring',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberSprings' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SimpleSpringType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LinkProp' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Face' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SpringLocalOneType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Dir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Outward' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VecX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VecY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VecZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ang' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(33)], HRESULT, 'GetThickness',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'ThicknessType' ),
              ( ['in', 'out'], POINTER(BSTR), 'ThicknessPattern' ),
              ( ['in', 'out'], POINTER(c_double), 'ThicknessPatternSF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Thickness' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(35)], HRESULT, 'SetAutoMesh',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'MeshType' ),
              ( ['in', 'optional'], c_int, 'N1', 2 ),
              ( ['in', 'optional'], c_int, 'N2', 2 ),
              ( ['in', 'optional'], c_double, 'MaxSize1', 0.0 ),
              ( ['in', 'optional'], c_double, 'MaxSize2', 0.0 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'PointOnEdgeFromLine', False ),
              ( ['in', 'optional'], VARIANT_BOOL, 'PointOnEdgeFromPoint', False ),
              ( ['in', 'optional'], VARIANT_BOOL, 'ExtendCookieCutLines', False ),
              ( ['in', 'optional'], c_double, 'Rotation', 0.0 ),
              ( ['in', 'optional'], c_double, 'MaxSizeGeneral', 0.0 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'LocalAxesOnEdge', False ),
              ( ['in', 'optional'], VARIANT_BOOL, 'LocalAxesOnFace', False ),
              ( ['in', 'optional'], VARIANT_BOOL, 'RestraintsOnEdge', False ),
              ( ['in', 'optional'], VARIANT_BOOL, 'RestraintsOnFace', False ),
              ( ['in', 'optional'], BSTR, 'Group', 'ALL' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SubMesh', False ),
              ( ['in', 'optional'], c_double, 'SubMeshSize', 0.0 ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(95)], HRESULT, 'SetLoadWindPressure_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in'], c_int, 'MyType' ),
              ( ['in'], c_double, 'cp' ),
              ( ['in'], c_int, 'DistributionType' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(44)], HRESULT, 'SetLocalAxesAdvanced',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'Active' ),
              ( ['in'], c_int, 'Plane2' ),
              ( ['in'], c_int, 'PlVectOpt' ),
              ( ['in'], BSTR, 'PlCSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PlDir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PlPt' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PlVect' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(48)], HRESULT, 'SetOffsets',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'OffsetType' ),
              ( ['in'], BSTR, 'OffsetPattern' ),
              ( ['in'], c_double, 'OffsetPatternSF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(52)], HRESULT, 'SetSpring',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'MyType' ),
              ( ['in'], c_double, 'S' ),
              ( ['in'], c_int, 'SimpleSpringType' ),
              ( ['in'], BSTR, 'LinkProp' ),
              ( ['in'], c_int, 'Face' ),
              ( ['in'], c_int, 'SpringLocalOneType' ),
              ( ['in'], c_int, 'Dir' ),
              ( ['in'], VARIANT_BOOL, 'Outward' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Vec' ),
              ( ['in'], c_double, 'Ang' ),
              ( ['in'], VARIANT_BOOL, 'Replace' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Local' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(53)], HRESULT, 'SetThickness',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ThicknessType' ),
              ( ['in'], BSTR, 'ThicknessPattern' ),
              ( ['in'], c_double, 'ThicknessPatternSF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Thickness' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(60)], HRESULT, 'DeleteLoadGravity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(61)], HRESULT, 'DeleteLoadPorePressure',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(62)], HRESULT, 'DeleteLoadRotate',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(63)], HRESULT, 'DeleteLoadStrain',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in'], c_int, 'Component' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(64)], HRESULT, 'DeleteLoadSurfacePressure',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(65)], HRESULT, 'GetLoadGravity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(66)], HRESULT, 'GetLoadPorePressure',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(67)], HRESULT, 'GetLoadRotate',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(68)], HRESULT, 'GetLoadStrain',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Component' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(69)], HRESULT, 'GetLoadSurfacePressure',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Face' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(70)], HRESULT, 'GetMatTemp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Temp' ),
              ( ['in', 'out'], POINTER(BSTR), 'PatternName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(71)], HRESULT, 'SetLoadGravity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in'], c_double, 'X' ),
              ( ['in'], c_double, 'Y' ),
              ( ['in'], c_double, 'Z' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', True ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(72)], HRESULT, 'SetLoadPorePressure',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], BSTR, 'PatternName', '' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', True ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(73)], HRESULT, 'SetLoadRotate',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', False ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(74)], HRESULT, 'SetLoadStrain',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in'], c_int, 'Component' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', True ),
              ( ['in', 'optional'], BSTR, 'PatternName', '' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(75)], HRESULT, 'SetLoadSurfacePressure',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in'], c_int, 'Face' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], BSTR, 'PatternName', '' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', True ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(76)], HRESULT, 'SetMatTemp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'Temp' ),
              ( ['in', 'optional'], BSTR, 'PatternName', '' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(92)], HRESULT, 'GetBridgeObjectFoundationFlag',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BObjName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SpanIndex' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'FoundationIndex' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(eBridgeObjectFoundationPart)), 'Part' ),
              ( ['in', 'out', 'optional'], POINTER(eItemType), 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(93)], HRESULT, 'SetBridgeObjectFoundationFlag',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'BObjName' ),
              ( ['in'], c_int, 'SpanIndex' ),
              ( ['in'], c_int, 'FoundationIndex' ),
              ( ['in'], eBridgeObjectFoundationPart, 'Part' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(54)], HRESULT, 'GetDesignOrientation',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(eAreaDesignOrientation), 'DesignOrientation' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(55)], HRESULT, 'GetNameListOnStory',
              ( ['in'], BSTR, 'StoryName' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(58)], HRESULT, 'GetDiaphragm',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'DiaphragmName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(59)], HRESULT, 'SetDiaphragm',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'DiaphragmName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(77)], HRESULT, 'GetLabelNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyLabel' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyStory' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(78)], HRESULT, 'GetLabelFromName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'Label' ),
              ( ['in', 'out'], POINTER(BSTR), 'Story' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(79)], HRESULT, 'GetNameFromLabel',
              ( ['in'], BSTR, 'Label' ),
              ( ['in'], BSTR, 'Story' ),
              ( ['in', 'out'], POINTER(BSTR), 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(80)], HRESULT, 'GetRebarDataPier',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberRebarLayers' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LayerID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(eWallPierRebarLayerType)), 'LayerType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ClearCover' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BarSizeName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BarArea' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BarSpacing' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Confined' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndZoneLength' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndZoneThickness' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndZoneOffset' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(81)], HRESULT, 'GetRebarDataSpandrel',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberRebarLayers' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LayerID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(eWallSpandrelRebarLayerType)), 'LayerType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ClearCover' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'BarSizeIndex' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BarArea' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BarSpacing' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Confined' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(82)], HRESULT, 'GetAllAreas',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(eAreaDesignOrientation)), 'DesignOrientation' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberBoundaryPts' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PointDelimiter' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PointX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PointY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PointZ' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(83)], HRESULT, 'GetPier',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'PierName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(84)], HRESULT, 'SetPier',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'PierName' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(85)], HRESULT, 'GetSpandrel',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'SpandrelName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(86)], HRESULT, 'SetSpandrel',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'SpandrelName' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(87)], HRESULT, 'GetSpringAssignment',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'SpringProp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(88)], HRESULT, 'SetSpringAssignment',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'SpringProp' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(90)], HRESULT, 'GetOffsets3',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offsets' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(91)], HRESULT, 'GetCurvedEdges',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumEdges' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'CurveType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Tension' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GZ' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cAreaObj implementation
##class cAreaObj_Impl(object):
##    def AddByCoord(self, NumberPoints, PropName, UserName, CSys):
##        '-no docstring-'
##        #return X, Y, Z, Name, pRetVal
##
##    def AddByPoint(self, NumberPoints, PropName, UserName):
##        '-no docstring-'
##        #return Point, Name, pRetVal
##
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteLoadTemperature(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteLoadUniform(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteLoadUniformToFrame(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteLoadWindPressure(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteMass(self, Name, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteModifiers(self, Name, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteSpring(self, Name, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetEdgeConstraint(self, Name):
##        '-no docstring-'
##        #return ConstraintExists, pRetVal
##
##    def GetElm(self, Name):
##        '-no docstring-'
##        #return NElm, Elm, pRetVal
##
##    def GetGUID(self, Name):
##        '-no docstring-'
##        #return GUID, pRetVal
##
##    def GetLoadTemperature(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, AreaName, LoadPat, MyType, Value, PatternName, pRetVal
##
##    def GetLoadUniform(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, AreaName, LoadPat, CSys, Dir, Value, pRetVal
##
##    def GetLoadUniformToFrame(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, AreaName, LoadPat, CSys, Dir, Value, DistType, pRetVal
##
##    def GetLoadWindPressure(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, AreaName, LoadPat, MyType, cp, pRetVal
##
##    def GetLocalAxes(self, Name):
##        '-no docstring-'
##        #return Ang, Advanced, pRetVal
##
##    def GetMass(self, Name):
##        '-no docstring-'
##        #return MassOverL2, pRetVal
##
##    def GetMaterialOverwrite(self, Name):
##        '-no docstring-'
##        #return PropName, pRetVal
##
##    def GetModifiers(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetOpening(self, Name):
##        '-no docstring-'
##        #return IsOpening, pRetVal
##
##    def GetPoints(self, Name):
##        '-no docstring-'
##        #return NumberPoints, Point, pRetVal
##
##    def GetProperty(self, Name):
##        '-no docstring-'
##        #return PropName, pRetVal
##
##    def GetSelected(self, Name):
##        '-no docstring-'
##        #return Selected, pRetVal
##
##    def GetSelectedEdge(self, Name):
##        '-no docstring-'
##        #return NumberEdges, Selected, pRetVal
##
##    def GetTransformationMatrix(self, Name, IsGlobal):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetEdgeConstraint(self, Name, ConstraintExists, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetGroupAssign(self, Name, GroupName, Remove, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetGUID(self, Name, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoadTemperature(self, Name, LoadPat, MyType, Value, PatternName, Replace, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoadUniform(self, Name, LoadPat, Value, Dir, Replace, CSys, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoadUniformToFrame(self, Name, LoadPat, Value, Dir, DistType, Replace, CSys, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoadWindPressure(self, Name, LoadPat, MyType, cp, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLocalAxes(self, Name, Ang, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetMass(self, Name, MassOverL2, Replace, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetMaterialOverwrite(self, Name, PropName, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetModifiers(self, Name, ItemType):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOpening(self, Name, IsOpening, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetProperty(self, Name, PropName, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSelected(self, Name, Selected, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSelectedEdge(self, Name, EdgeNum, Selected):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetGroupAssign(self, Name):
##        '-no docstring-'
##        #return NumberGroups, Groups, pRetVal
##
##    def GetAutoMesh(self, Name):
##        '-no docstring-'
##        #return MeshType, N1, N2, MaxSize1, MaxSize2, PointOnEdgeFromLine, PointOnEdgeFromPoint, ExtendCookieCutLines, Rotation, MaxSizeGeneral, LocalAxesOnEdge, LocalAxesOnFace, RestraintsOnEdge, RestraintsOnFace, Group, SubMesh, SubMeshSize, pRetVal
##
##    def GetOffsets(self, Name):
##        '-no docstring-'
##        #return OffsetType, OffsetPattern, OffsetPatternSF, Offset, pRetVal
##
##    def GetLoadWindPressure_1(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, AreaName, LoadPat, MyType, cp, DistributionType, pRetVal
##
##    def GetLocalAxesAdvanced(self, Name):
##        '-no docstring-'
##        #return Active, Plane2, PlVectOpt, PlCSys, PlDir, PlPt, PlVect, pRetVal
##
##    def GetSpring(self, Name):
##        '-no docstring-'
##        #return NumberSprings, MyType, S, SimpleSpringType, LinkProp, Face, SpringLocalOneType, Dir, Outward, VecX, VecY, VecZ, CSys, Ang, pRetVal
##
##    def GetThickness(self, Name):
##        '-no docstring-'
##        #return ThicknessType, ThicknessPattern, ThicknessPatternSF, Thickness, pRetVal
##
##    def SetAutoMesh(self, Name, MeshType, N1, N2, MaxSize1, MaxSize2, PointOnEdgeFromLine, PointOnEdgeFromPoint, ExtendCookieCutLines, Rotation, MaxSizeGeneral, LocalAxesOnEdge, LocalAxesOnFace, RestraintsOnEdge, RestraintsOnFace, Group, SubMesh, SubMeshSize, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoadWindPressure_1(self, Name, LoadPat, MyType, cp, DistributionType, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLocalAxesAdvanced(self, Name, Active, Plane2, PlVectOpt, PlCSys, ItemType):
##        '-no docstring-'
##        #return PlDir, PlPt, PlVect, pRetVal
##
##    def SetOffsets(self, Name, OffsetType, OffsetPattern, OffsetPatternSF, ItemType):
##        '-no docstring-'
##        #return Offset, pRetVal
##
##    def SetSpring(self, Name, MyType, S, SimpleSpringType, LinkProp, Face, SpringLocalOneType, Dir, Outward, Ang, Replace, CSys, ItemType):
##        '-no docstring-'
##        #return Vec, pRetVal
##
##    def SetThickness(self, Name, ThicknessType, ThicknessPattern, ThicknessPatternSF, ItemType):
##        '-no docstring-'
##        #return Thickness, pRetVal
##
##    def DeleteLoadGravity(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteLoadPorePressure(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteLoadRotate(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteLoadStrain(self, Name, LoadPat, Component, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteLoadSurfacePressure(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetLoadGravity(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, AreaName, LoadPat, CSys, X, Y, Z, pRetVal
##
##    def GetLoadPorePressure(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, AreaName, LoadPat, Value, PatternName, pRetVal
##
##    def GetLoadRotate(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, AreaName, LoadPat, Value, pRetVal
##
##    def GetLoadStrain(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, AreaName, LoadPat, Component, Value, PatternName, pRetVal
##
##    def GetLoadSurfacePressure(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, AreaName, LoadPat, Face, Value, PatternName, pRetVal
##
##    def GetMatTemp(self, Name):
##        '-no docstring-'
##        #return Temp, PatternName, pRetVal
##
##    def SetLoadGravity(self, Name, LoadPat, X, Y, Z, Replace, CSys, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoadPorePressure(self, Name, LoadPat, Value, PatternName, Replace, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoadRotate(self, Name, LoadPat, Value, Replace, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoadStrain(self, Name, LoadPat, Component, Value, Replace, PatternName, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoadSurfacePressure(self, Name, LoadPat, Face, Value, PatternName, Replace, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetMatTemp(self, Name, Temp, PatternName, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetBridgeObjectFoundationFlag(self, Name):
##        '-no docstring-'
##        #return NumberItems, AreaName, BObjName, SpanIndex, FoundationIndex, Part, ItemType, pRetVal
##
##    def SetBridgeObjectFoundationFlag(self, Name, BObjName, SpanIndex, FoundationIndex, Part, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetDesignOrientation(self, Name):
##        '-no docstring-'
##        #return DesignOrientation, pRetVal
##
##    def GetNameListOnStory(self, StoryName):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetDiaphragm(self, Name):
##        '-no docstring-'
##        #return DiaphragmName, pRetVal
##
##    def SetDiaphragm(self, Name, DiaphragmName):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetLabelNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, MyLabel, MyStory, pRetVal
##
##    def GetLabelFromName(self, Name):
##        '-no docstring-'
##        #return Label, Story, pRetVal
##
##    def GetNameFromLabel(self, Label, Story):
##        '-no docstring-'
##        #return Name, pRetVal
##
##    def GetRebarDataPier(self, Name):
##        '-no docstring-'
##        #return NumberRebarLayers, LayerID, LayerType, ClearCover, BarSizeName, BarArea, BarSpacing, NumberBars, Confined, EndZoneLength, EndZoneThickness, EndZoneOffset, pRetVal
##
##    def GetRebarDataSpandrel(self, Name):
##        '-no docstring-'
##        #return NumberRebarLayers, LayerID, LayerType, ClearCover, BarSizeIndex, BarArea, BarSpacing, NumberBars, Confined, pRetVal
##
##    def GetAllAreas(self):
##        '-no docstring-'
##        #return NumberNames, MyName, DesignOrientation, NumberBoundaryPts, PointDelimiter, PointNames, PointX, PointY, PointZ, pRetVal
##
##    def GetPier(self, Name):
##        '-no docstring-'
##        #return PierName, pRetVal
##
##    def SetPier(self, Name, PierName, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetSpandrel(self, Name):
##        '-no docstring-'
##        #return SpandrelName, pRetVal
##
##    def SetSpandrel(self, Name, SpandrelName, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetSpringAssignment(self, Name):
##        '-no docstring-'
##        #return SpringProp, pRetVal
##
##    def SetSpringAssignment(self, Name, SpringProp, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetOffsets3(self, Name):
##        '-no docstring-'
##        #return NumberPoints, Offsets, pRetVal
##
##    def GetCurvedEdges(self, Name):
##        '-no docstring-'
##        #return NumEdges, CurveType, Tension, NumPoints, GX, GY, GZ, pRetVal
##

cPropTendon._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetProp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_int), 'ModelingOption' ),
              ( ['in', 'out'], POINTER(c_double), 'Area' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'SetProp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_int, 'ModelingOption' ),
              ( ['in'], c_double, 'Area' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cPropTendon implementation
##class cPropTendon_Impl(object):
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetProp(self, Name):
##        '-no docstring-'
##        #return MatProp, ModelingOption, Area, Color, Notes, GUID, pRetVal
##
##    def SetProp(self, Name, MatProp, ModelingOption, Area, Color, Notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##


# values for enumeration 'eConstraintAxis'
eConstraintAxis_X = 1
eConstraintAxis_Y = 2
eConstraintAxis_Z = 3
eConstraintAxis_AutoAxis = 4
eConstraintAxis = c_int # enum
cConstraint._methods_ = [
    COMMETHOD([dispid(3)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetDiaphragm',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(eConstraintAxis), 'Axis' ),
              ( ['in', 'out'], POINTER(BSTR), 'CSys' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'SetDiaphragm',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eConstraintAxis, 'Axis', 4 ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(1)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Count',
              ( ['in', 'optional'], eConstraintType, 'ConstraintType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetBeam',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(eConstraintAxis), 'Axis' ),
              ( ['in', 'out'], POINTER(BSTR), 'CSys' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetBody',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Value' ),
              ( ['in', 'out'], POINTER(BSTR), 'CSys' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetConstraintType',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(eConstraintType), 'ConstraintType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetEqual',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Value' ),
              ( ['in', 'out'], POINTER(BSTR), 'CSys' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetLine',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Value' ),
              ( ['in', 'out'], POINTER(BSTR), 'CSys' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetLocal',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetPlate',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(eConstraintAxis), 'Axis' ),
              ( ['in', 'out'], POINTER(BSTR), 'CSys' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'GetRod',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(eConstraintAxis), 'Axis' ),
              ( ['in', 'out'], POINTER(BSTR), 'CSys' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'GetSpecialRigidDiaphragmList',
              ( ['in', 'out'], POINTER(c_int), 'Num' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Diaph' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'GetWeld',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Value' ),
              ( ['in', 'out'], POINTER(c_double), 'Tolerance' ),
              ( ['in', 'out'], POINTER(BSTR), 'CSys' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'SetBeam',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eConstraintAxis, 'Axis', 4 ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'SetBody',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Value' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'SetEqual',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Value' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'SetLine',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Value' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'SetLocal',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'SetPlate',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eConstraintAxis, 'Axis', 4 ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(23)], HRESULT, 'SetRod',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eConstraintAxis, 'Axis', 4 ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(24)], HRESULT, 'SetWeld',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Value' ),
              ( ['in'], c_double, 'Tolerance' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cConstraint implementation
##class cConstraint_Impl(object):
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetDiaphragm(self, Name):
##        '-no docstring-'
##        #return Axis, CSys, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def SetDiaphragm(self, Name, Axis, CSys):
##        '-no docstring-'
##        #return pRetVal
##
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self, ConstraintType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetBeam(self, Name):
##        '-no docstring-'
##        #return Axis, CSys, pRetVal
##
##    def GetBody(self, Name):
##        '-no docstring-'
##        #return Value, CSys, pRetVal
##
##    def GetConstraintType(self, Name):
##        '-no docstring-'
##        #return ConstraintType, pRetVal
##
##    def GetEqual(self, Name):
##        '-no docstring-'
##        #return Value, CSys, pRetVal
##
##    def GetLine(self, Name):
##        '-no docstring-'
##        #return Value, CSys, pRetVal
##
##    def GetLocal(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetPlate(self, Name):
##        '-no docstring-'
##        #return Axis, CSys, pRetVal
##
##    def GetRod(self, Name):
##        '-no docstring-'
##        #return Axis, CSys, pRetVal
##
##    def GetSpecialRigidDiaphragmList(self):
##        '-no docstring-'
##        #return Num, Diaph, pRetVal
##
##    def GetWeld(self, Name):
##        '-no docstring-'
##        #return Value, Tolerance, CSys, pRetVal
##
##    def SetBeam(self, Name, Axis, CSys):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetBody(self, Name, CSys):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetEqual(self, Name, CSys):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetLine(self, Name, CSys):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetLocal(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetPlate(self, Name, Axis, CSys):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetRod(self, Name, Axis, CSys):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetWeld(self, Name, Tolerance, CSys):
##        '-no docstring-'
##        #return Value, pRetVal
##

cDesignResults._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'DesignForces',
              ( ['out', 'retval'], POINTER(POINTER(cDesignForces)), 'pRetVal' )),
]
################################################################
## code template for cDesignResults implementation
##class cDesignResults_Impl(object):
##    @property
##    def DesignForces(self):
##        '-no docstring-'
##        #return pRetVal
##

class cDStAPI_RP2A_WSD2014(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{85DF4666-0B72-437F-9BAD-1921F50D48F3}')
    _idlflags_ = ['dual', 'oleautomation']
cDStAPI_RP2A_WSD2014._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDStAPI_RP2A_WSD2014 implementation
##class cDStAPI_RP2A_WSD2014_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cPointElm._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'CountConstraint',
              ( ['in', 'out'], POINTER(c_int), 'Count' ),
              ( ['in', 'optional'], BSTR, 'Name', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'CountLoadDispl',
              ( ['in', 'out'], POINTER(c_int), 'Count' ),
              ( ['in', 'optional'], BSTR, 'Name', '' ),
              ( ['in', 'optional'], BSTR, 'LoadPat', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'CountLoadForce',
              ( ['in', 'out'], POINTER(c_int), 'Count' ),
              ( ['in', 'optional'], BSTR, 'Name', '' ),
              ( ['in', 'optional'], BSTR, 'LoadPat', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'CountRestraint',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'CountSpring',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetConnectivity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ObjectType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PointNumber' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetConstraint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ConstraintName' ),
              ( ['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetCoordCartesian',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'X' ),
              ( ['in', 'out'], POINTER(c_double), 'Y' ),
              ( ['in', 'out'], POINTER(c_double), 'Z' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetLoadDispl',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LcStep' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3' ),
              ( ['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetLoadForce',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LcStep' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetLocalAxes',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'A' ),
              ( ['in', 'out'], POINTER(c_double), 'B' ),
              ( ['in', 'out'], POINTER(c_double), 'C' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'GetObj',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'Obj' ),
              ( ['in', 'out'], POINTER(c_int), 'ObjType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'GetPatternValue',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'PatternName' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'GetRestraint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'GetSpring',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'GetSpringCoupled',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'GetTransformationMatrix',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'IsSpringCoupled',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IsCoupled' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'GetCoordCylindrical',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'R' ),
              ( ['in', 'out'], POINTER(c_double), 'Theta' ),
              ( ['in', 'out'], POINTER(c_double), 'Z' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'GetCoordSpherical',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'R' ),
              ( ['in', 'out'], POINTER(c_double), 'A' ),
              ( ['in', 'out'], POINTER(c_double), 'B' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(23)], HRESULT, 'GetMergeNumber',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'MergeNumber' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cPointElm implementation
##class cPointElm_Impl(object):
##    def Count(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def CountConstraint(self, Name):
##        '-no docstring-'
##        #return Count, pRetVal
##
##    def CountLoadDispl(self, Name, LoadPat):
##        '-no docstring-'
##        #return Count, pRetVal
##
##    def CountLoadForce(self, Name, LoadPat):
##        '-no docstring-'
##        #return Count, pRetVal
##
##    def CountRestraint(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def CountSpring(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetConnectivity(self, Name):
##        '-no docstring-'
##        #return NumberItems, ObjectType, ObjectName, PointNumber, pRetVal
##
##    def GetConstraint(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberItems, PointName, ConstraintName, pRetVal
##
##    def GetCoordCartesian(self, Name, CSys):
##        '-no docstring-'
##        #return X, Y, Z, pRetVal
##
##    def GetLoadDispl(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberItems, PointName, LoadPat, LcStep, CSys, U1, U2, U3, R1, R2, R3, pRetVal
##
##    def GetLoadForce(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberItems, PointName, LoadPat, LcStep, CSys, F1, F2, F3, M1, M2, M3, pRetVal
##
##    def GetLocalAxes(self, Name):
##        '-no docstring-'
##        #return A, B, C, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetObj(self, Name):
##        '-no docstring-'
##        #return Obj, ObjType, pRetVal
##
##    def GetPatternValue(self, Name, PatternName):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetRestraint(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetSpring(self, Name):
##        '-no docstring-'
##        #return K, pRetVal
##
##    def GetSpringCoupled(self, Name):
##        '-no docstring-'
##        #return K, pRetVal
##
##    def GetTransformationMatrix(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def IsSpringCoupled(self, Name):
##        '-no docstring-'
##        #return IsCoupled, pRetVal
##
##    def GetCoordCylindrical(self, Name, CSys):
##        '-no docstring-'
##        #return R, Theta, Z, pRetVal
##
##    def GetCoordSpherical(self, Name, CSys):
##        '-no docstring-'
##        #return R, A, B, pRetVal
##
##    def GetMergeNumber(self, Name):
##        '-no docstring-'
##        #return MergeNumber, pRetVal
##

cEditFrame._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'ChangeConnectivity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Point1' ),
              ( ['in'], BSTR, 'Point2' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'DivideAtDistance',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'Dist' ),
              ( ['in'], VARIANT_BOOL, 'IEnd' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'DivideAtIntersections',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'Num' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'DivideByRatio',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Num' ),
              ( ['in'], c_double, 'Ratio' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'Extend',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'IEnd' ),
              ( ['in'], VARIANT_BOOL, 'JEnd' ),
              ( ['in'], BSTR, 'Item1' ),
              ( ['in', 'optional'], BSTR, 'Item2', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'Join',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Item2' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'Trim',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'IEnd' ),
              ( ['in'], VARIANT_BOOL, 'JEnd' ),
              ( ['in'], BSTR, 'Item1' ),
              ( ['in', 'optional'], BSTR, 'Item2', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cEditFrame implementation
##class cEditFrame_Impl(object):
##    def ChangeConnectivity(self, Name, Point1, Point2):
##        '-no docstring-'
##        #return pRetVal
##
##    def DivideAtDistance(self, Name, Dist, IEnd):
##        '-no docstring-'
##        #return NewName, pRetVal
##
##    def DivideAtIntersections(self, Name):
##        '-no docstring-'
##        #return Num, NewName, pRetVal
##
##    def DivideByRatio(self, Name, Num, Ratio):
##        '-no docstring-'
##        #return NewName, pRetVal
##
##    def Extend(self, Name, IEnd, JEnd, Item1, Item2):
##        '-no docstring-'
##        #return pRetVal
##
##    def Join(self, Name, Item2):
##        '-no docstring-'
##        #return pRetVal
##
##    def Trim(self, Name, IEnd, JEnd, Item1, Item2):
##        '-no docstring-'
##        #return pRetVal
##

cOptions._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetDimensions',
              ( ['in', 'out'], POINTER(c_double), 'CuttingPlaneTol' ),
              ( ['in', 'out'], POINTER(c_double), 'WorldSpacing' ),
              ( ['in', 'out'], POINTER(c_double), 'NudgeValue' ),
              ( ['in', 'out'], POINTER(c_int), 'PixelClickSize' ),
              ( ['in', 'out'], POINTER(c_int), 'PixelSnapSize' ),
              ( ['in', 'out'], POINTER(c_int), 'ScrLinThk' ),
              ( ['in', 'out'], POINTER(c_int), 'PrtLinThk' ),
              ( ['in', 'out'], POINTER(c_int), 'MaxFont' ),
              ( ['in', 'out'], POINTER(c_int), 'MinFont' ),
              ( ['in', 'out'], POINTER(c_int), 'ZoomStep' ),
              ( ['in', 'out'], POINTER(c_int), 'ShrinkFact' ),
              ( ['in', 'out'], POINTER(c_int), 'TextFileMaxChar' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetDimensions',
              ( ['in', 'optional'], c_double, 'CuttingPlaneTol', 0.0 ),
              ( ['in', 'optional'], c_double, 'WorldSpacing', 0.0 ),
              ( ['in', 'optional'], c_double, 'NudgeValue', 0.0 ),
              ( ['in', 'optional'], c_int, 'PixelClickSize', 0 ),
              ( ['in', 'optional'], c_int, 'PixelSnapSize', 0 ),
              ( ['in', 'optional'], c_int, 'ScrLinThk', 0 ),
              ( ['in', 'optional'], c_int, 'PrtLinThk', 0 ),
              ( ['in', 'optional'], c_int, 'MaxFont', 0 ),
              ( ['in', 'optional'], c_int, 'MinFont', 0 ),
              ( ['in', 'optional'], c_int, 'ZoomStep', 0 ),
              ( ['in', 'optional'], c_int, 'ShrinkFact', 0 ),
              ( ['in', 'optional'], c_int, 'TextFileMaxChar', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cOptions implementation
##class cOptions_Impl(object):
##    def GetDimensions(self):
##        '-no docstring-'
##        #return CuttingPlaneTol, WorldSpacing, NudgeValue, PixelClickSize, PixelSnapSize, ScrLinThk, PrtLinThk, MaxFont, MinFont, ZoomStep, ShrinkFact, TextFileMaxChar, pRetVal
##
##    def SetDimensions(self, CuttingPlaneTol, WorldSpacing, NudgeValue, PixelClickSize, PixelSnapSize, ScrLinThk, PrtLinThk, MaxFont, MinFont, ZoomStep, ShrinkFact, TextFileMaxChar):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_IRC2011_ConcTBeamFlex._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_IRC2011_ConcTBeamFlex implementation
##class cBDRS_IRC2011_ConcTBeamFlex_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBridgeDesignRequestSuper(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{185DB5E5-CB16-428D-9D3A-B48A510275AD}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AASHTO_STD_2002(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{5FF1F360-CF98-4F05-8DDE-3E37539ED6C9}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_CAN_CSA_S6_06(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{0071CA4C-A2CF-420C-AF11-BBC756322CF4}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_EUROCODE(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{B805C492-64F5-4E97-8E55-C0D28609DFD6}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_JTG_D62_2004(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{E399B575-52C6-4657-9046-A7E076AC5A6D}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_RussianSNiP(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{76BCAD2A-F896-45EA-BB63-56B04B95D561}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_BS5400(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{37A6587A-C312-4BED-82B3-2D81F9551F85}')
    _idlflags_ = ['dual', 'oleautomation']
cBridgeDesignRequestSuper._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'AASHTO_LRFD_2007',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AASHTO_LRFD_2007)), 'pRetVal' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'AASHTO_STD_2002',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AASHTO_STD_2002)), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'AddDemand',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], BSTR, 'DemandName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'CANCSAS606',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_CAN_CSA_S6_06)), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'ChangeDemandName',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], BSTR, 'DemandName' ),
              ( ['in'], BSTR, 'NewDemandName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'CountDemand',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'DeleteDemand',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], BSTR, 'DemandName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8), 'propget'], HRESULT, 'EUROCODE',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_EUROCODE)), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetDemandCombo',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], BSTR, 'DemandName' ),
              ( ['in', 'out'], POINTER(BSTR), 'DemandCombo' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetDemandNameList',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberDemandNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'DemandName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetStagedCaseOutput',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], BSTR, 'DemandName' ),
              ( ['in', 'out'], POINTER(c_int), 'Count' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'OutputLabel' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetStagedCaseStep',
              ( ['in'], BSTR, 'LoadCase' ),
              ( ['in'], BSTR, 'OutputLabel' ),
              ( ['in', 'out'], POINTER(c_double), 'iStep' ),
              ( ['in', 'out'], POINTER(c_double), 'JStep' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'GetStationRanges',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberStationRanges' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'UseStationStart' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'UseStationEnd' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StationStart' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StationEnd' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'GetSuperCutRequested',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Requested' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15), 'propget'], HRESULT, 'IRC2011',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_IRC2011)), 'pRetVal' )),
    COMMETHOD([dispid(16), 'propget'], HRESULT, 'JTG_D62_2004',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_JTG_D62_2004)), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'SetDemandCombo',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], BSTR, 'DemandName' ),
              ( ['in'], BSTR, 'DemandCombo' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'SetStationRanges',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'NumberStationRanges' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LocationType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'UseStationStart' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'UseStationEnd' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StationStart' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StationEnd' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19), 'propget'], HRESULT, 'RussianSNiP',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_RussianSNiP)), 'pRetVal' )),
    COMMETHOD([dispid(20), 'propget'], HRESULT, 'BS5400',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_BS5400)), 'pRetVal' )),
]
################################################################
## code template for cBridgeDesignRequestSuper implementation
##class cBridgeDesignRequestSuper_Impl(object):
##    @property
##    def AASHTO_LRFD_2007(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def AASHTO_STD_2002(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def AddDemand(self, RequestName, DemandName):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def CANCSAS606(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def ChangeDemandName(self, RequestName, DemandName, NewDemandName):
##        '-no docstring-'
##        #return pRetVal
##
##    def CountDemand(self, RequestName):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteDemand(self, RequestName, DemandName):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def EUROCODE(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetDemandCombo(self, RequestName, DemandName):
##        '-no docstring-'
##        #return DemandCombo, pRetVal
##
##    def GetDemandNameList(self, RequestName):
##        '-no docstring-'
##        #return NumberDemandNames, DemandName, pRetVal
##
##    def GetStagedCaseOutput(self, RequestName, DemandName):
##        '-no docstring-'
##        #return Count, OutputLabel, pRetVal
##
##    def GetStagedCaseStep(self, LoadCase, OutputLabel):
##        '-no docstring-'
##        #return iStep, JStep, pRetVal
##
##    def GetStationRanges(self, RequestName):
##        '-no docstring-'
##        #return NumberStationRanges, UseStationStart, UseStationEnd, StationStart, StationEnd, pRetVal
##
##    def GetSuperCutRequested(self, RequestName, CutIndex):
##        '-no docstring-'
##        #return Requested, pRetVal
##
##    @property
##    def IRC2011(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def JTG_D62_2004(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDemandCombo(self, RequestName, DemandName, DemandCombo):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetStationRanges(self, RequestName, NumberStationRanges):
##        '-no docstring-'
##        #return LocationType, UseStationStart, UseStationEnd, StationStart, StationEnd, pRetVal
##
##    @property
##    def RussianSNiP(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def BS5400(self):
##        '-no docstring-'
##        #return pRetVal
##

class cBridgeDesignRequestMember(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{C1DEB5DF-4948-45CB-968E-4723DFB27C76}')
    _idlflags_ = ['dual', 'oleautomation']
cBridgeDesignRequestMember._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'AllCodes',
              ( ['out', 'retval'], POINTER(POINTER(cBDRM_AllCodes)), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'CountDemand',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetDemandCombo',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], BSTR, 'DemandName' ),
              ( ['in', 'out'], POINTER(BSTR), 'DemandCombo' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetDemandNameList',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberDemandNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'DemandName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetSelectedMembers',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(eItemType)), 'ItemType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ItemName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBridgeDesignRequestMember implementation
##class cBridgeDesignRequestMember_Impl(object):
##    @property
##    def AllCodes(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def CountDemand(self, RequestName):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetDemandCombo(self, RequestName, DemandName):
##        '-no docstring-'
##        #return DemandCombo, pRetVal
##
##    def GetDemandNameList(self, RequestName):
##        '-no docstring-'
##        #return NumberDemandNames, DemandName, pRetVal
##
##    def GetSelectedMembers(self, RequestName):
##        '-no docstring-'
##        #return NumberItems, ItemType, ItemName, pRetVal
##

class cBDRS_CJ_D62_04_CBoxCrkPrin(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{AF8A71BB-3662-4450-B98D-A8BEF26EE475}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_CJ_D62_04_CBoxCrkStr(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{E3778B55-AE39-43CC-9CB8-C4CBF60A95F1}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_CJ_D62_04_CBoxCrkWth(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{CAA456B7-1BA8-44F3-98CA-F8122F872DB6}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_CJ_D62_04_CBoxFlex(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{18EE0E5C-93BD-416A-9021-6274C963ABAE}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_CJ_D62_04_CBoxPrin(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{FD23E56F-5D5C-411C-B160-5FF1F67E966C}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_CJ_D62_04_CBoxShear(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{F52F7F00-0081-41FC-98E1-B7F25D179B91}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_CJ_D62_04_CBoxStress(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{292F7DF6-B86E-46D9-AF09-E1BA111AE68F}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_CJ_D62_04_CBoxTdnStr(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{2321B717-875E-4031-8D7F-A920D05386F7}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_JTG_D62_2004._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'ConcBoxCrackPrincipal',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_CJ_D62_04_CBoxCrkPrin)), 'pRetVal' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'ConcBoxCrackStress',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_CJ_D62_04_CBoxCrkStr)), 'pRetVal' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'ConcBoxCrackWidth',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_CJ_D62_04_CBoxCrkWth)), 'pRetVal' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'ConcBoxFlexure',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_CJ_D62_04_CBoxFlex)), 'pRetVal' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'ConcBoxPrincipal',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_CJ_D62_04_CBoxPrin)), 'pRetVal' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'ConcBoxShear',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_CJ_D62_04_CBoxShear)), 'pRetVal' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'ConcBoxStress',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_CJ_D62_04_CBoxStress)), 'pRetVal' )),
    COMMETHOD([dispid(8), 'propget'], HRESULT, 'ConcBoxTendonStress',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_CJ_D62_04_CBoxTdnStr)), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetCheckType',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in', 'out'], POINTER(c_int), 'CheckType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'SetCheckType',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'CheckType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_JTG_D62_2004 implementation
##class cBDRS_JTG_D62_2004_Impl(object):
##    @property
##    def ConcBoxCrackPrincipal(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBoxCrackStress(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBoxCrackWidth(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBoxFlexure(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBoxPrincipal(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBoxShear(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBoxStress(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBoxTendonStress(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetCheckType(self, RequestName):
##        '-no docstring-'
##        #return CheckType, pRetVal
##
##    def SetCheckType(self, RequestName, CheckType):
##        '-no docstring-'
##        #return pRetVal
##

cPattern._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'SetPattern',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cPattern implementation
##class cPattern_Impl(object):
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def SetPattern(self, Name):
##        '-no docstring-'
##        #return pRetVal
##

class cBDRS_AA_S_02_CBoxFlex(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{3D1D2D35-13C0-4E61-B5B2-8F9DD5C87089}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_S_02_CBoxPrin(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{A6E01C93-228D-4FF9-8410-BD25604D4630}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_S_02_CBoxShear(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{45133598-71BC-4F5C-8255-4E3CCF640B81}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_AA_S_02_CBoxStress(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{ACF025CF-CE68-487C-9F04-9FA0CFBA84E5}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_AASHTO_STD_2002._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'ConcBoxFlexure',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_S_02_CBoxFlex)), 'pRetVal' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'ConcBoxPrincipal',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_S_02_CBoxPrin)), 'pRetVal' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'ConcBoxShear',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_S_02_CBoxShear)), 'pRetVal' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'ConcBoxStress',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_AA_S_02_CBoxStress)), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetCheckType',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in', 'out'], POINTER(c_int), 'CheckType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'SetCheckType',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'CheckType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AASHTO_STD_2002 implementation
##class cBDRS_AASHTO_STD_2002_Impl(object):
##    @property
##    def ConcBoxFlexure(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBoxPrincipal(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBoxShear(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBoxStress(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetCheckType(self, RequestName):
##        '-no docstring-'
##        #return CheckType, pRetVal
##
##    def SetCheckType(self, RequestName, CheckType):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_IRC2011_CBoxShr._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], BSTR, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_IRC2011_CBoxShr implementation
##class cBDRS_IRC2011_CBoxShr_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetCapacityParamString(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCapacityParamString(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##


# values for enumeration 'eDeckType'
eDeckType_Filled = 1
eDeckType_Unfilled = 2
eDeckType_SolidSlab = 3
eDeckType = c_int # enum

# values for enumeration 'eShellType'
eShellType_ShellThin = 1
eShellType_ShellThick = 2
eShellType_Membrane = 3
eShellType_PlateThin_DO_NOT_USE = 4
eShellType_PlateThick_DO_NOT_USE = 5
eShellType_Layered = 6
eShellType = c_int # enum

# values for enumeration 'eWallPropType'
eWallPropType_Specified = 1
eWallPropType_AutoSelectList = 2
eWallPropType = c_int # enum
cPropArea._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Count',
              ( ['in', 'optional'], c_int, 'PropType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetModifiers',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'optional'], c_int, 'PropType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetShellDesign',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_int), 'SteelLayoutOption' ),
              ( ['in', 'out'], POINTER(c_double), 'DesignCoverTopDir1' ),
              ( ['in', 'out'], POINTER(c_double), 'DesignCoverTopDir2' ),
              ( ['in', 'out'], POINTER(c_double), 'DesignCoverBotDir1' ),
              ( ['in', 'out'], POINTER(c_double), 'DesignCoverBotDir2' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetShellLayer',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberLayers' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LayerName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Thickness' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MatProp' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MatAng' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumIntegrationPts' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetShellLayer_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberLayers' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LayerName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Thickness' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumIntegrationPts' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MatProp' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MatAng' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'S11Type' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'S22Type' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'S12Type' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(42)], HRESULT, 'GetShellLayer_2',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberLayers' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LayerName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Thickness' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumIntegrationPts' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MatProp' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MatAng' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MatBehavior' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'S11Type' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'S22Type' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'S12Type' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetTypeOAPI',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'PropType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'SetModifiers',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'SetShellDesign',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_int, 'SteelLayoutOption' ),
              ( ['in'], c_double, 'DesignCoverTopDir1' ),
              ( ['in'], c_double, 'DesignCoverTopDir2' ),
              ( ['in'], c_double, 'DesignCoverBotDir1' ),
              ( ['in'], c_double, 'DesignCoverBotDir2' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'SetShellLayer',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberLayers' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LayerName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Thickness' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MatProp' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MatAng' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumIntegrationPts' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'SetShellLayer_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberLayers' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LayerName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Thickness' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumIntegrationPts' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MatProp' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MatAng' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'S11Type' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'S22Type' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'S12Type' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(43)], HRESULT, 'SetShellLayer_2',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberLayers' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LayerName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Thickness' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumIntegrationPts' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MatProp' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MatAng' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MatBehavior' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'S11Type' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'S22Type' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'S12Type' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetShell',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'ShellType' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'MatAng' ),
              ( ['in', 'out'], POINTER(c_double), 'Thickness' ),
              ( ['in', 'out'], POINTER(c_double), 'Bending' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetShell_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'ShellType' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IncludeDrillingDOF' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'MatAng' ),
              ( ['in', 'out'], POINTER(c_double), 'Thickness' ),
              ( ['in', 'out'], POINTER(c_double), 'Bending' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(36)], HRESULT, 'GetAsolid',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'MatAng' ),
              ( ['in', 'out'], POINTER(c_double), 'Arc' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Incompatible' ),
              ( ['in', 'out'], POINTER(BSTR), 'CSys' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(37)], HRESULT, 'GetNotionalSize',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'stype' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(38)], HRESULT, 'GetPlane',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'MyType' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'MatAng' ),
              ( ['in', 'out'], POINTER(c_double), 'Thickness' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Incompatible' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(39)], HRESULT, 'SetAsolid',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'MatAng' ),
              ( ['in'], c_double, 'Arc' ),
              ( ['in'], VARIANT_BOOL, 'Incompatible' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(40)], HRESULT, 'SetNotionalSize',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'stype' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(41)], HRESULT, 'SetPlane',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'MyType' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'MatAng' ),
              ( ['in'], c_double, 'Thickness' ),
              ( ['in'], VARIANT_BOOL, 'Incompatible' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'SetShell',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ShellType' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'MatAng' ),
              ( ['in'], c_double, 'Thickness' ),
              ( ['in'], c_double, 'Bending' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'SetShell_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ShellType' ),
              ( ['in'], VARIANT_BOOL, 'IncludeDrillingDOF' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'MatAng' ),
              ( ['in'], c_double, 'Thickness' ),
              ( ['in'], c_double, 'Bending' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'GetDeck',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(eDeckType), 'DeckType' ),
              ( ['in', 'out'], POINTER(eShellType), 'ShellType' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'Thickness' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'GetDeckFilled',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'SlabDepth' ),
              ( ['in', 'out'], POINTER(c_double), 'RibDepth' ),
              ( ['in', 'out'], POINTER(c_double), 'RibWidthTop' ),
              ( ['in', 'out'], POINTER(c_double), 'RibWidthBot' ),
              ( ['in', 'out'], POINTER(c_double), 'RibSpacing' ),
              ( ['in', 'out'], POINTER(c_double), 'ShearThickness' ),
              ( ['in', 'out'], POINTER(c_double), 'UnitWeight' ),
              ( ['in', 'out'], POINTER(c_double), 'ShearStudDia' ),
              ( ['in', 'out'], POINTER(c_double), 'ShearStudHt' ),
              ( ['in', 'out'], POINTER(c_double), 'ShearStudFu' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'GetDeckSolidSlab',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'SlabDepth' ),
              ( ['in', 'out'], POINTER(c_double), 'ShearStudDia' ),
              ( ['in', 'out'], POINTER(c_double), 'ShearStudHt' ),
              ( ['in', 'out'], POINTER(c_double), 'ShearStudFu' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'GetDeckUnfilled',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'RibDepth' ),
              ( ['in', 'out'], POINTER(c_double), 'RibWidthTop' ),
              ( ['in', 'out'], POINTER(c_double), 'RibWidthBot' ),
              ( ['in', 'out'], POINTER(c_double), 'RibSpacing' ),
              ( ['in', 'out'], POINTER(c_double), 'ShearThickness' ),
              ( ['in', 'out'], POINTER(c_double), 'UnitWeight' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'GetSlab',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(eSlabType), 'SlabType' ),
              ( ['in', 'out'], POINTER(eShellType), 'ShellType' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'Thickness' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(23)], HRESULT, 'GetSlabRibbed',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'OverallDepth' ),
              ( ['in', 'out'], POINTER(c_double), 'SlabThickness' ),
              ( ['in', 'out'], POINTER(c_double), 'StemWidthTop' ),
              ( ['in', 'out'], POINTER(c_double), 'StemWidthBot' ),
              ( ['in', 'out'], POINTER(c_double), 'RibSpacing' ),
              ( ['in', 'out'], POINTER(c_int), 'RibsParallelTo' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(24)], HRESULT, 'GetSlabWaffle',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'OverallDepth' ),
              ( ['in', 'out'], POINTER(c_double), 'SlabThickness' ),
              ( ['in', 'out'], POINTER(c_double), 'StemWidthTop' ),
              ( ['in', 'out'], POINTER(c_double), 'StemWidthBot' ),
              ( ['in', 'out'], POINTER(c_double), 'RibSpacingDir1' ),
              ( ['in', 'out'], POINTER(c_double), 'RibSpacingDir2' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(25)], HRESULT, 'GetWall',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(eWallPropType), 'WallPropType' ),
              ( ['in', 'out'], POINTER(eShellType), 'ShellType' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'Thickness' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(26)], HRESULT, 'GetWallAutoSelectList',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AutoSelectList' ),
              ( ['in', 'out'], POINTER(BSTR), 'StartingProperty' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(27)], HRESULT, 'SetDeck',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eDeckType, 'DeckType' ),
              ( ['in'], eShellType, 'ShellType' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'Thickness' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(28)], HRESULT, 'SetDeckFilled',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'SlabDepth' ),
              ( ['in'], c_double, 'RibDepth' ),
              ( ['in'], c_double, 'RibWidthTop' ),
              ( ['in'], c_double, 'RibWidthBot' ),
              ( ['in'], c_double, 'RibSpacing' ),
              ( ['in'], c_double, 'ShearThickness' ),
              ( ['in'], c_double, 'UnitWeight' ),
              ( ['in'], c_double, 'ShearStudDia' ),
              ( ['in'], c_double, 'ShearStudHt' ),
              ( ['in'], c_double, 'ShearStudFu' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(29)], HRESULT, 'SetDeckSolidSlab',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'SlabDepth' ),
              ( ['in'], c_double, 'ShearStudDia' ),
              ( ['in'], c_double, 'ShearStudHt' ),
              ( ['in'], c_double, 'ShearStudFu' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(30)], HRESULT, 'SetDeckUnfilled',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'RibDepth' ),
              ( ['in'], c_double, 'RibWidthTop' ),
              ( ['in'], c_double, 'RibWidthBot' ),
              ( ['in'], c_double, 'RibSpacing' ),
              ( ['in'], c_double, 'ShearThickness' ),
              ( ['in'], c_double, 'UnitWeight' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(31)], HRESULT, 'SetSlab',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eSlabType, 'SlabType' ),
              ( ['in'], eShellType, 'ShellType' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'Thickness' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(32)], HRESULT, 'SetSlabRibbed',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'OverallDepth' ),
              ( ['in'], c_double, 'SlabThickness' ),
              ( ['in'], c_double, 'StemWidthTop' ),
              ( ['in'], c_double, 'StemWidthBot' ),
              ( ['in'], c_double, 'RibSpacing' ),
              ( ['in'], c_int, 'RibsParallelTo' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(33)], HRESULT, 'SetSlabWaffle',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'OverallDepth' ),
              ( ['in'], c_double, 'SlabThickness' ),
              ( ['in'], c_double, 'StemWidthTop' ),
              ( ['in'], c_double, 'StemWidthBot' ),
              ( ['in'], c_double, 'RibSpacingDir1' ),
              ( ['in'], c_double, 'RibSpacingDir2' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(34)], HRESULT, 'SetWall',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eWallPropType, 'WallPropType' ),
              ( ['in'], eShellType, 'ShellType' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'Thickness' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(35)], HRESULT, 'SetWallAutoSelectList',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], _midlSAFEARRAY(BSTR), 'AutoSelectList' ),
              ( ['in', 'optional'], BSTR, 'StartingProperty', 'Median' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cPropArea implementation
##class cPropArea_Impl(object):
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self, PropType):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetModifiers(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetNameList(self, PropType):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetShellDesign(self, Name):
##        '-no docstring-'
##        #return MatProp, SteelLayoutOption, DesignCoverTopDir1, DesignCoverTopDir2, DesignCoverBotDir1, DesignCoverBotDir2, pRetVal
##
##    def GetShellLayer(self, Name):
##        '-no docstring-'
##        #return NumberLayers, LayerName, Dist, Thickness, MatProp, Nonlinear, MatAng, NumIntegrationPts, pRetVal
##
##    def GetShellLayer_1(self, Name):
##        '-no docstring-'
##        #return NumberLayers, LayerName, Dist, Thickness, MyType, NumIntegrationPts, MatProp, MatAng, S11Type, S22Type, S12Type, pRetVal
##
##    def GetShellLayer_2(self, Name):
##        '-no docstring-'
##        #return NumberLayers, LayerName, Dist, Thickness, MyType, NumIntegrationPts, MatProp, MatAng, MatBehavior, S11Type, S22Type, S12Type, pRetVal
##
##    def GetTypeOAPI(self, Name):
##        '-no docstring-'
##        #return PropType, pRetVal
##
##    def SetModifiers(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetShellDesign(self, Name, MatProp, SteelLayoutOption, DesignCoverTopDir1, DesignCoverTopDir2, DesignCoverBotDir1, DesignCoverBotDir2):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetShellLayer(self, Name, NumberLayers):
##        '-no docstring-'
##        #return LayerName, Dist, Thickness, MatProp, Nonlinear, MatAng, NumIntegrationPts, pRetVal
##
##    def SetShellLayer_1(self, Name):
##        '-no docstring-'
##        #return NumberLayers, LayerName, Dist, Thickness, MyType, NumIntegrationPts, MatProp, MatAng, S11Type, S22Type, S12Type, pRetVal
##
##    def SetShellLayer_2(self, Name):
##        '-no docstring-'
##        #return NumberLayers, LayerName, Dist, Thickness, MyType, NumIntegrationPts, MatProp, MatAng, MatBehavior, S11Type, S22Type, S12Type, pRetVal
##
##    def GetShell(self, Name):
##        '-no docstring-'
##        #return ShellType, MatProp, MatAng, Thickness, Bending, Color, Notes, GUID, pRetVal
##
##    def GetShell_1(self, Name):
##        '-no docstring-'
##        #return ShellType, IncludeDrillingDOF, MatProp, MatAng, Thickness, Bending, Color, Notes, GUID, pRetVal
##
##    def GetAsolid(self, Name):
##        '-no docstring-'
##        #return MatProp, MatAng, Arc, Incompatible, CSys, Color, Notes, GUID, pRetVal
##
##    def GetNotionalSize(self, Name):
##        '-no docstring-'
##        #return stype, Value, pRetVal
##
##    def GetPlane(self, Name):
##        '-no docstring-'
##        #return MyType, MatProp, MatAng, Thickness, Incompatible, Color, Notes, GUID, pRetVal
##
##    def SetAsolid(self, Name, MatProp, MatAng, Arc, Incompatible, CSys, Color, Notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetNotionalSize(self, Name, stype, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPlane(self, Name, MyType, MatProp, MatAng, Thickness, Incompatible, Color, Notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetShell(self, Name, ShellType, MatProp, MatAng, Thickness, Bending, Color, Notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetShell_1(self, Name, ShellType, IncludeDrillingDOF, MatProp, MatAng, Thickness, Bending, Color, Notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetDeck(self, Name):
##        '-no docstring-'
##        #return DeckType, ShellType, MatProp, Thickness, Color, Notes, GUID, pRetVal
##
##    def GetDeckFilled(self, Name):
##        '-no docstring-'
##        #return SlabDepth, RibDepth, RibWidthTop, RibWidthBot, RibSpacing, ShearThickness, UnitWeight, ShearStudDia, ShearStudHt, ShearStudFu, pRetVal
##
##    def GetDeckSolidSlab(self, Name):
##        '-no docstring-'
##        #return SlabDepth, ShearStudDia, ShearStudHt, ShearStudFu, pRetVal
##
##    def GetDeckUnfilled(self, Name):
##        '-no docstring-'
##        #return RibDepth, RibWidthTop, RibWidthBot, RibSpacing, ShearThickness, UnitWeight, pRetVal
##
##    def GetSlab(self, Name):
##        '-no docstring-'
##        #return SlabType, ShellType, MatProp, Thickness, Color, Notes, GUID, pRetVal
##
##    def GetSlabRibbed(self, Name):
##        '-no docstring-'
##        #return OverallDepth, SlabThickness, StemWidthTop, StemWidthBot, RibSpacing, RibsParallelTo, pRetVal
##
##    def GetSlabWaffle(self, Name):
##        '-no docstring-'
##        #return OverallDepth, SlabThickness, StemWidthTop, StemWidthBot, RibSpacingDir1, RibSpacingDir2, pRetVal
##
##    def GetWall(self, Name):
##        '-no docstring-'
##        #return WallPropType, ShellType, MatProp, Thickness, Color, Notes, GUID, pRetVal
##
##    def GetWallAutoSelectList(self, Name):
##        '-no docstring-'
##        #return AutoSelectList, StartingProperty, pRetVal
##
##    def SetDeck(self, Name, DeckType, ShellType, MatProp, Thickness, Color, Notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDeckFilled(self, Name, SlabDepth, RibDepth, RibWidthTop, RibWidthBot, RibSpacing, ShearThickness, UnitWeight, ShearStudDia, ShearStudHt, ShearStudFu):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDeckSolidSlab(self, Name, SlabDepth, ShearStudDia, ShearStudHt, ShearStudFu):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDeckUnfilled(self, Name, RibDepth, RibWidthTop, RibWidthBot, RibSpacing, ShearThickness, UnitWeight):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSlab(self, Name, SlabType, ShellType, MatProp, Thickness, Color, Notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSlabRibbed(self, Name, OverallDepth, SlabThickness, StemWidthTop, StemWidthBot, RibSpacing, RibsParallelTo):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSlabWaffle(self, Name, OverallDepth, SlabThickness, StemWidthTop, StemWidthBot, RibSpacingDir1, RibSpacingDir2):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetWall(self, Name, WallPropType, ShellType, MatProp, Thickness, Color, Notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetWallAutoSelectList(self, Name, AutoSelectList, StartingProperty):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_AA_L_07_CTBeamShearRt._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], BSTR, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_CTBeamShearRt implementation
##class cBDRS_AA_L_07_CTBeamShearRt_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetCapacityParamString(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCapacityParamString(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBASSteelIComp(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{E5E0D080-FF31-40E7-A13B-5674F18A1FB8}')
    _idlflags_ = ['dual', 'oleautomation']
cBASSteelICompResult._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'BASSteelIComp',
              ( ['out', 'retval'], POINTER(POINTER(cBASSteelIComp)), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'BridgeSuperCutForcesGirder',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], VARIANT_BOOL, 'ResultF1' ),
              ( ['in'], VARIANT_BOOL, 'ResultF2' ),
              ( ['in'], VARIANT_BOOL, 'ResultF3' ),
              ( ['in'], VARIANT_BOOL, 'ResultM1' ),
              ( ['in'], VARIANT_BOOL, 'ResultM2' ),
              ( ['in'], VARIANT_BOOL, 'ResultM3' ),
              ( ['in'], c_int, 'ResponseType' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'BridgeSuperCutLongitStressGirder',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_int, 'GirderPart' ),
              ( ['in'], c_double, 'StressAveraging' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'StressInSlab' ),
              ( ['in'], c_int, 'PointIndex' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Stress' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'BridgeSuperCutLongitStressGirder_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_int, 'GirderPart' ),
              ( ['in'], c_double, 'StressAveraging' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'StressInSlab' ),
              ( ['in'], c_double, 'SlabTStressLimit' ),
              ( ['in'], c_int, 'PointIndex' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Stress' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SlabCracked' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBASSteelICompResult implementation
##class cBASSteelICompResult_Impl(object):
##    @property
##    def BASSteelIComp(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def BridgeSuperCutForcesGirder(self, Name, CutIndex, GirderIndex, ResultF1, ResultF2, ResultF3, ResultM1, ResultM2, ResultM3, ResponseType):
##        '-no docstring-'
##        #return NumberResults, LoadCase, StepType, StepNum, F1, F2, F3, M1, M2, M3, pRetVal
##
##    def BridgeSuperCutLongitStressGirder(self, Name, CutIndex, GirderIndex, GirderPart, StressAveraging, PointIndex):
##        '-no docstring-'
##        #return StressInSlab, NumberResults, LoadCase, StepType, StepNum, Stress, pRetVal
##
##    def BridgeSuperCutLongitStressGirder_1(self, Name, CutIndex, GirderIndex, GirderPart, StressAveraging, SlabTStressLimit, PointIndex):
##        '-no docstring-'
##        #return StressInSlab, NumberResults, LoadCase, StepType, StepNum, Stress, SlabCracked, pRetVal
##

cBDRS_AA_L_07_SUCompStr._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_SUCompStr implementation
##class cBDRS_AA_L_07_SUCompStr_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBASConcSolidResult._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'BASConcSolid',
              ( ['out', 'retval'], POINTER(POINTER(cBASConcSolid)), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'BridgeSuperCutForcesGirder',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], VARIANT_BOOL, 'ResultF1' ),
              ( ['in'], VARIANT_BOOL, 'ResultF2' ),
              ( ['in'], VARIANT_BOOL, 'ResultF3' ),
              ( ['in'], VARIANT_BOOL, 'ResultM1' ),
              ( ['in'], VARIANT_BOOL, 'ResultM2' ),
              ( ['in'], VARIANT_BOOL, 'ResultM3' ),
              ( ['in'], c_int, 'ResponseType' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'BridgeSuperCutLongitStressGirder',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_double, 'StressAveraging' ),
              ( ['in'], c_int, 'PointIndex' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Stress' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBASConcSolidResult implementation
##class cBASConcSolidResult_Impl(object):
##    @property
##    def BASConcSolid(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def BridgeSuperCutForcesGirder(self, Name, CutIndex, GirderIndex, ResultF1, ResultF2, ResultF3, ResultM1, ResultM2, ResultM3, ResponseType):
##        '-no docstring-'
##        #return NumberResults, LoadCase, StepType, StepNum, F1, F2, F3, M1, M2, M3, pRetVal
##
##    def BridgeSuperCutLongitStressGirder(self, Name, CutIndex, GirderIndex, StressAveraging, PointIndex):
##        '-no docstring-'
##        #return NumberResults, LoadCase, StepType, StepNum, Stress, pRetVal
##

cPropPointSpring._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetLinks',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberLinks' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LinkNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LinkAxialDirs' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LinkAngles' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetPointSpringProp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'SpringOption' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'out'], POINTER(BSTR), 'CSys' ),
              ( ['in', 'out'], POINTER(BSTR), 'SoilProfile' ),
              ( ['in', 'out'], POINTER(BSTR), 'Footing' ),
              ( ['in', 'out'], POINTER(c_double), 'Period' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'iGUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'SetLinks',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberLinks' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LinkNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LinkAxialDirs' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LinkAngles' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'SetPointSpringProp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'SpringOption' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'optional'], BSTR, 'CSys', '' ),
              ( ['in', 'optional'], BSTR, 'SoilProfile', '' ),
              ( ['in', 'optional'], BSTR, 'Footing', '' ),
              ( ['in', 'optional'], c_double, 'Period', 0.0 ),
              ( ['in', 'optional'], c_int, 'Color', 0 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'iGUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cPropPointSpring implementation
##class cPropPointSpring_Impl(object):
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetLinks(self, Name):
##        '-no docstring-'
##        #return NumberLinks, LinkNames, LinkAxialDirs, LinkAngles, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetPointSpringProp(self, Name):
##        '-no docstring-'
##        #return SpringOption, K, CSys, SoilProfile, Footing, Period, Color, Notes, iGUID, pRetVal
##
##    def SetLinks(self, Name, NumberLinks):
##        '-no docstring-'
##        #return LinkNames, LinkAxialDirs, LinkAngles, pRetVal
##
##    def SetPointSpringProp(self, Name, SpringOption, CSys, SoilProfile, Footing, Period, Color, Notes, iGUID):
##        '-no docstring-'
##        #return K, pRetVal
##

class cSchedulerCallBack(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{8549EF0D-9331-4DF8-A336-0E649C5F06BA}')
    _idlflags_ = ['dual', 'oleautomation']
cSchedulerCallBack._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'SapModel',
              ( ['out', 'retval'], POINTER(POINTER(cSapModel)), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetSchedulerSettings',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'TimeUnits' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'values' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetSchedulerSettings',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'TimeUnits' ),
              ( ['in'], c_int, 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'values' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cSchedulerCallBack implementation
##class cSchedulerCallBack_Impl(object):
##    @property
##    def SapModel(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetSchedulerSettings(self, Name):
##        '-no docstring-'
##        #return TimeUnits, NumberItems, values, pRetVal
##
##    def SetSchedulerSettings(self, Name, TimeUnits, NumberItems):
##        '-no docstring-'
##        #return values, pRetVal
##


# values for enumeration 'eReturnCode'
eReturnCode_NotApplicable = -100
eReturnCode_NotImplemented = -99
eReturnCode_NoError = 0
eReturnCode_UnspecifiedError = 1
eReturnCode = c_int # enum
cSelect._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'All',
              ( ['in', 'optional'], VARIANT_BOOL, 'Deselect', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'ClearSelection',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetSelected',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ObjectType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'Group',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Deselect', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'InvertSelection',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'PreviousSelection',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'Constraint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Deselect', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'CoordinateRange',
              ( ['in'], c_double, 'XMin' ),
              ( ['in'], c_double, 'XMax' ),
              ( ['in'], c_double, 'YMin' ),
              ( ['in'], c_double, 'YMax' ),
              ( ['in'], c_double, 'ZMin' ),
              ( ['in'], c_double, 'ZMax' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Deselect', False ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'IncludeIntersections', False ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Point', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Line', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Area', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Solid', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Link', True ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'LinesParallelToCoordAxis',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'ParallelTo' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['in', 'optional'], c_double, 'Tolerance', 0.057 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Deselect', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'LinesParallelToLine',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Deselect', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'PlaneXY',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Deselect', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'PlaneXZ',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Deselect', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'PlaneYZ',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Deselect', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'PropertyArea',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Deselect', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'PropertyFrame',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Deselect', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'PropertyLink',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Deselect', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'PropertyMaterial',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Deselect', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'PropertyTendon',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Deselect', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'SupportedPoints',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Local' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Deselect', False ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SelectRestraints', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SelectJointSprings', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SelectLineSprings', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SelectAreaSprings', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SelectSolidSprings', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SelectOneJointLinks', True ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'PropertyCable',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Deselect', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'PropertyLinkFD',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Deselect', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'PropertySolid',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Deselect', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cSelect implementation
##class cSelect_Impl(object):
##    def All(self, Deselect):
##        '-no docstring-'
##        #return pRetVal
##
##    def ClearSelection(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetSelected(self):
##        '-no docstring-'
##        #return NumberItems, ObjectType, ObjectName, pRetVal
##
##    def Group(self, Name, Deselect):
##        '-no docstring-'
##        #return pRetVal
##
##    def InvertSelection(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def PreviousSelection(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def Constraint(self, Name, Deselect):
##        '-no docstring-'
##        #return pRetVal
##
##    def CoordinateRange(self, XMin, XMax, YMin, YMax, ZMin, ZMax, Deselect, CSys, IncludeIntersections, Point, Line, Area, Solid, Link):
##        '-no docstring-'
##        #return pRetVal
##
##    def LinesParallelToCoordAxis(self, CSys, Tolerance, Deselect):
##        '-no docstring-'
##        #return ParallelTo, pRetVal
##
##    def LinesParallelToLine(self, Name, Deselect):
##        '-no docstring-'
##        #return pRetVal
##
##    def PlaneXY(self, Name, Deselect):
##        '-no docstring-'
##        #return pRetVal
##
##    def PlaneXZ(self, Name, Deselect):
##        '-no docstring-'
##        #return pRetVal
##
##    def PlaneYZ(self, Name, Deselect):
##        '-no docstring-'
##        #return pRetVal
##
##    def PropertyArea(self, Name, Deselect):
##        '-no docstring-'
##        #return pRetVal
##
##    def PropertyFrame(self, Name, Deselect):
##        '-no docstring-'
##        #return pRetVal
##
##    def PropertyLink(self, Name, Deselect):
##        '-no docstring-'
##        #return pRetVal
##
##    def PropertyMaterial(self, Name, Deselect):
##        '-no docstring-'
##        #return pRetVal
##
##    def PropertyTendon(self, Name, Deselect):
##        '-no docstring-'
##        #return pRetVal
##
##    def SupportedPoints(self, CSys, Deselect, SelectRestraints, SelectJointSprings, SelectLineSprings, SelectAreaSprings, SelectSolidSprings, SelectOneJointLinks):
##        '-no docstring-'
##        #return DOF, pRetVal
##
##    def PropertyCable(self, Name, Deselect):
##        '-no docstring-'
##        #return pRetVal
##
##    def PropertyLinkFD(self, Name, Deselect):
##        '-no docstring-'
##        #return pRetVal
##
##    def PropertySolid(self, Name, Deselect):
##        '-no docstring-'
##        #return pRetVal
##

class cDAlAA_2015(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{AEB8FBC3-5191-4282-828B-ED621E59C6E3}')
    _idlflags_ = ['dual', 'oleautomation']
cDAlAA_2015._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDAlAA_2015 implementation
##class cDAlAA_2015_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_IRC2010_SteelUCompRebar._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_IRC2010_SteelUCompRebar implementation
##class cBDRS_IRC2010_SteelUCompRebar_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##


# values for enumeration 'eSuperObjectClass'
eSuperObjectClass_None = 0
eSuperObjectClass_SuperObject = 1
eSuperObjectClass_Foundation = 2
eSuperObjectClass_BridgeFoundation = 3
eSuperObjectClass = c_int # enum
cBDRS_AA_L_07_CTBeamServiceRt._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], BSTR, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_CTBeamServiceRt implementation
##class cBDRS_AA_L_07_CTBeamServiceRt_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetCapacityParamString(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCapacityParamString(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cDCoMexican_RCDF_2017(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{5F689146-74D6-4A03-B214-841B78ED8F78}')
    _idlflags_ = ['dual', 'oleautomation']
cDCoMexican_RCDF_2017._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDCoMexican_RCDF_2017 implementation
##class cDCoMexican_RCDF_2017_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBASConcSlab._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'CountSuperCutStressPoint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in', 'out'], POINTER(c_int), 'CountPoint' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetSuperCutGirderRebarLong',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'Mat' ),
              ( ['in', 'out'], POINTER(c_int), 'RebarCount' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RebarX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RebarY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'DType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'RebarSize' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberBars' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetSuperCutGirderRebarTransv',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_double, 'DistBefore' ),
              ( ['in'], c_double, 'DistAfter' ),
              ( ['in', 'out'], POINTER(BSTR), 'Mat' ),
              ( ['in', 'out'], POINTER(c_double), 'RebarTransV' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetSuperCutSectionPropsAtY',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_double, 'Y' ),
              ( ['in'], VARIANT_BOOL, 'AboveY' ),
              ( ['in', 'out'], POINTER(c_double), 'YCG' ),
              ( ['in', 'out'], POINTER(c_double), 'Area' ),
              ( ['in', 'out'], POINTER(c_double), 'Inertia' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetSuperCutSectionValues',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetSuperCutSlabCoordsAtX',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_double, 'X' ),
              ( ['in', 'out'], POINTER(c_int), 'Status' ),
              ( ['in', 'out'], POINTER(c_double), 'Y1' ),
              ( ['in', 'out'], POINTER(c_double), 'Y2' ),
              ( ['in', 'out'], POINTER(c_double), 'Y3' ),
              ( ['in', 'out'], POINTER(c_double), 'Y4' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetSuperCutStressPoint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'PointIndex' ),
              ( ['in', 'out'], POINTER(c_double), 'X' ),
              ( ['in', 'out'], POINTER(c_double), 'Y' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_int), 'Location' ),
              ( ['in', 'out'], POINTER(BSTR), 'Note' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetSuperCutTendonNames',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'TendonIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'BridgeTendon' ),
              ( ['in', 'out'], POINTER(BSTR), 'TendonObj' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetSuperCutTendonValues',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'TendonIndex' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetSuperCutGirderRebarLong_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'Mat' ),
              ( ['in', 'out'], POINTER(c_int), 'RebarCount' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RebarX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RebarY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'DType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'RebarSize' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AreaFactor' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBASConcSlab implementation
##class cBASConcSlab_Impl(object):
##    def CountSuperCutStressPoint(self, Name, CutIndex):
##        '-no docstring-'
##        #return CountPoint, pRetVal
##
##    def GetSuperCutGirderRebarLong(self, Name, CutIndex):
##        '-no docstring-'
##        #return Mat, RebarCount, RebarX, RebarY, DType, RebarSize, NumberBars, pRetVal
##
##    def GetSuperCutGirderRebarTransv(self, Name, CutIndex, DistBefore, DistAfter):
##        '-no docstring-'
##        #return Mat, RebarTransV, pRetVal
##
##    def GetSuperCutSectionPropsAtY(self, Name, CutIndex, Y, AboveY):
##        '-no docstring-'
##        #return YCG, Area, Inertia, pRetVal
##
##    def GetSuperCutSectionValues(self, Name, CutIndex, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetSuperCutSlabCoordsAtX(self, Name, CutIndex, X):
##        '-no docstring-'
##        #return Status, Y1, Y2, Y3, Y4, pRetVal
##
##    def GetSuperCutStressPoint(self, Name, CutIndex, PointIndex):
##        '-no docstring-'
##        #return X, Y, MatProp, Location, Note, pRetVal
##
##    def GetSuperCutTendonNames(self, Name, CutIndex, TendonIndex):
##        '-no docstring-'
##        #return BridgeTendon, TendonObj, pRetVal
##
##    def GetSuperCutTendonValues(self, Name, CutIndex, TendonIndex, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetSuperCutGirderRebarLong_1(self, Name, CutIndex):
##        '-no docstring-'
##        #return Mat, RebarCount, RebarX, RebarY, DType, RebarSize, NumberBars, AreaFactor, pRetVal
##

cBDRS_AA_L_07_SICompFatig._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_SICompFatig implementation
##class cBDRS_AA_L_07_SICompFatig_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cDStChinese_2010(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{80F45698-0526-4C55-8480-8CFF5CE5B105}')
    _idlflags_ = ['dual', 'oleautomation']
cDStChinese_2010._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDStChinese_2010 implementation
##class cDStChinese_2010_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBCD_Brace(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{1518265F-34F4-44B5-BE17-22E37B09A7E6}')
    _idlflags_ = ['dual', 'oleautomation']
cBCD_Brace._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetDiaphragmProp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'BraceType' ),
              ( ['in', 'out'], POINTER(c_int), 'IncludeTopChord' ),
              ( ['in', 'out'], POINTER(BSTR), 'SectTopChord' ),
              ( ['in', 'out'], POINTER(c_int), 'IncludeBrace' ),
              ( ['in', 'out'], POINTER(BSTR), 'SectBrace' ),
              ( ['in', 'out'], POINTER(c_int), 'IncludeBotChord' ),
              ( ['in', 'out'], POINTER(BSTR), 'SectBotChord' ),
              ( ['in', 'out'], POINTER(c_double), 'WorkPointTop' ),
              ( ['in', 'out'], POINTER(c_double), 'WorkPointBot' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetDiaphragmProp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'BraceType' ),
              ( ['in'], c_int, 'IncludeTopChord' ),
              ( ['in'], BSTR, 'SectTopChord' ),
              ( ['in'], c_int, 'IncludeBrace' ),
              ( ['in'], BSTR, 'SectBrace' ),
              ( ['in'], c_int, 'IncludeBotChord' ),
              ( ['in'], BSTR, 'SectBotChord' ),
              ( ['in'], c_double, 'WorkPointTop' ),
              ( ['in'], c_double, 'WorkPointBot' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBCD_Brace implementation
##class cBCD_Brace_Impl(object):
##    def GetDiaphragmProp(self, Name):
##        '-no docstring-'
##        #return BraceType, IncludeTopChord, SectTopChord, IncludeBrace, SectBrace, IncludeBotChord, SectBotChord, WorkPointTop, WorkPointBot, pRetVal
##
##    def SetDiaphragmProp(self, Name, BraceType, IncludeTopChord, SectTopChord, IncludeBrace, SectBrace, IncludeBotChord, SectBotChord, WorkPointTop, WorkPointBot):
##        '-no docstring-'
##        #return pRetVal
##


# values for enumeration 'eBridgeCodeAASHTO'
eBridgeCodeAASHTO_AASHTO_STD_2002 = 0
eBridgeCodeAASHTO_AASHTO_LRFD_2007 = 1
eBridgeCodeAASHTO_AASHTO_LRFD_2012 = 2
eBridgeCodeAASHTO_AASHTO_LRFD_2014 = 3
eBridgeCodeAASHTO_AASHTO_LRFD_2017 = 4
eBridgeCodeAASHTO = c_int # enum
class cBASPrecastComp(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{A938FDA2-F248-4493-A39C-E354A5E52309}')
    _idlflags_ = ['dual', 'oleautomation']
cBASPrecastComp._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'CountSuperCutStressPointGirder',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_int, 'GirderPart' ),
              ( ['in', 'out'], POINTER(c_int), 'CountPoint' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetSuperCutGirderNames',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'sname' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetSuperCutGirderRebarLong',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'Mat' ),
              ( ['in', 'out'], POINTER(c_int), 'RebarCount' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RebarX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RebarY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'DType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'RebarSize' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberBars' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetSuperCutGirderRebarTransv',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_double, 'DistBefore' ),
              ( ['in'], c_double, 'DistAfter' ),
              ( ['in', 'out'], POINTER(BSTR), 'Mat' ),
              ( ['in', 'out'], POINTER(c_double), 'RebarTransV' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetSuperCutGirderTendonNames',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_int, 'TendonIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'BridgeTendon' ),
              ( ['in', 'out'], POINTER(BSTR), 'TendonObj' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetSuperCutGirderTendonValues',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_int, 'TendonIndex' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetSuperCutGirderValues',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetSuperCutSectionValues',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetSuperCutStressPointGirder',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_int, 'GirderPart' ),
              ( ['in'], c_int, 'PointIndex' ),
              ( ['in', 'out'], POINTER(c_double), 'X' ),
              ( ['in', 'out'], POINTER(c_double), 'Y' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetSuperCutStressPointGirder_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_int, 'GirderPart' ),
              ( ['in'], c_int, 'PointIndex' ),
              ( ['in', 'out'], POINTER(c_double), 'X' ),
              ( ['in', 'out'], POINTER(c_double), 'Y' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_int), 'Location' ),
              ( ['in', 'out'], POINTER(BSTR), 'Note' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetSuperCutGirderPropsAtY',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_double, 'Y' ),
              ( ['in'], VARIANT_BOOL, 'AboveY' ),
              ( ['in', 'out'], POINTER(c_double), 'YCG' ),
              ( ['in', 'out'], POINTER(c_double), 'Area' ),
              ( ['in', 'out'], POINTER(c_double), 'Inertia' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetSuperCutGirderRebarTransvSpac',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_int, 'DirectionFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'RebarSpacing' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'GetSuperCutGirderRebarLong_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'Mat' ),
              ( ['in', 'out'], POINTER(c_int), 'RebarCount' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RebarX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RebarY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'DType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'RebarSize' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AreaFactor' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBASPrecastComp implementation
##class cBASPrecastComp_Impl(object):
##    def CountSuperCutStressPointGirder(self, Name, CutIndex, GirderIndex, GirderPart):
##        '-no docstring-'
##        #return CountPoint, pRetVal
##
##    def GetSuperCutGirderNames(self, Name, CutIndex, GirderIndex, Item):
##        '-no docstring-'
##        #return sname, pRetVal
##
##    def GetSuperCutGirderRebarLong(self, Name, CutIndex, GirderIndex):
##        '-no docstring-'
##        #return Mat, RebarCount, RebarX, RebarY, DType, RebarSize, NumberBars, pRetVal
##
##    def GetSuperCutGirderRebarTransv(self, Name, CutIndex, GirderIndex, DistBefore, DistAfter):
##        '-no docstring-'
##        #return Mat, RebarTransV, pRetVal
##
##    def GetSuperCutGirderTendonNames(self, Name, CutIndex, GirderIndex, TendonIndex):
##        '-no docstring-'
##        #return BridgeTendon, TendonObj, pRetVal
##
##    def GetSuperCutGirderTendonValues(self, Name, CutIndex, GirderIndex, TendonIndex, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetSuperCutGirderValues(self, Name, CutIndex, GirderIndex, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetSuperCutSectionValues(self, Name, CutIndex, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetSuperCutStressPointGirder(self, Name, CutIndex, GirderIndex, GirderPart, PointIndex):
##        '-no docstring-'
##        #return X, Y, MatProp, pRetVal
##
##    def GetSuperCutStressPointGirder_1(self, Name, CutIndex, GirderIndex, GirderPart, PointIndex):
##        '-no docstring-'
##        #return X, Y, MatProp, Location, Note, pRetVal
##
##    def GetSuperCutGirderPropsAtY(self, Name, CutIndex, GirderIndex, Y, AboveY):
##        '-no docstring-'
##        #return YCG, Area, Inertia, pRetVal
##
##    def GetSuperCutGirderRebarTransvSpac(self, Name, CutIndex, GirderIndex, DirectionFlag):
##        '-no docstring-'
##        #return RebarSpacing, pRetVal
##
##    def GetSuperCutGirderRebarLong_1(self, Name, CutIndex, GirderIndex):
##        '-no docstring-'
##        #return Mat, RebarCount, RebarX, RebarY, DType, RebarSize, NumberBars, AreaFactor, pRetVal
##

cBASSteelIComp._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'CountSuperCutStressPointGirder',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_int, 'GirderPart' ),
              ( ['in', 'out'], POINTER(c_int), 'CountPoint' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetCrossDiaphragms',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in', 'out'], POINTER(c_int), 'Count' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SpanNumber' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GirderDist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Side' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Skew' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'DiaphProperty' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetGirderDistance',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in', 'out'], POINTER(c_int), 'Span' ),
              ( ['in', 'out'], POINTER(c_double), 'GirderDistance' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetGirderLength',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in', 'out'], POINTER(c_int), 'SpanCount' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Length' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetSlabStatusAtGirder',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], BSTR, 'LoadCase' ),
              ( ['in'], c_double, 'StepNum' ),
              ( ['in', 'out'], POINTER(c_int), 'Status' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetSpanGirderNames',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Span' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetSuperCutGirderNames',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'sname' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetSuperCutGirderRebarLong',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'Mat' ),
              ( ['in', 'out'], POINTER(c_int), 'RebarCount' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RebarX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RebarY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'DType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'RebarSize' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberBars' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetSuperCutGirderValues',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetSuperCutSectionValues',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetSuperCutStressPointGirder',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_int, 'GirderPart' ),
              ( ['in'], c_int, 'PointIndex' ),
              ( ['in', 'out'], POINTER(c_double), 'X' ),
              ( ['in', 'out'], POINTER(c_double), 'Y' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_int), 'Location' ),
              ( ['in', 'out'], POINTER(BSTR), 'Note' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetSuperCutGirderFlangeNetAreaRatios',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in', 'out'], POINTER(c_double), 'TopAreaRatio' ),
              ( ['in', 'out'], POINTER(c_double), 'BotAreaRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'GetGirderDiaphragmsCutIndex',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in', 'out'], POINTER(c_int), 'DwnDiaphCutIndex1' ),
              ( ['in', 'out'], POINTER(c_int), 'DwnDiaphCutIndex2' ),
              ( ['in', 'out'], POINTER(c_double), 'DwnDistRatio' ),
              ( ['in', 'out'], POINTER(c_int), 'UpDiaphCutIndex1' ),
              ( ['in', 'out'], POINTER(c_int), 'UpDiaphCutIndex2' ),
              ( ['in', 'out'], POINTER(c_double), 'UpDistRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'GetSuperCutGirderAvailability',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in', 'out'], POINTER(c_int), 'MaxGirderCount' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'GirderPresenceArray' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'GetPanelInfo',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'PanelIndex' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'GetSuperCutGirderRebarLong_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'Mat' ),
              ( ['in', 'out'], POINTER(c_int), 'RebarCount' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RebarX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RebarY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'DType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'RebarSize' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AreaFactor' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBASSteelIComp implementation
##class cBASSteelIComp_Impl(object):
##    def CountSuperCutStressPointGirder(self, Name, CutIndex, GirderIndex, GirderPart):
##        '-no docstring-'
##        #return CountPoint, pRetVal
##
##    def GetCrossDiaphragms(self, Name, GirderIndex):
##        '-no docstring-'
##        #return Count, SpanNumber, GirderDist, Side, Skew, DiaphProperty, pRetVal
##
##    def GetGirderDistance(self, Name, CutIndex, GirderIndex):
##        '-no docstring-'
##        #return Span, GirderDistance, pRetVal
##
##    def GetGirderLength(self, Name, GirderIndex):
##        '-no docstring-'
##        #return SpanCount, Length, pRetVal
##
##    def GetSlabStatusAtGirder(self, Name, CutIndex, GirderIndex, LoadCase, StepNum):
##        '-no docstring-'
##        #return Status, pRetVal
##
##    def GetSpanGirderNames(self, Name, Span, GirderIndex, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetSuperCutGirderNames(self, Name, CutIndex, GirderIndex, Item):
##        '-no docstring-'
##        #return sname, pRetVal
##
##    def GetSuperCutGirderRebarLong(self, Name, CutIndex, GirderIndex):
##        '-no docstring-'
##        #return Mat, RebarCount, RebarX, RebarY, DType, RebarSize, NumberBars, pRetVal
##
##    def GetSuperCutGirderValues(self, Name, CutIndex, GirderIndex, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetSuperCutSectionValues(self, Name, CutIndex, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetSuperCutStressPointGirder(self, Name, CutIndex, GirderIndex, GirderPart, PointIndex):
##        '-no docstring-'
##        #return X, Y, MatProp, Location, Note, pRetVal
##
##    def GetSuperCutGirderFlangeNetAreaRatios(self, Name, CutIndex, GirderIndex):
##        '-no docstring-'
##        #return TopAreaRatio, BotAreaRatio, pRetVal
##
##    def GetGirderDiaphragmsCutIndex(self, Name, CutIndex, GirderIndex):
##        '-no docstring-'
##        #return DwnDiaphCutIndex1, DwnDiaphCutIndex2, DwnDistRatio, UpDiaphCutIndex1, UpDiaphCutIndex2, UpDistRatio, pRetVal
##
##    def GetSuperCutGirderAvailability(self, Name, CutIndex):
##        '-no docstring-'
##        #return MaxGirderCount, GirderPresenceArray, pRetVal
##
##    def GetPanelInfo(self, Name, PanelIndex, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetSuperCutGirderRebarLong_1(self, Name, CutIndex, GirderIndex):
##        '-no docstring-'
##        #return Mat, RebarCount, RebarX, RebarY, DType, RebarSize, NumberBars, AreaFactor, pRetVal
##


# values for enumeration 'eLinkPropType'
eLinkPropType_Linear = 1
eLinkPropType_Damper = 2
eLinkPropType_Gap = 3
eLinkPropType_Hook = 4
eLinkPropType_PlasticWen = 5
eLinkPropType_Isolator1 = 6
eLinkPropType_Isolator2 = 7
eLinkPropType_MultilinearElastic = 8
eLinkPropType_MultilinearPlastic = 9
eLinkPropType_Isolator3 = 10
eLinkPropType_Isolator4 = 11
eLinkPropType_DamperLinearExponential = 12
eLinkPropType_DamperBilinear = 13
eLinkPropType_DamperFrictionSpring = 14
eLinkPropType = c_int # enum

# values for enumeration 'eBridgeResponsePart'
eBridgeResponsePart_Entire_Bridge_Section = 1
eBridgeResponsePart_Girder = 2
eBridgeResponsePart_Beam = 3
eBridgeResponsePart_Web = 4
eBridgeResponsePart_Slab = 5
eBridgeResponsePart_All_Girders = 6
eBridgeResponsePart_All_Beams = 7
eBridgeResponsePart_All_Webs = 8
eBridgeResponsePart_All_Slabs = 9
eBridgeResponsePart_Entire_Section_Plus_All_Girders = 10
eBridgeResponsePart = c_int # enum

# values for enumeration 'eBridgeResponseForce'
eBridgeResponseForce_Axial_Force_P = 1
eBridgeResponseForce_Shear_Vertical_V2 = 2
eBridgeResponseForce_Shear_Horizontal_V3 = 3
eBridgeResponseForce_Torsion_T = 4
eBridgeResponseForce_Moment_About_Vertical_Axis_M2 = 5
eBridgeResponseForce_Moment_About_Horizontal_Axis_M3 = 6
eBridgeResponseForce = c_int # enum

# values for enumeration 'eBridgeResponseStress'
eBridgeResponseStress_S11_Longitudinal_Top_Left = 0
eBridgeResponseStress_S11_Longitudinal_Top_Center = 1
eBridgeResponseStress_S11_Longitudinal_Top_Right = 2
eBridgeResponseStress_S11_Longitudinal_Top_Beam_Center = 3
eBridgeResponseStress_S11_Longitudinal_Top_Envelope = 4
eBridgeResponseStress_S11_Longitudinal_Top_ULeft_Left = 5
eBridgeResponseStress_S11_Longitudinal_Top_ULeft_Center = 6
eBridgeResponseStress_S11_Longitudinal_Top_ULeft_Right = 7
eBridgeResponseStress_S11_Longitudinal_Top_ULeft_Envelope = 8
eBridgeResponseStress_S11_Longitudinal_Top_URight_Left = 9
eBridgeResponseStress_S11_Longitudinal_Top_URight_Center = 10
eBridgeResponseStress_S11_Longitudinal_Top_URight_Right = 11
eBridgeResponseStress_S11_Longitudinal_Top_URight_Envelope = 12
eBridgeResponseStress_S11_Longitudinal_Bot_Left = 13
eBridgeResponseStress_S11_Longitudinal_Bot_Center = 14
eBridgeResponseStress_S11_Longitudinal_Bot_Right = 15
eBridgeResponseStress_S11_Longitudinal_Bot_Beam_Left = 16
eBridgeResponseStress_S11_Longitudinal_Bot_Beam_Right = 17
eBridgeResponseStress_S11_Longitudinal_Bot_Envelope = 18
eBridgeResponseStress_S11_Longitudinal_Top_Bot_Left = 19
eBridgeResponseStress_S11_Longitudinal_Top_Bot_Center = 20
eBridgeResponseStress_S11_Longitudinal_Top_Bot_Right = 21
eBridgeResponseStress_S11_Lateral_Bending_Top = 22
eBridgeResponseStress_S11_Lateral_Bending_Top_ULeft = 23
eBridgeResponseStress_S11_Lateral_Bending_Top_URight = 24
eBridgeResponseStress_S11_Lateral_Bending_Bot = 25
eBridgeResponseStress = c_int # enum

# values for enumeration 'eBridgeResponseDisplDOF'
eBridgeResponseDisplDOF_Vertical_Displacement = 0
eBridgeResponseDisplDOF_Transverse_Displacement = 1
eBridgeResponseDisplDOF_Longitudinal_Displacement = 2
eBridgeResponseDisplDOF_Longitudinal_Rotation = 3
eBridgeResponseDisplDOF_Avg_Longitudinal_Rotation = 4
eBridgeResponseDisplDOF = c_int # enum

# values for enumeration 'eBridgeResponseDisplLoc'
eBridgeResponseDisplLoc_Web_Top = 0
eBridgeResponseDisplLoc_Web_Bottom = 1
eBridgeResponseDisplLoc_Web = 2
eBridgeResponseDisplLoc_Left_Web_Top = 3
eBridgeResponseDisplLoc_Left_Web_Bottom = 4
eBridgeResponseDisplLoc_Left_Web = 5
eBridgeResponseDisplLoc_Right_Web_Top = 6
eBridgeResponseDisplLoc_Right_Web_Bottom = 7
eBridgeResponseDisplLoc_Right_Web = 8
eBridgeResponseDisplLoc_Slab_Center = 9
eBridgeResponseDisplLoc = c_int # enum
cNamedSet._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetJointRespSpec',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'LoadCase' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberJoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'JointNames' ),
              ( ['in', 'out'], POINTER(BSTR), 'CoordSys' ),
              ( ['in', 'out'], POINTER(c_int), 'Direction' ),
              ( ['in', 'out'], POINTER(c_int), 'Abscissa' ),
              ( ['in', 'out'], POINTER(c_int), 'Ordinate' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'DefaultFreq' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'StructuralFreq' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberUserFreq' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'UserFreqValues' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberDampValues' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DampingValues' ),
              ( ['in', 'out'], POINTER(c_int), 'AbscissaPlotType' ),
              ( ['in', 'out'], POINTER(c_double), 'SpectrumWidening' ),
              ( ['in', 'out'], POINTER(c_int), 'OrdinatePlotType' ),
              ( ['in', 'out'], POINTER(c_double), 'OrdinateScaleFactor' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetJointRespSpec',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadCase' ),
              ( ['in'], c_int, 'NumberJoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'JointNames' ),
              ( ['in'], BSTR, 'CoordSys' ),
              ( ['in'], c_int, 'Direction' ),
              ( ['in'], c_int, 'Abscissa' ),
              ( ['in'], c_int, 'Ordinate' ),
              ( ['in'], VARIANT_BOOL, 'DefaultFreq' ),
              ( ['in'], VARIANT_BOOL, 'StructuralFreq' ),
              ( ['in'], c_int, 'NumberUserFreq' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'UserFreqValues' ),
              ( ['in'], c_int, 'NumberDampValues' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DampingValues' ),
              ( ['in', 'optional'], c_int, 'AbscissaPlotType', 2 ),
              ( ['in', 'optional'], c_double, 'SpectrumWidening', 0.0 ),
              ( ['in', 'optional'], c_int, 'OrdinatePlotType', 1 ),
              ( ['in', 'optional'], c_double, 'OrdinateScaleFactor', 1.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetBridgeResponseForce',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'BridgeObj' ),
              ( ['in'], BSTR, 'CaseCboName' ),
              ( ['in'], eBridgeResponsePart, 'ResultFor' ),
              ( ['in'], c_int, 'PartID' ),
              ( ['in'], eBridgeResponseForce, 'Response' ),
              ( ['in'], c_int, 'MultiValOpt' ),
              ( ['in'], BSTR, 'iStep' ),
              ( ['in', 'optional'], eUnits, 'Units', 3 ),
              ( ['in', 'optional'], c_int, 'DistOpt', 0 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'TendonForce', False ),
              ( ['in', 'optional'], c_int, 'CaseOpt', 1 ),
              ( ['in', 'optional'], c_double, 'PhaseAngle', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetBridgeResponseStress',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'BridgeObj' ),
              ( ['in'], BSTR, 'CaseCboName' ),
              ( ['in'], eBridgeResponsePart, 'ResultFor' ),
              ( ['in'], c_int, 'PartID' ),
              ( ['in'], eBridgeResponseStress, 'Response' ),
              ( ['in'], c_int, 'MultiValOpt' ),
              ( ['in'], BSTR, 'iStep' ),
              ( ['in', 'optional'], eUnits, 'Units', 3 ),
              ( ['in', 'optional'], c_int, 'DistOpt', 0 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'TendonForce', False ),
              ( ['in', 'optional'], c_int, 'CaseOpt', 1 ),
              ( ['in', 'optional'], c_double, 'PhaseAngle', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'SetBridgeResponseDisplacement',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'BridgeObj' ),
              ( ['in'], BSTR, 'CaseCboName' ),
              ( ['in'], VARIANT_BOOL, 'TenthPoint' ),
              ( ['in'], eBridgeResponsePart, 'ResultFor' ),
              ( ['in'], c_int, 'PartID' ),
              ( ['in'], eBridgeResponseDisplDOF, 'ResponseDOF' ),
              ( ['in'], eBridgeResponseDisplLoc, 'ResponseLoc' ),
              ( ['in'], c_int, 'MultiValOpt' ),
              ( ['in'], BSTR, 'iStep' ),
              ( ['in', 'optional'], eUnits, 'Units', 3 ),
              ( ['in', 'optional'], c_int, 'DistOpt', 0 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'TendonForce', False ),
              ( ['in', 'optional'], c_int, 'CaseOpt', 1 ),
              ( ['in', 'optional'], c_double, 'PhaseAngle', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'SetBridgeResponseDesignRating',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'BridgeObj' ),
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], eBridgeResponsePart, 'ResultFor' ),
              ( ['in'], c_int, 'PartID' ),
              ( ['in'], eBridgeResponseDesignRating, 'Response' ),
              ( ['in', 'optional'], c_int, 'MultiValOpt', 1 ),
              ( ['in', 'optional'], eUnits, 'Units', 3 ),
              ( ['in', 'optional'], c_int, 'DistOpt', 0 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'ShowLimit1', False ),
              ( ['in', 'optional'], VARIANT_BOOL, 'ShowLimit2', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cNamedSet implementation
##class cNamedSet_Impl(object):
##    def GetJointRespSpec(self, Name):
##        '-no docstring-'
##        #return LoadCase, NumberJoints, JointNames, CoordSys, Direction, Abscissa, Ordinate, DefaultFreq, StructuralFreq, NumberUserFreq, UserFreqValues, NumberDampValues, DampingValues, AbscissaPlotType, SpectrumWidening, OrdinatePlotType, OrdinateScaleFactor, pRetVal
##
##    def SetJointRespSpec(self, Name, LoadCase, NumberJoints, CoordSys, Direction, Abscissa, Ordinate, DefaultFreq, StructuralFreq, NumberUserFreq, NumberDampValues, AbscissaPlotType, SpectrumWidening, OrdinatePlotType, OrdinateScaleFactor):
##        '-no docstring-'
##        #return JointNames, UserFreqValues, DampingValues, pRetVal
##
##    def SetBridgeResponseForce(self, Name, BridgeObj, CaseCboName, ResultFor, PartID, Response, MultiValOpt, iStep, Units, DistOpt, TendonForce, CaseOpt, PhaseAngle):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetBridgeResponseStress(self, Name, BridgeObj, CaseCboName, ResultFor, PartID, Response, MultiValOpt, iStep, Units, DistOpt, TendonForce, CaseOpt, PhaseAngle):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetBridgeResponseDisplacement(self, Name, BridgeObj, CaseCboName, TenthPoint, ResultFor, PartID, ResponseDOF, ResponseLoc, MultiValOpt, iStep, Units, DistOpt, TendonForce, CaseOpt, PhaseAngle):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetBridgeResponseDesignRating(self, Name, BridgeObj, RequestName, ResultFor, PartID, Response, MultiValOpt, Units, DistOpt, ShowLimit1, ShowLimit2):
##        '-no docstring-'
##        #return pRetVal
##


# values for enumeration 'eBridgeCodeInterims'
eBridgeCodeInterims_NoInterims = 0
eBridgeCodeInterims_Interim_2011 = 1
eBridgeCodeInterims_Interim_2012 = 2
eBridgeCodeInterims_Interim_2013 = 3
eBridgeCodeInterims_Interim_2014 = 4
eBridgeCodeInterims_Interim_2015 = 5
eBridgeCodeInterims = c_int # enum

# values for enumeration 'eDiaphragmOption'
eDiaphragmOption_Disconnect = 1
eDiaphragmOption_FromShellObject = 2
eDiaphragmOption_DefinedDiaphragm = 3
eDiaphragmOption = c_int # enum
cPropAreaSpring._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetAreaSpringProp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'U1' ),
              ( ['in', 'out'], POINTER(c_double), 'U2' ),
              ( ['in', 'out'], POINTER(c_double), 'U3' ),
              ( ['in', 'out'], POINTER(c_int), 'NonlinearOption3' ),
              ( ['in', 'out'], POINTER(c_int), 'SpringOption' ),
              ( ['in', 'out'], POINTER(BSTR), 'SoilProfile' ),
              ( ['in', 'out'], POINTER(c_double), 'EndLengthRatio' ),
              ( ['in', 'out'], POINTER(c_double), 'Period' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'iGUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'SetAreaSpringProp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'U1' ),
              ( ['in'], c_double, 'U2' ),
              ( ['in'], c_double, 'U3' ),
              ( ['in'], c_int, 'NonlinearOption3' ),
              ( ['in', 'optional'], c_int, 'SpringOption', 1 ),
              ( ['in', 'optional'], BSTR, 'SoilProfile', '' ),
              ( ['in', 'optional'], c_double, 'EndLengthRatio', 0.0 ),
              ( ['in', 'optional'], c_double, 'Period', 0.0 ),
              ( ['in', 'optional'], c_int, 'Color', 0 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'iGUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cPropAreaSpring implementation
##class cPropAreaSpring_Impl(object):
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetAreaSpringProp(self, Name):
##        '-no docstring-'
##        #return U1, U2, U3, NonlinearOption3, SpringOption, SoilProfile, EndLengthRatio, Period, Color, Notes, iGUID, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def SetAreaSpringProp(self, Name, U1, U2, U3, NonlinearOption3, SpringOption, SoilProfile, EndLengthRatio, Period, Color, Notes, iGUID):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_AA_L_07_CSlabStress._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_CSlabStress implementation
##class cBDRS_AA_L_07_CSlabStress_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_IRC2010_SteelUCompService._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_IRC2010_SteelUCompService implementation
##class cBDRS_IRC2010_SteelUCompService_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBridgeDesignCallBack(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{64A8369C-1F8A-40D6-8313-4CD570E76B39}')
    _idlflags_ = ['dual', 'oleautomation']
cBridgeDesignCallBack._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'DeleteDesignCheckByteArray',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'KType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'DeleteSteelBridgeByteArray',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'KType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'DisplaySteelDesignTable',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT), 'MyDesignCheckObj' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'FileSaveAs',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetDesignCheckByteArray',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'KType' ),
              ( ['in', 'out'], POINTER(c_int), 'Flag' ),
              ( ['in', 'out'], POINTER(c_int), 'Version' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'Stream' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetSteelBridgeByteArray',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'KType' ),
              ( ['in', 'out'], POINTER(c_int), 'Flag' ),
              ( ['in', 'out'], POINTER(c_int), 'Version' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'Stream' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'SapModel',
              ( ['out', 'retval'], POINTER(POINTER(cSapModel)), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'SaveDesignCheckByteArray',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'KType' ),
              ( ['in'], c_int, 'Version' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'Stream' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'SaveSteelBridgeByteArray',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'KType' ),
              ( ['in'], c_int, 'Version' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'Stream' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'UnlockModel',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetSegmentDefinitionByteArray',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'Available' ),
              ( ['in', 'out'], POINTER(c_int), 'Version' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'Stream' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'SaveSegmentDefinitionByteArray',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Version' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'Stream' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'OpenForm',
              ( ['in'], c_int, 'FormNumber' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'GetILMByteArray',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'Available' ),
              ( ['in', 'out'], POINTER(c_int), 'Version' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'Stream' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'SaveILMByteArray',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Version' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'Stream' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBridgeDesignCallBack implementation
##class cBridgeDesignCallBack_Impl(object):
##    def DeleteDesignCheckByteArray(self, RequestName, KType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteSteelBridgeByteArray(self, Name, KType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DisplaySteelDesignTable(self, Name):
##        '-no docstring-'
##        #return MyDesignCheckObj, pRetVal
##
##    def FileSaveAs(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetDesignCheckByteArray(self, RequestName, KType):
##        '-no docstring-'
##        #return Flag, Version, Stream, pRetVal
##
##    def GetSteelBridgeByteArray(self, Name, KType):
##        '-no docstring-'
##        #return Flag, Version, Stream, pRetVal
##
##    @property
##    def SapModel(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def SaveDesignCheckByteArray(self, RequestName, KType, Version):
##        '-no docstring-'
##        #return Stream, pRetVal
##
##    def SaveSteelBridgeByteArray(self, Name, KType, Version):
##        '-no docstring-'
##        #return Stream, pRetVal
##
##    def UnlockModel(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetSegmentDefinitionByteArray(self, Name):
##        '-no docstring-'
##        #return Available, Version, Stream, pRetVal
##
##    def SaveSegmentDefinitionByteArray(self, Name, Version):
##        '-no docstring-'
##        #return Stream, pRetVal
##
##    def OpenForm(self, FormNumber):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetILMByteArray(self, Name):
##        '-no docstring-'
##        #return Available, Version, Stream, pRetVal
##
##    def SaveILMByteArray(self, Name, Version):
##        '-no docstring-'
##        #return Stream, pRetVal
##

class cDCoTS_500_2000_R2018(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{39541ACE-0CD0-458E-9F51-96237869012F}')
    _idlflags_ = ['dual', 'oleautomation']
cDCoTS_500_2000_R2018._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDCoTS_500_2000_R2018 implementation
##class cDCoTS_500_2000_R2018_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##


# values for enumeration 'eTemplateType'
eTemplateType_Grid = 0
eTemplateType_Clear = 1
eTemplateType_Beam = 2
eTemplateType_SlopedTruss = 3
eTemplateType_VerticalTruss = 4
eTemplateType_SpaceTruss = 5
eTemplateType_PortalFrame = 6
eTemplateType_BracedFrame = 7
eTemplateType_EccentricFrame = 8
eTemplateType_PerimeterFrame = 9
eTemplateType_SpaceFrame = 10
eTemplateType_Bridge = 11
eTemplateType_Barrel = 12
eTemplateType_Cylinder = 13
eTemplateType_Dome = 14
eTemplateType_ShearWall = 15
eTemplateType_Floor = 16
eTemplateType_Advanced = 17
eTemplateType_UndergoundConcrete = 18
eTemplateType_Truss2D = 19
eTemplateType_Truss3D = 20
eTemplateType_Frame2D = 21
eTemplateType_Frame3D = 22
eTemplateType_BridgeWizard = 23
eTemplateType_PipesAndPlates = 24
eTemplateType_Shells = 25
eTemplateType_SolidModels = 26
eTemplateType_StorageStructures = 27
eTemplateType_Staircases = 28
eTemplateType_CableBridges = 29
eTemplateType = c_int # enum
cBASPrecastCompResult._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'BASPrecastComp',
              ( ['out', 'retval'], POINTER(POINTER(cBASPrecastComp)), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'BridgeSuperCutForcesGirder',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], VARIANT_BOOL, 'ResultF1' ),
              ( ['in'], VARIANT_BOOL, 'ResultF2' ),
              ( ['in'], VARIANT_BOOL, 'ResultF3' ),
              ( ['in'], VARIANT_BOOL, 'ResultM1' ),
              ( ['in'], VARIANT_BOOL, 'ResultM2' ),
              ( ['in'], VARIANT_BOOL, 'ResultM3' ),
              ( ['in'], c_int, 'ResponseType' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'BridgeSuperCutLongitStressGirder',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_int, 'GirderPart' ),
              ( ['in'], c_double, 'StressAveraging' ),
              ( ['in'], c_int, 'PointIndex' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Stress' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'BridgeSuperCutPrincStressGirder',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_int, 'PointIndex' ),
              ( ['in'], c_double, 'ShearFactor' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SMax' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SMin' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SAngle' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'TypeCorresp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBASPrecastCompResult implementation
##class cBASPrecastCompResult_Impl(object):
##    @property
##    def BASPrecastComp(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def BridgeSuperCutForcesGirder(self, Name, CutIndex, GirderIndex, ResultF1, ResultF2, ResultF3, ResultM1, ResultM2, ResultM3, ResponseType):
##        '-no docstring-'
##        #return NumberResults, LoadCase, StepType, StepNum, F1, F2, F3, M1, M2, M3, pRetVal
##
##    def BridgeSuperCutLongitStressGirder(self, Name, CutIndex, GirderIndex, GirderPart, StressAveraging, PointIndex):
##        '-no docstring-'
##        #return NumberResults, LoadCase, StepType, StepNum, Stress, pRetVal
##
##    def BridgeSuperCutPrincStressGirder(self, Name, CutIndex, GirderIndex, PointIndex, ShearFactor):
##        '-no docstring-'
##        #return NumberResults, LoadCase, StepType, StepNum, SMax, SMin, SAngle, TypeCorresp, pRetVal
##

class cDStChinese_2018(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{9AF5A9E1-78AE-451C-ADD0-FB6217539A4B}')
    _idlflags_ = ['dual', 'oleautomation']
cDStChinese_2018._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDStChinese_2018 implementation
##class cDStChinese_2018_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cDCdAISI_LRFD96._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDCdAISI_LRFD96 implementation
##class cDCdAISI_LRFD96_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cPropCable._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetModifiers',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetProp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'Area' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'SetModifiers',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'SetProp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'Area' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cPropCable implementation
##class cPropCable_Impl(object):
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetModifiers(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetProp(self, Name):
##        '-no docstring-'
##        #return MatProp, Area, Color, Notes, GUID, pRetVal
##
##    def SetModifiers(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetProp(self, Name, MatProp, Area, Color, Notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##

cDCdAISI_ASD96._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDCdAISI_ASD96 implementation
##class cDCdAISI_ASD96_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cPropSolid._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetProp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'A' ),
              ( ['in', 'out'], POINTER(c_double), 'B' ),
              ( ['in', 'out'], POINTER(c_double), 'C' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Incompatible' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'SetProp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'A' ),
              ( ['in'], c_double, 'B' ),
              ( ['in'], c_double, 'C' ),
              ( ['in'], VARIANT_BOOL, 'Incompatible' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cPropSolid implementation
##class cPropSolid_Impl(object):
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetProp(self, Name):
##        '-no docstring-'
##        #return MatProp, A, B, C, Incompatible, Color, Notes, GUID, pRetVal
##
##    def SetProp(self, Name, MatProp, A, B, C, Incompatible, Color, Notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##

class cCaseModalEigen(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{5EBBBE9C-EC43-4C14-AA9C-19D445F86E8F}')
    _idlflags_ = ['dual', 'oleautomation']
cCaseModalEigen._methods_ = [
    COMMETHOD([dispid(5)], HRESULT, 'SetCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(1)], HRESULT, 'GetInitialCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'InitialCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetLoads',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TargetPar' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'StaticCorrect' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetNumberModes',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'MaxModes' ),
              ( ['in', 'out'], POINTER(c_int), 'MinModes' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetParameters',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'EigenShiftFreq' ),
              ( ['in', 'out'], POINTER(c_double), 'EigenCutOff' ),
              ( ['in', 'out'], POINTER(c_double), 'EigenTol' ),
              ( ['in', 'out'], POINTER(c_int), 'AllowAutoFreqShift' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'SetInitialCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'InitialCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'SetLoads',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TargetPar' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'StaticCorrect' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'SetNumberModes',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'MaxModes' ),
              ( ['in'], c_int, 'MinModes' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'SetParameters',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'EigenShiftFreq' ),
              ( ['in'], c_double, 'EigenCutOff' ),
              ( ['in'], c_double, 'EigenTol' ),
              ( ['in'], c_int, 'AllowAutoFreqShift' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cCaseModalEigen implementation
##class cCaseModalEigen_Impl(object):
##    def SetCase(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetInitialCase(self, Name):
##        '-no docstring-'
##        #return InitialCase, pRetVal
##
##    def GetLoads(self, Name):
##        '-no docstring-'
##        #return NumberLoads, LoadType, LoadName, TargetPar, StaticCorrect, pRetVal
##
##    def GetNumberModes(self, Name):
##        '-no docstring-'
##        #return MaxModes, MinModes, pRetVal
##
##    def GetParameters(self, Name):
##        '-no docstring-'
##        #return EigenShiftFreq, EigenCutOff, EigenTol, AllowAutoFreqShift, pRetVal
##
##    def SetInitialCase(self, Name, InitialCase):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoads(self, Name, NumberLoads):
##        '-no docstring-'
##        #return LoadType, LoadName, TargetPar, StaticCorrect, pRetVal
##
##    def SetNumberModes(self, Name, MaxModes, MinModes):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetParameters(self, Name, EigenShiftFreq, EigenCutOff, EigenTol, AllowAutoFreqShift):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_AA_L_07_CSlabShear._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], BSTR, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_CSlabShear implementation
##class cBDRS_AA_L_07_CSlabShear_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetCapacityParamString(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCapacityParamString(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_IRC2010_SteelUCompStrength._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_IRC2010_SteelUCompStrength implementation
##class cBDRS_IRC2010_SteelUCompStrength_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBASConcBox2._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'CountSuperCutStressPointGirder',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in', 'out'], POINTER(c_int), 'CountPoint' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetSuperCutGirderNames',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'sname' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetSuperCutGirderRebarLong',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'Mat' ),
              ( ['in', 'out'], POINTER(c_int), 'RebarCount' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RebarX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RebarY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'DType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'RebarSize' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberBars' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetSuperCutGirderRebarTransv',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_double, 'DistBefore' ),
              ( ['in'], c_double, 'DistAfter' ),
              ( ['in', 'out'], POINTER(BSTR), 'Mat' ),
              ( ['in', 'out'], POINTER(c_double), 'RebarTransV' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetSuperCutGirderTendonNames',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_int, 'TendonIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'BridgeTendon' ),
              ( ['in', 'out'], POINTER(BSTR), 'TendonObj' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetSuperCutGirderTendonValues',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_int, 'TendonIndex' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetSuperCutGirderValues',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetSuperCutSectionValues',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetSuperCutStressPointGirder',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_int, 'PointIndex' ),
              ( ['in', 'out'], POINTER(c_double), 'X' ),
              ( ['in', 'out'], POINTER(c_double), 'Y' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_int), 'Location' ),
              ( ['in', 'out'], POINTER(BSTR), 'Note' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetSuperCutWebCoordsAtY',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_double, 'Y' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberWebs' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'WebIsCut' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WebLeft' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WebRight' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetSuperCutGirderRebarTransvSpac',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_int, 'DirectionFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'RebarSpacing' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetSuperCutGirderRebarLong_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'Mat' ),
              ( ['in', 'out'], POINTER(c_int), 'RebarCount' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RebarX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RebarY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'DType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'RebarSize' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AreaFactor' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBASConcBox2 implementation
##class cBASConcBox2_Impl(object):
##    def CountSuperCutStressPointGirder(self, Name, CutIndex, GirderIndex):
##        '-no docstring-'
##        #return CountPoint, pRetVal
##
##    def GetSuperCutGirderNames(self, Name, CutIndex, GirderIndex, Item):
##        '-no docstring-'
##        #return sname, pRetVal
##
##    def GetSuperCutGirderRebarLong(self, Name, CutIndex, GirderIndex):
##        '-no docstring-'
##        #return Mat, RebarCount, RebarX, RebarY, DType, RebarSize, NumberBars, pRetVal
##
##    def GetSuperCutGirderRebarTransv(self, Name, CutIndex, GirderIndex, DistBefore, DistAfter):
##        '-no docstring-'
##        #return Mat, RebarTransV, pRetVal
##
##    def GetSuperCutGirderTendonNames(self, Name, CutIndex, GirderIndex, TendonIndex):
##        '-no docstring-'
##        #return BridgeTendon, TendonObj, pRetVal
##
##    def GetSuperCutGirderTendonValues(self, Name, CutIndex, GirderIndex, TendonIndex, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetSuperCutGirderValues(self, Name, CutIndex, GirderIndex, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetSuperCutSectionValues(self, Name, CutIndex, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetSuperCutStressPointGirder(self, Name, CutIndex, GirderIndex, PointIndex):
##        '-no docstring-'
##        #return X, Y, MatProp, Location, Note, pRetVal
##
##    def GetSuperCutWebCoordsAtY(self, Name, CutIndex, Y):
##        '-no docstring-'
##        #return NumberWebs, WebIsCut, WebLeft, WebRight, pRetVal
##
##    def GetSuperCutGirderRebarTransvSpac(self, Name, CutIndex, GirderIndex, DirectionFlag):
##        '-no docstring-'
##        #return RebarSpacing, pRetVal
##
##    def GetSuperCutGirderRebarLong_1(self, Name, CutIndex, GirderIndex):
##        '-no docstring-'
##        #return Mat, RebarCount, RebarX, RebarY, DType, RebarSize, NumberBars, AreaFactor, pRetVal
##

cDiaphragm._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetDiaphragm',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SemiRigid' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'SetDiaphragm',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'SemiRigid' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDiaphragm implementation
##class cDiaphragm_Impl(object):
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetDiaphragm(self, Name):
##        '-no docstring-'
##        #return SemiRigid, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def SetDiaphragm(self, Name, SemiRigid):
##        '-no docstring-'
##        #return pRetVal
##

class cBCD_Solid(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{F3EA87D7-C5BA-45C1-88FC-E4A68B8E74B0}')
    _idlflags_ = ['dual', 'oleautomation']
cBCD_Solid._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetDiaphragmProp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Thickness' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetDiaphragmProp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'Thickness' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBCD_Solid implementation
##class cBCD_Solid_Impl(object):
##    def GetDiaphragmProp(self, Name):
##        '-no docstring-'
##        #return Thickness, pRetVal
##
##    def SetDiaphragmProp(self, Name, Thickness):
##        '-no docstring-'
##        #return pRetVal
##

class cDConcSlabACI318_19(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{57BC2324-7484-421B-AC8C-CAF526D68935}')
    _idlflags_ = ['dual', 'oleautomation']
cDConcSlabACI318_19._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'textValue' ),
              ( ['in', 'out'], POINTER(c_double), 'numericValue' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDConcSlabACI318_19 implementation
##class cDConcSlabACI318_19_Impl(object):
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return textValue, numericValue, pRetVal
##

class cBASSteelUComp(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{81424EDE-C3FA-4CB8-A748-81E34C22722E}')
    _idlflags_ = ['dual', 'oleautomation']
cBASSteelUCompResult._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'BASSteelUComp',
              ( ['out', 'retval'], POINTER(POINTER(cBASSteelUComp)), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'BridgeSuperCutForcesGirder',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], VARIANT_BOOL, 'ResultF1' ),
              ( ['in'], VARIANT_BOOL, 'ResultF2' ),
              ( ['in'], VARIANT_BOOL, 'ResultF3' ),
              ( ['in'], VARIANT_BOOL, 'ResultM1' ),
              ( ['in'], VARIANT_BOOL, 'ResultM2' ),
              ( ['in'], VARIANT_BOOL, 'ResultM3' ),
              ( ['in'], c_int, 'ResponseType' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'BridgeSuperCutLongitStressGirder',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_int, 'GirderPart' ),
              ( ['in'], c_double, 'StressAveraging' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'StressInSlab' ),
              ( ['in'], c_int, 'PointIndex' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Stress' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'BridgeSuperCutLongitStressGirder_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_int, 'GirderPart' ),
              ( ['in'], c_double, 'StressAveraging' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'StressInSlab' ),
              ( ['in'], c_double, 'SlabTStressLimit' ),
              ( ['in'], c_int, 'PointIndex' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Stress' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SlabCracked' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBASSteelUCompResult implementation
##class cBASSteelUCompResult_Impl(object):
##    @property
##    def BASSteelUComp(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def BridgeSuperCutForcesGirder(self, Name, CutIndex, GirderIndex, ResultF1, ResultF2, ResultF3, ResultM1, ResultM2, ResultM3, ResponseType):
##        '-no docstring-'
##        #return NumberResults, LoadCase, StepType, StepNum, F1, F2, F3, M1, M2, M3, pRetVal
##
##    def BridgeSuperCutLongitStressGirder(self, Name, CutIndex, GirderIndex, GirderPart, StressAveraging, PointIndex):
##        '-no docstring-'
##        #return StressInSlab, NumberResults, LoadCase, StepType, StepNum, Stress, pRetVal
##
##    def BridgeSuperCutLongitStressGirder_1(self, Name, CutIndex, GirderIndex, GirderPart, StressAveraging, SlabTStressLimit, PointIndex):
##        '-no docstring-'
##        #return StressInSlab, NumberResults, LoadCase, StepType, StepNum, Stress, SlabCracked, pRetVal
##

cGenRefLine._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'ConvertLineToBLL',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], c_double, 'FirstStation', 0.0 ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['in', 'optional'], c_double, 'OffsetX', 0.0 ),
              ( ['in', 'optional'], c_double, 'OffsetY', 0.0 ),
              ( ['in', 'optional'], c_double, 'OffsetZ', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetLine',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'DiscLength' ),
              ( ['in', 'out'], POINTER(c_double), 'DiscAngle' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Visible' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetLineElevPoints',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'CurveType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetLinePlanPoints',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'CurveType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'SetLine',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'DiscLength' ),
              ( ['in'], c_double, 'DiscAngle' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Visible', True ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'SetLineElevPoints',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'CurveType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'SetLinePlanPoints',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'CurveType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cGenRefLine implementation
##class cGenRefLine_Impl(object):
##    def ConvertLineToBLL(self, Name, FirstStation, CSys, OffsetX, OffsetY, OffsetZ):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetLine(self, Name):
##        '-no docstring-'
##        #return DiscLength, DiscAngle, Color, Visible, pRetVal
##
##    def GetLineElevPoints(self, Name, CSys):
##        '-no docstring-'
##        #return NumberPoints, CurveType, Value1, Value2, Value3, S, Z, pRetVal
##
##    def GetLinePlanPoints(self, Name, CSys):
##        '-no docstring-'
##        #return NumberPoints, CurveType, Value1, Value2, Value3, X, Y, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def SetLine(self, Name, DiscLength, DiscAngle, CSys, Color, Visible):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLineElevPoints(self, Name, NumberPoints):
##        '-no docstring-'
##        #return CurveType, Value1, Value2, Value3, S, Z, pRetVal
##
##    def SetLinePlanPoints(self, Name, NumberPoints):
##        '-no docstring-'
##        #return CurveType, Value1, Value2, Value3, X, Y, pRetVal
##

class cModifierArea(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{0D34731E-C388-481B-83F7-9CAC0FC352EC}')
    _idlflags_ = ['dual', 'oleautomation']
class cModifierCable(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{FA42661C-95CB-4587-898F-804F3F72711D}')
    _idlflags_ = ['dual', 'oleautomation']
cNamedAssign._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'ModifierArea',
              ( ['out', 'retval'], POINTER(POINTER(cModifierArea)), 'pRetVal' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'ModifierCable',
              ( ['out', 'retval'], POINTER(POINTER(cModifierCable)), 'pRetVal' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'ModifierFrame',
              ( ['out', 'retval'], POINTER(POINTER(cModifierFrame)), 'pRetVal' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'ReleaseFrame',
              ( ['out', 'retval'], POINTER(POINTER(cReleaseFrame)), 'pRetVal' )),
]
################################################################
## code template for cNamedAssign implementation
##class cNamedAssign_Impl(object):
##    @property
##    def ModifierArea(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ModifierCable(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ModifierFrame(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ReleaseFrame(self):
##        '-no docstring-'
##        #return pRetVal
##

class cDStIndian_IS_800_2007(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{995AB25A-B77E-457A-AED3-43F6B8E90A47}')
    _idlflags_ = ['dual', 'oleautomation']
cDStIndian_IS_800_2007._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDStIndian_IS_800_2007 implementation
##class cDStIndian_IS_800_2007_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class Helper(CoClass):
    _reg_clsid_ = GUID('{C200E331-1F79-432B-B64B-1BCC695BA1D4}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{F896D55D-8BDF-4232-B9AB-4B210897A81D}', 1, 0)
class cHelper(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{8DC5C745-1088-498F-A898-96D2561A4D26}')
    _idlflags_ = ['dual', 'oleautomation']
Helper._com_interfaces_ = [cHelper, comtypes.gen._BED7F4EA_1A96_11D2_8F08_00A0C9A6186D_0_2_4._Object]

cBDRS_AA_S_02_CBoxPrin._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetDemandParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], BSTR, 'DemandName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetDemandParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], BSTR, 'DemandName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_S_02_CBoxPrin implementation
##class cBDRS_AA_S_02_CBoxPrin_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetDemandParam(self, RequestName, DemandName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDemandParam(self, RequestName, DemandName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cAutoWind(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{681EE33D-D0E9-4A27-9A42-DF2F7EE787CA}')
    _idlflags_ = ['dual', 'oleautomation']
cAutoWind._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetAPI4F2008',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'ExposureFrom' ),
              ( ['in', 'out'], POINTER(c_double), 'DirAngle' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_double), 'WindSpeed' ),
              ( ['in', 'out'], POINTER(c_double), 'SSLFactor' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetAPI4F2008_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'ExposureFrom' ),
              ( ['in', 'out'], POINTER(c_double), 'DirAngle' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_double), 'WindSpeed' ),
              ( ['in', 'out'], POINTER(c_double), 'SSLFactor' ),
              ( ['in', 'out'], POINTER(c_double), 'ShieldingFactor' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetASCE702',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'ExposureFrom' ),
              ( ['in', 'out'], POINTER(c_double), 'DirAngle' ),
              ( ['in', 'out'], POINTER(c_double), 'Cpw' ),
              ( ['in', 'out'], POINTER(c_double), 'Cpl' ),
              ( ['in', 'out'], POINTER(c_int), 'ASCECase' ),
              ( ['in', 'out'], POINTER(c_double), 'ASCEe1' ),
              ( ['in', 'out'], POINTER(c_double), 'ASCEe2' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_double), 'WindSpeed' ),
              ( ['in', 'out'], POINTER(c_int), 'ExposureType' ),
              ( ['in', 'out'], POINTER(c_double), 'ImportanceFactor' ),
              ( ['in', 'out'], POINTER(c_double), 'Kzt' ),
              ( ['in', 'out'], POINTER(c_double), 'GustFactor' ),
              ( ['in', 'out'], POINTER(c_double), 'Kd' ),
              ( ['in', 'out'], POINTER(c_double), 'SolidGrossRatio' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetASCE705',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'ExposureFrom' ),
              ( ['in', 'out'], POINTER(c_double), 'DirAngle' ),
              ( ['in', 'out'], POINTER(c_double), 'Cpw' ),
              ( ['in', 'out'], POINTER(c_double), 'Cpl' ),
              ( ['in', 'out'], POINTER(c_int), 'ASCECase' ),
              ( ['in', 'out'], POINTER(c_double), 'ASCEe1' ),
              ( ['in', 'out'], POINTER(c_double), 'ASCEe2' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_double), 'WindSpeed' ),
              ( ['in', 'out'], POINTER(c_int), 'ExposureType' ),
              ( ['in', 'out'], POINTER(c_double), 'ImportanceFactor' ),
              ( ['in', 'out'], POINTER(c_double), 'Kzt' ),
              ( ['in', 'out'], POINTER(c_double), 'GustFactor' ),
              ( ['in', 'out'], POINTER(c_double), 'Kd' ),
              ( ['in', 'out'], POINTER(c_double), 'SolidGrossRatio' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetASCE710',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'ExposureFrom' ),
              ( ['in', 'out'], POINTER(c_double), 'DirAngle' ),
              ( ['in', 'out'], POINTER(c_double), 'Cpw' ),
              ( ['in', 'out'], POINTER(c_double), 'Cpl' ),
              ( ['in', 'out'], POINTER(c_int), 'ASCECase' ),
              ( ['in', 'out'], POINTER(c_double), 'ASCEe1' ),
              ( ['in', 'out'], POINTER(c_double), 'ASCEe2' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_double), 'WindSpeed' ),
              ( ['in', 'out'], POINTER(c_int), 'ExposureType' ),
              ( ['in', 'out'], POINTER(c_double), 'ImportanceFactor' ),
              ( ['in', 'out'], POINTER(c_double), 'Kzt' ),
              ( ['in', 'out'], POINTER(c_double), 'GustFactor' ),
              ( ['in', 'out'], POINTER(c_double), 'Kd' ),
              ( ['in', 'out'], POINTER(c_double), 'SolidGrossRatio' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetASCE788',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'ExposureFrom' ),
              ( ['in', 'out'], POINTER(c_double), 'DirAngle' ),
              ( ['in', 'out'], POINTER(c_double), 'Cpw' ),
              ( ['in', 'out'], POINTER(c_double), 'Cpl' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_double), 'WindSpeed' ),
              ( ['in', 'out'], POINTER(c_int), 'ExposureType' ),
              ( ['in', 'out'], POINTER(c_double), 'ImportanceFactor' ),
              ( ['in', 'out'], POINTER(c_double), 'GustFactor' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetASCE795',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'ExposureFrom' ),
              ( ['in', 'out'], POINTER(c_double), 'DirAngle' ),
              ( ['in', 'out'], POINTER(c_double), 'Cpw' ),
              ( ['in', 'out'], POINTER(c_double), 'Cpl' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_double), 'WindSpeed' ),
              ( ['in', 'out'], POINTER(c_int), 'ExposureType' ),
              ( ['in', 'out'], POINTER(c_double), 'ImportanceFactor' ),
              ( ['in', 'out'], POINTER(c_double), 'Kzt' ),
              ( ['in', 'out'], POINTER(c_double), 'GustFactor' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetASNZS117022002',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'ExposureFrom' ),
              ( ['in', 'out'], POINTER(c_double), 'DirAngle' ),
              ( ['in', 'out'], POINTER(c_double), 'Cpw' ),
              ( ['in', 'out'], POINTER(c_double), 'Cpl' ),
              ( ['in', 'out'], POINTER(c_double), 'Ka' ),
              ( ['in', 'out'], POINTER(c_double), 'Kc' ),
              ( ['in', 'out'], POINTER(c_double), 'Kl' ),
              ( ['in', 'out'], POINTER(c_double), 'Kp' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_double), 'WindSpeed' ),
              ( ['in', 'out'], POINTER(c_int), 'Cat' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'CycloneRegion' ),
              ( ['in', 'out'], POINTER(c_double), 'Md' ),
              ( ['in', 'out'], POINTER(c_double), 'Ms' ),
              ( ['in', 'out'], POINTER(c_double), 'Mt' ),
              ( ['in', 'out'], POINTER(c_double), 'Cdyn' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(50)], HRESULT, 'GetASNZS117022011',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'ExposureFrom' ),
              ( ['in', 'out'], POINTER(c_double), 'DirAngle' ),
              ( ['in', 'out'], POINTER(c_double), 'Cpw' ),
              ( ['in', 'out'], POINTER(c_double), 'Cpl' ),
              ( ['in', 'out'], POINTER(c_double), 'Ka' ),
              ( ['in', 'out'], POINTER(c_double), 'Kc' ),
              ( ['in', 'out'], POINTER(c_double), 'Kl' ),
              ( ['in', 'out'], POINTER(c_double), 'Kp' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_double), 'WindSpeed' ),
              ( ['in', 'out'], POINTER(c_int), 'Cat' ),
              ( ['in', 'out'], POINTER(c_int), 'ASCECase' ),
              ( ['in', 'out'], POINTER(c_double), 'Md' ),
              ( ['in', 'out'], POINTER(c_double), 'Ms' ),
              ( ['in', 'out'], POINTER(c_double), 'Mt' ),
              ( ['in', 'out'], POINTER(c_double), 'Cdyn' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetBOCA96',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'ExposureFrom' ),
              ( ['in', 'out'], POINTER(c_double), 'DirAngle' ),
              ( ['in', 'out'], POINTER(c_double), 'Cpw' ),
              ( ['in', 'out'], POINTER(c_double), 'Cpl' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_double), 'WindSpeed' ),
              ( ['in', 'out'], POINTER(c_int), 'ExposureType' ),
              ( ['in', 'out'], POINTER(c_double), 'ImportanceFactor' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserGust' ),
              ( ['in', 'out'], POINTER(c_double), 'GustFactor' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetBS639995',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'ExposureFrom' ),
              ( ['in', 'out'], POINTER(c_double), 'DirAngle' ),
              ( ['in', 'out'], POINTER(c_double), 'Cpw' ),
              ( ['in', 'out'], POINTER(c_double), 'Cpl' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_double), 'Ve' ),
              ( ['in', 'out'], POINTER(c_double), 'Ca' ),
              ( ['in', 'out'], POINTER(c_double), 'Cr' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetChinese2002',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'ExposureFrom' ),
              ( ['in', 'out'], POINTER(c_double), 'DirAngle' ),
              ( ['in', 'out'], POINTER(c_double), 'BuildingWidth' ),
              ( ['in', 'out'], POINTER(c_double), 'Us' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_double), 'WZero' ),
              ( ['in', 'out'], POINTER(c_int), 'Rt' ),
              ( ['in', 'out'], POINTER(c_int), 'PhiZOpt' ),
              ( ['in', 'out'], POINTER(c_int), 'T1Opt' ),
              ( ['in', 'out'], POINTER(c_double), 'UserT' ),
              ( ['in', 'out'], POINTER(c_double), 'DampRatio' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetChinese2002_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'ExposureFrom' ),
              ( ['in', 'out'], POINTER(c_double), 'DirAngle' ),
              ( ['in', 'out'], POINTER(c_double), 'BuildingWidth' ),
              ( ['in', 'out'], POINTER(c_double), 'Us' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UniformTaper' ),
              ( ['in', 'out'], POINTER(c_double), 'BHoverB0' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_double), 'WZero' ),
              ( ['in', 'out'], POINTER(c_int), 'Rt' ),
              ( ['in', 'out'], POINTER(c_int), 'PhiZOpt' ),
              ( ['in', 'out'], POINTER(c_int), 'T1Opt' ),
              ( ['in', 'out'], POINTER(c_double), 'UserT' ),
              ( ['in', 'out'], POINTER(c_double), 'DampRatio' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'GetChinese2010',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'ExposureFrom' ),
              ( ['in', 'out'], POINTER(c_double), 'DirAngle' ),
              ( ['in', 'out'], POINTER(c_double), 'BuildingWidth' ),
              ( ['in', 'out'], POINTER(c_double), 'Us' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UniformTaper' ),
              ( ['in', 'out'], POINTER(c_double), 'BHoverB0' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_double), 'WZero' ),
              ( ['in', 'out'], POINTER(c_int), 'Rt' ),
              ( ['in', 'out'], POINTER(c_int), 'PhiZOpt' ),
              ( ['in', 'out'], POINTER(c_int), 'T1Opt' ),
              ( ['in', 'out'], POINTER(c_double), 'UserT' ),
              ( ['in', 'out'], POINTER(c_double), 'DampRatio' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'GetEurocode12005',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'ExposureFrom' ),
              ( ['in', 'out'], POINTER(c_double), 'DirAngle' ),
              ( ['in', 'out'], POINTER(c_double), 'Cpw' ),
              ( ['in', 'out'], POINTER(c_double), 'Cpl' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_double), 'WindSpeed' ),
              ( ['in', 'out'], POINTER(c_int), 'Terrain' ),
              ( ['in', 'out'], POINTER(c_double), 'Orography' ),
              ( ['in', 'out'], POINTER(c_double), 'K1' ),
              ( ['in', 'out'], POINTER(c_double), 'CsCd' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'GetEurocode12005_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'ExposureFrom' ),
              ( ['in', 'out'], POINTER(c_double), 'DirAngle' ),
              ( ['in', 'out'], POINTER(c_double), 'Cpw' ),
              ( ['in', 'out'], POINTER(c_double), 'Cpl' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_double), 'WindSpeed' ),
              ( ['in', 'out'], POINTER(c_int), 'Terrain' ),
              ( ['in', 'out'], POINTER(c_double), 'Orography' ),
              ( ['in', 'out'], POINTER(c_double), 'K1' ),
              ( ['in', 'out'], POINTER(c_double), 'CsCd' ),
              ( ['in', 'out'], POINTER(c_double), 'Rho' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'GetExposure',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'Num' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Diaph' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MyWidth' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Height' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(54)], HRESULT, 'GetExposure_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'Num' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Diaph' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MyWidth' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MyDepth' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Height' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'GetIS8751987',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'ExposureFrom' ),
              ( ['in', 'out'], POINTER(c_double), 'DirAngle' ),
              ( ['in', 'out'], POINTER(c_double), 'Cpw' ),
              ( ['in', 'out'], POINTER(c_double), 'Cpl' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_double), 'WindSpeed' ),
              ( ['in', 'out'], POINTER(c_int), 'Terrain' ),
              ( ['in', 'out'], POINTER(c_int), 'Class' ),
              ( ['in', 'out'], POINTER(c_double), 'K1' ),
              ( ['in', 'out'], POINTER(c_double), 'K3' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(62)], HRESULT, 'GetIS8752015',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'ExposureFrom' ),
              ( ['in', 'out'], POINTER(c_double), 'DirAngle' ),
              ( ['in', 'out'], POINTER(c_double), 'Cpw' ),
              ( ['in', 'out'], POINTER(c_double), 'Cpl' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_double), 'WindSpeed' ),
              ( ['in', 'out'], POINTER(c_int), 'TerrainCategory' ),
              ( ['in', 'out'], POINTER(c_int), 'ImportanceFactor' ),
              ( ['in', 'out'], POINTER(c_double), 'K1' ),
              ( ['in', 'out'], POINTER(c_double), 'K3' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'GetMexican',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'ExposureFrom' ),
              ( ['in', 'out'], POINTER(c_double), 'DirAngle' ),
              ( ['in', 'out'], POINTER(c_double), 'Cpw' ),
              ( ['in', 'out'], POINTER(c_double), 'Cpl' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_double), 'WindSpeed' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'GetNBCC2005',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'ExposureFrom' ),
              ( ['in', 'out'], POINTER(c_double), 'DirAngle' ),
              ( ['in', 'out'], POINTER(c_double), 'Cpw' ),
              ( ['in', 'out'], POINTER(c_double), 'Cpl' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_double), 'q' ),
              ( ['in', 'out'], POINTER(c_double), 'GustFactor' ),
              ( ['in', 'out'], POINTER(c_double), 'ImportanceFactor' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'GetNBCC2010',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'ExposureFrom' ),
              ( ['in', 'out'], POINTER(c_double), 'DirAngle' ),
              ( ['in', 'out'], POINTER(c_double), 'Cpw' ),
              ( ['in', 'out'], POINTER(c_double), 'Cpl' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_double), 'q' ),
              ( ['in', 'out'], POINTER(c_double), 'GustFactor' ),
              ( ['in', 'out'], POINTER(c_double), 'ImportanceFactor' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(58)], HRESULT, 'GetNBCC2010_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'ExposureFrom' ),
              ( ['in', 'out'], POINTER(c_double), 'DirAngle' ),
              ( ['in', 'out'], POINTER(c_double), 'Cpw' ),
              ( ['in', 'out'], POINTER(c_double), 'Cpl' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_double), 'q' ),
              ( ['in', 'out'], POINTER(c_double), 'GustFactor' ),
              ( ['in', 'out'], POINTER(c_double), 'ImportanceFactor' ),
              ( ['in', 'out'], POINTER(c_int), 'TerrainType' ),
              ( ['in', 'out'], POINTER(c_double), 'CeWindward' ),
              ( ['in', 'out'], POINTER(c_double), 'CeLeeward' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(59)], HRESULT, 'GetNBCC2015',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'ExposureFrom' ),
              ( ['in', 'out'], POINTER(c_double), 'DirAngle' ),
              ( ['in', 'out'], POINTER(c_double), 'Cpw' ),
              ( ['in', 'out'], POINTER(c_double), 'Cpl' ),
              ( ['in', 'out'], POINTER(c_int), 'NBCCCase' ),
              ( ['in', 'out'], POINTER(c_double), 'e1' ),
              ( ['in', 'out'], POINTER(c_double), 'e2' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_double), 'q' ),
              ( ['in', 'out'], POINTER(c_double), 'GustFactor' ),
              ( ['in', 'out'], POINTER(c_double), 'TopographicFactor' ),
              ( ['in', 'out'], POINTER(c_double), 'ImportanceFactor' ),
              ( ['in', 'out'], POINTER(c_int), 'TerrainType' ),
              ( ['in', 'out'], POINTER(c_double), 'CeWindward' ),
              ( ['in', 'out'], POINTER(c_double), 'CeLeeward' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'GetNBCC95',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'ExposureFrom' ),
              ( ['in', 'out'], POINTER(c_double), 'DirAngle' ),
              ( ['in', 'out'], POINTER(c_double), 'Cpw' ),
              ( ['in', 'out'], POINTER(c_double), 'Cpl' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_double), 'q' ),
              ( ['in', 'out'], POINTER(c_double), 'GustFactor' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(56)], HRESULT, 'GetNTC2008',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'ExposureFrom' ),
              ( ['in', 'out'], POINTER(c_double), 'DirAngle' ),
              ( ['in', 'out'], POINTER(c_double), 'Cpw' ),
              ( ['in', 'out'], POINTER(c_double), 'Cpl' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_double), 'Vb' ),
              ( ['in', 'out'], POINTER(c_int), 'ExposureCategory' ),
              ( ['in', 'out'], POINTER(c_double), 'Ct' ),
              ( ['in', 'out'], POINTER(c_double), 'Cd' ),
              ( ['in', 'out'], POINTER(c_double), 'cp' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(64)], HRESULT, 'GetNTC2018',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'ExposureFrom' ),
              ( ['in', 'out'], POINTER(c_double), 'DirAngle' ),
              ( ['in', 'out'], POINTER(c_double), 'Cpw' ),
              ( ['in', 'out'], POINTER(c_double), 'Cpl' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_double), 'Vb' ),
              ( ['in', 'out'], POINTER(c_int), 'ExposureCategory' ),
              ( ['in', 'out'], POINTER(c_double), 'Ct' ),
              ( ['in', 'out'], POINTER(c_double), 'Cd' ),
              ( ['in', 'out'], POINTER(c_double), 'cp' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(66)], HRESULT, 'GetSP20133302016',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'LoadingType' ),
              ( ['in', 'out'], POINTER(c_int), 'ExposureFrom' ),
              ( ['in', 'out'], POINTER(c_double), 'DirAngle' ),
              ( ['in', 'out'], POINTER(c_double), 'cp' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_int), 'StructureType' ),
              ( ['in', 'out'], POINTER(c_int), 'LogDecrement' ),
              ( ['in', 'out'], POINTER(c_double), 'BuildingWidth' ),
              ( ['in', 'out'], POINTER(c_double), 'BuildingDepth' ),
              ( ['in', 'out'], POINTER(c_double), 'Zeq' ),
              ( ['in', 'out'], POINTER(c_int), 'WindDistrict' ),
              ( ['in', 'out'], POINTER(c_double), 'WindPressure' ),
              ( ['in', 'out'], POINTER(c_int), 'TerrainType' ),
              ( ['in', 'out'], POINTER(c_double), 'LimitFreq' ),
              ( ['in', 'out'], POINTER(BSTR), 'ModalCase' ),
              ( ['in', 'out'], POINTER(c_int), 'FirstValMode' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'GetUBC94',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'ExposureFrom' ),
              ( ['in', 'out'], POINTER(c_double), 'DirAngle' ),
              ( ['in', 'out'], POINTER(c_double), 'Cpw' ),
              ( ['in', 'out'], POINTER(c_double), 'Cpl' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_double), 'WindSpeed' ),
              ( ['in', 'out'], POINTER(c_int), 'ExposureType' ),
              ( ['in', 'out'], POINTER(c_double), 'ImportanceFactor' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(23)], HRESULT, 'GetUBC97',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'ExposureFrom' ),
              ( ['in', 'out'], POINTER(c_double), 'DirAngle' ),
              ( ['in', 'out'], POINTER(c_double), 'Cpw' ),
              ( ['in', 'out'], POINTER(c_double), 'Cpl' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_double), 'WindSpeed' ),
              ( ['in', 'out'], POINTER(c_int), 'ExposureType' ),
              ( ['in', 'out'], POINTER(c_double), 'ImportanceFactor' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(24)], HRESULT, 'GetUserLoad',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'Num' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Diaph' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(25)], HRESULT, 'SetAPI4F2008',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ExposureFrom' ),
              ( ['in'], c_double, 'DirAngle' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_double, 'WindSpeed' ),
              ( ['in'], c_double, 'SSLFactor' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(26)], HRESULT, 'SetAPI4F2008_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ExposureFrom' ),
              ( ['in'], c_double, 'DirAngle' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_double, 'WindSpeed' ),
              ( ['in'], c_double, 'SSLFactor' ),
              ( ['in'], c_double, 'ShieldingFactor' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(27)], HRESULT, 'SetASCE702',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ExposureFrom' ),
              ( ['in'], c_double, 'DirAngle' ),
              ( ['in'], c_double, 'Cpw' ),
              ( ['in'], c_double, 'Cpl' ),
              ( ['in'], c_int, 'ASCECase' ),
              ( ['in'], c_double, 'ASCEe1' ),
              ( ['in'], c_double, 'ASCEe2' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_double, 'WindSpeed' ),
              ( ['in'], c_int, 'ExposureType' ),
              ( ['in'], c_double, 'ImportanceFactor' ),
              ( ['in'], c_double, 'Kzt' ),
              ( ['in'], c_double, 'GustFactor' ),
              ( ['in'], c_double, 'Kd' ),
              ( ['in', 'optional'], c_double, 'SolidGrossRatio', 0.2 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'UserExposure', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(28)], HRESULT, 'SetASCE705',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ExposureFrom' ),
              ( ['in'], c_double, 'DirAngle' ),
              ( ['in'], c_double, 'Cpw' ),
              ( ['in'], c_double, 'Cpl' ),
              ( ['in'], c_int, 'ASCECase' ),
              ( ['in'], c_double, 'ASCEe1' ),
              ( ['in'], c_double, 'ASCEe2' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_double, 'WindSpeed' ),
              ( ['in'], c_int, 'ExposureType' ),
              ( ['in'], c_double, 'ImportanceFactor' ),
              ( ['in'], c_double, 'Kzt' ),
              ( ['in'], c_double, 'GustFactor' ),
              ( ['in'], c_double, 'Kd' ),
              ( ['in', 'optional'], c_double, 'SolidGrossRatio', 0.2 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'UserExposure', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(29)], HRESULT, 'SetASCE710',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ExposureFrom' ),
              ( ['in'], c_double, 'DirAngle' ),
              ( ['in'], c_double, 'Cpw' ),
              ( ['in'], c_double, 'Cpl' ),
              ( ['in'], c_int, 'ASCECase' ),
              ( ['in'], c_double, 'ASCEe1' ),
              ( ['in'], c_double, 'ASCEe2' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_double, 'WindSpeed' ),
              ( ['in'], c_int, 'ExposureType' ),
              ( ['in'], c_double, 'ImportanceFactor' ),
              ( ['in'], c_double, 'Kzt' ),
              ( ['in'], c_double, 'GustFactor' ),
              ( ['in'], c_double, 'Kd' ),
              ( ['in', 'optional'], c_double, 'SolidGrossRatio', 0.2 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'UserExposure', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(30)], HRESULT, 'SetASCE788',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ExposureFrom' ),
              ( ['in'], c_double, 'DirAngle' ),
              ( ['in'], c_double, 'Cpw' ),
              ( ['in'], c_double, 'Cpl' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_double, 'WindSpeed' ),
              ( ['in'], c_int, 'ExposureType' ),
              ( ['in'], c_double, 'ImportanceFactor' ),
              ( ['in'], c_double, 'GustFactor' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'UserExposure', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(31)], HRESULT, 'SetASCE795',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ExposureFrom' ),
              ( ['in'], c_double, 'DirAngle' ),
              ( ['in'], c_double, 'Cpw' ),
              ( ['in'], c_double, 'Cpl' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_double, 'WindSpeed' ),
              ( ['in'], c_int, 'ExposureType' ),
              ( ['in'], c_double, 'ImportanceFactor' ),
              ( ['in'], c_double, 'Kzt' ),
              ( ['in'], c_double, 'GustFactor' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'UserExposure', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(32)], HRESULT, 'SetASNZS117022002',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ExposureFrom' ),
              ( ['in'], c_double, 'DirAngle' ),
              ( ['in'], c_double, 'Cpw' ),
              ( ['in'], c_double, 'Cpl' ),
              ( ['in'], c_double, 'Ka' ),
              ( ['in'], c_double, 'Kc' ),
              ( ['in'], c_double, 'Kl' ),
              ( ['in'], c_double, 'Kp' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_double, 'WindSpeed' ),
              ( ['in'], c_int, 'Cat' ),
              ( ['in'], VARIANT_BOOL, 'CycloneRegion' ),
              ( ['in'], c_double, 'Md' ),
              ( ['in'], c_double, 'Ms' ),
              ( ['in'], c_double, 'Mt' ),
              ( ['in'], c_double, 'Cdyn' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'UserExposure', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(51)], HRESULT, 'SetASNZS117022011',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ExposureFrom' ),
              ( ['in'], c_double, 'DirAngle' ),
              ( ['in'], c_double, 'Cpw' ),
              ( ['in'], c_double, 'Cpl' ),
              ( ['in'], c_double, 'Ka' ),
              ( ['in'], c_double, 'Kc' ),
              ( ['in'], c_double, 'Kl' ),
              ( ['in'], c_double, 'Kp' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_double, 'WindSpeed' ),
              ( ['in'], c_int, 'Cat' ),
              ( ['in'], c_int, 'ASCECase' ),
              ( ['in'], c_double, 'Md' ),
              ( ['in'], c_double, 'Ms' ),
              ( ['in'], c_double, 'Mt' ),
              ( ['in'], c_double, 'Cdyn' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'UserExposure', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(33)], HRESULT, 'SetBOCA96',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ExposureFrom' ),
              ( ['in'], c_double, 'DirAngle' ),
              ( ['in'], c_double, 'Cpw' ),
              ( ['in'], c_double, 'Cpl' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_double, 'WindSpeed' ),
              ( ['in'], c_int, 'ExposureType' ),
              ( ['in'], c_double, 'ImportanceFactor' ),
              ( ['in'], c_double, 'GustFactor' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'UserGust', False ),
              ( ['in', 'optional'], VARIANT_BOOL, 'UserExposure', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(34)], HRESULT, 'SetBS639995',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ExposureFrom' ),
              ( ['in'], c_double, 'DirAngle' ),
              ( ['in'], c_double, 'Cpw' ),
              ( ['in'], c_double, 'Cpl' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_double, 'Ve' ),
              ( ['in'], c_double, 'Ca' ),
              ( ['in'], c_double, 'Cr' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'UserExposure', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(35)], HRESULT, 'SetChinese2002',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ExposureFrom' ),
              ( ['in'], c_double, 'DirAngle' ),
              ( ['in'], c_double, 'BuildingWidth' ),
              ( ['in'], c_double, 'Us' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_double, 'WZero' ),
              ( ['in'], c_int, 'Rt' ),
              ( ['in'], c_int, 'PhiZOpt' ),
              ( ['in'], c_int, 'T1Opt' ),
              ( ['in'], c_double, 'UserT' ),
              ( ['in'], c_double, 'DampRatio' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'UserExposure', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(36)], HRESULT, 'SetChinese2002_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ExposureFrom' ),
              ( ['in'], c_double, 'DirAngle' ),
              ( ['in'], c_double, 'BuildingWidth' ),
              ( ['in'], c_double, 'Us' ),
              ( ['in'], VARIANT_BOOL, 'UniformTaper' ),
              ( ['in'], c_double, 'BHoverB0' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_double, 'WZero' ),
              ( ['in'], c_int, 'Rt' ),
              ( ['in'], c_int, 'PhiZOpt' ),
              ( ['in'], c_int, 'T1Opt' ),
              ( ['in'], c_double, 'UserT' ),
              ( ['in'], c_double, 'DampRatio' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'UserExposure', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(37)], HRESULT, 'SetChinese2010',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ExposureFrom' ),
              ( ['in'], c_double, 'DirAngle' ),
              ( ['in'], c_double, 'BuildingWidth' ),
              ( ['in'], c_double, 'Us' ),
              ( ['in'], VARIANT_BOOL, 'UniformTaper' ),
              ( ['in'], c_double, 'BHoverB0' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_double, 'WZero' ),
              ( ['in'], c_int, 'Rt' ),
              ( ['in'], c_int, 'PhiZOpt' ),
              ( ['in'], c_int, 'T1Opt' ),
              ( ['in'], c_double, 'UserT' ),
              ( ['in'], c_double, 'DampRatio' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'UserExposure', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(38)], HRESULT, 'SetEurocode12005',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ExposureFrom' ),
              ( ['in'], c_double, 'DirAngle' ),
              ( ['in'], c_double, 'Cpw' ),
              ( ['in'], c_double, 'Cpl' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_double, 'WindSpeed' ),
              ( ['in'], c_int, 'Terrain' ),
              ( ['in'], c_double, 'Orography' ),
              ( ['in'], c_double, 'K1' ),
              ( ['in'], c_double, 'CsCd' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'UserExposure', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(39)], HRESULT, 'SetEurocode12005_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ExposureFrom' ),
              ( ['in'], c_double, 'DirAngle' ),
              ( ['in'], c_double, 'Cpw' ),
              ( ['in'], c_double, 'Cpl' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_double, 'WindSpeed' ),
              ( ['in'], c_int, 'Terrain' ),
              ( ['in'], c_double, 'Orography' ),
              ( ['in'], c_double, 'K1' ),
              ( ['in'], c_double, 'CsCd' ),
              ( ['in'], c_double, 'Rho' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'UserExposure', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(40)], HRESULT, 'SetExposure',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Diaph' ),
              ( ['in'], c_double, 'X' ),
              ( ['in'], c_double, 'Y' ),
              ( ['in'], c_double, 'Width' ),
              ( ['in'], c_double, 'Height' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(55)], HRESULT, 'SetExposure_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Diaph' ),
              ( ['in'], c_double, 'X' ),
              ( ['in'], c_double, 'Y' ),
              ( ['in'], c_double, 'Width' ),
              ( ['in'], c_double, 'Depth' ),
              ( ['in'], c_double, 'Height' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(41)], HRESULT, 'SetIS8751987',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ExposureFrom' ),
              ( ['in'], c_double, 'DirAngle' ),
              ( ['in'], c_double, 'Cpw' ),
              ( ['in'], c_double, 'Cpl' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_double, 'WindSpeed' ),
              ( ['in'], c_int, 'Terrain' ),
              ( ['in'], c_int, 'Class' ),
              ( ['in'], c_double, 'K1' ),
              ( ['in'], c_double, 'K3' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'UserExposure', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(63)], HRESULT, 'SetIS8752015',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ExposureFrom' ),
              ( ['in'], c_double, 'DirAngle' ),
              ( ['in'], c_double, 'Cpw' ),
              ( ['in'], c_double, 'Cpl' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_double, 'WindSpeed' ),
              ( ['in'], c_int, 'TerrainCategory' ),
              ( ['in'], c_int, 'ImportanceFactor' ),
              ( ['in'], c_double, 'K1' ),
              ( ['in'], c_double, 'K3' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'UserExposure', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(42)], HRESULT, 'SetMexican',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ExposureFrom' ),
              ( ['in'], c_double, 'DirAngle' ),
              ( ['in'], c_double, 'Cpw' ),
              ( ['in'], c_double, 'Cpl' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_double, 'WindSpeed' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'UserExposure', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(43)], HRESULT, 'SetNBCC2005',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ExposureFrom' ),
              ( ['in'], c_double, 'DirAngle' ),
              ( ['in'], c_double, 'Cpw' ),
              ( ['in'], c_double, 'Cpl' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_double, 'q' ),
              ( ['in'], c_double, 'GustFactor' ),
              ( ['in'], c_double, 'ImportanceFactor' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'UserExposure', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(44)], HRESULT, 'SetNBCC2010',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ExposureFrom' ),
              ( ['in'], c_double, 'DirAngle' ),
              ( ['in'], c_double, 'Cpw' ),
              ( ['in'], c_double, 'Cpl' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_double, 'q' ),
              ( ['in'], c_double, 'GustFactor' ),
              ( ['in'], c_double, 'ImportanceFactor' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'UserExposure', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(60)], HRESULT, 'SetNBCC2010_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ExposureFrom' ),
              ( ['in'], c_double, 'DirAngle' ),
              ( ['in'], c_double, 'Cpw' ),
              ( ['in'], c_double, 'Cpl' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_double, 'q' ),
              ( ['in'], c_double, 'GustFactor' ),
              ( ['in'], c_double, 'ImportanceFactor' ),
              ( ['in'], c_int, 'TerrainType' ),
              ( ['in'], c_double, 'CeWindward' ),
              ( ['in'], c_double, 'CeLeeward' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'UserExposure', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(61)], HRESULT, 'SetNBCC2015',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ExposureFrom' ),
              ( ['in'], c_double, 'DirAngle' ),
              ( ['in'], c_double, 'Cpw' ),
              ( ['in'], c_double, 'Cpl' ),
              ( ['in'], c_int, 'NBCCCase' ),
              ( ['in'], c_double, 'e1' ),
              ( ['in'], c_double, 'e2' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_double, 'q' ),
              ( ['in'], c_double, 'GustFactor' ),
              ( ['in'], c_double, 'TopographicFactor' ),
              ( ['in'], c_double, 'ImportanceFactor' ),
              ( ['in'], c_int, 'TerrainType' ),
              ( ['in'], c_double, 'CeWindward' ),
              ( ['in'], c_double, 'CeLeeward' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'UserExposure', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(45)], HRESULT, 'SetNBCC95',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ExposureFrom' ),
              ( ['in'], c_double, 'DirAngle' ),
              ( ['in'], c_double, 'Cpw' ),
              ( ['in'], c_double, 'Cpl' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_double, 'q' ),
              ( ['in'], c_double, 'GustFactor' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'UserExposure', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(46)], HRESULT, 'SetNone',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(57)], HRESULT, 'SetNTC2008',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ExposureFrom' ),
              ( ['in'], c_double, 'DirAngle' ),
              ( ['in'], c_double, 'Cpw' ),
              ( ['in'], c_double, 'Cpl' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_double, 'Vb' ),
              ( ['in'], c_int, 'ExposureCategory' ),
              ( ['in'], c_double, 'Ct' ),
              ( ['in'], c_double, 'Cd' ),
              ( ['in'], c_double, 'cp' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'UserExposure', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(65)], HRESULT, 'SetNTC2018',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ExposureFrom' ),
              ( ['in'], c_double, 'DirAngle' ),
              ( ['in'], c_double, 'Cpw' ),
              ( ['in'], c_double, 'Cpl' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_double, 'Vb' ),
              ( ['in'], c_int, 'ExposureCategory' ),
              ( ['in'], c_double, 'Ct' ),
              ( ['in'], c_double, 'Cd' ),
              ( ['in'], c_double, 'cp' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'UserExposure', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(67)], HRESULT, 'SetSP20133302016',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'LoadingType' ),
              ( ['in'], c_int, 'ExposureFrom' ),
              ( ['in'], c_double, 'DirAngle' ),
              ( ['in'], c_double, 'cp' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_int, 'StructureType' ),
              ( ['in'], c_int, 'LogDecrement' ),
              ( ['in'], c_double, 'BuildingWidth' ),
              ( ['in'], c_double, 'BuildingDepth' ),
              ( ['in'], c_double, 'Zeq' ),
              ( ['in'], c_int, 'WindDistrict' ),
              ( ['in'], c_double, 'WindPressure' ),
              ( ['in'], c_int, 'TerrainType' ),
              ( ['in'], c_double, 'LimitFreq' ),
              ( ['in'], BSTR, 'ModalCase' ),
              ( ['in'], c_int, 'FirstValMode' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'UserExposure', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(47)], HRESULT, 'SetUBC94',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ExposureFrom' ),
              ( ['in'], c_double, 'DirAngle' ),
              ( ['in'], c_double, 'Cpw' ),
              ( ['in'], c_double, 'Cpl' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_double, 'WindSpeed' ),
              ( ['in'], c_int, 'ExposureType' ),
              ( ['in'], c_double, 'ImportanceFactor' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'UserExposure', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(48)], HRESULT, 'SetUBC97',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ExposureFrom' ),
              ( ['in'], c_double, 'DirAngle' ),
              ( ['in'], c_double, 'Cpw' ),
              ( ['in'], c_double, 'Cpl' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_double, 'WindSpeed' ),
              ( ['in'], c_int, 'ExposureType' ),
              ( ['in'], c_double, 'ImportanceFactor' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'UserExposure', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(49)], HRESULT, 'SetUserLoad',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Diaph' ),
              ( ['in'], c_double, 'FX' ),
              ( ['in'], c_double, 'FY' ),
              ( ['in'], c_double, 'MZ' ),
              ( ['in'], c_double, 'X' ),
              ( ['in'], c_double, 'Y' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(52)], HRESULT, 'GetAPI4F2013',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'ExposureFrom' ),
              ( ['in', 'out'], POINTER(c_double), 'DirAngle' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_double), 'WindSpeed' ),
              ( ['in', 'out'], POINTER(c_double), 'SSLFactor' ),
              ( ['in', 'out'], POINTER(c_double), 'ShieldingFactor' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(53)], HRESULT, 'SetAPI4F2013',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ExposureFrom' ),
              ( ['in'], c_double, 'DirAngle' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_double, 'WindSpeed' ),
              ( ['in'], c_double, 'SSLFactor' ),
              ( ['in'], c_double, 'ShieldingFactor' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cAutoWind implementation
##class cAutoWind_Impl(object):
##    def GetAPI4F2008(self, Name):
##        '-no docstring-'
##        #return ExposureFrom, DirAngle, UserZ, TopZ, BottomZ, WindSpeed, SSLFactor, pRetVal
##
##    def GetAPI4F2008_1(self, Name):
##        '-no docstring-'
##        #return ExposureFrom, DirAngle, UserZ, TopZ, BottomZ, WindSpeed, SSLFactor, ShieldingFactor, pRetVal
##
##    def GetASCE702(self, Name):
##        '-no docstring-'
##        #return ExposureFrom, DirAngle, Cpw, Cpl, ASCECase, ASCEe1, ASCEe2, UserZ, TopZ, BottomZ, WindSpeed, ExposureType, ImportanceFactor, Kzt, GustFactor, Kd, SolidGrossRatio, UserExposure, pRetVal
##
##    def GetASCE705(self, Name):
##        '-no docstring-'
##        #return ExposureFrom, DirAngle, Cpw, Cpl, ASCECase, ASCEe1, ASCEe2, UserZ, TopZ, BottomZ, WindSpeed, ExposureType, ImportanceFactor, Kzt, GustFactor, Kd, SolidGrossRatio, UserExposure, pRetVal
##
##    def GetASCE710(self, Name):
##        '-no docstring-'
##        #return ExposureFrom, DirAngle, Cpw, Cpl, ASCECase, ASCEe1, ASCEe2, UserZ, TopZ, BottomZ, WindSpeed, ExposureType, ImportanceFactor, Kzt, GustFactor, Kd, SolidGrossRatio, UserExposure, pRetVal
##
##    def GetASCE788(self, Name):
##        '-no docstring-'
##        #return ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, WindSpeed, ExposureType, ImportanceFactor, GustFactor, UserExposure, pRetVal
##
##    def GetASCE795(self, Name):
##        '-no docstring-'
##        #return ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, WindSpeed, ExposureType, ImportanceFactor, Kzt, GustFactor, UserExposure, pRetVal
##
##    def GetASNZS117022002(self, Name):
##        '-no docstring-'
##        #return ExposureFrom, DirAngle, Cpw, Cpl, Ka, Kc, Kl, Kp, UserZ, TopZ, BottomZ, WindSpeed, Cat, CycloneRegion, Md, Ms, Mt, Cdyn, UserExposure, pRetVal
##
##    def GetASNZS117022011(self, Name):
##        '-no docstring-'
##        #return ExposureFrom, DirAngle, Cpw, Cpl, Ka, Kc, Kl, Kp, UserZ, TopZ, BottomZ, WindSpeed, Cat, ASCECase, Md, Ms, Mt, Cdyn, UserExposure, pRetVal
##
##    def GetBOCA96(self, Name):
##        '-no docstring-'
##        #return ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, WindSpeed, ExposureType, ImportanceFactor, UserGust, GustFactor, UserExposure, pRetVal
##
##    def GetBS639995(self, Name):
##        '-no docstring-'
##        #return ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, Ve, Ca, Cr, UserExposure, pRetVal
##
##    def GetChinese2002(self, Name):
##        '-no docstring-'
##        #return ExposureFrom, DirAngle, BuildingWidth, Us, UserZ, TopZ, BottomZ, WZero, Rt, PhiZOpt, T1Opt, UserT, DampRatio, UserExposure, pRetVal
##
##    def GetChinese2002_1(self, Name):
##        '-no docstring-'
##        #return ExposureFrom, DirAngle, BuildingWidth, Us, UniformTaper, BHoverB0, UserZ, TopZ, BottomZ, WZero, Rt, PhiZOpt, T1Opt, UserT, DampRatio, UserExposure, pRetVal
##
##    def GetChinese2010(self, Name):
##        '-no docstring-'
##        #return ExposureFrom, DirAngle, BuildingWidth, Us, UniformTaper, BHoverB0, UserZ, TopZ, BottomZ, WZero, Rt, PhiZOpt, T1Opt, UserT, DampRatio, UserExposure, pRetVal
##
##    def GetEurocode12005(self, Name):
##        '-no docstring-'
##        #return ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, WindSpeed, Terrain, Orography, K1, CsCd, UserExposure, pRetVal
##
##    def GetEurocode12005_1(self, Name):
##        '-no docstring-'
##        #return ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, WindSpeed, Terrain, Orography, K1, CsCd, Rho, UserExposure, pRetVal
##
##    def GetExposure(self, Name):
##        '-no docstring-'
##        #return Num, Diaph, X, Y, MyWidth, Height, pRetVal
##
##    def GetExposure_1(self, Name):
##        '-no docstring-'
##        #return Num, Diaph, X, Y, MyWidth, MyDepth, Height, pRetVal
##
##    def GetIS8751987(self, Name):
##        '-no docstring-'
##        #return ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, WindSpeed, Terrain, Class, K1, K3, UserExposure, pRetVal
##
##    def GetIS8752015(self, Name):
##        '-no docstring-'
##        #return ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, WindSpeed, TerrainCategory, ImportanceFactor, K1, K3, UserExposure, pRetVal
##
##    def GetMexican(self, Name):
##        '-no docstring-'
##        #return ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, WindSpeed, UserExposure, pRetVal
##
##    def GetNBCC2005(self, Name):
##        '-no docstring-'
##        #return ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, q, GustFactor, ImportanceFactor, UserExposure, pRetVal
##
##    def GetNBCC2010(self, Name):
##        '-no docstring-'
##        #return ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, q, GustFactor, ImportanceFactor, UserExposure, pRetVal
##
##    def GetNBCC2010_1(self, Name):
##        '-no docstring-'
##        #return ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, q, GustFactor, ImportanceFactor, TerrainType, CeWindward, CeLeeward, UserExposure, pRetVal
##
##    def GetNBCC2015(self, Name):
##        '-no docstring-'
##        #return ExposureFrom, DirAngle, Cpw, Cpl, NBCCCase, e1, e2, UserZ, TopZ, BottomZ, q, GustFactor, TopographicFactor, ImportanceFactor, TerrainType, CeWindward, CeLeeward, UserExposure, pRetVal
##
##    def GetNBCC95(self, Name):
##        '-no docstring-'
##        #return ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, q, GustFactor, UserExposure, pRetVal
##
##    def GetNTC2008(self, Name):
##        '-no docstring-'
##        #return ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, Vb, ExposureCategory, Ct, Cd, cp, UserExposure, pRetVal
##
##    def GetNTC2018(self, Name):
##        '-no docstring-'
##        #return ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, Vb, ExposureCategory, Ct, Cd, cp, UserExposure, pRetVal
##
##    def GetSP20133302016(self, Name):
##        '-no docstring-'
##        #return LoadingType, ExposureFrom, DirAngle, cp, UserZ, TopZ, BottomZ, StructureType, LogDecrement, BuildingWidth, BuildingDepth, Zeq, WindDistrict, WindPressure, TerrainType, LimitFreq, ModalCase, FirstValMode, UserExposure, pRetVal
##
##    def GetUBC94(self, Name):
##        '-no docstring-'
##        #return ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, WindSpeed, ExposureType, ImportanceFactor, UserExposure, pRetVal
##
##    def GetUBC97(self, Name):
##        '-no docstring-'
##        #return ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, WindSpeed, ExposureType, ImportanceFactor, UserExposure, pRetVal
##
##    def GetUserLoad(self, Name):
##        '-no docstring-'
##        #return Num, Diaph, FX, FY, MZ, X, Y, pRetVal
##
##    def SetAPI4F2008(self, Name, ExposureFrom, DirAngle, UserZ, TopZ, BottomZ, WindSpeed, SSLFactor):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetAPI4F2008_1(self, Name, ExposureFrom, DirAngle, UserZ, TopZ, BottomZ, WindSpeed, SSLFactor, ShieldingFactor):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetASCE702(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, ASCECase, ASCEe1, ASCEe2, UserZ, TopZ, BottomZ, WindSpeed, ExposureType, ImportanceFactor, Kzt, GustFactor, Kd, SolidGrossRatio, UserExposure):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetASCE705(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, ASCECase, ASCEe1, ASCEe2, UserZ, TopZ, BottomZ, WindSpeed, ExposureType, ImportanceFactor, Kzt, GustFactor, Kd, SolidGrossRatio, UserExposure):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetASCE710(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, ASCECase, ASCEe1, ASCEe2, UserZ, TopZ, BottomZ, WindSpeed, ExposureType, ImportanceFactor, Kzt, GustFactor, Kd, SolidGrossRatio, UserExposure):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetASCE788(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, WindSpeed, ExposureType, ImportanceFactor, GustFactor, UserExposure):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetASCE795(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, WindSpeed, ExposureType, ImportanceFactor, Kzt, GustFactor, UserExposure):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetASNZS117022002(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, Ka, Kc, Kl, Kp, UserZ, TopZ, BottomZ, WindSpeed, Cat, CycloneRegion, Md, Ms, Mt, Cdyn, UserExposure):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetASNZS117022011(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, Ka, Kc, Kl, Kp, UserZ, TopZ, BottomZ, WindSpeed, Cat, ASCECase, Md, Ms, Mt, Cdyn, UserExposure):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetBOCA96(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, WindSpeed, ExposureType, ImportanceFactor, GustFactor, UserGust, UserExposure):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetBS639995(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, Ve, Ca, Cr, UserExposure):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetChinese2002(self, Name, ExposureFrom, DirAngle, BuildingWidth, Us, UserZ, TopZ, BottomZ, WZero, Rt, PhiZOpt, T1Opt, UserT, DampRatio, UserExposure):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetChinese2002_1(self, Name, ExposureFrom, DirAngle, BuildingWidth, Us, UniformTaper, BHoverB0, UserZ, TopZ, BottomZ, WZero, Rt, PhiZOpt, T1Opt, UserT, DampRatio, UserExposure):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetChinese2010(self, Name, ExposureFrom, DirAngle, BuildingWidth, Us, UniformTaper, BHoverB0, UserZ, TopZ, BottomZ, WZero, Rt, PhiZOpt, T1Opt, UserT, DampRatio, UserExposure):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetEurocode12005(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, WindSpeed, Terrain, Orography, K1, CsCd, UserExposure):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetEurocode12005_1(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, WindSpeed, Terrain, Orography, K1, CsCd, Rho, UserExposure):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetExposure(self, Name, Diaph, X, Y, Width, Height):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetExposure_1(self, Name, Diaph, X, Y, Width, Depth, Height):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetIS8751987(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, WindSpeed, Terrain, Class, K1, K3, UserExposure):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetIS8752015(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, WindSpeed, TerrainCategory, ImportanceFactor, K1, K3, UserExposure):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetMexican(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, WindSpeed, UserExposure):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetNBCC2005(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, q, GustFactor, ImportanceFactor, UserExposure):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetNBCC2010(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, q, GustFactor, ImportanceFactor, UserExposure):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetNBCC2010_1(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, q, GustFactor, ImportanceFactor, TerrainType, CeWindward, CeLeeward, UserExposure):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetNBCC2015(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, NBCCCase, e1, e2, UserZ, TopZ, BottomZ, q, GustFactor, TopographicFactor, ImportanceFactor, TerrainType, CeWindward, CeLeeward, UserExposure):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetNBCC95(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, q, GustFactor, UserExposure):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetNone(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetNTC2008(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, Vb, ExposureCategory, Ct, Cd, cp, UserExposure):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetNTC2018(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, Vb, ExposureCategory, Ct, Cd, cp, UserExposure):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSP20133302016(self, Name, LoadingType, ExposureFrom, DirAngle, cp, UserZ, TopZ, BottomZ, StructureType, LogDecrement, BuildingWidth, BuildingDepth, Zeq, WindDistrict, WindPressure, TerrainType, LimitFreq, ModalCase, FirstValMode, UserExposure):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetUBC94(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, WindSpeed, ExposureType, ImportanceFactor, UserExposure):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetUBC97(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, WindSpeed, ExposureType, ImportanceFactor, UserExposure):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetUserLoad(self, Name, Diaph, FX, FY, MZ, X, Y):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetAPI4F2013(self, Name):
##        '-no docstring-'
##        #return ExposureFrom, DirAngle, UserZ, TopZ, BottomZ, WindSpeed, SSLFactor, ShieldingFactor, pRetVal
##
##    def SetAPI4F2013(self, Name, ExposureFrom, DirAngle, UserZ, TopZ, BottomZ, WindSpeed, SSLFactor, ShieldingFactor):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_AA_L_07_CBox2FlexRt._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_CBox2FlexRt implementation
##class cBDRS_AA_L_07_CBox2FlexRt_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBridgeTendon(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{CCCE5E75-9114-4537-914B-36B0B90A725F}')
    _idlflags_ = ['dual', 'oleautomation']
cBridgeTendon._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'Add',
              ( ['in'], BSTR, 'BridgeObj' ),
              ( ['in', 'out'], POINTER(BSTR), 'Name' ),
              ( ['in'], BSTR, 'StartSpan' ),
              ( ['in'], c_int, 'StartType' ),
              ( ['in'], c_double, 'StartDist' ),
              ( ['in'], BSTR, 'EndSpan' ),
              ( ['in'], c_int, 'EndType' ),
              ( ['in'], c_double, 'EndDist' ),
              ( ['in'], c_int, 'PreType' ),
              ( ['in'], BSTR, 'Material' ),
              ( ['in'], c_double, 'TendonArea' ),
              ( ['in'], c_double, 'MaxDiscLen' ),
              ( ['in'], c_int, 'ModelAs' ),
              ( ['in'], c_double, 'DuctDiam' ),
              ( ['in'], c_int, 'BondType' ),
              ( ['in', 'optional'], BSTR, 'UserName', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'BridgeObj' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'CheckExists',
              ( ['in'], BSTR, 'BridgeObj' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'Exists' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetNameList',
              ( ['in'], BSTR, 'BridgeObj' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetNameListSegmental',
              ( ['in'], BSTR, 'BridgeObj' ),
              ( ['in'], eBridgeTendonCategory, 'MyType' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'SetLoadForceStress',
              ( ['in'], BSTR, 'BridgeObj' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadName' ),
              ( ['in'], c_int, 'JackFrom' ),
              ( ['in'], c_int, 'LoadType' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in'], c_double, 'CurvatureCoeff' ),
              ( ['in'], c_double, 'WobbleCoeff' ),
              ( ['in'], c_double, 'LossAnchorage' ),
              ( ['in'], c_double, 'LossShortening' ),
              ( ['in'], c_double, 'LossCreep' ),
              ( ['in'], c_double, 'LossShrinkage' ),
              ( ['in'], c_double, 'LossSteelRelax' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'SetHorizontalTendonData',
              ( ['in'], BSTR, 'BridgeObj' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TendonDist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'HorizOff' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Slope' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'SetVerticalTendonData',
              ( ['in'], BSTR, 'BridgeObj' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TendonDist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VertOff' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Slope' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetTendonCategory',
              ( ['in'], BSTR, 'BridgeObj' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(eBridgeTendonCategory), 'MyType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'SetTendonCategory',
              ( ['in'], BSTR, 'BridgeObj' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eBridgeTendonCategory, 'MyType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBridgeTendon implementation
##class cBridgeTendon_Impl(object):
##    def Add(self, BridgeObj, StartSpan, StartType, StartDist, EndSpan, EndType, EndDist, PreType, Material, TendonArea, MaxDiscLen, ModelAs, DuctDiam, BondType, UserName):
##        '-no docstring-'
##        #return Name, pRetVal
##
##    def Delete(self, BridgeObj, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def CheckExists(self, BridgeObj, Name):
##        '-no docstring-'
##        #return Exists, pRetVal
##
##    def GetNameList(self, BridgeObj):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetNameListSegmental(self, BridgeObj, MyType):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def SetLoadForceStress(self, BridgeObj, Name, LoadName, JackFrom, LoadType, Value, CurvatureCoeff, WobbleCoeff, LossAnchorage, LossShortening, LossCreep, LossShrinkage, LossSteelRelax):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetHorizontalTendonData(self, BridgeObj, Name, NumberPoints):
##        '-no docstring-'
##        #return MyType, TendonDist, HorizOff, Slope, pRetVal
##
##    def SetVerticalTendonData(self, BridgeObj, Name, NumberPoints):
##        '-no docstring-'
##        #return MyType, TendonDist, VertOff, Slope, pRetVal
##
##    def GetTendonCategory(self, BridgeObj, Name):
##        '-no docstring-'
##        #return MyType, pRetVal
##
##    def SetTendonCategory(self, BridgeObj, Name, MyType):
##        '-no docstring-'
##        #return pRetVal
##

class cAutoSeismic(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{DD795547-9394-4DEB-B64B-F44D6AAE2E2B}')
    _idlflags_ = ['dual', 'oleautomation']
cAutoSeismic._methods_ = [
    COMMETHOD([dispid(9)], HRESULT, 'GetIBC2006',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'DirFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'Eccen' ),
              ( ['in', 'out'], POINTER(c_int), 'PeriodFlag' ),
              ( ['in', 'out'], POINTER(c_int), 'CtType' ),
              ( ['in', 'out'], POINTER(c_double), 'UserT' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_double), 'R' ),
              ( ['in', 'out'], POINTER(c_double), 'Omega' ),
              ( ['in', 'out'], POINTER(c_double), 'Cd' ),
              ( ['in', 'out'], POINTER(c_double), 'I' ),
              ( ['in', 'out'], POINTER(c_int), 'IBC2006Option' ),
              ( ['in', 'out'], POINTER(c_double), 'Latitude' ),
              ( ['in', 'out'], POINTER(c_double), 'Longitude' ),
              ( ['in', 'out'], POINTER(BSTR), 'ZipCode' ),
              ( ['in', 'out'], POINTER(c_double), 'Ss' ),
              ( ['in', 'out'], POINTER(c_double), 'S1' ),
              ( ['in', 'out'], POINTER(c_double), 'Tl' ),
              ( ['in', 'out'], POINTER(c_int), 'SiteClass' ),
              ( ['in', 'out'], POINTER(c_double), 'Fa' ),
              ( ['in', 'out'], POINTER(c_double), 'Fv' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(28)], HRESULT, 'SetIBC2006',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'DirFlag' ),
              ( ['in'], c_double, 'Eccen' ),
              ( ['in'], c_int, 'PeriodFlag' ),
              ( ['in'], c_int, 'CtType' ),
              ( ['in'], c_double, 'UserT' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_double, 'R' ),
              ( ['in'], c_double, 'Omega' ),
              ( ['in'], c_double, 'Cd' ),
              ( ['in'], c_double, 'I' ),
              ( ['in'], c_int, 'IBC2006Option' ),
              ( ['in'], c_double, 'Latitude' ),
              ( ['in'], c_double, 'Longitude' ),
              ( ['in'], BSTR, 'ZipCode' ),
              ( ['in'], c_double, 'Ss' ),
              ( ['in'], c_double, 'S1' ),
              ( ['in'], c_double, 'Tl' ),
              ( ['in'], c_int, 'SiteClass' ),
              ( ['in'], c_double, 'Fa' ),
              ( ['in'], c_double, 'Fv' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(1)], HRESULT, 'GetAS11702007',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'DirFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'Eccen' ),
              ( ['in', 'out'], POINTER(c_int), 'PeriodFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'Ct' ),
              ( ['in', 'out'], POINTER(c_double), 'UserT' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_int), 'AS2007SiteClass' ),
              ( ['in', 'out'], POINTER(c_double), 'AS2007Kp' ),
              ( ['in', 'out'], POINTER(c_double), 'AS2007Z' ),
              ( ['in', 'out'], POINTER(c_double), 'AS2007Sp' ),
              ( ['in', 'out'], POINTER(c_double), 'AS2007Mu' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetBOCA96',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'DirFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'Eccen' ),
              ( ['in', 'out'], POINTER(c_int), 'PeriodFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'Ct' ),
              ( ['in', 'out'], POINTER(c_double), 'UserT' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BOCA96Aa' ),
              ( ['in', 'out'], POINTER(c_double), 'BOCA96Av' ),
              ( ['in', 'out'], POINTER(c_double), 'BOCA96S' ),
              ( ['in', 'out'], POINTER(c_double), 'BOCA96R' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetChinese2002',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'DirFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'Eccen' ),
              ( ['in', 'out'], POINTER(c_int), 'PeriodFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'UserT' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_double), 'JGJ32002AlphaMax' ),
              ( ['in', 'out'], POINTER(c_int), 'JGJ32002SI' ),
              ( ['in', 'out'], POINTER(c_double), 'JGJ32002DampRatio' ),
              ( ['in', 'out'], POINTER(c_double), 'JGJ32002Tg' ),
              ( ['in', 'out'], POINTER(c_double), 'JGJ32002PTDF' ),
              ( ['in', 'out'], POINTER(c_double), 'EnhancementFactor' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetChinese2010',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'DirFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'Eccen' ),
              ( ['in', 'out'], POINTER(c_int), 'PeriodFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'UserT' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_double), 'JGJ32002AlphaMax' ),
              ( ['in', 'out'], POINTER(c_int), 'JGJ32002SI' ),
              ( ['in', 'out'], POINTER(c_double), 'JGJ32002DampRatio' ),
              ( ['in', 'out'], POINTER(c_double), 'JGJ32002Tg' ),
              ( ['in', 'out'], POINTER(c_double), 'JGJ32002PTDF' ),
              ( ['in', 'out'], POINTER(c_double), 'EnhancementFactor' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetDiaphragmEccentricityOverride',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'Num' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Diaph' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Eccen' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetEurocode82004',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'DirFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'Eccen' ),
              ( ['in', 'out'], POINTER(c_int), 'PeriodFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'Ct' ),
              ( ['in', 'out'], POINTER(c_double), 'UserT' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_int), 'EURO2004GroundType' ),
              ( ['in', 'out'], POINTER(c_int), 'EURO2004SpectrumType' ),
              ( ['in', 'out'], POINTER(c_double), 'EURO2004Ag' ),
              ( ['in', 'out'], POINTER(c_double), 'EURO2004Beta' ),
              ( ['in', 'out'], POINTER(c_double), 'EURO2004Q' ),
              ( ['in', 'out'], POINTER(c_double), 'EURO2004Lambda' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetEurocode82004_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'DirFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'Eccen' ),
              ( ['in', 'out'], POINTER(c_int), 'PeriodFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'Ct' ),
              ( ['in', 'out'], POINTER(c_double), 'UserT' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_int), 'EURO2004Country' ),
              ( ['in', 'out'], POINTER(c_int), 'EURO2004SpectrumType' ),
              ( ['in', 'out'], POINTER(c_int), 'EURO2004GroundType' ),
              ( ['in', 'out'], POINTER(c_double), 'EURO2004Ag' ),
              ( ['in', 'out'], POINTER(c_double), 'EURO2004S' ),
              ( ['in', 'out'], POINTER(c_double), 'EURO2004Tb' ),
              ( ['in', 'out'], POINTER(c_double), 'EURO2004Tc' ),
              ( ['in', 'out'], POINTER(c_double), 'EURO2004Td' ),
              ( ['in', 'out'], POINTER(c_double), 'EURO2004Beta' ),
              ( ['in', 'out'], POINTER(c_double), 'EURO2004Q' ),
              ( ['in', 'out'], POINTER(c_double), 'EURO2004Lambda' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetIBC2003',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'DirFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'Eccen' ),
              ( ['in', 'out'], POINTER(c_int), 'PeriodFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'Ct' ),
              ( ['in', 'out'], POINTER(c_double), 'UserT' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_int), 'Sg' ),
              ( ['in', 'out'], POINTER(c_int), 'SeismicCoeffFlag' ),
              ( ['in', 'out'], POINTER(c_int), 'Site' ),
              ( ['in', 'out'], POINTER(c_double), 'Ss' ),
              ( ['in', 'out'], POINTER(c_double), 'S1' ),
              ( ['in', 'out'], POINTER(c_double), 'Fa' ),
              ( ['in', 'out'], POINTER(c_double), 'Fv' ),
              ( ['in', 'out'], POINTER(c_double), 'R' ),
              ( ['in', 'out'], POINTER(c_double), 'Omega' ),
              ( ['in', 'out'], POINTER(c_double), 'Cd' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetIS1893_2002',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'DirFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'Eccen' ),
              ( ['in', 'out'], POINTER(c_int), 'PeriodFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'Ct' ),
              ( ['in', 'out'], POINTER(c_double), 'UserT' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_int), 'INZFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'INZ' ),
              ( ['in', 'out'], POINTER(c_int), 'INS' ),
              ( ['in', 'out'], POINTER(c_double), 'INI' ),
              ( ['in', 'out'], POINTER(c_double), 'INR' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetNBCC2005',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'DirFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'Eccen' ),
              ( ['in', 'out'], POINTER(c_int), 'CtType' ),
              ( ['in', 'out'], POINTER(c_int), 'PeriodFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'UserT' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_double), 'PGA' ),
              ( ['in', 'out'], POINTER(c_double), 'S02' ),
              ( ['in', 'out'], POINTER(c_double), 'S05' ),
              ( ['in', 'out'], POINTER(c_double), 'S1' ),
              ( ['in', 'out'], POINTER(c_double), 'S2' ),
              ( ['in', 'out'], POINTER(c_int), 'SiteClass' ),
              ( ['in', 'out'], POINTER(c_double), 'Fa' ),
              ( ['in', 'out'], POINTER(c_double), 'Fv' ),
              ( ['in', 'out'], POINTER(c_double), 'I' ),
              ( ['in', 'out'], POINTER(c_double), 'Mv' ),
              ( ['in', 'out'], POINTER(c_double), 'Rd' ),
              ( ['in', 'out'], POINTER(c_double), 'Ro' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(47)], HRESULT, 'GetNBCC2010',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'DirFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'Eccen' ),
              ( ['in', 'out'], POINTER(c_int), 'CtType' ),
              ( ['in', 'out'], POINTER(c_int), 'PeriodFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'UserT' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_double), 'PGA' ),
              ( ['in', 'out'], POINTER(c_double), 'S02' ),
              ( ['in', 'out'], POINTER(c_double), 'S05' ),
              ( ['in', 'out'], POINTER(c_double), 'S1' ),
              ( ['in', 'out'], POINTER(c_double), 'S2' ),
              ( ['in', 'out'], POINTER(c_double), 'S4' ),
              ( ['in', 'out'], POINTER(c_int), 'SiteClass' ),
              ( ['in', 'out'], POINTER(c_double), 'Fa' ),
              ( ['in', 'out'], POINTER(c_double), 'Fv' ),
              ( ['in', 'out'], POINTER(c_double), 'I' ),
              ( ['in', 'out'], POINTER(c_double), 'Mv' ),
              ( ['in', 'out'], POINTER(c_double), 'Rd' ),
              ( ['in', 'out'], POINTER(c_double), 'Ro' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(48)], HRESULT, 'GetNBCC2015',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'DirFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'Eccen' ),
              ( ['in', 'out'], POINTER(c_int), 'CtType' ),
              ( ['in', 'out'], POINTER(c_int), 'PeriodFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'UserT' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_double), 'PGA' ),
              ( ['in', 'out'], POINTER(c_double), 'S02' ),
              ( ['in', 'out'], POINTER(c_double), 'S05' ),
              ( ['in', 'out'], POINTER(c_double), 'S1' ),
              ( ['in', 'out'], POINTER(c_double), 'S2' ),
              ( ['in', 'out'], POINTER(c_double), 'S5' ),
              ( ['in', 'out'], POINTER(c_double), 'S10' ),
              ( ['in', 'out'], POINTER(c_int), 'SiteClass' ),
              ( ['in', 'out'], POINTER(c_double), 'F02' ),
              ( ['in', 'out'], POINTER(c_double), 'F05' ),
              ( ['in', 'out'], POINTER(c_double), 'F1' ),
              ( ['in', 'out'], POINTER(c_double), 'F2' ),
              ( ['in', 'out'], POINTER(c_double), 'F5' ),
              ( ['in', 'out'], POINTER(c_double), 'F10' ),
              ( ['in', 'out'], POINTER(c_double), 'I' ),
              ( ['in', 'out'], POINTER(c_double), 'Mv' ),
              ( ['in', 'out'], POINTER(c_double), 'Rd' ),
              ( ['in', 'out'], POINTER(c_double), 'Ro' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetNBCC95',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'DirFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'Eccen' ),
              ( ['in', 'out'], POINTER(c_int), 'PFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'Ds' ),
              ( ['in', 'out'], POINTER(c_int), 'PeriodFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'UserT' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_int), 'Za' ),
              ( ['in', 'out'], POINTER(c_int), 'Zv' ),
              ( ['in', 'out'], POINTER(c_int), 'ZvFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'Zvr' ),
              ( ['in', 'out'], POINTER(c_double), 'I' ),
              ( ['in', 'out'], POINTER(c_double), 'F' ),
              ( ['in', 'out'], POINTER(c_double), 'R' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'GetNEHRP97',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'DirFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'Eccen' ),
              ( ['in', 'out'], POINTER(c_int), 'PeriodFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'Ct' ),
              ( ['in', 'out'], POINTER(c_double), 'UserT' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_int), 'NEHRP97Sg' ),
              ( ['in', 'out'], POINTER(c_int), 'NEHRP97SeismicCoeffFlag' ),
              ( ['in', 'out'], POINTER(c_int), 'NEHRP97Site' ),
              ( ['in', 'out'], POINTER(c_double), 'NEHRP97Ss' ),
              ( ['in', 'out'], POINTER(c_double), 'NEHRP97S1' ),
              ( ['in', 'out'], POINTER(c_double), 'NEHRP97Fa' ),
              ( ['in', 'out'], POINTER(c_double), 'NEHRP97Fv' ),
              ( ['in', 'out'], POINTER(c_double), 'NEHRP97R' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(45)], HRESULT, 'GetNTC2008',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'DirFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'Eccen' ),
              ( ['in', 'out'], POINTER(c_int), 'PeriodFlag' ),
              ( ['in', 'out'], POINTER(c_int), 'C1Type' ),
              ( ['in', 'out'], POINTER(c_double), 'UserT' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_int), 'ParamsOption' ),
              ( ['in', 'out'], POINTER(c_double), 'Latitude' ),
              ( ['in', 'out'], POINTER(c_double), 'Longitude' ),
              ( ['in', 'out'], POINTER(c_int), 'Island' ),
              ( ['in', 'out'], POINTER(c_int), 'LimitState' ),
              ( ['in', 'out'], POINTER(c_int), 'UsageClass' ),
              ( ['in', 'out'], POINTER(c_double), 'NomLife' ),
              ( ['in', 'out'], POINTER(c_double), 'PeakAccel' ),
              ( ['in', 'out'], POINTER(c_double), 'F0' ),
              ( ['in', 'out'], POINTER(c_double), 'Tcs' ),
              ( ['in', 'out'], POINTER(c_int), 'SpecType' ),
              ( ['in', 'out'], POINTER(c_int), 'SoilType' ),
              ( ['in', 'out'], POINTER(c_int), 'Topography' ),
              ( ['in', 'out'], POINTER(c_double), 'hRatio' ),
              ( ['in', 'out'], POINTER(c_double), 'Damping' ),
              ( ['in', 'out'], POINTER(c_double), 'q' ),
              ( ['in', 'out'], POINTER(c_double), 'lambda' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(51)], HRESULT, 'GetNTC2018',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'DirFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'Eccen' ),
              ( ['in', 'out'], POINTER(c_int), 'PeriodFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'UserT' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_int), 'ParamsOption' ),
              ( ['in', 'out'], POINTER(c_double), 'Latitude' ),
              ( ['in', 'out'], POINTER(c_double), 'Longitude' ),
              ( ['in', 'out'], POINTER(c_int), 'Island' ),
              ( ['in', 'out'], POINTER(c_int), 'LimitState' ),
              ( ['in', 'out'], POINTER(c_int), 'UsageClass' ),
              ( ['in', 'out'], POINTER(c_double), 'NomLife' ),
              ( ['in', 'out'], POINTER(c_double), 'PeakAccel' ),
              ( ['in', 'out'], POINTER(c_double), 'F0' ),
              ( ['in', 'out'], POINTER(c_double), 'Tcs' ),
              ( ['in', 'out'], POINTER(c_int), 'SpecType' ),
              ( ['in', 'out'], POINTER(c_int), 'SoilType' ),
              ( ['in', 'out'], POINTER(c_int), 'Topography' ),
              ( ['in', 'out'], POINTER(c_double), 'hRatio' ),
              ( ['in', 'out'], POINTER(c_double), 'Damping' ),
              ( ['in', 'out'], POINTER(c_double), 'q' ),
              ( ['in', 'out'], POINTER(c_double), 'lambda' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'GetNZS11702004',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'DirFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'Eccen' ),
              ( ['in', 'out'], POINTER(c_int), 'PeriodFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'UserT' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_int), 'NZS2004SiteClass' ),
              ( ['in', 'out'], POINTER(c_double), 'NZS2004Z' ),
              ( ['in', 'out'], POINTER(c_double), 'NZS2004R' ),
              ( ['in', 'out'], POINTER(c_double), 'NZS2004Dist' ),
              ( ['in', 'out'], POINTER(c_double), 'NZS2004Sp' ),
              ( ['in', 'out'], POINTER(c_double), 'NZS2004Mu' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(53)], HRESULT, 'GetNZS11702004_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'DirFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'Eccen' ),
              ( ['in', 'out'], POINTER(c_int), 'PeriodFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'UserT' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_int), 'NZS2004SiteClass' ),
              ( ['in', 'out'], POINTER(c_double), 'NZS2004Z' ),
              ( ['in', 'out'], POINTER(c_double), 'NZS2004R' ),
              ( ['in', 'out'], POINTER(c_double), 'NZS2004Dist' ),
              ( ['in', 'out'], POINTER(c_double), 'NZS2004Sp' ),
              ( ['in', 'out'], POINTER(c_double), 'NZS2004Mu' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'NZS2004ConsiderTSite' ),
              ( ['in', 'out'], POINTER(c_double), 'NZS2004TSite' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(55)], HRESULT, 'GetNZS11702004_2',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'DirFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'Eccen' ),
              ( ['in', 'out'], POINTER(c_int), 'PeriodFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'UserT' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_int), 'NZS2004SiteClass' ),
              ( ['in', 'out'], POINTER(c_double), 'NZS2004Z' ),
              ( ['in', 'out'], POINTER(c_double), 'NZS2004R' ),
              ( ['in', 'out'], POINTER(c_double), 'NZS2004Dist' ),
              ( ['in', 'out'], POINTER(c_double), 'NZS2004Sp' ),
              ( ['in', 'out'], POINTER(c_double), 'NZS2004Mu' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'NZS2004ConsiderTSite' ),
              ( ['in', 'out'], POINTER(c_double), 'NZS2004TSite' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'NZS2004ConsiderSingleStory' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'GetUBC94',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'DirFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'Eccen' ),
              ( ['in', 'out'], POINTER(c_int), 'PeriodFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'Ct' ),
              ( ['in', 'out'], POINTER(c_double), 'UserT' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_int), 'UBC94ZFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'UBC94Z' ),
              ( ['in', 'out'], POINTER(c_double), 'UBC94S' ),
              ( ['in', 'out'], POINTER(c_double), 'UBC94I' ),
              ( ['in', 'out'], POINTER(c_double), 'UBC94Rw' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'GetUBC97',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'DirFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'Eccen' ),
              ( ['in', 'out'], POINTER(c_int), 'PeriodFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'Ct' ),
              ( ['in', 'out'], POINTER(c_double), 'UserT' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_int), 'UBC97SeismicCoeffFlag' ),
              ( ['in', 'out'], POINTER(c_int), 'UBC97SoilProfileType' ),
              ( ['in', 'out'], POINTER(c_double), 'UBC97Z' ),
              ( ['in', 'out'], POINTER(c_double), 'UBC97Ca' ),
              ( ['in', 'out'], POINTER(c_double), 'UBC97Cv' ),
              ( ['in', 'out'], POINTER(c_int), 'UBC97NearSourceFlag' ),
              ( ['in', 'out'], POINTER(c_int), 'UBC97SourceType' ),
              ( ['in', 'out'], POINTER(c_double), 'UBC97Dist' ),
              ( ['in', 'out'], POINTER(c_double), 'UBC97Na' ),
              ( ['in', 'out'], POINTER(c_double), 'UBC97Nv' ),
              ( ['in', 'out'], POINTER(c_double), 'UBC97I' ),
              ( ['in', 'out'], POINTER(c_double), 'UBC97R' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'GetUBC97Iso',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'DirFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'Eccen' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_int), 'UBC97IsoSeismicCoeffFlag' ),
              ( ['in', 'out'], POINTER(c_int), 'UBC97IsoSoilProfileType' ),
              ( ['in', 'out'], POINTER(c_double), 'UBC97IsoZ' ),
              ( ['in', 'out'], POINTER(c_double), 'UBC97IsoCv' ),
              ( ['in', 'out'], POINTER(c_int), 'UBC97IsoNearSourceFlag' ),
              ( ['in', 'out'], POINTER(c_int), 'UBC97IsoSourceType' ),
              ( ['in', 'out'], POINTER(c_double), 'UBC97IsoDist' ),
              ( ['in', 'out'], POINTER(c_double), 'UBC97IsoNv' ),
              ( ['in', 'out'], POINTER(c_double), 'UBC97IsoRi' ),
              ( ['in', 'out'], POINTER(c_double), 'UBC97IsoBd' ),
              ( ['in', 'out'], POINTER(c_double), 'UBC97IsoKDmax' ),
              ( ['in', 'out'], POINTER(c_double), 'UBC97IsoKDmin' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'GetUserCoefficient',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'DirFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'Eccen' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_double), 'C' ),
              ( ['in', 'out'], POINTER(c_double), 'K' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'GetUserLoad',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'MyType' ),
              ( ['in', 'out'], POINTER(c_double), 'Eccen' ),
              ( ['in', 'out'], POINTER(c_int), 'Num' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Diaph' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'SetAS11702007',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'DirFlag' ),
              ( ['in'], c_double, 'Eccen' ),
              ( ['in'], c_int, 'PeriodFlag' ),
              ( ['in'], c_double, 'Ct' ),
              ( ['in'], c_double, 'UserT' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_int, 'AS2007SiteClass' ),
              ( ['in'], c_double, 'AS2007Kp' ),
              ( ['in'], c_double, 'AS2007Z' ),
              ( ['in'], c_double, 'AS2007Sp' ),
              ( ['in'], c_double, 'AS2007Mu' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'SetBOCA96',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'DirFlag' ),
              ( ['in'], c_double, 'Eccen' ),
              ( ['in'], c_int, 'PeriodFlag' ),
              ( ['in'], c_double, 'Ct' ),
              ( ['in'], c_double, 'UserT' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_double, 'BOCA96Aa' ),
              ( ['in'], c_double, 'BOCA96Av' ),
              ( ['in'], c_double, 'BOCA96S' ),
              ( ['in'], c_double, 'BOCA96R' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'SetChinese2002',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'DirFlag' ),
              ( ['in'], c_double, 'Eccen' ),
              ( ['in'], c_int, 'PeriodFlag' ),
              ( ['in'], c_double, 'UserT' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_double, 'JGJ32002AlphaMax' ),
              ( ['in'], c_int, 'JGJ32002SI' ),
              ( ['in'], c_double, 'JGJ32002DampRatio' ),
              ( ['in'], c_double, 'JGJ32002Tg' ),
              ( ['in'], c_double, 'JGJ32002PTDF' ),
              ( ['in'], c_double, 'EnhancementFactor' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(23)], HRESULT, 'SetChinese2010',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'DirFlag' ),
              ( ['in'], c_double, 'Eccen' ),
              ( ['in'], c_int, 'PeriodFlag' ),
              ( ['in'], c_double, 'UserT' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_double, 'JGJ32002AlphaMax' ),
              ( ['in'], c_int, 'JGJ32002SI' ),
              ( ['in'], c_double, 'JGJ32002DampRatio' ),
              ( ['in'], c_double, 'JGJ32002Tg' ),
              ( ['in'], c_double, 'JGJ32002PTDF' ),
              ( ['in'], c_double, 'EnhancementFactor' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(24)], HRESULT, 'SetDiaphragmEccentricityOverride',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Diaph' ),
              ( ['in'], c_double, 'Eccen' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Delete', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(25)], HRESULT, 'SetEurocode82004',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'DirFlag' ),
              ( ['in'], c_double, 'Eccen' ),
              ( ['in'], c_int, 'PeriodFlag' ),
              ( ['in'], c_double, 'Ct' ),
              ( ['in'], c_double, 'UserT' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_int, 'EURO2004GroundType' ),
              ( ['in'], c_int, 'EURO2004SpectrumType' ),
              ( ['in'], c_double, 'EURO2004Ag' ),
              ( ['in'], c_double, 'EURO2004Beta' ),
              ( ['in'], c_double, 'EURO2004Q' ),
              ( ['in'], c_double, 'EURO2004Lambda' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(26)], HRESULT, 'SetEurocode82004_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'DirFlag' ),
              ( ['in'], c_double, 'Eccen' ),
              ( ['in'], c_int, 'PeriodFlag' ),
              ( ['in'], c_double, 'Ct' ),
              ( ['in'], c_double, 'UserT' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_int, 'EURO2004Country' ),
              ( ['in'], c_int, 'EURO2004SpectrumType' ),
              ( ['in'], c_int, 'EURO2004GroundType' ),
              ( ['in'], c_double, 'EURO2004Ag' ),
              ( ['in'], c_double, 'EURO2004S' ),
              ( ['in'], c_double, 'EURO2004Tb' ),
              ( ['in'], c_double, 'EURO2004Tc' ),
              ( ['in'], c_double, 'EURO2004Td' ),
              ( ['in'], c_double, 'EURO2004Beta' ),
              ( ['in'], c_double, 'EURO2004Q' ),
              ( ['in'], c_double, 'EURO2004Lambda' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(27)], HRESULT, 'SetIBC2003',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'DirFlag' ),
              ( ['in'], c_double, 'Eccen' ),
              ( ['in'], c_int, 'PeriodFlag' ),
              ( ['in'], c_double, 'Ct' ),
              ( ['in'], c_double, 'UserT' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_int, 'Sg' ),
              ( ['in'], c_int, 'SeismicCoeffFlag' ),
              ( ['in'], c_int, 'Site' ),
              ( ['in'], c_double, 'Ss' ),
              ( ['in'], c_double, 'S1' ),
              ( ['in'], c_double, 'Fa' ),
              ( ['in'], c_double, 'Fv' ),
              ( ['in'], c_double, 'R' ),
              ( ['in'], c_double, 'Omega' ),
              ( ['in'], c_double, 'Cd' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(29)], HRESULT, 'SetIS1893_2002',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'DirFlag' ),
              ( ['in'], c_double, 'Eccen' ),
              ( ['in'], c_int, 'PeriodFlag' ),
              ( ['in'], c_double, 'Ct' ),
              ( ['in'], c_double, 'UserT' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_int, 'INZFlag' ),
              ( ['in'], c_double, 'INZ' ),
              ( ['in'], c_int, 'INS' ),
              ( ['in'], c_double, 'INI' ),
              ( ['in'], c_double, 'INR' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(30)], HRESULT, 'SetNBCC2005',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'DirFlag' ),
              ( ['in'], c_double, 'Eccen' ),
              ( ['in'], c_int, 'CtType' ),
              ( ['in'], c_int, 'PeriodFlag' ),
              ( ['in'], c_double, 'UserT' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_double, 'PGA' ),
              ( ['in'], c_double, 'S02' ),
              ( ['in'], c_double, 'S05' ),
              ( ['in'], c_double, 'S1' ),
              ( ['in'], c_double, 'S2' ),
              ( ['in'], c_int, 'SiteClass' ),
              ( ['in'], c_double, 'Fa' ),
              ( ['in'], c_double, 'Fv' ),
              ( ['in'], c_double, 'I' ),
              ( ['in'], c_double, 'Mv' ),
              ( ['in'], c_double, 'Rd' ),
              ( ['in'], c_double, 'Ro' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(49)], HRESULT, 'SetNBCC2010',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'DirFlag' ),
              ( ['in'], c_double, 'Eccen' ),
              ( ['in'], c_int, 'CtType' ),
              ( ['in'], c_int, 'PeriodFlag' ),
              ( ['in'], c_double, 'UserT' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_double, 'PGA' ),
              ( ['in'], c_double, 'S02' ),
              ( ['in'], c_double, 'S05' ),
              ( ['in'], c_double, 'S1' ),
              ( ['in'], c_double, 'S2' ),
              ( ['in'], c_double, 'S4' ),
              ( ['in'], c_int, 'SiteClass' ),
              ( ['in'], c_double, 'Fa' ),
              ( ['in'], c_double, 'Fv' ),
              ( ['in'], c_double, 'I' ),
              ( ['in'], c_double, 'Mv' ),
              ( ['in'], c_double, 'Rd' ),
              ( ['in'], c_double, 'Ro' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(50)], HRESULT, 'SetNBCC2015',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'DirFlag' ),
              ( ['in'], c_double, 'Eccen' ),
              ( ['in'], c_int, 'CtType' ),
              ( ['in'], c_int, 'PeriodFlag' ),
              ( ['in'], c_double, 'UserT' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_double, 'PGA' ),
              ( ['in'], c_double, 'S02' ),
              ( ['in'], c_double, 'S05' ),
              ( ['in'], c_double, 'S1' ),
              ( ['in'], c_double, 'S2' ),
              ( ['in'], c_double, 'S5' ),
              ( ['in'], c_double, 'S10' ),
              ( ['in'], c_int, 'SiteClass' ),
              ( ['in'], c_double, 'F02' ),
              ( ['in'], c_double, 'F05' ),
              ( ['in'], c_double, 'F1' ),
              ( ['in'], c_double, 'F2' ),
              ( ['in'], c_double, 'F5' ),
              ( ['in'], c_double, 'F10' ),
              ( ['in'], c_double, 'I' ),
              ( ['in'], c_double, 'Mv' ),
              ( ['in'], c_double, 'Rd' ),
              ( ['in'], c_double, 'Ro' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(31)], HRESULT, 'SetNBCC95',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'DirFlag' ),
              ( ['in'], c_double, 'Eccen' ),
              ( ['in'], c_int, 'PFlag' ),
              ( ['in'], c_double, 'Ds' ),
              ( ['in'], c_int, 'PeriodFlag' ),
              ( ['in'], c_double, 'UserT' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_int, 'Za' ),
              ( ['in'], c_int, 'Zv' ),
              ( ['in'], c_int, 'ZvFlag' ),
              ( ['in'], c_double, 'Zvr' ),
              ( ['in'], c_double, 'I' ),
              ( ['in'], c_double, 'F' ),
              ( ['in'], c_double, 'R' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(32)], HRESULT, 'SetNEHRP97',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'DirFlag' ),
              ( ['in'], c_double, 'Eccen' ),
              ( ['in'], c_int, 'PeriodFlag' ),
              ( ['in'], c_double, 'Ct' ),
              ( ['in'], c_double, 'UserT' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_int, 'NEHRP97Sg' ),
              ( ['in'], c_int, 'NEHRP97SeismicCoeffFlag' ),
              ( ['in'], c_int, 'NEHRP97Site' ),
              ( ['in'], c_double, 'NEHRP97Ss' ),
              ( ['in'], c_double, 'NEHRP97S1' ),
              ( ['in'], c_double, 'NEHRP97Fa' ),
              ( ['in'], c_double, 'NEHRP97Fv' ),
              ( ['in'], c_double, 'NEHRP97R' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(33)], HRESULT, 'SetNone',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(46)], HRESULT, 'SetNTC2008',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'DirFlag' ),
              ( ['in'], c_double, 'Eccen' ),
              ( ['in'], c_int, 'PeriodFlag' ),
              ( ['in'], c_int, 'C1Type' ),
              ( ['in'], c_double, 'UserT' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_int, 'ParamsOption' ),
              ( ['in'], c_double, 'Latitude' ),
              ( ['in'], c_double, 'Longitude' ),
              ( ['in'], c_int, 'Island' ),
              ( ['in'], c_int, 'LimitState' ),
              ( ['in'], c_int, 'UsageClass' ),
              ( ['in'], c_double, 'NomLife' ),
              ( ['in'], c_double, 'PeakAccel' ),
              ( ['in'], c_double, 'F0' ),
              ( ['in'], c_double, 'Tcs' ),
              ( ['in'], c_int, 'SpecType' ),
              ( ['in'], c_int, 'SoilType' ),
              ( ['in'], c_int, 'Topography' ),
              ( ['in'], c_double, 'hRatio' ),
              ( ['in'], c_double, 'Damping' ),
              ( ['in'], c_double, 'q' ),
              ( ['in'], c_double, 'lambda' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(52)], HRESULT, 'SetNTC2018',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'DirFlag' ),
              ( ['in'], c_double, 'Eccen' ),
              ( ['in'], c_int, 'PeriodFlag' ),
              ( ['in'], c_double, 'UserT' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_int, 'ParamsOption' ),
              ( ['in'], c_double, 'Latitude' ),
              ( ['in'], c_double, 'Longitude' ),
              ( ['in'], c_int, 'Island' ),
              ( ['in'], c_int, 'LimitState' ),
              ( ['in'], c_int, 'UsageClass' ),
              ( ['in'], c_double, 'NomLife' ),
              ( ['in'], c_double, 'PeakAccel' ),
              ( ['in'], c_double, 'F0' ),
              ( ['in'], c_double, 'Tcs' ),
              ( ['in'], c_int, 'SpecType' ),
              ( ['in'], c_int, 'SoilType' ),
              ( ['in'], c_int, 'Topography' ),
              ( ['in'], c_double, 'hRatio' ),
              ( ['in'], c_double, 'Damping' ),
              ( ['in'], c_double, 'q' ),
              ( ['in'], c_double, 'lambda' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(34)], HRESULT, 'SetNZS11702004',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'DirFlag' ),
              ( ['in'], c_double, 'Eccen' ),
              ( ['in'], c_int, 'PeriodFlag' ),
              ( ['in'], c_double, 'UserT' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_int, 'NZS2004SiteClass' ),
              ( ['in'], c_double, 'NZS2004Z' ),
              ( ['in'], c_double, 'NZS2004R' ),
              ( ['in'], c_double, 'NZS2004Dist' ),
              ( ['in'], c_double, 'NZS2004Sp' ),
              ( ['in'], c_double, 'NZS2004Mu' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(54)], HRESULT, 'SetNZS11702004_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'DirFlag' ),
              ( ['in'], c_double, 'Eccen' ),
              ( ['in'], c_int, 'PeriodFlag' ),
              ( ['in'], c_double, 'UserT' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_int, 'NZS2004SiteClass' ),
              ( ['in'], c_double, 'NZS2004Z' ),
              ( ['in'], c_double, 'NZS2004R' ),
              ( ['in'], c_double, 'NZS2004Dist' ),
              ( ['in'], c_double, 'NZS2004Sp' ),
              ( ['in'], c_double, 'NZS2004Mu' ),
              ( ['in'], VARIANT_BOOL, 'NZS2004ConsiderTSite' ),
              ( ['in'], c_double, 'NZS2004TSite' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(56)], HRESULT, 'SetNZS11702004_2',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'DirFlag' ),
              ( ['in'], c_double, 'Eccen' ),
              ( ['in'], c_int, 'PeriodFlag' ),
              ( ['in'], c_double, 'UserT' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_int, 'NZS2004SiteClass' ),
              ( ['in'], c_double, 'NZS2004Z' ),
              ( ['in'], c_double, 'NZS2004R' ),
              ( ['in'], c_double, 'NZS2004Dist' ),
              ( ['in'], c_double, 'NZS2004Sp' ),
              ( ['in'], c_double, 'NZS2004Mu' ),
              ( ['in'], VARIANT_BOOL, 'NZS2004ConsiderTSite' ),
              ( ['in'], c_double, 'NZS2004TSite' ),
              ( ['in'], VARIANT_BOOL, 'NZS2004ConsiderSingleStory' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(35)], HRESULT, 'SetUBC94',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'DirFlag' ),
              ( ['in'], c_double, 'Eccen' ),
              ( ['in'], c_int, 'PeriodFlag' ),
              ( ['in'], c_double, 'Ct' ),
              ( ['in'], c_double, 'UserT' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_int, 'UBC94ZFlag' ),
              ( ['in'], c_double, 'UBC94Z' ),
              ( ['in'], c_double, 'UBC94S' ),
              ( ['in'], c_double, 'UBC94I' ),
              ( ['in'], c_double, 'UBC94Rw' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(36)], HRESULT, 'SetUBC97',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'DirFlag' ),
              ( ['in'], c_double, 'Eccen' ),
              ( ['in'], c_int, 'PeriodFlag' ),
              ( ['in'], c_double, 'Ct' ),
              ( ['in'], c_double, 'UserT' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_int, 'UBC97SeismicCoeffFlag' ),
              ( ['in'], c_int, 'UBC97SoilProfileType' ),
              ( ['in'], c_double, 'UBC97Z' ),
              ( ['in'], c_double, 'UBC97Ca' ),
              ( ['in'], c_double, 'UBC97Cv' ),
              ( ['in'], c_int, 'UBC97NearSourceFlag' ),
              ( ['in'], c_int, 'UBC97SourceType' ),
              ( ['in'], c_double, 'UBC97Dist' ),
              ( ['in'], c_double, 'UBC97Na' ),
              ( ['in'], c_double, 'UBC97Nv' ),
              ( ['in'], c_double, 'UBC97I' ),
              ( ['in'], c_double, 'UBC97R' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(37)], HRESULT, 'SetUBC97Iso',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'DirFlag' ),
              ( ['in'], c_double, 'Eccen' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_int, 'UBC97IsoSeismicCoeffFlag' ),
              ( ['in'], c_int, 'UBC97IsoSoilProfileType' ),
              ( ['in'], c_double, 'UBC97IsoZ' ),
              ( ['in'], c_double, 'UBC97IsoCv' ),
              ( ['in'], c_int, 'UBC97IsoNearSourceFlag' ),
              ( ['in'], c_int, 'UBC97IsoSourceType' ),
              ( ['in'], c_double, 'UBC97IsoDist' ),
              ( ['in'], c_double, 'UBC97IsoNv' ),
              ( ['in'], c_double, 'UBC97IsoRi' ),
              ( ['in'], c_double, 'UBC97IsoBd' ),
              ( ['in'], c_double, 'UBC97IsoKDmax' ),
              ( ['in'], c_double, 'UBC97IsoKDmin' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(38)], HRESULT, 'SetUserCoefficient',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'DirFlag' ),
              ( ['in'], c_double, 'Eccen' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_double, 'C' ),
              ( ['in'], c_double, 'K' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(39)], HRESULT, 'SetUserLoad',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'MyType' ),
              ( ['in', 'optional'], c_double, 'Eccen', 0.05 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(40)], HRESULT, 'SetUserLoadValue',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Diaph' ),
              ( ['in'], c_double, 'FX' ),
              ( ['in'], c_double, 'FY' ),
              ( ['in'], c_double, 'MZ' ),
              ( ['in', 'optional'], c_double, 'X', 0.0 ),
              ( ['in', 'optional'], c_double, 'Y', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(41)], HRESULT, 'GetIBC2009',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'DirFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'Eccen' ),
              ( ['in', 'out'], POINTER(c_int), 'PeriodFlag' ),
              ( ['in', 'out'], POINTER(c_int), 'CtType' ),
              ( ['in', 'out'], POINTER(c_double), 'UserT' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_double), 'R' ),
              ( ['in', 'out'], POINTER(c_double), 'Omega' ),
              ( ['in', 'out'], POINTER(c_double), 'Cd' ),
              ( ['in', 'out'], POINTER(c_double), 'I' ),
              ( ['in', 'out'], POINTER(c_int), 'IBC2009Option' ),
              ( ['in', 'out'], POINTER(c_double), 'Latitude' ),
              ( ['in', 'out'], POINTER(c_double), 'Longitude' ),
              ( ['in', 'out'], POINTER(BSTR), 'ZipCode' ),
              ( ['in', 'out'], POINTER(c_double), 'Ss' ),
              ( ['in', 'out'], POINTER(c_double), 'S1' ),
              ( ['in', 'out'], POINTER(c_double), 'Tl' ),
              ( ['in', 'out'], POINTER(c_int), 'SiteClass' ),
              ( ['in', 'out'], POINTER(c_double), 'Fa' ),
              ( ['in', 'out'], POINTER(c_double), 'Fv' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(42)], HRESULT, 'GetIBC2012',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'DirFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'Eccen' ),
              ( ['in', 'out'], POINTER(c_int), 'PeriodFlag' ),
              ( ['in', 'out'], POINTER(c_int), 'CtType' ),
              ( ['in', 'out'], POINTER(c_double), 'UserT' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_double), 'R' ),
              ( ['in', 'out'], POINTER(c_double), 'Omega' ),
              ( ['in', 'out'], POINTER(c_double), 'Cd' ),
              ( ['in', 'out'], POINTER(c_double), 'I' ),
              ( ['in', 'out'], POINTER(c_int), 'IBC2012Option' ),
              ( ['in', 'out'], POINTER(c_double), 'Latitude' ),
              ( ['in', 'out'], POINTER(c_double), 'Longitude' ),
              ( ['in', 'out'], POINTER(BSTR), 'ZipCode' ),
              ( ['in', 'out'], POINTER(c_double), 'Ss' ),
              ( ['in', 'out'], POINTER(c_double), 'S1' ),
              ( ['in', 'out'], POINTER(c_double), 'Tl' ),
              ( ['in', 'out'], POINTER(c_int), 'SiteClass' ),
              ( ['in', 'out'], POINTER(c_double), 'Fa' ),
              ( ['in', 'out'], POINTER(c_double), 'Fv' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(43)], HRESULT, 'SetIBC2009',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'DirFlag' ),
              ( ['in'], c_double, 'Eccen' ),
              ( ['in'], c_int, 'PeriodFlag' ),
              ( ['in'], c_int, 'CtType' ),
              ( ['in'], c_double, 'UserT' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_double, 'R' ),
              ( ['in'], c_double, 'Omega' ),
              ( ['in'], c_double, 'Cd' ),
              ( ['in'], c_double, 'I' ),
              ( ['in'], c_int, 'IBC2009Option' ),
              ( ['in'], c_double, 'Latitude' ),
              ( ['in'], c_double, 'Longitude' ),
              ( ['in'], BSTR, 'ZipCode' ),
              ( ['in'], c_double, 'Ss' ),
              ( ['in'], c_double, 'S1' ),
              ( ['in'], c_double, 'Tl' ),
              ( ['in'], c_int, 'SiteClass' ),
              ( ['in'], c_double, 'Fa' ),
              ( ['in'], c_double, 'Fv' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(44)], HRESULT, 'SetIBC2012',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'DirFlag' ),
              ( ['in'], c_double, 'Eccen' ),
              ( ['in'], c_int, 'PeriodFlag' ),
              ( ['in'], c_int, 'CtType' ),
              ( ['in'], c_double, 'UserT' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_double, 'R' ),
              ( ['in'], c_double, 'Omega' ),
              ( ['in'], c_double, 'Cd' ),
              ( ['in'], c_double, 'I' ),
              ( ['in'], c_int, 'IBC2012Option' ),
              ( ['in'], c_double, 'Latitude' ),
              ( ['in'], c_double, 'Longitude' ),
              ( ['in'], BSTR, 'ZipCode' ),
              ( ['in'], c_double, 'Ss' ),
              ( ['in'], c_double, 'S1' ),
              ( ['in'], c_double, 'Tl' ),
              ( ['in'], c_int, 'SiteClass' ),
              ( ['in'], c_double, 'Fa' ),
              ( ['in'], c_double, 'Fv' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cAutoSeismic implementation
##class cAutoSeismic_Impl(object):
##    def GetIBC2006(self, Name):
##        '-no docstring-'
##        #return DirFlag, Eccen, PeriodFlag, CtType, UserT, UserZ, TopZ, BottomZ, R, Omega, Cd, I, IBC2006Option, Latitude, Longitude, ZipCode, Ss, S1, Tl, SiteClass, Fa, Fv, pRetVal
##
##    def SetIBC2006(self, Name, DirFlag, Eccen, PeriodFlag, CtType, UserT, UserZ, TopZ, BottomZ, R, Omega, Cd, I, IBC2006Option, Latitude, Longitude, ZipCode, Ss, S1, Tl, SiteClass, Fa, Fv):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetAS11702007(self, Name):
##        '-no docstring-'
##        #return DirFlag, Eccen, PeriodFlag, Ct, UserT, UserZ, TopZ, BottomZ, AS2007SiteClass, AS2007Kp, AS2007Z, AS2007Sp, AS2007Mu, pRetVal
##
##    def GetBOCA96(self, Name):
##        '-no docstring-'
##        #return DirFlag, Eccen, PeriodFlag, Ct, UserT, UserZ, TopZ, BottomZ, BOCA96Aa, BOCA96Av, BOCA96S, BOCA96R, pRetVal
##
##    def GetChinese2002(self, Name):
##        '-no docstring-'
##        #return DirFlag, Eccen, PeriodFlag, UserT, UserZ, TopZ, BottomZ, JGJ32002AlphaMax, JGJ32002SI, JGJ32002DampRatio, JGJ32002Tg, JGJ32002PTDF, EnhancementFactor, pRetVal
##
##    def GetChinese2010(self, Name):
##        '-no docstring-'
##        #return DirFlag, Eccen, PeriodFlag, UserT, UserZ, TopZ, BottomZ, JGJ32002AlphaMax, JGJ32002SI, JGJ32002DampRatio, JGJ32002Tg, JGJ32002PTDF, EnhancementFactor, pRetVal
##
##    def GetDiaphragmEccentricityOverride(self, Name):
##        '-no docstring-'
##        #return Num, Diaph, Eccen, pRetVal
##
##    def GetEurocode82004(self, Name):
##        '-no docstring-'
##        #return DirFlag, Eccen, PeriodFlag, Ct, UserT, UserZ, TopZ, BottomZ, EURO2004GroundType, EURO2004SpectrumType, EURO2004Ag, EURO2004Beta, EURO2004Q, EURO2004Lambda, pRetVal
##
##    def GetEurocode82004_1(self, Name):
##        '-no docstring-'
##        #return DirFlag, Eccen, PeriodFlag, Ct, UserT, UserZ, TopZ, BottomZ, EURO2004Country, EURO2004SpectrumType, EURO2004GroundType, EURO2004Ag, EURO2004S, EURO2004Tb, EURO2004Tc, EURO2004Td, EURO2004Beta, EURO2004Q, EURO2004Lambda, pRetVal
##
##    def GetIBC2003(self, Name):
##        '-no docstring-'
##        #return DirFlag, Eccen, PeriodFlag, Ct, UserT, UserZ, TopZ, BottomZ, Sg, SeismicCoeffFlag, Site, Ss, S1, Fa, Fv, R, Omega, Cd, pRetVal
##
##    def GetIS1893_2002(self, Name):
##        '-no docstring-'
##        #return DirFlag, Eccen, PeriodFlag, Ct, UserT, UserZ, TopZ, BottomZ, INZFlag, INZ, INS, INI, INR, pRetVal
##
##    def GetNBCC2005(self, Name):
##        '-no docstring-'
##        #return DirFlag, Eccen, CtType, PeriodFlag, UserT, UserZ, TopZ, BottomZ, PGA, S02, S05, S1, S2, SiteClass, Fa, Fv, I, Mv, Rd, Ro, pRetVal
##
##    def GetNBCC2010(self, Name):
##        '-no docstring-'
##        #return DirFlag, Eccen, CtType, PeriodFlag, UserT, UserZ, TopZ, BottomZ, PGA, S02, S05, S1, S2, S4, SiteClass, Fa, Fv, I, Mv, Rd, Ro, pRetVal
##
##    def GetNBCC2015(self, Name):
##        '-no docstring-'
##        #return DirFlag, Eccen, CtType, PeriodFlag, UserT, UserZ, TopZ, BottomZ, PGA, S02, S05, S1, S2, S5, S10, SiteClass, F02, F05, F1, F2, F5, F10, I, Mv, Rd, Ro, pRetVal
##
##    def GetNBCC95(self, Name):
##        '-no docstring-'
##        #return DirFlag, Eccen, PFlag, Ds, PeriodFlag, UserT, UserZ, TopZ, BottomZ, Za, Zv, ZvFlag, Zvr, I, F, R, pRetVal
##
##    def GetNEHRP97(self, Name):
##        '-no docstring-'
##        #return DirFlag, Eccen, PeriodFlag, Ct, UserT, UserZ, TopZ, BottomZ, NEHRP97Sg, NEHRP97SeismicCoeffFlag, NEHRP97Site, NEHRP97Ss, NEHRP97S1, NEHRP97Fa, NEHRP97Fv, NEHRP97R, pRetVal
##
##    def GetNTC2008(self, Name):
##        '-no docstring-'
##        #return DirFlag, Eccen, PeriodFlag, C1Type, UserT, UserZ, TopZ, BottomZ, ParamsOption, Latitude, Longitude, Island, LimitState, UsageClass, NomLife, PeakAccel, F0, Tcs, SpecType, SoilType, Topography, hRatio, Damping, q, lambda, pRetVal
##
##    def GetNTC2018(self, Name):
##        '-no docstring-'
##        #return DirFlag, Eccen, PeriodFlag, UserT, UserZ, TopZ, BottomZ, ParamsOption, Latitude, Longitude, Island, LimitState, UsageClass, NomLife, PeakAccel, F0, Tcs, SpecType, SoilType, Topography, hRatio, Damping, q, lambda, pRetVal
##
##    def GetNZS11702004(self, Name):
##        '-no docstring-'
##        #return DirFlag, Eccen, PeriodFlag, UserT, UserZ, TopZ, BottomZ, NZS2004SiteClass, NZS2004Z, NZS2004R, NZS2004Dist, NZS2004Sp, NZS2004Mu, pRetVal
##
##    def GetNZS11702004_1(self, Name):
##        '-no docstring-'
##        #return DirFlag, Eccen, PeriodFlag, UserT, UserZ, TopZ, BottomZ, NZS2004SiteClass, NZS2004Z, NZS2004R, NZS2004Dist, NZS2004Sp, NZS2004Mu, NZS2004ConsiderTSite, NZS2004TSite, pRetVal
##
##    def GetNZS11702004_2(self, Name):
##        '-no docstring-'
##        #return DirFlag, Eccen, PeriodFlag, UserT, UserZ, TopZ, BottomZ, NZS2004SiteClass, NZS2004Z, NZS2004R, NZS2004Dist, NZS2004Sp, NZS2004Mu, NZS2004ConsiderTSite, NZS2004TSite, NZS2004ConsiderSingleStory, pRetVal
##
##    def GetUBC94(self, Name):
##        '-no docstring-'
##        #return DirFlag, Eccen, PeriodFlag, Ct, UserT, UserZ, TopZ, BottomZ, UBC94ZFlag, UBC94Z, UBC94S, UBC94I, UBC94Rw, pRetVal
##
##    def GetUBC97(self, Name):
##        '-no docstring-'
##        #return DirFlag, Eccen, PeriodFlag, Ct, UserT, UserZ, TopZ, BottomZ, UBC97SeismicCoeffFlag, UBC97SoilProfileType, UBC97Z, UBC97Ca, UBC97Cv, UBC97NearSourceFlag, UBC97SourceType, UBC97Dist, UBC97Na, UBC97Nv, UBC97I, UBC97R, pRetVal
##
##    def GetUBC97Iso(self, Name):
##        '-no docstring-'
##        #return DirFlag, Eccen, UserZ, TopZ, BottomZ, UBC97IsoSeismicCoeffFlag, UBC97IsoSoilProfileType, UBC97IsoZ, UBC97IsoCv, UBC97IsoNearSourceFlag, UBC97IsoSourceType, UBC97IsoDist, UBC97IsoNv, UBC97IsoRi, UBC97IsoBd, UBC97IsoKDmax, UBC97IsoKDmin, pRetVal
##
##    def GetUserCoefficient(self, Name):
##        '-no docstring-'
##        #return DirFlag, Eccen, UserZ, TopZ, BottomZ, C, K, pRetVal
##
##    def GetUserLoad(self, Name):
##        '-no docstring-'
##        #return MyType, Eccen, Num, Diaph, FX, FY, MZ, X, Y, pRetVal
##
##    def SetAS11702007(self, Name, DirFlag, Eccen, PeriodFlag, Ct, UserT, UserZ, TopZ, BottomZ, AS2007SiteClass, AS2007Kp, AS2007Z, AS2007Sp, AS2007Mu):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetBOCA96(self, Name, DirFlag, Eccen, PeriodFlag, Ct, UserT, UserZ, TopZ, BottomZ, BOCA96Aa, BOCA96Av, BOCA96S, BOCA96R):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetChinese2002(self, Name, DirFlag, Eccen, PeriodFlag, UserT, UserZ, TopZ, BottomZ, JGJ32002AlphaMax, JGJ32002SI, JGJ32002DampRatio, JGJ32002Tg, JGJ32002PTDF, EnhancementFactor):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetChinese2010(self, Name, DirFlag, Eccen, PeriodFlag, UserT, UserZ, TopZ, BottomZ, JGJ32002AlphaMax, JGJ32002SI, JGJ32002DampRatio, JGJ32002Tg, JGJ32002PTDF, EnhancementFactor):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDiaphragmEccentricityOverride(self, Name, Diaph, Eccen, Delete):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetEurocode82004(self, Name, DirFlag, Eccen, PeriodFlag, Ct, UserT, UserZ, TopZ, BottomZ, EURO2004GroundType, EURO2004SpectrumType, EURO2004Ag, EURO2004Beta, EURO2004Q, EURO2004Lambda):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetEurocode82004_1(self, Name, DirFlag, Eccen, PeriodFlag, Ct, UserT, UserZ, TopZ, BottomZ, EURO2004Country, EURO2004SpectrumType, EURO2004GroundType, EURO2004Ag, EURO2004S, EURO2004Tb, EURO2004Tc, EURO2004Td, EURO2004Beta, EURO2004Q, EURO2004Lambda):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetIBC2003(self, Name, DirFlag, Eccen, PeriodFlag, Ct, UserT, UserZ, TopZ, BottomZ, Sg, SeismicCoeffFlag, Site, Ss, S1, Fa, Fv, R, Omega, Cd):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetIS1893_2002(self, Name, DirFlag, Eccen, PeriodFlag, Ct, UserT, UserZ, TopZ, BottomZ, INZFlag, INZ, INS, INI, INR):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetNBCC2005(self, Name, DirFlag, Eccen, CtType, PeriodFlag, UserT, UserZ, TopZ, BottomZ, PGA, S02, S05, S1, S2, SiteClass, Fa, Fv, I, Mv, Rd, Ro):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetNBCC2010(self, Name, DirFlag, Eccen, CtType, PeriodFlag, UserT, UserZ, TopZ, BottomZ, PGA, S02, S05, S1, S2, S4, SiteClass, Fa, Fv, I, Mv, Rd, Ro):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetNBCC2015(self, Name, DirFlag, Eccen, CtType, PeriodFlag, UserT, UserZ, TopZ, BottomZ, PGA, S02, S05, S1, S2, S5, S10, SiteClass, F02, F05, F1, F2, F5, F10, I, Mv, Rd, Ro):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetNBCC95(self, Name, DirFlag, Eccen, PFlag, Ds, PeriodFlag, UserT, UserZ, TopZ, BottomZ, Za, Zv, ZvFlag, Zvr, I, F, R):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetNEHRP97(self, Name, DirFlag, Eccen, PeriodFlag, Ct, UserT, UserZ, TopZ, BottomZ, NEHRP97Sg, NEHRP97SeismicCoeffFlag, NEHRP97Site, NEHRP97Ss, NEHRP97S1, NEHRP97Fa, NEHRP97Fv, NEHRP97R):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetNone(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetNTC2008(self, Name, DirFlag, Eccen, PeriodFlag, C1Type, UserT, UserZ, TopZ, BottomZ, ParamsOption, Latitude, Longitude, Island, LimitState, UsageClass, NomLife, PeakAccel, F0, Tcs, SpecType, SoilType, Topography, hRatio, Damping, q, lambda):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetNTC2018(self, Name, DirFlag, Eccen, PeriodFlag, UserT, UserZ, TopZ, BottomZ, ParamsOption, Latitude, Longitude, Island, LimitState, UsageClass, NomLife, PeakAccel, F0, Tcs, SpecType, SoilType, Topography, hRatio, Damping, q, lambda):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetNZS11702004(self, Name, DirFlag, Eccen, PeriodFlag, UserT, UserZ, TopZ, BottomZ, NZS2004SiteClass, NZS2004Z, NZS2004R, NZS2004Dist, NZS2004Sp, NZS2004Mu):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetNZS11702004_1(self, Name, DirFlag, Eccen, PeriodFlag, UserT, UserZ, TopZ, BottomZ, NZS2004SiteClass, NZS2004Z, NZS2004R, NZS2004Dist, NZS2004Sp, NZS2004Mu, NZS2004ConsiderTSite, NZS2004TSite):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetNZS11702004_2(self, Name, DirFlag, Eccen, PeriodFlag, UserT, UserZ, TopZ, BottomZ, NZS2004SiteClass, NZS2004Z, NZS2004R, NZS2004Dist, NZS2004Sp, NZS2004Mu, NZS2004ConsiderTSite, NZS2004TSite, NZS2004ConsiderSingleStory):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetUBC94(self, Name, DirFlag, Eccen, PeriodFlag, Ct, UserT, UserZ, TopZ, BottomZ, UBC94ZFlag, UBC94Z, UBC94S, UBC94I, UBC94Rw):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetUBC97(self, Name, DirFlag, Eccen, PeriodFlag, Ct, UserT, UserZ, TopZ, BottomZ, UBC97SeismicCoeffFlag, UBC97SoilProfileType, UBC97Z, UBC97Ca, UBC97Cv, UBC97NearSourceFlag, UBC97SourceType, UBC97Dist, UBC97Na, UBC97Nv, UBC97I, UBC97R):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetUBC97Iso(self, Name, DirFlag, Eccen, UserZ, TopZ, BottomZ, UBC97IsoSeismicCoeffFlag, UBC97IsoSoilProfileType, UBC97IsoZ, UBC97IsoCv, UBC97IsoNearSourceFlag, UBC97IsoSourceType, UBC97IsoDist, UBC97IsoNv, UBC97IsoRi, UBC97IsoBd, UBC97IsoKDmax, UBC97IsoKDmin):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetUserCoefficient(self, Name, DirFlag, Eccen, UserZ, TopZ, BottomZ, C, K):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetUserLoad(self, Name, MyType, Eccen):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetUserLoadValue(self, Name, Diaph, FX, FY, MZ, X, Y):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetIBC2009(self, Name):
##        '-no docstring-'
##        #return DirFlag, Eccen, PeriodFlag, CtType, UserT, UserZ, TopZ, BottomZ, R, Omega, Cd, I, IBC2009Option, Latitude, Longitude, ZipCode, Ss, S1, Tl, SiteClass, Fa, Fv, pRetVal
##
##    def GetIBC2012(self, Name):
##        '-no docstring-'
##        #return DirFlag, Eccen, PeriodFlag, CtType, UserT, UserZ, TopZ, BottomZ, R, Omega, Cd, I, IBC2012Option, Latitude, Longitude, ZipCode, Ss, S1, Tl, SiteClass, Fa, Fv, pRetVal
##
##    def SetIBC2009(self, Name, DirFlag, Eccen, PeriodFlag, CtType, UserT, UserZ, TopZ, BottomZ, R, Omega, Cd, I, IBC2009Option, Latitude, Longitude, ZipCode, Ss, S1, Tl, SiteClass, Fa, Fv):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetIBC2012(self, Name, DirFlag, Eccen, PeriodFlag, CtType, UserT, UserZ, TopZ, BottomZ, R, Omega, Cd, I, IBC2012Option, Latitude, Longitude, ZipCode, Ss, S1, Tl, SiteClass, Fa, Fv):
##        '-no docstring-'
##        #return pRetVal
##

class cDCoEurocode_2_2004(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{94C374CF-923C-464D-BF62-D377E6C98DFB}')
    _idlflags_ = ['dual', 'oleautomation']
cDCoEurocode_2_2004._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDCoEurocode_2_2004 implementation
##class cDCoEurocode_2_2004_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cDCoChinese_2010(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{A41EFDC8-988D-438B-A790-61A568DDF7B1}')
    _idlflags_ = ['dual', 'oleautomation']
cDCoChinese_2010._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDCoChinese_2010 implementation
##class cDCoChinese_2010_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cCaseModalHistoryLinear(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{3ED16295-099F-4853-A981-47C7B7F7E49B}')
    _idlflags_ = ['dual', 'oleautomation']
cCaseModalHistoryLinear._methods_ = [
    COMMETHOD([dispid(6)], HRESULT, 'GetLoads',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Func' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Tf' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'At' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ang' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'SetCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'SetLoads',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Func' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Tf' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'At' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ang' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(1)], HRESULT, 'GetDampConstant',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Damp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetDampInterpolated',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'DampType' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Time' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Damp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetDampOverrides',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Mode' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Damp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetDampProportional',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'DampType' ),
              ( ['in', 'out'], POINTER(c_double), 'DampA' ),
              ( ['in', 'out'], POINTER(c_double), 'DampB' ),
              ( ['in', 'out'], POINTER(c_double), 'DampF1' ),
              ( ['in', 'out'], POINTER(c_double), 'DampF2' ),
              ( ['in', 'out'], POINTER(c_double), 'DampD1' ),
              ( ['in', 'out'], POINTER(c_double), 'DampD2' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetDampType',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'DampType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetModalCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'ModalCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetMotionType',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'MotionType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetTimeStep',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NStep' ),
              ( ['in', 'out'], POINTER(c_double), 'Dt' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'SetDampConstant',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'Damp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'SetDampInterpolated',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'DampType' ),
              ( ['in'], c_int, 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Time' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Damp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'SetDampOverrides',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Mode' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Damp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'SetDampProportional',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'DampType' ),
              ( ['in'], c_double, 'DampA' ),
              ( ['in'], c_double, 'DampB' ),
              ( ['in'], c_double, 'DampF1' ),
              ( ['in'], c_double, 'DampF2' ),
              ( ['in'], c_double, 'DampD1' ),
              ( ['in'], c_double, 'DampD2' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'SetModalCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'ModalCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'SetMotionType',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'MotionType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'SetTimeStep',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NStep' ),
              ( ['in'], c_double, 'Dt' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cCaseModalHistoryLinear implementation
##class cCaseModalHistoryLinear_Impl(object):
##    def GetLoads(self, Name):
##        '-no docstring-'
##        #return NumberLoads, LoadType, LoadName, Func, SF, Tf, At, CSys, Ang, pRetVal
##
##    def SetCase(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoads(self, Name, NumberLoads):
##        '-no docstring-'
##        #return LoadType, LoadName, Func, SF, Tf, At, CSys, Ang, pRetVal
##
##    def GetDampConstant(self, Name):
##        '-no docstring-'
##        #return Damp, pRetVal
##
##    def GetDampInterpolated(self, Name):
##        '-no docstring-'
##        #return DampType, NumberItems, Time, Damp, pRetVal
##
##    def GetDampOverrides(self, Name):
##        '-no docstring-'
##        #return NumberItems, Mode, Damp, pRetVal
##
##    def GetDampProportional(self, Name):
##        '-no docstring-'
##        #return DampType, DampA, DampB, DampF1, DampF2, DampD1, DampD2, pRetVal
##
##    def GetDampType(self, Name):
##        '-no docstring-'
##        #return DampType, pRetVal
##
##    def GetModalCase(self, Name):
##        '-no docstring-'
##        #return ModalCase, pRetVal
##
##    def GetMotionType(self, Name):
##        '-no docstring-'
##        #return MotionType, pRetVal
##
##    def GetTimeStep(self, Name):
##        '-no docstring-'
##        #return NStep, Dt, pRetVal
##
##    def SetDampConstant(self, Name, Damp):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDampInterpolated(self, Name, DampType, NumberItems):
##        '-no docstring-'
##        #return Time, Damp, pRetVal
##
##    def SetDampOverrides(self, Name, NumberItems):
##        '-no docstring-'
##        #return Mode, Damp, pRetVal
##
##    def SetDampProportional(self, Name, DampType, DampA, DampB, DampF1, DampF2, DampD1, DampD2):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetModalCase(self, Name, ModalCase):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetMotionType(self, Name, MotionType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetTimeStep(self, Name, NStep, Dt):
##        '-no docstring-'
##        #return pRetVal
##

class cBDRS_EUROCODE_CBoxCrack(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{3F3ECCBC-D622-4BE9-9D96-02894AF0C673}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_EUROCODE_CBoxCrack._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_EUROCODE_CBoxCrack implementation
##class cBDRS_EUROCODE_CBoxCrack_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBS_SteelGirderI(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{A416ED27-B638-491A-9551-D881D498E70A}')
    _idlflags_ = ['dual', 'oleautomation']
cBS_SteelGirderI._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetGirder',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'IType' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(VARIANT), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetSection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'IType' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(VARIANT), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetGirder',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'IType' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], VARIANT, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetSection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'IType' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], VARIANT, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBS_SteelGirderI implementation
##class cBS_SteelGirderI_Impl(object):
##    def GetGirder(self, Name, Index, IType, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetSection(self, Name, IType, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetGirder(self, Name, Index, IType, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSection(self, Name, IType, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBDRS_EUROCODE_CBoxShr(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{C7807926-A9C2-4150-84DF-63DDA63F5301}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_EUROCODE_CBoxShr._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], BSTR, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_EUROCODE_CBoxShr implementation
##class cBDRS_EUROCODE_CBoxShr_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetCapacityParamString(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCapacityParamString(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cDCoACI318_08_IBC2009(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{0A30E670-F2CF-41CB-A8A9-F281A3166C65}')
    _idlflags_ = ['dual', 'oleautomation']
cDCoACI318_08_IBC2009._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDCoACI318_08_IBC2009 implementation
##class cDCoACI318_08_IBC2009_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cScheduler._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'Add',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetLoadCaseList',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberLoadCases' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyLoadCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetScheduleData',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberTasks' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Expanded' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'IndentLevel' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TaskName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Duration' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'CompletionDate' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Dependencies' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Operation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'IncludeSW' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Details' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Age' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LoadSF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Solve' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'SaveStiffness' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'OutputID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ItemType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ItemName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Notes' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetScheduleParameters',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'Unloading' ),
              ( ['in', 'out'], POINTER(BSTR), 'GeoNonLin' ),
              ( ['in', 'out'], POINTER(c_int), 'MaxTotal' ),
              ( ['in', 'out'], POINTER(c_int), 'MaxNull' ),
              ( ['in', 'out'], POINTER(c_int), 'MaxIterCS' ),
              ( ['in', 'out'], POINTER(c_int), 'MaxIterNR' ),
              ( ['in', 'out'], POINTER(c_double), 'ItConvTol' ),
              ( ['in', 'out'], POINTER(BSTR), 'UseEvStep' ),
              ( ['in', 'out'], POINTER(c_double), 'EvLumpTol' ),
              ( ['in', 'out'], POINTER(c_int), 'LSPerIter' ),
              ( ['in', 'out'], POINTER(c_double), 'LSTol' ),
              ( ['in', 'out'], POINTER(c_double), 'LSStepFact' ),
              ( ['in', 'out'], POINTER(BSTR), 'StageSave' ),
              ( ['in', 'out'], POINTER(c_int), 'StageMinIns' ),
              ( ['in', 'out'], POINTER(c_int), 'StageMinTD' ),
              ( ['in', 'out'], POINTER(BSTR), 'TimeDepMat' ),
              ( ['in', 'out'], POINTER(c_int), 'TFMaxIter' ),
              ( ['in', 'out'], POINTER(c_double), 'TFTol' ),
              ( ['in', 'out'], POINTER(c_double), 'TFAccelFact' ),
              ( ['in', 'out'], POINTER(BSTR), 'TFNoStop' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'SetScheduleData',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberTasks' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Expanded' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'IndentLevel' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TaskName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Duration' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'CompletionDate' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Dependencies' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Operation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'IncludeSW' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Details' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Age' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LoadSF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Solve' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'SaveStiffness' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'OutputID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ItemType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ItemName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Notes' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'SetScheduleParameters',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Unloading' ),
              ( ['in'], BSTR, 'GeoNonLin' ),
              ( ['in'], c_int, 'MaxTotal' ),
              ( ['in'], c_int, 'MaxNull' ),
              ( ['in'], c_int, 'MaxIterCS' ),
              ( ['in'], c_int, 'MaxIterNR' ),
              ( ['in'], c_double, 'ItConvTol' ),
              ( ['in'], BSTR, 'UseEvStep' ),
              ( ['in'], c_double, 'EvLumpTol' ),
              ( ['in'], c_int, 'LSPerIter' ),
              ( ['in'], c_double, 'LSTol' ),
              ( ['in'], c_double, 'LSStepFact' ),
              ( ['in'], BSTR, 'StageSave' ),
              ( ['in'], c_int, 'StageMinIns' ),
              ( ['in'], c_int, 'StageMinTD' ),
              ( ['in'], BSTR, 'TimeDepMat' ),
              ( ['in'], c_int, 'TFMaxIter' ),
              ( ['in'], c_double, 'TFTol' ),
              ( ['in'], c_double, 'TFAccelFact' ),
              ( ['in'], BSTR, 'TFNoStop' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetScheduleData_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberTasks' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Expanded' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'IndentLevel' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TaskName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Duration' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'CompletionDate' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Dependencies' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Operation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'IncludeSW' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Details' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Age' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LoadSF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Solve' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'SaveStiffness' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'OutputID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ItemType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ItemName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Notes' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'SetScheduleData_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberTasks' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Expanded' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'IndentLevel' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TaskName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Duration' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'CompletionDate' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Dependencies' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Operation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'IncludeSW' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Details' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Age' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LoadSF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Solve' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'SaveStiffness' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'OutputID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ItemType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ItemName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Notes' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cScheduler implementation
##class cScheduler_Impl(object):
##    def Add(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetLoadCaseList(self, Name):
##        '-no docstring-'
##        #return NumberLoadCases, MyLoadCase, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetScheduleData(self, Name):
##        '-no docstring-'
##        #return NumberTasks, Expanded, IndentLevel, TaskName, Duration, CompletionDate, Dependencies, Operation, IncludeSW, ObjectType, ObjectName, Details, Age, LoadType, LoadName, LoadSF, Solve, SaveStiffness, OutputID, ItemType, ItemName, Notes, pRetVal
##
##    def GetScheduleParameters(self, Name):
##        '-no docstring-'
##        #return Unloading, GeoNonLin, MaxTotal, MaxNull, MaxIterCS, MaxIterNR, ItConvTol, UseEvStep, EvLumpTol, LSPerIter, LSTol, LSStepFact, StageSave, StageMinIns, StageMinTD, TimeDepMat, TFMaxIter, TFTol, TFAccelFact, TFNoStop, pRetVal
##
##    def SetScheduleData(self, Name, NumberTasks):
##        '-no docstring-'
##        #return Expanded, IndentLevel, TaskName, Duration, CompletionDate, Dependencies, Operation, IncludeSW, ObjectType, ObjectName, Details, Age, LoadType, LoadName, LoadSF, Solve, SaveStiffness, OutputID, ItemType, ItemName, Notes, pRetVal
##
##    def SetScheduleParameters(self, Name, Unloading, GeoNonLin, MaxTotal, MaxNull, MaxIterCS, MaxIterNR, ItConvTol, UseEvStep, EvLumpTol, LSPerIter, LSTol, LSStepFact, StageSave, StageMinIns, StageMinTD, TimeDepMat, TFMaxIter, TFTol, TFAccelFact, TFNoStop):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetScheduleData_1(self, Name):
##        '-no docstring-'
##        #return NumberTasks, Expanded, IndentLevel, TaskName, Duration, CompletionDate, Dependencies, Operation, IncludeSW, ObjectType, ObjectName, Details, Age, LoadType, LoadName, LoadSF, Solve, SaveStiffness, OutputID, ItemType, ItemName, Notes, pRetVal
##
##    def SetScheduleData_1(self, Name, NumberTasks):
##        '-no docstring-'
##        #return Expanded, IndentLevel, TaskName, Duration, CompletionDate, Dependencies, Operation, IncludeSW, ObjectType, ObjectName, Details, Age, LoadType, LoadName, LoadSF, Solve, SaveStiffness, OutputID, ItemType, ItemName, Notes, pRetVal
##

class cDCoAASHTO_12(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{05FCDEB3-CB17-4029-B784-AE6728B69DCD}')
    _idlflags_ = ['dual', 'oleautomation']
cDCoAASHTO_12._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDCoAASHTO_12 implementation
##class cDCoAASHTO_12_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBDRS_EUROCODE_CBoxFlex(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{61AF6FD3-228A-4FDF-BC46-4CACA16B6803}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_EUROCODE_CBoxFlex._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_EUROCODE_CBoxFlex implementation
##class cBDRS_EUROCODE_CBoxFlex_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBDRS_CANCSA_S6_06_SteelUCompConstructibilityNonStgd(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{6804D419-8633-448A-B7B7-37A2B423C429}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_CANCSA_S6_06_SteelUCompConstructibilityNonStgd._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetDemandParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], BSTR, 'DemandName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetDemandParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], BSTR, 'DemandName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_CANCSA_S6_06_SteelUCompConstructibilityNonStgd implementation
##class cBDRS_CANCSA_S6_06_SteelUCompConstructibilityNonStgd_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetDemandParam(self, RequestName, DemandName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDemandParam(self, RequestName, DemandName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBS_SteelGirderU(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{7C2A7DF4-69C9-4312-8102-B9DFFDAE9DF9}')
    _idlflags_ = ['dual', 'oleautomation']
cBS_SteelGirderU._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetGirder',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'IType' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(VARIANT), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetSection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'IType' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(VARIANT), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetGirder',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'IType' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], VARIANT, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetSection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'IType' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], VARIANT, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBS_SteelGirderU implementation
##class cBS_SteelGirderU_Impl(object):
##    def GetGirder(self, Name, Index, IType, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetSection(self, Name, IType, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetGirder(self, Name, Index, IType, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSection(self, Name, IType, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_AA_L_07_CBox2MinBarRt._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_CBox2MinBarRt implementation
##class cBDRS_AA_L_07_CBox2MinBarRt_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cDatabaseTables._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'ApplyEditedTables',
              ( ['in'], VARIANT_BOOL, 'FillImportLog' ),
              ( ['in', 'out'], POINTER(c_int), 'NumFatalErrors' ),
              ( ['in', 'out'], POINTER(c_int), 'NumErrorMsgs' ),
              ( ['in', 'out'], POINTER(c_int), 'NumWarnMsgs' ),
              ( ['in', 'out'], POINTER(c_int), 'NumInfoMsgs' ),
              ( ['in', 'out'], POINTER(BSTR), 'ImportLog' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'CancelTableEditing',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetAllFieldsInTable',
              ( ['in'], BSTR, 'TableKey' ),
              ( ['in', 'out'], POINTER(c_int), 'TableVersion' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberFields' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FieldKey' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FieldName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Description' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'UnitsString' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'IsImportable' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetAllTables',
              ( ['in', 'out'], POINTER(c_int), 'NumberTables' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TableKey' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TableName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ImportType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'IsEmpty' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetAvailableTables',
              ( ['in', 'out'], POINTER(c_int), 'NumberTables' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TableKey' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TableName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ImportType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetLoadCasesSelectedForDisplay',
              ( ['in', 'out'], POINTER(c_int), 'NumberSelectedLoadCases' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCaseList' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetLoadCombinationsSelectedForDisplay',
              ( ['in', 'out'], POINTER(c_int), 'NumberSelectedLoadCombinations' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCombinationList' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetLoadPatternsSelectedForDisplay',
              ( ['in', 'out'], POINTER(c_int), 'NumberSelectedLoadPatterns' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPatternList' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetOutputOptionsForDisplay',
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IsUserBaseReactionLocation' ),
              ( ['in', 'out'], POINTER(c_double), 'UserBaseReactionX' ),
              ( ['in', 'out'], POINTER(c_double), 'UserBaseReactionY' ),
              ( ['in', 'out'], POINTER(c_double), 'UserBaseReactionZ' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IsAllModes' ),
              ( ['in', 'out'], POINTER(c_int), 'StartMode' ),
              ( ['in', 'out'], POINTER(c_int), 'EndMode' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IsAllBucklingModes' ),
              ( ['in', 'out'], POINTER(c_int), 'StartBucklingMode' ),
              ( ['in', 'out'], POINTER(c_int), 'EndBucklingMode' ),
              ( ['in', 'out'], POINTER(c_int), 'MultistepStatic' ),
              ( ['in', 'out'], POINTER(c_int), 'NonlinearStatic' ),
              ( ['in', 'out'], POINTER(c_int), 'ModalHistory' ),
              ( ['in', 'out'], POINTER(c_int), 'DirectHistory' ),
              ( ['in', 'out'], POINTER(c_int), 'Combo' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetTableForDisplayArray',
              ( ['in'], BSTR, 'TableKey' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FieldKeyList' ),
              ( ['in'], BSTR, 'GroupName' ),
              ( ['in', 'out'], POINTER(c_int), 'TableVersion' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FieldsKeysIncluded' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberRecords' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TableData' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetTableForDisplayCSVFile',
              ( ['in'], BSTR, 'TableKey' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FieldKeyList' ),
              ( ['in'], BSTR, 'GroupName' ),
              ( ['in', 'out'], POINTER(c_int), 'TableVersion' ),
              ( ['in'], BSTR, 'csvFilePath' ),
              ( ['in', 'optional'], BSTR, 'sepChar', ',' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetTableForDisplayCSVString',
              ( ['in'], BSTR, 'TableKey' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FieldKeyList' ),
              ( ['in'], BSTR, 'GroupName' ),
              ( ['in', 'out'], POINTER(c_int), 'TableVersion' ),
              ( ['in', 'out'], POINTER(BSTR), 'csvString' ),
              ( ['in', 'optional'], BSTR, 'sepChar', ',' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'GetTableForDisplayXMLString',
              ( ['in'], BSTR, 'TableKey' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FieldKeyList' ),
              ( ['in'], BSTR, 'GroupName' ),
              ( ['in'], VARIANT_BOOL, 'IncludeSchema' ),
              ( ['in', 'out'], POINTER(c_int), 'TableVersion' ),
              ( ['in', 'out'], POINTER(BSTR), 'XMLTableData' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'GetTableForEditingArray',
              ( ['in'], BSTR, 'TableKey' ),
              ( ['in'], BSTR, 'GroupName' ),
              ( ['in', 'out'], POINTER(c_int), 'TableVersion' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FieldsKeysIncluded' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberRecords' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TableData' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'GetTableForEditingCSVFile',
              ( ['in'], BSTR, 'TableKey' ),
              ( ['in'], BSTR, 'GroupName' ),
              ( ['in', 'out'], POINTER(c_int), 'TableVersion' ),
              ( ['in'], BSTR, 'csvFilePath' ),
              ( ['in', 'optional'], BSTR, 'sepChar', ',' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'GetTableForEditingCSVString',
              ( ['in'], BSTR, 'TableKey' ),
              ( ['in'], BSTR, 'GroupName' ),
              ( ['in', 'out'], POINTER(c_int), 'TableVersion' ),
              ( ['in', 'out'], POINTER(BSTR), 'csvString' ),
              ( ['in', 'optional'], BSTR, 'sepChar', ',' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'SetLoadCasesSelectedForDisplay',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCaseList' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'SetLoadCombinationsSelectedForDisplay',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCombinationList' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'SetLoadPatternsSelectedForDisplay',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPatternList' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'SetOutputOptionsForDisplay',
              ( ['in'], VARIANT_BOOL, 'IsUserBaseReactionLocation' ),
              ( ['in'], c_double, 'UserBaseReactionX' ),
              ( ['in'], c_double, 'UserBaseReactionY' ),
              ( ['in'], c_double, 'UserBaseReactionZ' ),
              ( ['in'], VARIANT_BOOL, 'IsAllModes' ),
              ( ['in'], c_int, 'StartMode' ),
              ( ['in'], c_int, 'EndMode' ),
              ( ['in'], VARIANT_BOOL, 'IsAllBucklingModes' ),
              ( ['in'], c_int, 'StartBucklingMode' ),
              ( ['in'], c_int, 'EndBucklingMode' ),
              ( ['in'], c_int, 'MultistepStatic' ),
              ( ['in'], c_int, 'NonlinearStatic' ),
              ( ['in'], c_int, 'ModalHistory' ),
              ( ['in'], c_int, 'DirectHistory' ),
              ( ['in'], c_int, 'Combo' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'SetTableForEditingArray',
              ( ['in'], BSTR, 'TableKey' ),
              ( ['in', 'out'], POINTER(c_int), 'TableVersion' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FieldsKeysIncluded' ),
              ( ['in'], c_int, 'NumberRecords' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TableData' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'SetTableForEditingCSVFile',
              ( ['in'], BSTR, 'TableKey' ),
              ( ['in', 'out'], POINTER(c_int), 'TableVersion' ),
              ( ['in'], BSTR, 'csvFilePath' ),
              ( ['in', 'optional'], BSTR, 'sepChar', ',' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(23)], HRESULT, 'SetTableForEditingCSVString',
              ( ['in'], BSTR, 'TableKey' ),
              ( ['in', 'out'], POINTER(c_int), 'TableVersion' ),
              ( ['in', 'out'], POINTER(BSTR), 'csvString' ),
              ( ['in', 'optional'], BSTR, 'sepChar', ',' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(24)], HRESULT, 'ShowTablesInExcel',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TableKeyList' ),
              ( ['in'], c_int, 'WindowHandle' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDatabaseTables implementation
##class cDatabaseTables_Impl(object):
##    def ApplyEditedTables(self, FillImportLog):
##        '-no docstring-'
##        #return NumFatalErrors, NumErrorMsgs, NumWarnMsgs, NumInfoMsgs, ImportLog, pRetVal
##
##    def CancelTableEditing(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetAllFieldsInTable(self, TableKey):
##        '-no docstring-'
##        #return TableVersion, NumberFields, FieldKey, FieldName, Description, UnitsString, IsImportable, pRetVal
##
##    def GetAllTables(self):
##        '-no docstring-'
##        #return NumberTables, TableKey, TableName, ImportType, IsEmpty, pRetVal
##
##    def GetAvailableTables(self):
##        '-no docstring-'
##        #return NumberTables, TableKey, TableName, ImportType, pRetVal
##
##    def GetLoadCasesSelectedForDisplay(self):
##        '-no docstring-'
##        #return NumberSelectedLoadCases, LoadCaseList, pRetVal
##
##    def GetLoadCombinationsSelectedForDisplay(self):
##        '-no docstring-'
##        #return NumberSelectedLoadCombinations, LoadCombinationList, pRetVal
##
##    def GetLoadPatternsSelectedForDisplay(self):
##        '-no docstring-'
##        #return NumberSelectedLoadPatterns, LoadPatternList, pRetVal
##
##    def GetOutputOptionsForDisplay(self):
##        '-no docstring-'
##        #return IsUserBaseReactionLocation, UserBaseReactionX, UserBaseReactionY, UserBaseReactionZ, IsAllModes, StartMode, EndMode, IsAllBucklingModes, StartBucklingMode, EndBucklingMode, MultistepStatic, NonlinearStatic, ModalHistory, DirectHistory, Combo, pRetVal
##
##    def GetTableForDisplayArray(self, TableKey, GroupName):
##        '-no docstring-'
##        #return FieldKeyList, TableVersion, FieldsKeysIncluded, NumberRecords, TableData, pRetVal
##
##    def GetTableForDisplayCSVFile(self, TableKey, GroupName, csvFilePath, sepChar):
##        '-no docstring-'
##        #return FieldKeyList, TableVersion, pRetVal
##
##    def GetTableForDisplayCSVString(self, TableKey, GroupName, sepChar):
##        '-no docstring-'
##        #return FieldKeyList, TableVersion, csvString, pRetVal
##
##    def GetTableForDisplayXMLString(self, TableKey, GroupName, IncludeSchema):
##        '-no docstring-'
##        #return FieldKeyList, TableVersion, XMLTableData, pRetVal
##
##    def GetTableForEditingArray(self, TableKey, GroupName):
##        '-no docstring-'
##        #return TableVersion, FieldsKeysIncluded, NumberRecords, TableData, pRetVal
##
##    def GetTableForEditingCSVFile(self, TableKey, GroupName, csvFilePath, sepChar):
##        '-no docstring-'
##        #return TableVersion, pRetVal
##
##    def GetTableForEditingCSVString(self, TableKey, GroupName, sepChar):
##        '-no docstring-'
##        #return TableVersion, csvString, pRetVal
##
##    def SetLoadCasesSelectedForDisplay(self):
##        '-no docstring-'
##        #return LoadCaseList, pRetVal
##
##    def SetLoadCombinationsSelectedForDisplay(self):
##        '-no docstring-'
##        #return LoadCombinationList, pRetVal
##
##    def SetLoadPatternsSelectedForDisplay(self):
##        '-no docstring-'
##        #return LoadPatternList, pRetVal
##
##    def SetOutputOptionsForDisplay(self, IsUserBaseReactionLocation, UserBaseReactionX, UserBaseReactionY, UserBaseReactionZ, IsAllModes, StartMode, EndMode, IsAllBucklingModes, StartBucklingMode, EndBucklingMode, MultistepStatic, NonlinearStatic, ModalHistory, DirectHistory, Combo):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetTableForEditingArray(self, TableKey, NumberRecords):
##        '-no docstring-'
##        #return TableVersion, FieldsKeysIncluded, TableData, pRetVal
##
##    def SetTableForEditingCSVFile(self, TableKey, csvFilePath, sepChar):
##        '-no docstring-'
##        #return TableVersion, pRetVal
##
##    def SetTableForEditingCSVString(self, TableKey, sepChar):
##        '-no docstring-'
##        #return TableVersion, csvString, pRetVal
##
##    def ShowTablesInExcel(self, WindowHandle):
##        '-no docstring-'
##        #return TableKeyList, pRetVal
##

class cDStNewZealand_NZS3404_97(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{1835205B-C9DA-4F70-B88A-9C9792EA433D}')
    _idlflags_ = ['dual', 'oleautomation']
cDStNewZealand_NZS3404_97._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDStNewZealand_NZS3404_97 implementation
##class cDStNewZealand_NZS3404_97_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBDRS_EUROCODE_CBox2Crack(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{4080C238-4EFD-45E5-A28B-CBFB913C0872}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_EUROCODE_CBox2Crack._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_EUROCODE_CBox2Crack implementation
##class cBDRS_EUROCODE_CBox2Crack_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBDRS_CANCSAS606_CBoxFlex(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{34793ED7-9AA2-4A5C-885D-F9B6C7E3952D}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_CANCSAS606_CBoxShr(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{7C757344-69DC-4062-ADA4-29838BA7DD1A}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_CANCSAS606_CBoxStr(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{75F05A71-035E-4CF1-AD79-EA3DA45649D9}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_CANCSAS606_CBox2Flex(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{426630FF-AA57-450A-BCB0-EF870B5910BC}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_CANCSAS606_CBox2Shr(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{77260EE0-B7D2-4E88-8D2B-A371A3C5AFE1}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_CANCSAS606_CBox2Str(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{221DAE0E-4EF2-43E2-BC87-C96963608DA6}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_CANCSAS606_PCCompFlex(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{9F05EE01-0C0A-4B0C-B40B-82C4896BD70C}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_CANCSAS606_PCCompShr(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{445EBF58-107C-4C81-B7AA-C74C8F22A86A}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_CANCSAS606_PCCompStr(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{8AEFD377-570C-47FF-89B1-08B4AB429409}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_CSAS606_SICompCnstr(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{11C359A0-E3F0-4271-AA89-D52BD4A4A5F3}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_CSAS606_SICompCnstNS(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{35CA795D-F5D9-4CB7-82C0-04EDE78FC5FF}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_CSAS606_SICompServ(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{976338BA-2FDA-402A-9786-7D69E925E35F}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_CSAS606_SICompStr(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{ABB30275-0540-4112-9837-C2C274597D24}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_CANCSA_S6_06_SteelUCompConstructibility(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{F51BE1D4-368F-43F3-AD9E-B6FB15E00836}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_CANCSA_S6_06_SteelUCompService(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{26BC6CEB-F1C0-4DBC-BD90-C2A29F9F9327}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_CANCSA_S6_06_SteelUCompStrength(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{0BC76592-6280-476F-801A-6BE9B732AAE8}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_CANCSAS606_CBoxFlexRating(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{EE4183C2-ACD0-4172-8F5A-71B5D8F48C11}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_CANCSAS606_CBoxShrRating(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{1964A3EA-C794-41C2-A29D-A3865D7D6CDA}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_CANCSAS606_CBox2FlexRating(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{C9310092-73EA-4F1C-B283-2AB515A3604A}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_CANCSAS606_CBox2ShrRating(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{7BA5C1C5-F24F-44F1-82E8-0A4855284114}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_CANCSAS606_PCCompFlexRating(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{D7E1DA79-4DA1-4DA1-B80D-5D5FA3EFD45D}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_CANCSAS606_PCCompShrRating(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{12E26D72-4C05-4993-BF36-BF00A8E55744}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_CSAS606_SICompServRating(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{738211BA-C382-46AE-B260-8C0F7424B002}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_CSAS606_SICompStrRating(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{6D1895A0-F501-4572-9AFD-77A5D581DD81}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_CANCSA_S6_06_SteelUCompServiceRating(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{1FE5AF92-902C-4A7E-BD09-7E6B8EDBD66B}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_CANCSA_S6_06_SteelUCompStrengthRating(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{A4A103C1-2216-47F3-B027-86724FB14078}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_CAN_CSA_S6_06._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'ConcBoxFlexure',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_CANCSAS606_CBoxFlex)), 'pRetVal' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'ConcBoxShear',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_CANCSAS606_CBoxShr)), 'pRetVal' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'ConcBoxStress',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_CANCSAS606_CBoxStr)), 'pRetVal' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'ConcBox2Flexure',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_CANCSAS606_CBox2Flex)), 'pRetVal' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'ConcBox2Shear',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_CANCSAS606_CBox2Shr)), 'pRetVal' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'ConcBox2Stress',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_CANCSAS606_CBox2Str)), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetCheckType',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in', 'out'], POINTER(c_int), 'CheckType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetLiveLoadDistrib',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9), 'propget'], HRESULT, 'PrecastCompFlexure',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_CANCSAS606_PCCompFlex)), 'pRetVal' )),
    COMMETHOD([dispid(10), 'propget'], HRESULT, 'PrecastCompShear',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_CANCSAS606_PCCompShr)), 'pRetVal' )),
    COMMETHOD([dispid(11), 'propget'], HRESULT, 'PrecastCompStress',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_CANCSAS606_PCCompStr)), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'SetCheckType',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'CheckType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'SetLiveLoadDistrib',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14), 'propget'], HRESULT, 'SteelICompConstruct',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_CSAS606_SICompCnstr)), 'pRetVal' )),
    COMMETHOD([dispid(15), 'propget'], HRESULT, 'SteelICompConstructNonStgd',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_CSAS606_SICompCnstNS)), 'pRetVal' )),
    COMMETHOD([dispid(16), 'propget'], HRESULT, 'SteelICompService',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_CSAS606_SICompServ)), 'pRetVal' )),
    COMMETHOD([dispid(17), 'propget'], HRESULT, 'SteelICompStrength',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_CSAS606_SICompStr)), 'pRetVal' )),
    COMMETHOD([dispid(18), 'propget'], HRESULT, 'SteelUCompConstruct',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_CANCSA_S6_06_SteelUCompConstructibility)), 'pRetVal' )),
    COMMETHOD([dispid(19), 'propget'], HRESULT, 'SteelUCompConstructNonStgd',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_CANCSA_S6_06_SteelUCompConstructibilityNonStgd)), 'pRetVal' )),
    COMMETHOD([dispid(20), 'propget'], HRESULT, 'SteelUCompService',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_CANCSA_S6_06_SteelUCompService)), 'pRetVal' )),
    COMMETHOD([dispid(21), 'propget'], HRESULT, 'SteelUCompStrength',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_CANCSA_S6_06_SteelUCompStrength)), 'pRetVal' )),
    COMMETHOD([dispid(22), 'propget'], HRESULT, 'ConcBoxFlexureRating',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_CANCSAS606_CBoxFlexRating)), 'pRetVal' )),
    COMMETHOD([dispid(23), 'propget'], HRESULT, 'ConcBoxShearRating',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_CANCSAS606_CBoxShrRating)), 'pRetVal' )),
    COMMETHOD([dispid(24), 'propget'], HRESULT, 'ConcBox2FlexureRating',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_CANCSAS606_CBox2FlexRating)), 'pRetVal' )),
    COMMETHOD([dispid(25), 'propget'], HRESULT, 'ConcBox2ShearRating',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_CANCSAS606_CBox2ShrRating)), 'pRetVal' )),
    COMMETHOD([dispid(26), 'propget'], HRESULT, 'PrecastCompFlexureRating',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_CANCSAS606_PCCompFlexRating)), 'pRetVal' )),
    COMMETHOD([dispid(27), 'propget'], HRESULT, 'PrecastCompShearRating',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_CANCSAS606_PCCompShrRating)), 'pRetVal' )),
    COMMETHOD([dispid(28), 'propget'], HRESULT, 'SteelICompServiceRating',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_CSAS606_SICompServRating)), 'pRetVal' )),
    COMMETHOD([dispid(29), 'propget'], HRESULT, 'SteelICompStrengthRating',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_CSAS606_SICompStrRating)), 'pRetVal' )),
    COMMETHOD([dispid(30), 'propget'], HRESULT, 'SteelUCompServiceRating',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_CANCSA_S6_06_SteelUCompServiceRating)), 'pRetVal' )),
    COMMETHOD([dispid(31), 'propget'], HRESULT, 'SteelUCompStrengthRating',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_CANCSA_S6_06_SteelUCompStrengthRating)), 'pRetVal' )),
]
################################################################
## code template for cBDRS_CAN_CSA_S6_06 implementation
##class cBDRS_CAN_CSA_S6_06_Impl(object):
##    @property
##    def ConcBoxFlexure(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBoxShear(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBoxStress(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBox2Flexure(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBox2Shear(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBox2Stress(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetCheckType(self, RequestName):
##        '-no docstring-'
##        #return CheckType, pRetVal
##
##    def GetLiveLoadDistrib(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    @property
##    def PrecastCompFlexure(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PrecastCompShear(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PrecastCompStress(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCheckType(self, RequestName, CheckType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLiveLoadDistrib(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelICompConstruct(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelICompConstructNonStgd(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelICompService(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelICompStrength(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelUCompConstruct(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelUCompConstructNonStgd(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelUCompService(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelUCompStrength(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBoxFlexureRating(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBoxShearRating(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBox2FlexureRating(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBox2ShearRating(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PrecastCompFlexureRating(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PrecastCompShearRating(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelICompServiceRating(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelICompStrengthRating(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelUCompServiceRating(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelUCompStrengthRating(self):
##        '-no docstring-'
##        #return pRetVal
##

class cBDRS_EUROCODE_CBoxStr(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{6E3AE9E7-D350-48BE-92A1-92D4836E04F1}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_EUROCODE_CBoxStr._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_EUROCODE_CBoxStr implementation
##class cBDRS_EUROCODE_CBoxStr_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cPropFrameSDShape._methods_ = [
    COMMETHOD([dispid(2)], HRESULT, 'GetAngle',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'ShapeName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(c_double), 'XCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'YCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'H' ),
              ( ['in', 'out'], POINTER(c_double), 'Bf' ),
              ( ['in', 'out'], POINTER(c_double), 'Tf' ),
              ( ['in', 'out'], POINTER(c_double), 'Tw' ),
              ( ['in', 'out'], POINTER(c_double), 'Rotation' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetISection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'ShapeName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(c_double), 'XCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'YCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'H' ),
              ( ['in', 'out'], POINTER(c_double), 'Bf' ),
              ( ['in', 'out'], POINTER(c_double), 'Tf' ),
              ( ['in', 'out'], POINTER(c_double), 'Tw' ),
              ( ['in', 'out'], POINTER(c_double), 'Bfb' ),
              ( ['in', 'out'], POINTER(c_double), 'Tfb' ),
              ( ['in', 'out'], POINTER(c_double), 'Rotation' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetReinfCircle',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'ShapeName' ),
              ( ['in', 'out'], POINTER(c_double), 'XCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'YCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'Diameter' ),
              ( ['in', 'out'], POINTER(c_int), 'NumBars' ),
              ( ['in', 'out'], POINTER(c_double), 'Rotation' ),
              ( ['in', 'out'], POINTER(BSTR), 'RebarSize' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatRebar' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetReinfCorner',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'ShapeName' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PointNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'RebarSize' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetReinfEdge',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'ShapeName' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'EdgeNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'RebarSize' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Spacing' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Cover' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'GetReinfLine',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'ShapeName' ),
              ( ['in', 'out'], POINTER(c_double), 'X1' ),
              ( ['in', 'out'], POINTER(c_double), 'Y1' ),
              ( ['in', 'out'], POINTER(c_double), 'X2' ),
              ( ['in', 'out'], POINTER(c_double), 'Y2' ),
              ( ['in', 'out'], POINTER(c_double), 'Spacing' ),
              ( ['in', 'out'], POINTER(BSTR), 'RebarSize' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'EndBars' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatRebar' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'GetReinfRectangular',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'ShapeName' ),
              ( ['in', 'out'], POINTER(c_double), 'XCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'YCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'H' ),
              ( ['in', 'out'], POINTER(c_double), 'W' ),
              ( ['in', 'out'], POINTER(c_double), 'Rotation' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatRebar' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'GetReinfSingle',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'ShapeName' ),
              ( ['in', 'out'], POINTER(c_double), 'XCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'YCenter' ),
              ( ['in', 'out'], POINTER(BSTR), 'RebarSize' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatRebar' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'GetSolidCircle',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'ShapeName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(BSTR), 'SSOverwrite' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(c_double), 'XCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'YCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'Diameter' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Reinf' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberBars' ),
              ( ['in', 'out'], POINTER(c_double), 'Rotation' ),
              ( ['in', 'out'], POINTER(c_double), 'Cover' ),
              ( ['in', 'out'], POINTER(BSTR), 'RebarSize' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatRebar' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'GetSolidRect',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'ShapeName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(BSTR), 'SSOverwrite' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(c_double), 'XCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'YCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'H' ),
              ( ['in', 'out'], POINTER(c_double), 'W' ),
              ( ['in', 'out'], POINTER(c_double), 'Rotation' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Reinf' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatRebar' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'GetTee',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'ShapeName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(c_double), 'XCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'YCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'H' ),
              ( ['in', 'out'], POINTER(c_double), 'Bf' ),
              ( ['in', 'out'], POINTER(c_double), 'Tf' ),
              ( ['in', 'out'], POINTER(c_double), 'Tw' ),
              ( ['in', 'out'], POINTER(c_double), 'Rotation' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(1)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'ShapeName' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'All', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetChannel',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'ShapeName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(c_double), 'XCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'YCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'H' ),
              ( ['in', 'out'], POINTER(c_double), 'Bf' ),
              ( ['in', 'out'], POINTER(c_double), 'Tf' ),
              ( ['in', 'out'], POINTER(c_double), 'Tw' ),
              ( ['in', 'out'], POINTER(c_double), 'Rotation' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetDblAngle',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'ShapeName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(c_double), 'XCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'YCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'H' ),
              ( ['in', 'out'], POINTER(c_double), 'W' ),
              ( ['in', 'out'], POINTER(c_double), 'Tf' ),
              ( ['in', 'out'], POINTER(c_double), 'Tw' ),
              ( ['in', 'out'], POINTER(c_double), 'Dis' ),
              ( ['in', 'out'], POINTER(c_double), 'Rotation' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetPipe',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'ShapeName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(c_double), 'XCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'YCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'Diameter' ),
              ( ['in', 'out'], POINTER(c_double), 'Thickness' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetPlate',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'ShapeName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(c_double), 'XCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'YCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'Thickness' ),
              ( ['in', 'out'], POINTER(c_double), 'W' ),
              ( ['in', 'out'], POINTER(c_double), 'Rotation' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(44)], HRESULT, 'GetPolygon',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'ShapeName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(BSTR), 'SSOverwrite' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Radius' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Reinf' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatRebar' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetRefCircle',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'ShapeName' ),
              ( ['in', 'out'], POINTER(c_double), 'XCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'YCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'Diameter' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetRefLine',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'ShapeName' ),
              ( ['in', 'out'], POINTER(c_double), 'X1' ),
              ( ['in', 'out'], POINTER(c_double), 'Y1' ),
              ( ['in', 'out'], POINTER(c_double), 'X2' ),
              ( ['in', 'out'], POINTER(c_double), 'Y2' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'GetSolidSector',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'ShapeName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(c_double), 'XCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'YCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'Angle' ),
              ( ['in', 'out'], POINTER(c_double), 'Rotation' ),
              ( ['in', 'out'], POINTER(c_double), 'Radius' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'GetSolidSegment',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'ShapeName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(c_double), 'XCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'YCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'Angle' ),
              ( ['in', 'out'], POINTER(c_double), 'Rotation' ),
              ( ['in', 'out'], POINTER(c_double), 'Radius' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'GetTube',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'ShapeName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(c_double), 'XCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'YCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'H' ),
              ( ['in', 'out'], POINTER(c_double), 'W' ),
              ( ['in', 'out'], POINTER(c_double), 'Tf' ),
              ( ['in', 'out'], POINTER(c_double), 'Tw' ),
              ( ['in', 'out'], POINTER(c_double), 'Rotation' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'SetAngle',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'ShapeName' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], BSTR, 'PropName' ),
              ( ['in'], c_double, 'XCenter' ),
              ( ['in'], c_double, 'YCenter' ),
              ( ['in'], c_double, 'Rotation' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], c_double, 'H', 24.0 ),
              ( ['in', 'optional'], c_double, 'Bf', 24.0 ),
              ( ['in', 'optional'], c_double, 'Tf', 2.4 ),
              ( ['in', 'optional'], c_double, 'Tw', 2.4 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(23)], HRESULT, 'SetChannel',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'ShapeName' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], BSTR, 'PropName' ),
              ( ['in'], c_double, 'XCenter' ),
              ( ['in'], c_double, 'YCenter' ),
              ( ['in'], c_double, 'Rotation' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], c_double, 'H', 24.0 ),
              ( ['in', 'optional'], c_double, 'Bf', 24.0 ),
              ( ['in', 'optional'], c_double, 'Tf', 2.4 ),
              ( ['in', 'optional'], c_double, 'Tw', 2.4 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(24)], HRESULT, 'SetDblAngle',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'ShapeName' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], BSTR, 'PropName' ),
              ( ['in'], c_double, 'XCenter' ),
              ( ['in'], c_double, 'YCenter' ),
              ( ['in'], c_double, 'Rotation' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], c_double, 'H', 24.0 ),
              ( ['in', 'optional'], c_double, 'W', 24.0 ),
              ( ['in', 'optional'], c_double, 'Tf', 2.4 ),
              ( ['in', 'optional'], c_double, 'Tw', 2.4 ),
              ( ['in', 'optional'], c_double, 'Dis', 1.2 ),
              ( ['in', 'optional'], c_double, 'Tfb', 2.4 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(25)], HRESULT, 'SetISection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'ShapeName' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], BSTR, 'PropName' ),
              ( ['in'], c_double, 'XCenter' ),
              ( ['in'], c_double, 'YCenter' ),
              ( ['in'], c_double, 'Rotation' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], c_double, 'H', 24.0 ),
              ( ['in', 'optional'], c_double, 'Bf', 24.0 ),
              ( ['in', 'optional'], c_double, 'Tf', 2.4 ),
              ( ['in', 'optional'], c_double, 'Tw', 2.4 ),
              ( ['in', 'optional'], c_double, 'Bfb', 24.0 ),
              ( ['in', 'optional'], c_double, 'Tfb', 2.4 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(26)], HRESULT, 'SetPipe',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'ShapeName' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], BSTR, 'PropName' ),
              ( ['in'], c_double, 'XCenter' ),
              ( ['in'], c_double, 'YCenter' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], c_double, 'Diameter', 24.0 ),
              ( ['in', 'optional'], c_double, 'Thickness', 2.4 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(27)], HRESULT, 'SetPlate',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'ShapeName' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'XCenter' ),
              ( ['in'], c_double, 'YCenter' ),
              ( ['in'], c_double, 'Rotation' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], c_double, 'Thickness', 2.4 ),
              ( ['in', 'optional'], c_double, 'W', 24.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(45)], HRESULT, 'SetPolygon',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'ShapeName' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], BSTR, 'SSOverwrite' ),
              ( ['in'], c_int, 'NumberPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Radius' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Reinf', False ),
              ( ['in', 'optional'], BSTR, 'MatRebar', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(28)], HRESULT, 'SetRefCircle',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'ShapeName' ),
              ( ['in'], c_double, 'XCenter' ),
              ( ['in'], c_double, 'YCenter' ),
              ( ['in'], c_double, 'Diameter' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(29)], HRESULT, 'SetRefLine',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'ShapeName' ),
              ( ['in'], c_double, 'X1' ),
              ( ['in'], c_double, 'Y1' ),
              ( ['in'], c_double, 'X2' ),
              ( ['in'], c_double, 'Y2' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(30)], HRESULT, 'SetReinfCircle',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'ShapeName' ),
              ( ['in'], c_double, 'XCenter' ),
              ( ['in'], c_double, 'YCenter' ),
              ( ['in'], c_double, 'Diameter' ),
              ( ['in'], c_int, 'NumBars' ),
              ( ['in'], c_double, 'Rotation' ),
              ( ['in'], BSTR, 'RebarSize' ),
              ( ['in', 'optional'], BSTR, 'MatRebar', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(31)], HRESULT, 'SetReinfCorner',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'ShapeName' ),
              ( ['in'], c_int, 'PointNum' ),
              ( ['in'], BSTR, 'RebarSize' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'All', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(32)], HRESULT, 'SetReinfEdge',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'ShapeName' ),
              ( ['in'], c_int, 'EdgeNum' ),
              ( ['in'], BSTR, 'RebarSize' ),
              ( ['in'], c_double, 'Spacing' ),
              ( ['in'], c_double, 'Cover' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'All', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(33)], HRESULT, 'SetReinfLine',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'ShapeName' ),
              ( ['in'], c_double, 'X1' ),
              ( ['in'], c_double, 'Y1' ),
              ( ['in'], c_double, 'X2' ),
              ( ['in'], c_double, 'Y2' ),
              ( ['in'], c_double, 'Spacing' ),
              ( ['in'], BSTR, 'RebarSize' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'EndBars', False ),
              ( ['in', 'optional'], BSTR, 'MatRebar', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(34)], HRESULT, 'SetReinfRectangular',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'ShapeName' ),
              ( ['in'], c_double, 'XCenter' ),
              ( ['in'], c_double, 'YCenter' ),
              ( ['in'], c_double, 'H' ),
              ( ['in'], c_double, 'W' ),
              ( ['in'], c_double, 'Rotation' ),
              ( ['in', 'optional'], BSTR, 'MatRebar', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(35)], HRESULT, 'SetReinfSingle',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'ShapeName' ),
              ( ['in'], c_double, 'XCenter' ),
              ( ['in'], c_double, 'YCenter' ),
              ( ['in', 'optional'], BSTR, 'RebarSize', '' ),
              ( ['in', 'optional'], BSTR, 'MatRebar', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(36)], HRESULT, 'SetSolidCircle',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'ShapeName' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], BSTR, 'SSOverwrite' ),
              ( ['in'], c_double, 'XCenter' ),
              ( ['in'], c_double, 'YCenter' ),
              ( ['in'], c_double, 'Diameter' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Reinf', False ),
              ( ['in', 'optional'], c_int, 'NumberBars', 8 ),
              ( ['in', 'optional'], c_double, 'Rotation', 0.0 ),
              ( ['in', 'optional'], c_double, 'Cover', 2.0 ),
              ( ['in', 'optional'], BSTR, 'RebarSize', '' ),
              ( ['in', 'optional'], BSTR, 'MatRebar', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(37)], HRESULT, 'SetSolidRect',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'ShapeName' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], BSTR, 'SSOverwrite' ),
              ( ['in'], c_double, 'XCenter' ),
              ( ['in'], c_double, 'YCenter' ),
              ( ['in'], c_double, 'H' ),
              ( ['in'], c_double, 'W' ),
              ( ['in'], c_double, 'Rotation' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Reinf', False ),
              ( ['in', 'optional'], BSTR, 'MatRebar', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(38)], HRESULT, 'SetSolidSector',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'ShapeName' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'XCenter' ),
              ( ['in'], c_double, 'YCenter' ),
              ( ['in'], c_double, 'Angle' ),
              ( ['in'], c_double, 'Rotation' ),
              ( ['in'], c_double, 'Radius' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(39)], HRESULT, 'SetSolidSegment',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'ShapeName' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'XCenter' ),
              ( ['in'], c_double, 'YCenter' ),
              ( ['in'], c_double, 'Angle' ),
              ( ['in'], c_double, 'Rotation' ),
              ( ['in'], c_double, 'Radius' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(40)], HRESULT, 'SetTee',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'ShapeName' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], BSTR, 'PropName' ),
              ( ['in'], c_double, 'XCenter' ),
              ( ['in'], c_double, 'YCenter' ),
              ( ['in'], c_double, 'Rotation' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], c_double, 'H', 24.0 ),
              ( ['in', 'optional'], c_double, 'Bf', 24.0 ),
              ( ['in', 'optional'], c_double, 'Tf', 2.4 ),
              ( ['in', 'optional'], c_double, 'Tw', 2.4 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(41)], HRESULT, 'SetTube',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'ShapeName' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], BSTR, 'PropName' ),
              ( ['in'], c_double, 'XCenter' ),
              ( ['in'], c_double, 'YCenter' ),
              ( ['in'], c_double, 'Rotation' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], c_double, 'H', 24.0 ),
              ( ['in', 'optional'], c_double, 'W', 24.0 ),
              ( ['in', 'optional'], c_double, 'Tf', 2.4 ),
              ( ['in', 'optional'], c_double, 'Tw', 2.4 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(42)], HRESULT, 'GetConcreteL',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'ShapeName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(c_double), 'XCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'YCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'H' ),
              ( ['in', 'out'], POINTER(c_double), 'Bf' ),
              ( ['in', 'out'], POINTER(c_double), 'Tf' ),
              ( ['in', 'out'], POINTER(c_double), 'Tw' ),
              ( ['in', 'out'], POINTER(c_double), 'Rotation' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'MirrorAbout2' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'MirrorAbout3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(43)], HRESULT, 'GetConcreteTee',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'ShapeName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(c_double), 'XCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'YCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'H' ),
              ( ['in', 'out'], POINTER(c_double), 'Bf' ),
              ( ['in', 'out'], POINTER(c_double), 'Tf' ),
              ( ['in', 'out'], POINTER(c_double), 'Tw' ),
              ( ['in', 'out'], POINTER(c_double), 'Rotation' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'MirrorAbout3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cPropFrameSDShape implementation
##class cPropFrameSDShape_Impl(object):
##    def GetAngle(self, Name, ShapeName):
##        '-no docstring-'
##        #return MatProp, PropName, Color, XCenter, YCenter, H, Bf, Tf, Tw, Rotation, pRetVal
##
##    def GetISection(self, Name, ShapeName):
##        '-no docstring-'
##        #return MatProp, PropName, Color, XCenter, YCenter, H, Bf, Tf, Tw, Bfb, Tfb, Rotation, pRetVal
##
##    def GetReinfCircle(self, Name, ShapeName):
##        '-no docstring-'
##        #return XCenter, YCenter, Diameter, NumBars, Rotation, RebarSize, MatRebar, pRetVal
##
##    def GetReinfCorner(self, Name, ShapeName):
##        '-no docstring-'
##        #return NumberItems, PointNum, RebarSize, pRetVal
##
##    def GetReinfEdge(self, Name, ShapeName):
##        '-no docstring-'
##        #return NumberItems, EdgeNum, RebarSize, Spacing, Cover, pRetVal
##
##    def GetReinfLine(self, Name, ShapeName):
##        '-no docstring-'
##        #return X1, Y1, X2, Y2, Spacing, RebarSize, EndBars, MatRebar, pRetVal
##
##    def GetReinfRectangular(self, Name, ShapeName):
##        '-no docstring-'
##        #return XCenter, YCenter, H, W, Rotation, MatRebar, pRetVal
##
##    def GetReinfSingle(self, Name, ShapeName):
##        '-no docstring-'
##        #return XCenter, YCenter, RebarSize, MatRebar, pRetVal
##
##    def GetSolidCircle(self, Name, ShapeName):
##        '-no docstring-'
##        #return MatProp, SSOverwrite, Color, XCenter, YCenter, Diameter, Reinf, NumberBars, Rotation, Cover, RebarSize, MatRebar, pRetVal
##
##    def GetSolidRect(self, Name, ShapeName):
##        '-no docstring-'
##        #return MatProp, SSOverwrite, Color, XCenter, YCenter, H, W, Rotation, Reinf, MatRebar, pRetVal
##
##    def GetTee(self, Name, ShapeName):
##        '-no docstring-'
##        #return MatProp, PropName, Color, XCenter, YCenter, H, Bf, Tf, Tw, Rotation, pRetVal
##
##    def Delete(self, Name, ShapeName, All):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetChannel(self, Name, ShapeName):
##        '-no docstring-'
##        #return MatProp, PropName, Color, XCenter, YCenter, H, Bf, Tf, Tw, Rotation, pRetVal
##
##    def GetDblAngle(self, Name, ShapeName):
##        '-no docstring-'
##        #return MatProp, PropName, Color, XCenter, YCenter, H, W, Tf, Tw, Dis, Rotation, pRetVal
##
##    def GetPipe(self, Name, ShapeName):
##        '-no docstring-'
##        #return MatProp, PropName, Color, XCenter, YCenter, Diameter, Thickness, pRetVal
##
##    def GetPlate(self, Name, ShapeName):
##        '-no docstring-'
##        #return MatProp, Color, XCenter, YCenter, Thickness, W, Rotation, pRetVal
##
##    def GetPolygon(self, Name, ShapeName):
##        '-no docstring-'
##        #return MatProp, SSOverwrite, NumberPoints, X, Y, Radius, Color, Reinf, MatRebar, pRetVal
##
##    def GetRefCircle(self, Name, ShapeName):
##        '-no docstring-'
##        #return XCenter, YCenter, Diameter, pRetVal
##
##    def GetRefLine(self, Name, ShapeName):
##        '-no docstring-'
##        #return X1, Y1, X2, Y2, pRetVal
##
##    def GetSolidSector(self, Name, ShapeName):
##        '-no docstring-'
##        #return MatProp, Color, XCenter, YCenter, Angle, Rotation, Radius, pRetVal
##
##    def GetSolidSegment(self, Name, ShapeName):
##        '-no docstring-'
##        #return MatProp, Color, XCenter, YCenter, Angle, Rotation, Radius, pRetVal
##
##    def GetTube(self, Name, ShapeName):
##        '-no docstring-'
##        #return MatProp, PropName, Color, XCenter, YCenter, H, W, Tf, Tw, Rotation, pRetVal
##
##    def SetAngle(self, Name, MatProp, PropName, XCenter, YCenter, Rotation, Color, H, Bf, Tf, Tw):
##        '-no docstring-'
##        #return ShapeName, pRetVal
##
##    def SetChannel(self, Name, MatProp, PropName, XCenter, YCenter, Rotation, Color, H, Bf, Tf, Tw):
##        '-no docstring-'
##        #return ShapeName, pRetVal
##
##    def SetDblAngle(self, Name, MatProp, PropName, XCenter, YCenter, Rotation, Color, H, W, Tf, Tw, Dis, Tfb):
##        '-no docstring-'
##        #return ShapeName, pRetVal
##
##    def SetISection(self, Name, MatProp, PropName, XCenter, YCenter, Rotation, Color, H, Bf, Tf, Tw, Bfb, Tfb):
##        '-no docstring-'
##        #return ShapeName, pRetVal
##
##    def SetPipe(self, Name, MatProp, PropName, XCenter, YCenter, Color, Diameter, Thickness):
##        '-no docstring-'
##        #return ShapeName, pRetVal
##
##    def SetPlate(self, Name, MatProp, XCenter, YCenter, Rotation, Color, Thickness, W):
##        '-no docstring-'
##        #return ShapeName, pRetVal
##
##    def SetPolygon(self, Name, MatProp, SSOverwrite, NumberPoints, Color, Reinf, MatRebar):
##        '-no docstring-'
##        #return ShapeName, X, Y, Radius, pRetVal
##
##    def SetRefCircle(self, Name, XCenter, YCenter, Diameter):
##        '-no docstring-'
##        #return ShapeName, pRetVal
##
##    def SetRefLine(self, Name, X1, Y1, X2, Y2):
##        '-no docstring-'
##        #return ShapeName, pRetVal
##
##    def SetReinfCircle(self, Name, XCenter, YCenter, Diameter, NumBars, Rotation, RebarSize, MatRebar):
##        '-no docstring-'
##        #return ShapeName, pRetVal
##
##    def SetReinfCorner(self, Name, PointNum, RebarSize, All):
##        '-no docstring-'
##        #return ShapeName, pRetVal
##
##    def SetReinfEdge(self, Name, EdgeNum, RebarSize, Spacing, Cover, All):
##        '-no docstring-'
##        #return ShapeName, pRetVal
##
##    def SetReinfLine(self, Name, X1, Y1, X2, Y2, Spacing, RebarSize, EndBars, MatRebar):
##        '-no docstring-'
##        #return ShapeName, pRetVal
##
##    def SetReinfRectangular(self, Name, XCenter, YCenter, H, W, Rotation, MatRebar):
##        '-no docstring-'
##        #return ShapeName, pRetVal
##
##    def SetReinfSingle(self, Name, XCenter, YCenter, RebarSize, MatRebar):
##        '-no docstring-'
##        #return ShapeName, pRetVal
##
##    def SetSolidCircle(self, Name, MatProp, SSOverwrite, XCenter, YCenter, Diameter, Color, Reinf, NumberBars, Rotation, Cover, RebarSize, MatRebar):
##        '-no docstring-'
##        #return ShapeName, pRetVal
##
##    def SetSolidRect(self, Name, MatProp, SSOverwrite, XCenter, YCenter, H, W, Rotation, Color, Reinf, MatRebar):
##        '-no docstring-'
##        #return ShapeName, pRetVal
##
##    def SetSolidSector(self, Name, MatProp, XCenter, YCenter, Angle, Rotation, Radius, Color):
##        '-no docstring-'
##        #return ShapeName, pRetVal
##
##    def SetSolidSegment(self, Name, MatProp, XCenter, YCenter, Angle, Rotation, Radius, Color):
##        '-no docstring-'
##        #return ShapeName, pRetVal
##
##    def SetTee(self, Name, MatProp, PropName, XCenter, YCenter, Rotation, Color, H, Bf, Tf, Tw):
##        '-no docstring-'
##        #return ShapeName, pRetVal
##
##    def SetTube(self, Name, MatProp, PropName, XCenter, YCenter, Rotation, Color, H, W, Tf, Tw):
##        '-no docstring-'
##        #return ShapeName, pRetVal
##
##    def GetConcreteL(self, Name, ShapeName):
##        '-no docstring-'
##        #return MatProp, PropName, Color, XCenter, YCenter, H, Bf, Tf, Tw, Rotation, MirrorAbout2, MirrorAbout3, pRetVal
##
##    def GetConcreteTee(self, Name, ShapeName):
##        '-no docstring-'
##        #return MatProp, PropName, Color, XCenter, YCenter, H, Bf, Tf, Tw, Rotation, MirrorAbout3, pRetVal
##

cBDRS_CANCSA_S6_06_SteelUCompService._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_CANCSA_S6_06_SteelUCompService implementation
##class cBDRS_CANCSA_S6_06_SteelUCompService_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cDCoIndian_IS_456_2000(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{C6F7AC14-C151-45D4-8703-15447A4DB4E9}')
    _idlflags_ = ['dual', 'oleautomation']
cDCoIndian_IS_456_2000._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDCoIndian_IS_456_2000 implementation
##class cDCoIndian_IS_456_2000_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cAutoSeastate(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{6A1EE368-7F07-4DC5-A4D2-5C40CFCB7C30}')
    _idlflags_ = ['dual', 'oleautomation']
cAutoSeastate._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'SetNone',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetAuto',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'LoadMethod' ),
              ( ['in', 'out'], POINTER(BSTR), 'CSys' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'AdjustGravityLat' ),
              ( ['in', 'out'], POINTER(c_double), 'AdjustGravityLatFactor' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'AdjustGravityVert' ),
              ( ['in', 'out'], POINTER(c_double), 'AdjustGravityVertFactor' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CenterRotation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Parameters' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IgnorePhase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetAuto',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'LoadMethod' ),
              ( ['in'], BSTR, 'CSys' ),
              ( ['in'], VARIANT_BOOL, 'AdjustGravityLat' ),
              ( ['in'], c_double, 'AdjustGravityLatFactor' ),
              ( ['in'], VARIANT_BOOL, 'AdjustGravityVert' ),
              ( ['in'], c_double, 'AdjustGravityVertFactor' ),
              ( ['in'], _midlSAFEARRAY(c_double), 'CenterRotation' ),
              ( ['in'], _midlSAFEARRAY(c_double), 'Parameters' ),
              ( ['in'], VARIANT_BOOL, 'IgnorePhase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cAutoSeastate implementation
##class cAutoSeastate_Impl(object):
##    def SetNone(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetAuto(self, Name):
##        '-no docstring-'
##        #return LoadMethod, CSys, AdjustGravityLat, AdjustGravityLatFactor, AdjustGravityVert, AdjustGravityVertFactor, CenterRotation, Parameters, IgnorePhase, pRetVal
##
##    def SetAuto(self, Name, LoadMethod, CSys, AdjustGravityLat, AdjustGravityLatFactor, AdjustGravityVert, AdjustGravityVertFactor, CenterRotation, Parameters, IgnorePhase):
##        '-no docstring-'
##        #return pRetVal
##

class cBASConcTBeam(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{3BDA720D-D6CA-411C-A8DE-7B6D71B4E84A}')
    _idlflags_ = ['dual', 'oleautomation']
cBASConcTBeamResult._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'BASConcTBeam',
              ( ['out', 'retval'], POINTER(POINTER(cBASConcTBeam)), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'BridgeSuperCutForcesGirder',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], VARIANT_BOOL, 'ResultF1' ),
              ( ['in'], VARIANT_BOOL, 'ResultF2' ),
              ( ['in'], VARIANT_BOOL, 'ResultF3' ),
              ( ['in'], VARIANT_BOOL, 'ResultM1' ),
              ( ['in'], VARIANT_BOOL, 'ResultM2' ),
              ( ['in'], VARIANT_BOOL, 'ResultM3' ),
              ( ['in'], c_int, 'ResponseType' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'BridgeSuperCutLongitStressGirder',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_double, 'StressAveraging' ),
              ( ['in'], c_int, 'PointIndex' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Stress' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBASConcTBeamResult implementation
##class cBASConcTBeamResult_Impl(object):
##    @property
##    def BASConcTBeam(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def BridgeSuperCutForcesGirder(self, Name, CutIndex, GirderIndex, ResultF1, ResultF2, ResultF3, ResultM1, ResultM2, ResultM3, ResponseType):
##        '-no docstring-'
##        #return NumberResults, LoadCase, StepType, StepNum, F1, F2, F3, M1, M2, M3, pRetVal
##
##    def BridgeSuperCutLongitStressGirder(self, Name, CutIndex, GirderIndex, StressAveraging, PointIndex):
##        '-no docstring-'
##        #return NumberResults, LoadCase, StepType, StepNum, Stress, pRetVal
##

cBDRS_AA_L_07_CBox2Shear._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], BSTR, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_CBox2Shear implementation
##class cBDRS_AA_L_07_CBox2Shear_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetCapacityParamString(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCapacityParamString(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_CANCSAS606_CBoxShr._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], BSTR, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_CANCSAS606_CBoxShr implementation
##class cBDRS_CANCSAS606_CBoxShr_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetCapacityParamString(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCapacityParamString(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cDCoAASHTO_14(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{2CEC9B65-FB62-4799-8883-59956EF90FE7}')
    _idlflags_ = ['dual', 'oleautomation']
cDCoAASHTO_14._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDCoAASHTO_14 implementation
##class cDCoAASHTO_14_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_CANCSAS606_CBoxFlex._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_CANCSAS606_CBoxFlex implementation
##class cBDRS_CANCSAS606_CBoxFlex_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBASConcBox(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{AE5E426F-F12E-4140-9F0C-E035F454371A}')
    _idlflags_ = ['dual', 'oleautomation']
cBASConcBox._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'CountSuperCutWebStressPoint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'WebIndex' ),
              ( ['in', 'out'], POINTER(c_int), 'Count' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetSuperCutGirderRebarLong',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'Mat' ),
              ( ['in', 'out'], POINTER(c_int), 'RebarCount' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RebarX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RebarY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'DType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'RebarSize' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberBars' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetSuperCutGirderRebarTransv',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_double, 'DistBefore' ),
              ( ['in'], c_double, 'DistAfter' ),
              ( ['in', 'out'], POINTER(BSTR), 'Mat' ),
              ( ['in', 'out'], POINTER(c_double), 'RebarTransV' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetSuperCutSectionPropsAtY',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_double, 'Y' ),
              ( ['in'], VARIANT_BOOL, 'AboveY' ),
              ( ['in', 'out'], POINTER(c_double), 'YCG' ),
              ( ['in', 'out'], POINTER(c_double), 'Area' ),
              ( ['in', 'out'], POINTER(c_double), 'Inertia' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetSuperCutSectionValues',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetSuperCutSectionValues_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Ct' ),
              ( ['in'], c_double, 'Cw' ),
              ( ['in'], c_double, 'Cb' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetSuperCutSlabCoordsAtX',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_double, 'X' ),
              ( ['in', 'out'], POINTER(c_int), 'Status' ),
              ( ['in', 'out'], POINTER(c_double), 'Y1' ),
              ( ['in', 'out'], POINTER(c_double), 'Y2' ),
              ( ['in', 'out'], POINTER(c_double), 'Y3' ),
              ( ['in', 'out'], POINTER(c_double), 'Y4' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetSuperCutStressPoint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'PointIndex' ),
              ( ['in', 'out'], POINTER(c_double), 'X' ),
              ( ['in', 'out'], POINTER(c_double), 'Y' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_int), 'Location' ),
              ( ['in', 'out'], POINTER(BSTR), 'Note' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetSuperCutTendonNames',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'TendonIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'BridgeTendon' ),
              ( ['in', 'out'], POINTER(BSTR), 'TendonObj' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetSuperCutTendonValues',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'TendonIndex' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetSuperCutWebCoordsAtY',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_double, 'Y' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberWebs' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'WebIsCut' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WebLeft' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WebRight' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetSuperCutWebStressPoint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'WebIndex' ),
              ( ['in'], c_int, 'PointIndex' ),
              ( ['in', 'out'], POINTER(c_double), 'X' ),
              ( ['in', 'out'], POINTER(c_double), 'Y' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(BSTR), 'Note' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'GetSuperCutWebValues',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'WebIndex' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'GetSuperCutGirderRebarLong_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'Mat' ),
              ( ['in', 'out'], POINTER(c_int), 'RebarCount' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RebarX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RebarY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'DType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'RebarSize' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AreaFactor' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBASConcBox implementation
##class cBASConcBox_Impl(object):
##    def CountSuperCutWebStressPoint(self, Name, CutIndex, WebIndex):
##        '-no docstring-'
##        #return Count, pRetVal
##
##    def GetSuperCutGirderRebarLong(self, Name, CutIndex, GirderIndex):
##        '-no docstring-'
##        #return Mat, RebarCount, RebarX, RebarY, DType, RebarSize, NumberBars, pRetVal
##
##    def GetSuperCutGirderRebarTransv(self, Name, CutIndex, GirderIndex, DistBefore, DistAfter):
##        '-no docstring-'
##        #return Mat, RebarTransV, pRetVal
##
##    def GetSuperCutSectionPropsAtY(self, Name, CutIndex, Y, AboveY):
##        '-no docstring-'
##        #return YCG, Area, Inertia, pRetVal
##
##    def GetSuperCutSectionValues(self, Name, CutIndex, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetSuperCutSectionValues_1(self, Name, CutIndex, Item, Ct, Cw, Cb):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetSuperCutSlabCoordsAtX(self, Name, CutIndex, X):
##        '-no docstring-'
##        #return Status, Y1, Y2, Y3, Y4, pRetVal
##
##    def GetSuperCutStressPoint(self, Name, CutIndex, PointIndex):
##        '-no docstring-'
##        #return X, Y, MatProp, Location, Note, pRetVal
##
##    def GetSuperCutTendonNames(self, Name, CutIndex, TendonIndex):
##        '-no docstring-'
##        #return BridgeTendon, TendonObj, pRetVal
##
##    def GetSuperCutTendonValues(self, Name, CutIndex, TendonIndex, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetSuperCutWebCoordsAtY(self, Name, CutIndex, Y):
##        '-no docstring-'
##        #return NumberWebs, WebIsCut, WebLeft, WebRight, pRetVal
##
##    def GetSuperCutWebStressPoint(self, Name, CutIndex, WebIndex, PointIndex):
##        '-no docstring-'
##        #return X, Y, MatProp, Note, pRetVal
##
##    def GetSuperCutWebValues(self, Name, CutIndex, WebIndex, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetSuperCutGirderRebarLong_1(self, Name, CutIndex, GirderIndex):
##        '-no docstring-'
##        #return Mat, RebarCount, RebarX, RebarY, DType, RebarSize, NumberBars, AreaFactor, pRetVal
##

cEditPoint._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'Align',
              ( ['in'], c_int, 'MyType' ),
              ( ['in'], c_double, 'Ordinate' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'ChangeCoordinates',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'X' ),
              ( ['in'], c_double, 'Y' ),
              ( ['in'], c_double, 'Z' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'ChangeCoordinates_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'X' ),
              ( ['in'], c_double, 'Y' ),
              ( ['in'], c_double, 'Z' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'NoRefresh', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'Connect',
              ( ['in', 'out'], POINTER(c_int), 'NumberPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'Disconnect',
              ( ['in', 'out'], POINTER(c_int), 'NumberPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'Merge',
              ( ['in'], c_double, 'MergeTol' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cEditPoint implementation
##class cEditPoint_Impl(object):
##    def Align(self, MyType, Ordinate):
##        '-no docstring-'
##        #return NumberPoints, PointName, pRetVal
##
##    def ChangeCoordinates(self, Name, X, Y, Z):
##        '-no docstring-'
##        #return pRetVal
##
##    def ChangeCoordinates_1(self, Name, X, Y, Z, NoRefresh):
##        '-no docstring-'
##        #return pRetVal
##
##    def Connect(self):
##        '-no docstring-'
##        #return NumberPoints, PointName, pRetVal
##
##    def Disconnect(self):
##        '-no docstring-'
##        #return NumberPoints, PointName, pRetVal
##
##    def Merge(self, MergeTol):
##        '-no docstring-'
##        #return NumberPoints, PointName, pRetVal
##

class cBDRS_EUROCODE_PCCompCrack(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{D510754C-7661-48C0-8BE2-D2450B075CC4}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_EUROCODE_PCCompCrack._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_EUROCODE_PCCompCrack implementation
##class cBDRS_EUROCODE_PCCompCrack_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBD_IRC2011(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{23384163-4F3D-436E-8203-FE95F8023E01}')
    _idlflags_ = ['dual', 'oleautomation']
cBD_IRC2011._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBD_IRC2011 implementation
##class cBD_IRC2011_Impl(object):
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cDStItalianNTC2008S(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{95746B70-C42B-4796-BF65-FB3B46F72D46}')
    _idlflags_ = ['dual', 'oleautomation']
cDStItalianNTC2008S._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDStItalianNTC2008S implementation
##class cDStItalianNTC2008S_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBD_JTG_D62_2004(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{C29FB128-43AE-4FC5-80E8-8E7AA263595C}')
    _idlflags_ = ['dual', 'oleautomation']
cBD_JTG_D62_2004._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBD_JTG_D62_2004 implementation
##class cBD_JTG_D62_2004_Impl(object):
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cDCoAASHTO_07(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{88C7CF72-DC5A-4147-988E-79FFFC0FDCCF}')
    _idlflags_ = ['dual', 'oleautomation']
cDCoAASHTO_07._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDCoAASHTO_07 implementation
##class cDCoAASHTO_07_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_AA_L_07_CBox2ShearRt._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], BSTR, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_CBox2ShearRt implementation
##class cBDRS_AA_L_07_CBox2ShearRt_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetCapacityParamString(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCapacityParamString(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBDRS_EUROCODE_CBox2Flex(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{504B4A51-8D6B-475B-A8D3-3645D1C0704A}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_EUROCODE_CBox2Flex._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_EUROCODE_CBox2Flex implementation
##class cBDRS_EUROCODE_CBox2Flex_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cEditGeneral._methods_ = [
    COMMETHOD([dispid(5)], HRESULT, 'Move',
              ( ['in'], c_double, 'DX' ),
              ( ['in'], c_double, 'DY' ),
              ( ['in'], c_double, 'DZ' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(1)], HRESULT, 'ExtrudeFrameToAreaLinear',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'PropName' ),
              ( ['in'], c_double, 'DX' ),
              ( ['in'], c_double, 'DY' ),
              ( ['in'], c_double, 'DZ' ),
              ( ['in'], c_int, 'NumberAreas' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Remove', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'ExtrudeFrameToAreaRadial',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'PropName' ),
              ( ['in'], c_int, 'RotateAxis' ),
              ( ['in'], c_double, 'X' ),
              ( ['in'], c_double, 'Y' ),
              ( ['in'], c_double, 'Z' ),
              ( ['in'], c_double, 'IncrementAng' ),
              ( ['in'], c_double, 'TotalRise' ),
              ( ['in'], c_int, 'NumberAreas' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Remove', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'ExtrudePointToFrameLinear',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'PropName' ),
              ( ['in'], c_double, 'DX' ),
              ( ['in'], c_double, 'DY' ),
              ( ['in'], c_double, 'DZ' ),
              ( ['in'], c_int, 'NumberFrames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'ExtrudePointToFrameRadial',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'PropName' ),
              ( ['in'], c_int, 'RotateAxis' ),
              ( ['in'], c_double, 'X' ),
              ( ['in'], c_double, 'Y' ),
              ( ['in'], c_double, 'Z' ),
              ( ['in'], c_double, 'IncrementAng' ),
              ( ['in'], c_double, 'TotalRise' ),
              ( ['in'], c_int, 'NumberFrames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'ExtrudeAreaToSolidLinearNormal',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'PropName' ),
              ( ['in'], c_int, 'NPlus3' ),
              ( ['in'], c_double, 'TPlus3' ),
              ( ['in'], c_int, 'NMinus3' ),
              ( ['in'], c_double, 'TMinus3' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberSolids' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SolidName' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Remove', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'ExtrudeAreaToSolidLinearUser',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'PropName' ),
              ( ['in'], c_double, 'DX' ),
              ( ['in'], c_double, 'DY' ),
              ( ['in'], c_double, 'DZ' ),
              ( ['in'], c_int, 'Number' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberSolids' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SolidName' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Remove', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'ExtrudeAreaToSolidRadial',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'PropName' ),
              ( ['in'], c_int, 'RotateAxis' ),
              ( ['in'], c_double, 'X' ),
              ( ['in'], c_double, 'Y' ),
              ( ['in'], c_double, 'Z' ),
              ( ['in'], c_double, 'IncrementAng' ),
              ( ['in'], c_double, 'TotalRise' ),
              ( ['in'], c_int, 'Number' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberSolids' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SolidName' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Remove', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'ReplicateLinear',
              ( ['in'], c_double, 'DX' ),
              ( ['in'], c_double, 'DY' ),
              ( ['in'], c_double, 'DZ' ),
              ( ['in'], c_int, 'Number' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberObjects' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ObjectType' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Remove', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'ReplicateMirror',
              ( ['in'], c_int, 'Plane' ),
              ( ['in'], c_double, 'X1' ),
              ( ['in'], c_double, 'Y1' ),
              ( ['in'], c_double, 'z1' ),
              ( ['in'], c_double, 'X2' ),
              ( ['in'], c_double, 'Y2' ),
              ( ['in'], c_double, 'z2' ),
              ( ['in'], c_double, 'X3' ),
              ( ['in'], c_double, 'Y3' ),
              ( ['in'], c_double, 'Z3' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberObjects' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ObjectType' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Remove', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'ReplicateRadial',
              ( ['in'], c_int, 'RotateAxis' ),
              ( ['in'], c_double, 'X1' ),
              ( ['in'], c_double, 'Y1' ),
              ( ['in'], c_double, 'z1' ),
              ( ['in'], c_double, 'X2' ),
              ( ['in'], c_double, 'Y2' ),
              ( ['in'], c_double, 'z2' ),
              ( ['in'], c_int, 'Number' ),
              ( ['in'], c_double, 'Ang' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberObjects' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ObjectType' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Remove', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cEditGeneral implementation
##class cEditGeneral_Impl(object):
##    def Move(self, DX, DY, DZ):
##        '-no docstring-'
##        #return pRetVal
##
##    def ExtrudeFrameToAreaLinear(self, Name, PropName, DX, DY, DZ, NumberAreas, Remove):
##        '-no docstring-'
##        #return AreaName, pRetVal
##
##    def ExtrudeFrameToAreaRadial(self, Name, PropName, RotateAxis, X, Y, Z, IncrementAng, TotalRise, NumberAreas, Remove):
##        '-no docstring-'
##        #return AreaName, pRetVal
##
##    def ExtrudePointToFrameLinear(self, Name, PropName, DX, DY, DZ, NumberFrames):
##        '-no docstring-'
##        #return FrameName, pRetVal
##
##    def ExtrudePointToFrameRadial(self, Name, PropName, RotateAxis, X, Y, Z, IncrementAng, TotalRise, NumberFrames):
##        '-no docstring-'
##        #return FrameName, pRetVal
##
##    def ExtrudeAreaToSolidLinearNormal(self, Name, PropName, NPlus3, TPlus3, NMinus3, TMinus3, Remove):
##        '-no docstring-'
##        #return NumberSolids, SolidName, pRetVal
##
##    def ExtrudeAreaToSolidLinearUser(self, Name, PropName, DX, DY, DZ, Number, Remove):
##        '-no docstring-'
##        #return NumberSolids, SolidName, pRetVal
##
##    def ExtrudeAreaToSolidRadial(self, Name, PropName, RotateAxis, X, Y, Z, IncrementAng, TotalRise, Number, Remove):
##        '-no docstring-'
##        #return NumberSolids, SolidName, pRetVal
##
##    def ReplicateLinear(self, DX, DY, DZ, Number, Remove):
##        '-no docstring-'
##        #return NumberObjects, ObjectName, ObjectType, pRetVal
##
##    def ReplicateMirror(self, Plane, X1, Y1, z1, X2, Y2, z2, X3, Y3, Z3, Remove):
##        '-no docstring-'
##        #return NumberObjects, ObjectName, ObjectType, pRetVal
##
##    def ReplicateRadial(self, RotateAxis, X1, Y1, z1, X2, Y2, z2, Number, Ang, Remove):
##        '-no docstring-'
##        #return NumberObjects, ObjectName, ObjectType, pRetVal
##

cBDRS_CANCSAS606_CBoxStr._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_CANCSAS606_CBoxStr implementation
##class cBDRS_CANCSAS606_CBoxStr_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_CANCSA_S6_06_SteelUCompStrength._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_CANCSA_S6_06_SteelUCompStrength implementation
##class cBDRS_CANCSA_S6_06_SteelUCompStrength_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cFile._methods_ = [
    COMMETHOD([dispid(3)], HRESULT, 'NewBlank',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(1)], HRESULT, 'OpenFile',
              ( ['in'], BSTR, 'FileName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Save',
              ( ['in', 'optional'], BSTR, 'FileName', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetFilePath',
              ( ['in', 'out'], POINTER(BSTR), 'FilePath' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'New2DFrame',
              ( ['in'], e2DFrameType, 'TempType' ),
              ( ['in'], c_int, 'NumberStorys' ),
              ( ['in'], c_double, 'StoryHeight' ),
              ( ['in'], c_int, 'NumberBays' ),
              ( ['in'], c_double, 'BayWidth' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Restraint', True ),
              ( ['in', 'optional'], BSTR, 'Beam', 'Default' ),
              ( ['in', 'optional'], BSTR, 'Column', 'Default' ),
              ( ['in', 'optional'], BSTR, 'Brace', 'Default' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'New3DFrame',
              ( ['in'], e3DFrameType, 'TempType' ),
              ( ['in'], c_int, 'NumberStorys' ),
              ( ['in'], c_double, 'StoryHeight' ),
              ( ['in'], c_int, 'NumberBaysX' ),
              ( ['in'], c_double, 'BayWidthX' ),
              ( ['in'], c_int, 'NumberBaysY' ),
              ( ['in'], c_double, 'BayWidthY' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Restraint', True ),
              ( ['in', 'optional'], BSTR, 'Beam', 'Default' ),
              ( ['in', 'optional'], BSTR, 'Column', 'Default' ),
              ( ['in', 'optional'], BSTR, 'Area', 'Default' ),
              ( ['in', 'optional'], c_int, 'NumberXDivisions', 4 ),
              ( ['in', 'optional'], c_int, 'NumberYDivisions', 4 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'NewBeam',
              ( ['in'], c_int, 'NumberSpans' ),
              ( ['in'], c_double, 'SpanLength' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Restraint', True ),
              ( ['in', 'optional'], BSTR, 'Beam', 'Default' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'NewSolidBlock',
              ( ['in'], c_double, 'XWidth' ),
              ( ['in'], c_double, 'YWidth' ),
              ( ['in'], c_double, 'Height' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Restraint', True ),
              ( ['in', 'optional'], BSTR, 'Solid', 'Default' ),
              ( ['in', 'optional'], c_int, 'NumberXDivisions', 5 ),
              ( ['in', 'optional'], c_int, 'NumberYDivisions', 8 ),
              ( ['in', 'optional'], c_int, 'NumberZDivisions', 10 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'NewWall',
              ( ['in'], c_int, 'NumberXDivisions' ),
              ( ['in'], c_double, 'DivisionWidthX' ),
              ( ['in'], c_int, 'NumberZDivisions' ),
              ( ['in'], c_double, 'DivisionWidthZ' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Restraint', True ),
              ( ['in', 'optional'], BSTR, 'Area', 'Default' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'NewSteelDeck',
              ( ['in'], c_int, 'NumberStorys' ),
              ( ['in'], c_double, 'TypicalStoryHeight' ),
              ( ['in'], c_double, 'BottomStoryHeight' ),
              ( ['in'], c_int, 'NumberLinesX' ),
              ( ['in'], c_int, 'NumberLinesY' ),
              ( ['in'], c_double, 'SpacingX' ),
              ( ['in'], c_double, 'SpacingY' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'NewGridOnly',
              ( ['in'], c_int, 'NumberStorys' ),
              ( ['in'], c_double, 'TypicalStoryHeight' ),
              ( ['in'], c_double, 'BottomStoryHeight' ),
              ( ['in'], c_int, 'NumberLinesX' ),
              ( ['in'], c_int, 'NumberLinesY' ),
              ( ['in'], c_double, 'SpacingX' ),
              ( ['in'], c_double, 'SpacingY' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cFile implementation
##class cFile_Impl(object):
##    def NewBlank(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def OpenFile(self, FileName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Save(self, FileName):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetFilePath(self):
##        '-no docstring-'
##        #return FilePath, pRetVal
##
##    def New2DFrame(self, TempType, NumberStorys, StoryHeight, NumberBays, BayWidth, Restraint, Beam, Column, Brace):
##        '-no docstring-'
##        #return pRetVal
##
##    def New3DFrame(self, TempType, NumberStorys, StoryHeight, NumberBaysX, BayWidthX, NumberBaysY, BayWidthY, Restraint, Beam, Column, Area, NumberXDivisions, NumberYDivisions):
##        '-no docstring-'
##        #return pRetVal
##
##    def NewBeam(self, NumberSpans, SpanLength, Restraint, Beam):
##        '-no docstring-'
##        #return pRetVal
##
##    def NewSolidBlock(self, XWidth, YWidth, Height, Restraint, Solid, NumberXDivisions, NumberYDivisions, NumberZDivisions):
##        '-no docstring-'
##        #return pRetVal
##
##    def NewWall(self, NumberXDivisions, DivisionWidthX, NumberZDivisions, DivisionWidthZ, Restraint, Area):
##        '-no docstring-'
##        #return pRetVal
##
##    def NewSteelDeck(self, NumberStorys, TypicalStoryHeight, BottomStoryHeight, NumberLinesX, NumberLinesY, SpacingX, SpacingY):
##        '-no docstring-'
##        #return pRetVal
##
##    def NewGridOnly(self, NumberStorys, TypicalStoryHeight, BottomStoryHeight, NumberLinesX, NumberLinesY, SpacingX, SpacingY):
##        '-no docstring-'
##        #return pRetVal
##

class cBDRS_EUROCODE_ConTBeamFlex(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{C43FDE26-83A7-4866-8EC2-ED7E69E6DB17}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_EUROCODE_ConTBeamFlex._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_EUROCODE_ConTBeamFlex implementation
##class cBDRS_EUROCODE_ConTBeamFlex_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBridgeDesignRequest(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{ABD2FD81-48A5-454B-B00C-111A3767BF31}')
    _idlflags_ = ['dual', 'oleautomation']
cBridgeDesignRequest._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'Add',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'RequestType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], BSTR, 'NewRequestName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'Count',
              ( ['in', 'optional'], c_int, 'RequestType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetBridgeObject',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in', 'out'], POINTER(BSTR), 'ObjectName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'RequestName' ),
              ( ['in', 'optional'], c_int, 'RequestType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetNote',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in', 'out'], POINTER(BSTR), 'Note' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetRequestType',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in', 'out'], POINTER(c_int), 'RequestType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'SetBridgeObject',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], BSTR, 'ObjectName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'SetNote',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], BSTR, 'Note' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11), 'propget'], HRESULT, 'Superstructure',
              ( ['out', 'retval'], POINTER(POINTER(cBridgeDesignRequestSuper)), 'pRetVal' )),
    COMMETHOD([dispid(12), 'propget'], HRESULT, 'Member',
              ( ['out', 'retval'], POINTER(POINTER(cBridgeDesignRequestMember)), 'pRetVal' )),
]
################################################################
## code template for cBridgeDesignRequest implementation
##class cBridgeDesignRequest_Impl(object):
##    def Add(self, RequestName, RequestType):
##        '-no docstring-'
##        #return pRetVal
##
##    def ChangeName(self, RequestName, NewRequestName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self, RequestType):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, RequestName):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetBridgeObject(self, RequestName):
##        '-no docstring-'
##        #return ObjectName, pRetVal
##
##    def GetNameList(self, RequestType):
##        '-no docstring-'
##        #return NumberNames, RequestName, pRetVal
##
##    def GetNote(self, RequestName):
##        '-no docstring-'
##        #return Note, pRetVal
##
##    def GetRequestType(self, RequestName):
##        '-no docstring-'
##        #return RequestType, pRetVal
##
##    def SetBridgeObject(self, RequestName, ObjectName):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetNote(self, RequestName, Note):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Superstructure(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Member(self):
##        '-no docstring-'
##        #return pRetVal
##

cPointObj._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'AddCartesian',
              ( ['in'], c_double, 'X' ),
              ( ['in'], c_double, 'Y' ),
              ( ['in'], c_double, 'Z' ),
              ( ['in', 'out'], POINTER(BSTR), 'Name' ),
              ( ['in', 'optional'], BSTR, 'UserName', '' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'MergeOff', False ),
              ( ['in', 'optional'], c_int, 'MergeNumber', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'CountLoadDispl',
              ( ['in', 'out'], POINTER(c_int), 'Count' ),
              ( ['in', 'optional'], BSTR, 'Name', '' ),
              ( ['in', 'optional'], BSTR, 'LoadPat', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'CountLoadForce',
              ( ['in', 'out'], POINTER(c_int), 'Count' ),
              ( ['in', 'optional'], BSTR, 'Name', '' ),
              ( ['in', 'optional'], BSTR, 'LoadPat', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'CountPanelZone',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'CountRestraint',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'CountSpring',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'DeleteLoadDispl',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'DeleteLoadForce',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'DeleteMass',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'DeletePanelZone',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'DeleteRestraint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'DeleteSpecialPoint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'DeleteSpring',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'GetCommonTo',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'CommonTo' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'GetConnectivity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ObjectType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PointNumber' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'GetCoordCartesian',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'X' ),
              ( ['in', 'out'], POINTER(c_double), 'Y' ),
              ( ['in', 'out'], POINTER(c_double), 'Z' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(23)], HRESULT, 'GetCoordCylindrical',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'R' ),
              ( ['in', 'out'], POINTER(c_double), 'Theta' ),
              ( ['in', 'out'], POINTER(c_double), 'Z' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(24)], HRESULT, 'GetCoordSpherical',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'R' ),
              ( ['in', 'out'], POINTER(c_double), 'A' ),
              ( ['in', 'out'], POINTER(c_double), 'B' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(25)], HRESULT, 'GetElm',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'Elm' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(26)], HRESULT, 'GetGUID',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(27)], HRESULT, 'GetLoadDispl',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LcStep' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(28)], HRESULT, 'GetLoadForce',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LcStep' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(29)], HRESULT, 'GetLocalAxes',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'A' ),
              ( ['in', 'out'], POINTER(c_double), 'B' ),
              ( ['in', 'out'], POINTER(c_double), 'C' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Advanced' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(31)], HRESULT, 'GetMass',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(32)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(33)], HRESULT, 'GetPanelZone',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'PropType' ),
              ( ['in', 'out'], POINTER(c_double), 'Thickness' ),
              ( ['in', 'out'], POINTER(c_double), 'K1' ),
              ( ['in', 'out'], POINTER(c_double), 'K2' ),
              ( ['in', 'out'], POINTER(BSTR), 'LinkProp' ),
              ( ['in', 'out'], POINTER(c_int), 'Connectivity' ),
              ( ['in', 'out'], POINTER(c_int), 'LocalAxisFrom' ),
              ( ['in', 'out'], POINTER(c_double), 'LocalAxisAngle' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(35)], HRESULT, 'GetRestraint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(36)], HRESULT, 'GetSelected',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Selected' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(37)], HRESULT, 'GetSpecialPoint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecialPoint' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(38)], HRESULT, 'GetSpring',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(39)], HRESULT, 'GetSpringCoupled',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(40)], HRESULT, 'GetTransformationMatrix',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'IsGlobal', True ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(41)], HRESULT, 'IsSpringCoupled',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IsCoupled' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(43)], HRESULT, 'SetGroupAssign',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'GroupName' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Remove', False ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(44)], HRESULT, 'SetGUID',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(45)], HRESULT, 'SetLoadDispl',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', False ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Local' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(46)], HRESULT, 'SetLoadForce',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', False ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(49)], HRESULT, 'SetMass',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'IsLocalCSys', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(50)], HRESULT, 'SetMassByVolume',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'IsLocalCSys', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(51)], HRESULT, 'SetMassByWeight',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'IsLocalCSys', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(52)], HRESULT, 'SetPanelZone',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'PropType' ),
              ( ['in'], c_double, 'Thickness' ),
              ( ['in'], c_double, 'K1' ),
              ( ['in'], c_double, 'K2' ),
              ( ['in'], BSTR, 'LinkProp' ),
              ( ['in'], c_int, 'Connectivity' ),
              ( ['in'], c_int, 'LocalAxisFrom' ),
              ( ['in'], c_double, 'LocalAxisAngle' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(55)], HRESULT, 'SetRestraint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(56)], HRESULT, 'SetSelected',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'Selected' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(57)], HRESULT, 'SetSpecialPoint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'SpecialPoint' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(58)], HRESULT, 'SetSpring',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'IsLocalCSys', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(59)], HRESULT, 'SetSpringCoupled',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'IsLocalCSys', False ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(76)], HRESULT, 'GetGroupAssign',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberGroups' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Groups' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'CountConstraint',
              ( ['in', 'out'], POINTER(c_int), 'Count' ),
              ( ['in', 'optional'], BSTR, 'Name', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'DeleteConstraint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'GetConstraint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ConstraintName' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(42)], HRESULT, 'SetConstraint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'ConstraintName' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', True ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'DeletePatternValue',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'PatternName' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(34)], HRESULT, 'GetPatternValue',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'PatternName' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(53)], HRESULT, 'SetPatternByPressure',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'PatternName' ),
              ( ['in'], c_double, 'Z' ),
              ( ['in'], c_double, 'W' ),
              ( ['in', 'out'], POINTER(c_double), 'U' ),
              ( ['in', 'out'], POINTER(c_int), 'R' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['in', 'optional'], c_int, 'Restriction', 0 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(54)], HRESULT, 'SetPatternByXYZ',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'PatternName' ),
              ( ['in'], c_double, 'A' ),
              ( ['in'], c_double, 'B' ),
              ( ['in'], c_double, 'C' ),
              ( ['in'], c_double, 'D' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['in', 'optional'], c_int, 'Restriction', 0 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(30)], HRESULT, 'GetLocalAxesAdvanced',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Active' ),
              ( ['in', 'out'], POINTER(c_int), 'AxVectOpt' ),
              ( ['in', 'out'], POINTER(BSTR), 'AxCSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'AxDir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AxPt' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AxVect' ),
              ( ['in', 'out'], POINTER(c_int), 'Plane2' ),
              ( ['in', 'out'], POINTER(c_int), 'PlVectOpt' ),
              ( ['in', 'out'], POINTER(BSTR), 'PlCSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PlDir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PlPt' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PlVect' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(47)], HRESULT, 'SetLocalAxes',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'A' ),
              ( ['in'], c_double, 'B' ),
              ( ['in'], c_double, 'C' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(48)], HRESULT, 'SetLocalAxesAdvanced',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'Active' ),
              ( ['in'], c_int, 'AxVectOpt' ),
              ( ['in'], BSTR, 'AxCSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'AxDir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AxPt' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AxVect' ),
              ( ['in'], c_int, 'Plane2' ),
              ( ['in'], c_int, 'PlVectOpt' ),
              ( ['in'], BSTR, 'PlCSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PlDir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PlPt' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PlVect' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(63)], HRESULT, 'AddCylindrical',
              ( ['in'], c_double, 'R' ),
              ( ['in'], c_double, 'Theta' ),
              ( ['in'], c_double, 'Z' ),
              ( ['in', 'out'], POINTER(BSTR), 'Name' ),
              ( ['in', 'optional'], BSTR, 'UserName', '' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'MergeOff', False ),
              ( ['in', 'optional'], c_int, 'MergeNumber', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(64)], HRESULT, 'AddSpherical',
              ( ['in'], c_double, 'R' ),
              ( ['in'], c_double, 'A' ),
              ( ['in'], c_double, 'B' ),
              ( ['in', 'out'], POINTER(BSTR), 'Name' ),
              ( ['in', 'optional'], BSTR, 'UserName', '' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'MergeOff', False ),
              ( ['in', 'optional'], c_int, 'MergeNumber', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(65)], HRESULT, 'GetMergeNumber',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'MergeNumber' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(66)], HRESULT, 'SetMergeNumber',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'MergeNumber' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(70)], HRESULT, 'GetLoadForceWithGUID',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LcStep' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GUID' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(71)], HRESULT, 'SetLoadForceWithGUID',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', False ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(72)], HRESULT, 'DeleteLoadForceWithGUID',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(77)], HRESULT, 'GetBridgeObjectFoundationFlag',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BObjName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SpanIndex' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'FoundationIndex' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(eBridgeObjectFoundationPart)), 'Part' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PartIndex' ),
              ( ['in', 'out', 'optional'], POINTER(eItemType), 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(78)], HRESULT, 'SetBridgeObjectFoundationFlag',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'BObjName' ),
              ( ['in'], c_int, 'SpanIndex' ),
              ( ['in'], c_int, 'FoundationIndex' ),
              ( ['in'], eBridgeObjectFoundationPart, 'Part' ),
              ( ['in'], c_int, 'PartIndex' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(60)], HRESULT, 'GetNameListOnStory',
              ( ['in'], BSTR, 'StoryName' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(61)], HRESULT, 'GetDiaphragm',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(eDiaphragmOption), 'DiaphragmOption' ),
              ( ['in', 'out'], POINTER(BSTR), 'DiaphragmName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(62)], HRESULT, 'SetDiaphragm',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eDiaphragmOption, 'DiaphragmOption' ),
              ( ['in', 'optional'], BSTR, 'DiaphragmName', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(67)], HRESULT, 'GetLabelNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyLabel' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyStory' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(68)], HRESULT, 'GetLabelFromName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'Label' ),
              ( ['in', 'out'], POINTER(BSTR), 'Story' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(69)], HRESULT, 'GetNameFromLabel',
              ( ['in'], BSTR, 'Label' ),
              ( ['in'], BSTR, 'Story' ),
              ( ['in', 'out'], POINTER(BSTR), 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(73)], HRESULT, 'GetAllPoints',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(74)], HRESULT, 'GetSpringAssignment',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'SpringProp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(75)], HRESULT, 'SetSpringAssignment',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'SpringProp' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cPointObj implementation
##class cPointObj_Impl(object):
##    def AddCartesian(self, X, Y, Z, UserName, CSys, MergeOff, MergeNumber):
##        '-no docstring-'
##        #return Name, pRetVal
##
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def CountLoadDispl(self, Name, LoadPat):
##        '-no docstring-'
##        #return Count, pRetVal
##
##    def CountLoadForce(self, Name, LoadPat):
##        '-no docstring-'
##        #return Count, pRetVal
##
##    def CountPanelZone(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def CountRestraint(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def CountSpring(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteLoadDispl(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteLoadForce(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteMass(self, Name, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeletePanelZone(self, Name, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteRestraint(self, Name, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteSpecialPoint(self, Name, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteSpring(self, Name, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetCommonTo(self, Name):
##        '-no docstring-'
##        #return CommonTo, pRetVal
##
##    def GetConnectivity(self, Name):
##        '-no docstring-'
##        #return NumberItems, ObjectType, ObjectName, PointNumber, pRetVal
##
##    def GetCoordCartesian(self, Name, CSys):
##        '-no docstring-'
##        #return X, Y, Z, pRetVal
##
##    def GetCoordCylindrical(self, Name, CSys):
##        '-no docstring-'
##        #return R, Theta, Z, pRetVal
##
##    def GetCoordSpherical(self, Name, CSys):
##        '-no docstring-'
##        #return R, A, B, pRetVal
##
##    def GetElm(self, Name):
##        '-no docstring-'
##        #return Elm, pRetVal
##
##    def GetGUID(self, Name):
##        '-no docstring-'
##        #return GUID, pRetVal
##
##    def GetLoadDispl(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, PointName, LoadPat, LcStep, CSys, U1, U2, U3, R1, R2, R3, pRetVal
##
##    def GetLoadForce(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, PointName, LoadPat, LcStep, CSys, F1, F2, F3, M1, M2, M3, pRetVal
##
##    def GetLocalAxes(self, Name):
##        '-no docstring-'
##        #return A, B, C, Advanced, pRetVal
##
##    def GetMass(self, Name):
##        '-no docstring-'
##        #return M, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetPanelZone(self, Name):
##        '-no docstring-'
##        #return PropType, Thickness, K1, K2, LinkProp, Connectivity, LocalAxisFrom, LocalAxisAngle, pRetVal
##
##    def GetRestraint(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetSelected(self, Name):
##        '-no docstring-'
##        #return Selected, pRetVal
##
##    def GetSpecialPoint(self, Name):
##        '-no docstring-'
##        #return SpecialPoint, pRetVal
##
##    def GetSpring(self, Name):
##        '-no docstring-'
##        #return K, pRetVal
##
##    def GetSpringCoupled(self, Name):
##        '-no docstring-'
##        #return K, pRetVal
##
##    def GetTransformationMatrix(self, Name, IsGlobal):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def IsSpringCoupled(self, Name):
##        '-no docstring-'
##        #return IsCoupled, pRetVal
##
##    def SetGroupAssign(self, Name, GroupName, Remove, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetGUID(self, Name, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoadDispl(self, Name, LoadPat, Replace, CSys, ItemType):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetLoadForce(self, Name, LoadPat, Replace, CSys, ItemType):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetMass(self, Name, ItemType, IsLocalCSys, Replace):
##        '-no docstring-'
##        #return M, pRetVal
##
##    def SetMassByVolume(self, Name, MatProp, ItemType, IsLocalCSys, Replace):
##        '-no docstring-'
##        #return M, pRetVal
##
##    def SetMassByWeight(self, Name, ItemType, IsLocalCSys, Replace):
##        '-no docstring-'
##        #return M, pRetVal
##
##    def SetPanelZone(self, Name, PropType, Thickness, K1, K2, LinkProp, Connectivity, LocalAxisFrom, LocalAxisAngle, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetRestraint(self, Name, ItemType):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetSelected(self, Name, Selected, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSpecialPoint(self, Name, SpecialPoint, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSpring(self, Name, ItemType, IsLocalCSys, Replace):
##        '-no docstring-'
##        #return K, pRetVal
##
##    def SetSpringCoupled(self, Name, ItemType, IsLocalCSys, Replace):
##        '-no docstring-'
##        #return K, pRetVal
##
##    def GetGroupAssign(self, Name):
##        '-no docstring-'
##        #return NumberGroups, Groups, pRetVal
##
##    def CountConstraint(self, Name):
##        '-no docstring-'
##        #return Count, pRetVal
##
##    def DeleteConstraint(self, Name, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetConstraint(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, PointName, ConstraintName, pRetVal
##
##    def SetConstraint(self, Name, ItemType, Replace):
##        '-no docstring-'
##        #return ConstraintName, pRetVal
##
##    def DeletePatternValue(self, Name, PatternName, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetPatternValue(self, Name, PatternName):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetPatternByPressure(self, Name, PatternName, Z, W, ItemType, Restriction, Replace):
##        '-no docstring-'
##        #return U, R, pRetVal
##
##    def SetPatternByXYZ(self, Name, PatternName, A, B, C, D, ItemType, Restriction, Replace):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetLocalAxesAdvanced(self, Name):
##        '-no docstring-'
##        #return Active, AxVectOpt, AxCSys, AxDir, AxPt, AxVect, Plane2, PlVectOpt, PlCSys, PlDir, PlPt, PlVect, pRetVal
##
##    def SetLocalAxes(self, Name, A, B, C, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLocalAxesAdvanced(self, Name, Active, AxVectOpt, AxCSys, Plane2, PlVectOpt, PlCSys, ItemType):
##        '-no docstring-'
##        #return AxDir, AxPt, AxVect, PlDir, PlPt, PlVect, pRetVal
##
##    def AddCylindrical(self, R, Theta, Z, UserName, CSys, MergeOff, MergeNumber):
##        '-no docstring-'
##        #return Name, pRetVal
##
##    def AddSpherical(self, R, A, B, UserName, CSys, MergeOff, MergeNumber):
##        '-no docstring-'
##        #return Name, pRetVal
##
##    def GetMergeNumber(self, Name):
##        '-no docstring-'
##        #return MergeNumber, pRetVal
##
##    def SetMergeNumber(self, Name, MergeNumber, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetLoadForceWithGUID(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, PointName, LoadPat, LcStep, CSys, F1, F2, F3, M1, M2, M3, GUID, pRetVal
##
##    def SetLoadForceWithGUID(self, Name, LoadPat, Replace, CSys):
##        '-no docstring-'
##        #return Value, GUID, pRetVal
##
##    def DeleteLoadForceWithGUID(self, Name, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetBridgeObjectFoundationFlag(self, Name):
##        '-no docstring-'
##        #return NumberItems, PointName, BObjName, SpanIndex, FoundationIndex, Part, PartIndex, ItemType, pRetVal
##
##    def SetBridgeObjectFoundationFlag(self, Name, BObjName, SpanIndex, FoundationIndex, Part, PartIndex, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetNameListOnStory(self, StoryName):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetDiaphragm(self, Name):
##        '-no docstring-'
##        #return DiaphragmOption, DiaphragmName, pRetVal
##
##    def SetDiaphragm(self, Name, DiaphragmOption, DiaphragmName):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetLabelNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, MyLabel, MyStory, pRetVal
##
##    def GetLabelFromName(self, Name):
##        '-no docstring-'
##        #return Label, Story, pRetVal
##
##    def GetNameFromLabel(self, Label, Story):
##        '-no docstring-'
##        #return Name, pRetVal
##
##    def GetAllPoints(self, CSys):
##        '-no docstring-'
##        #return NumberNames, MyName, X, Y, Z, pRetVal
##
##    def GetSpringAssignment(self, Name):
##        '-no docstring-'
##        #return SpringProp, pRetVal
##
##    def SetSpringAssignment(self, Name, SpringProp, ItemType):
##        '-no docstring-'
##        #return pRetVal
##

class cCaseModalHistoryNonlinear(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{2E4CFF51-66F2-45BB-8DAB-67F4217F8030}')
    _idlflags_ = ['dual', 'oleautomation']
cCaseModalHistoryNonlinear._methods_ = [
    COMMETHOD([dispid(7)], HRESULT, 'GetLoads',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Func' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Tf' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'At' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ang' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(1)], HRESULT, 'GetDampConstant',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Damp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetDampInterpolated',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'DampType' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Time' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Damp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetDampOverrides',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Mode' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Damp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetDampProportional',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'DampType' ),
              ( ['in', 'out'], POINTER(c_double), 'DampA' ),
              ( ['in', 'out'], POINTER(c_double), 'DampB' ),
              ( ['in', 'out'], POINTER(c_double), 'DampF1' ),
              ( ['in', 'out'], POINTER(c_double), 'DampF2' ),
              ( ['in', 'out'], POINTER(c_double), 'DampD1' ),
              ( ['in', 'out'], POINTER(c_double), 'DampD2' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetDampType',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'DampType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetInitialCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'InitialCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetModalCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'ModalCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetSolControlParameters',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'TStat' ),
              ( ['in', 'out'], POINTER(c_double), 'DTMax' ),
              ( ['in', 'out'], POINTER(c_double), 'DTMin' ),
              ( ['in', 'out'], POINTER(c_double), 'FTol' ),
              ( ['in', 'out'], POINTER(c_double), 'ETol' ),
              ( ['in', 'out'], POINTER(c_int), 'ITMax' ),
              ( ['in', 'out'], POINTER(c_int), 'ITMin' ),
              ( ['in', 'out'], POINTER(c_double), 'Cf' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetTimeStep',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NStep' ),
              ( ['in', 'out'], POINTER(c_double), 'Dt' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'SetCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'SetDampConstant',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'Damp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'SetDampInterpolated',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'DampType' ),
              ( ['in'], c_int, 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Time' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Damp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'SetDampOverrides',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Mode' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Damp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'SetDampProportional',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'DampType' ),
              ( ['in'], c_double, 'DampA' ),
              ( ['in'], c_double, 'DampB' ),
              ( ['in'], c_double, 'DampF1' ),
              ( ['in'], c_double, 'DampF2' ),
              ( ['in'], c_double, 'DampD1' ),
              ( ['in'], c_double, 'DampD2' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'SetInitialCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'InitialCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'SetLoads',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Func' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Tf' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'At' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ang' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'SetModalCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'ModalCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'SetSolControlParameters',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'TStat' ),
              ( ['in'], c_double, 'DTMax' ),
              ( ['in'], c_double, 'DTMin' ),
              ( ['in'], c_double, 'FTol' ),
              ( ['in'], c_double, 'ETol' ),
              ( ['in'], c_int, 'ITMax' ),
              ( ['in'], c_int, 'ITMin' ),
              ( ['in'], c_double, 'Cf' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'SetTimeStep',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NStep' ),
              ( ['in'], c_double, 'Dt' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cCaseModalHistoryNonlinear implementation
##class cCaseModalHistoryNonlinear_Impl(object):
##    def GetLoads(self, Name):
##        '-no docstring-'
##        #return NumberLoads, LoadType, LoadName, Func, SF, Tf, At, CSys, Ang, pRetVal
##
##    def GetDampConstant(self, Name):
##        '-no docstring-'
##        #return Damp, pRetVal
##
##    def GetDampInterpolated(self, Name):
##        '-no docstring-'
##        #return DampType, NumberItems, Time, Damp, pRetVal
##
##    def GetDampOverrides(self, Name):
##        '-no docstring-'
##        #return NumberItems, Mode, Damp, pRetVal
##
##    def GetDampProportional(self, Name):
##        '-no docstring-'
##        #return DampType, DampA, DampB, DampF1, DampF2, DampD1, DampD2, pRetVal
##
##    def GetDampType(self, Name):
##        '-no docstring-'
##        #return DampType, pRetVal
##
##    def GetInitialCase(self, Name):
##        '-no docstring-'
##        #return InitialCase, pRetVal
##
##    def GetModalCase(self, Name):
##        '-no docstring-'
##        #return ModalCase, pRetVal
##
##    def GetSolControlParameters(self, Name):
##        '-no docstring-'
##        #return TStat, DTMax, DTMin, FTol, ETol, ITMax, ITMin, Cf, pRetVal
##
##    def GetTimeStep(self, Name):
##        '-no docstring-'
##        #return NStep, Dt, pRetVal
##
##    def SetCase(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDampConstant(self, Name, Damp):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDampInterpolated(self, Name, DampType, NumberItems):
##        '-no docstring-'
##        #return Time, Damp, pRetVal
##
##    def SetDampOverrides(self, Name, NumberItems):
##        '-no docstring-'
##        #return Mode, Damp, pRetVal
##
##    def SetDampProportional(self, Name, DampType, DampA, DampB, DampF1, DampF2, DampD1, DampD2):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetInitialCase(self, Name, InitialCase):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoads(self, Name, NumberLoads):
##        '-no docstring-'
##        #return LoadType, LoadName, Func, SF, Tf, At, CSys, Ang, pRetVal
##
##    def SetModalCase(self, Name, ModalCase):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSolControlParameters(self, Name, TStat, DTMax, DTMin, FTol, ETol, ITMax, ITMin, Cf):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetTimeStep(self, Name, NStep, Dt):
##        '-no docstring-'
##        #return pRetVal
##

class cCaseSteadyState(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{2F83A4AA-C629-4B45-887D-BA334B3C113D}')
    _idlflags_ = ['dual', 'oleautomation']
cCaseSteadyState._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetDampConstant',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'HysConMassCoeff' ),
              ( ['in', 'out'], POINTER(c_double), 'HysConStiffCoeff' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetDampInterpolated',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'HysIntFreqUnits' ),
              ( ['in', 'out'], POINTER(c_int), 'HysIntNumFreqs' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'HysIntFreq' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'HysIntMassCoeff' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'HysIntStiffCoeff' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetDampType',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'DampType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetFreqData',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'FreqFirst' ),
              ( ['in', 'out'], POINTER(c_double), 'FreqLast' ),
              ( ['in', 'out'], POINTER(c_int), 'FreqNumIncs' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'FreqAddModal' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'FreqAddModalDev' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'FreqAddSpecified' ),
              ( ['in', 'out'], POINTER(BSTR), 'ModalCase' ),
              ( ['in', 'out'], POINTER(c_int), 'FreqNumModalDev' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FreqModalDev' ),
              ( ['in', 'out'], POINTER(c_int), 'FreqNumSpecified' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FreqSpecified' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetInitialCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'InitialCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetLoads',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Func' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PhaseAngle' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ang' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'SetCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'SetDampConstant',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'HysConMassCoeff' ),
              ( ['in'], c_double, 'HysConStiffCoeff' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'SetDampInterpolated',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'HysIntFreqUnits' ),
              ( ['in'], c_int, 'HysIntNumFreqs' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'HysIntFreq' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'HysIntMassCoeff' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'HysIntStiffCoeff' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'SetFreqData',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'FreqFirst' ),
              ( ['in'], c_double, 'FreqLast' ),
              ( ['in'], c_int, 'FreqNumIncs' ),
              ( ['in'], VARIANT_BOOL, 'FreqAddModal' ),
              ( ['in'], VARIANT_BOOL, 'FreqAddModalDev' ),
              ( ['in'], VARIANT_BOOL, 'FreqAddSpecified' ),
              ( ['in'], BSTR, 'ModalCase' ),
              ( ['in'], c_int, 'FreqNumModalDev' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FreqModalDev' ),
              ( ['in'], c_int, 'FreqNumSpecified' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FreqSpecified' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'SetInitialCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'InitialCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'SetLoads',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Func' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PhaseAngle' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ang' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cCaseSteadyState implementation
##class cCaseSteadyState_Impl(object):
##    def GetDampConstant(self, Name):
##        '-no docstring-'
##        #return HysConMassCoeff, HysConStiffCoeff, pRetVal
##
##    def GetDampInterpolated(self, Name):
##        '-no docstring-'
##        #return HysIntFreqUnits, HysIntNumFreqs, HysIntFreq, HysIntMassCoeff, HysIntStiffCoeff, pRetVal
##
##    def GetDampType(self, Name):
##        '-no docstring-'
##        #return DampType, pRetVal
##
##    def GetFreqData(self, Name):
##        '-no docstring-'
##        #return FreqFirst, FreqLast, FreqNumIncs, FreqAddModal, FreqAddModalDev, FreqAddSpecified, ModalCase, FreqNumModalDev, FreqModalDev, FreqNumSpecified, FreqSpecified, pRetVal
##
##    def GetInitialCase(self, Name):
##        '-no docstring-'
##        #return InitialCase, pRetVal
##
##    def GetLoads(self, Name):
##        '-no docstring-'
##        #return NumberLoads, LoadType, LoadName, Func, SF, PhaseAngle, CSys, Ang, pRetVal
##
##    def SetCase(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDampConstant(self, Name, HysConMassCoeff, HysConStiffCoeff):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDampInterpolated(self, Name, HysIntFreqUnits, HysIntNumFreqs):
##        '-no docstring-'
##        #return HysIntFreq, HysIntMassCoeff, HysIntStiffCoeff, pRetVal
##
##    def SetFreqData(self, Name, FreqFirst, FreqLast, FreqNumIncs, FreqAddModal, FreqAddModalDev, FreqAddSpecified, ModalCase, FreqNumModalDev, FreqNumSpecified):
##        '-no docstring-'
##        #return FreqModalDev, FreqSpecified, pRetVal
##
##    def SetInitialCase(self, Name, InitialCase):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoads(self, Name, NumberLoads):
##        '-no docstring-'
##        #return LoadType, LoadName, Func, SF, PhaseAngle, CSys, Ang, pRetVal
##

cEditSolid._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'Divide',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'N1' ),
              ( ['in'], c_int, 'N2' ),
              ( ['in'], c_int, 'N3' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberSolids' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SolidName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cEditSolid implementation
##class cEditSolid_Impl(object):
##    def Divide(self, Name, N1, N2, N3):
##        '-no docstring-'
##        #return NumberSolids, SolidName, pRetVal
##

cBDRS_AA_S_02_CBoxFlex._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_S_02_CBoxFlex implementation
##class cBDRS_AA_S_02_CBoxFlex_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBDRS_EUROCODE_SteelUCompConstructibilityNonStgd(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{6A5C06F8-0F51-48C4-90D6-24DD385224D0}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_EUROCODE_SteelUCompConstructibilityNonStgd._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetDemandParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], BSTR, 'DemandName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetDemandParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], BSTR, 'DemandName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_EUROCODE_SteelUCompConstructibilityNonStgd implementation
##class cBDRS_EUROCODE_SteelUCompConstructibilityNonStgd_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetDemandParam(self, RequestName, DemandName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDemandParam(self, RequestName, DemandName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_CSAS606_SICompCnstr._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_CSAS606_SICompCnstr implementation
##class cBDRS_CSAS606_SICompCnstr_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBridgeCrossDiaphragm(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{A8747700-1EE6-4AA0-8E90-24E2B58278B8}')
    _idlflags_ = ['dual', 'oleautomation']
class cBridgeSection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{1E573388-EDBA-45FF-A10B-2EBC1AA7B9A0}')
    _idlflags_ = ['dual', 'oleautomation']
class cBridgeLayoutLine(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{88CFDCEA-9469-4184-8B55-C3A4FD12D9FF}')
    _idlflags_ = ['dual', 'oleautomation']
class cBridgeConcretePour(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{1C4CA66C-F421-47AC-B8CD-0359D92C9A14}')
    _idlflags_ = ['dual', 'oleautomation']
cBridgeModeler._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'CrossDiaphragm',
              ( ['out', 'retval'], POINTER(POINTER(cBridgeCrossDiaphragm)), 'pRetVal' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'SuperSection',
              ( ['out', 'retval'], POINTER(POINTER(cBridgeSection)), 'pRetVal' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'LayoutLine',
              ( ['out', 'retval'], POINTER(POINTER(cBridgeLayoutLine)), 'pRetVal' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'BridgeObj',
              ( ['out', 'retval'], POINTER(POINTER(cBridge)), 'pRetVal' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'ConcretePour',
              ( ['out', 'retval'], POINTER(POINTER(cBridgeConcretePour)), 'pRetVal' )),
]
################################################################
## code template for cBridgeModeler implementation
##class cBridgeModeler_Impl(object):
##    @property
##    def CrossDiaphragm(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SuperSection(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def LayoutLine(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def BridgeObj(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcretePour(self):
##        '-no docstring-'
##        #return pRetVal
##

cNamedDisplay._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'SaveToFile',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'FilePath' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cNamedDisplay implementation
##class cNamedDisplay_Impl(object):
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def SaveToFile(self, Name, FilePath):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_AA_L_07_CTBeamFlex._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_CTBeamFlex implementation
##class cBDRS_AA_L_07_CTBeamFlex_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_CANCSAS606_PCCompFlex._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_CANCSAS606_PCCompFlex implementation
##class cBDRS_CANCSAS606_PCCompFlex_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBDRS_EUROCODE_ConcSolidShr(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{40F33FAC-EB3E-43FF-9435-2EAE5E97E6B2}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_EUROCODE_ConcSolidShr._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], BSTR, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_EUROCODE_ConcSolidShr implementation
##class cBDRS_EUROCODE_ConcSolidShr_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetCapacityParamString(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCapacityParamString(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBridgeGroup(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{7B907762-CD49-4E67-8A49-494DF2828CA4}')
    _idlflags_ = ['dual', 'oleautomation']

# values for enumeration 'eBridgeObjectUserPointType'
eBridgeObjectUserPointType_General = 0
eBridgeObjectUserPointType_SegmentalTendon = 1
eBridgeObjectUserPointType = c_int # enum

# values for enumeration 'eBridgeSegmentConstructionMethod'
eBridgeSegmentConstructionMethod_Precast = 0
eBridgeSegmentConstructionMethod_CastInPlace = 1
eBridgeSegmentConstructionMethod = c_int # enum

# values for enumeration 'eBridgeSegmentType'
eBridgeSegmentType_Rigid = 0
eBridgeSegmentType_PierTable = 1
eBridgeSegmentType_Segment = 2
eBridgeSegmentType_Closure = 3
eBridgeSegmentType = c_int # enum
cBridge._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'CrossDiaphragm',
              ( ['out', 'retval'], POINTER(POINTER(cBridgeCrossDiaphragm)), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetBridgeSpanSections',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberSpans' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SectionName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetBridgeUpdateData',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'LinkedModelExists' ),
              ( ['in', 'out'], POINTER(c_int), 'ModelType' ),
              ( ['in', 'out'], POINTER(c_double), 'MaxDeckSegLength' ),
              ( ['in', 'out'], POINTER(c_double), 'MaxCapSegLength' ),
              ( ['in', 'out'], POINTER(c_double), 'MaxColSegLength' ),
              ( ['in', 'out'], POINTER(c_double), 'SubMeshSize' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetBridgeUpdateForAnalysisFlag',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BridgeName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetStructuralModelOption',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'ModelOption' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'SetBridgeSpanSection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Span' ),
              ( ['in'], BSTR, 'SectionName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'SetBridgeUpdateData',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Action' ),
              ( ['in'], c_int, 'ModelType' ),
              ( ['in'], c_double, 'MaxDeckSegLength' ),
              ( ['in'], c_double, 'MaxCapSegLength' ),
              ( ['in'], c_double, 'MaxColSegLength' ),
              ( ['in'], c_double, 'SubMeshSize' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'SetBridgeUpdateForAnalysisFlag',
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'SetStructuralModelOption',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ModelOption' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12), 'propget'], HRESULT, 'SuperSection',
              ( ['out', 'retval'], POINTER(POINTER(cBridgeSection)), 'pRetVal' )),
    COMMETHOD([dispid(13), 'propget'], HRESULT, 'BridgeGroup',
              ( ['out', 'retval'], POINTER(POINTER(cBridgeGroup)), 'pRetVal' )),
    COMMETHOD([dispid(14), 'propget'], HRESULT, 'BridgeTendon',
              ( ['out', 'retval'], POINTER(POINTER(cBridgeTendon)), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'Add',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eBridgeObjectType, 'Type' ),
              ( ['in'], BSTR, 'LayoutLine' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'GetBridgeLayoutLine',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'LayoutLine' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'SetBridgeLayoutLine',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LayoutLine' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'GetSpansGeneral',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'StartStation' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberSpans' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SpanName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Length' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'SetSpansGeneral',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'StartStation' ),
              ( ['in'], c_int, 'NumberSpans' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SpanName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Length' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'GetSpansSegmental',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'StartStation' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberSpans' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SpanName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'SetSpansSegmental',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'StartStation' ),
              ( ['in'], c_int, 'NumberSpans' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SpanName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'GetSpanSegments',
              ( ['in'], BSTR, 'BridgeObj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberSegments' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SegmentName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Length' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(23)], HRESULT, 'SetSpanSegments',
              ( ['in'], BSTR, 'BridgeObj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberSegments' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SegmentName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Length' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(24)], HRESULT, 'GetSpanSupports',
              ( ['in'], BSTR, 'BridgeObj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SupportType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SupportName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(25)], HRESULT, 'SetSpanSupports',
              ( ['in'], BSTR, 'BridgeObj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SupportType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SupportName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(26)], HRESULT, 'SetUserPoint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'SpanName' ),
              ( ['in'], c_double, 'Distance' ),
              ( ['in'], BSTR, 'Bearing' ),
              ( ['in', 'optional'], eBridgeObjectUserPointType, 'Type', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(27)], HRESULT, 'GetUserPoints',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'SpanName' ),
              ( ['in', 'out'], POINTER(c_int), 'Count' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Distance' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Bearing' ),
              ( ['in', 'out', 'optional'], POINTER(eBridgeObjectUserPointType), 'Type', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(28)], HRESULT, 'DeleteUserPoints',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'SpanName' ),
              ( ['in', 'optional'], eBridgeObjectUserPointType, 'Type', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(29)], HRESULT, 'SetTravelers',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberTravelers' ),
              ( ['in'], _midlSAFEARRAY(BSTR), 'TravelerNames' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(30)], HRESULT, 'GetTravelers',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberTravelers' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TravelerNames' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(31)], HRESULT, 'SetSegmentErection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'SegmentName' ),
              ( ['in'], c_int, 'ErectionType' ),
              ( ['in'], c_int, 'NumberSupports' ),
              ( ['in'], _midlSAFEARRAY(BSTR), 'SupportNames' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(32)], HRESULT, 'GetSegmentErection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'SegmentName' ),
              ( ['in', 'out'], POINTER(c_int), 'ErectionType' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberSupports' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SupportNames' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(33)], HRESULT, 'GetSpanSegments_1',
              ( ['in'], BSTR, 'BridgeObj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberSegments' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SegmentName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Length' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(eBridgeSegmentConstructionMethod)), 'Method' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(34)], HRESULT, 'SetSpanSegments_1',
              ( ['in'], BSTR, 'BridgeObj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberSegments' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SegmentName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Length' ),
              ( ['in'], _midlSAFEARRAY(eBridgeSegmentConstructionMethod), 'Method' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(35)], HRESULT, 'GetSpanSegments_2',
              ( ['in'], BSTR, 'BridgeObj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberSegments' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SegmentName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Length' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(eBridgeSegmentConstructionMethod)), 'Method' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(eBridgeSegmentType)), 'SegmentType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(36)], HRESULT, 'SetSpanSegments_2',
              ( ['in'], BSTR, 'BridgeObj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberSegments' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SegmentName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Length' ),
              ( ['in'], _midlSAFEARRAY(eBridgeSegmentConstructionMethod), 'Method' ),
              ( ['in'], _midlSAFEARRAY(eBridgeSegmentType), 'SegmentType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBridge implementation
##class cBridge_Impl(object):
##    def Count(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def CrossDiaphragm(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetBridgeSpanSections(self, Name):
##        '-no docstring-'
##        #return NumberSpans, SectionName, pRetVal
##
##    def GetBridgeUpdateData(self, Name):
##        '-no docstring-'
##        #return LinkedModelExists, ModelType, MaxDeckSegLength, MaxCapSegLength, MaxColSegLength, SubMeshSize, pRetVal
##
##    def GetBridgeUpdateForAnalysisFlag(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, BridgeName, pRetVal
##
##    def GetStructuralModelOption(self, Name):
##        '-no docstring-'
##        #return ModelOption, pRetVal
##
##    def SetBridgeSpanSection(self, Name, Span, SectionName):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetBridgeUpdateData(self, Name, Action, ModelType, MaxDeckSegLength, MaxCapSegLength, MaxColSegLength, SubMeshSize):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetBridgeUpdateForAnalysisFlag(self):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetStructuralModelOption(self, Name, ModelOption):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SuperSection(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def BridgeGroup(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def BridgeTendon(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def Add(self, Name, Type, LayoutLine):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetBridgeLayoutLine(self, Name):
##        '-no docstring-'
##        #return LayoutLine, pRetVal
##
##    def SetBridgeLayoutLine(self, Name, LayoutLine):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetSpansGeneral(self, Name):
##        '-no docstring-'
##        #return StartStation, NumberSpans, SpanName, Length, pRetVal
##
##    def SetSpansGeneral(self, Name, StartStation, NumberSpans):
##        '-no docstring-'
##        #return SpanName, Length, pRetVal
##
##    def GetSpansSegmental(self, Name):
##        '-no docstring-'
##        #return StartStation, NumberSpans, SpanName, pRetVal
##
##    def SetSpansSegmental(self, Name, StartStation, NumberSpans):
##        '-no docstring-'
##        #return SpanName, pRetVal
##
##    def GetSpanSegments(self, BridgeObj):
##        '-no docstring-'
##        #return NumberSegments, SegmentName, Length, pRetVal
##
##    def SetSpanSegments(self, BridgeObj):
##        '-no docstring-'
##        #return NumberSegments, SegmentName, Length, pRetVal
##
##    def GetSpanSupports(self, BridgeObj):
##        '-no docstring-'
##        #return SupportType, SupportName, pRetVal
##
##    def SetSpanSupports(self, BridgeObj):
##        '-no docstring-'
##        #return SupportType, SupportName, pRetVal
##
##    def SetUserPoint(self, Name, SpanName, Distance, Bearing, Type):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetUserPoints(self, Name, SpanName):
##        '-no docstring-'
##        #return Count, Distance, Bearing, Type, pRetVal
##
##    def DeleteUserPoints(self, Name, SpanName, Type):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetTravelers(self, Name, NumberTravelers, TravelerNames):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetTravelers(self, Name):
##        '-no docstring-'
##        #return NumberTravelers, TravelerNames, pRetVal
##
##    def SetSegmentErection(self, Name, SegmentName, ErectionType, NumberSupports, SupportNames):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetSegmentErection(self, Name):
##        '-no docstring-'
##        #return SegmentName, ErectionType, NumberSupports, SupportNames, pRetVal
##
##    def GetSpanSegments_1(self, BridgeObj):
##        '-no docstring-'
##        #return NumberSegments, SegmentName, Length, Method, pRetVal
##
##    def SetSpanSegments_1(self, BridgeObj, Method):
##        '-no docstring-'
##        #return NumberSegments, SegmentName, Length, pRetVal
##
##    def GetSpanSegments_2(self, BridgeObj):
##        '-no docstring-'
##        #return NumberSegments, SegmentName, Length, Method, SegmentType, pRetVal
##
##    def SetSpanSegments_2(self, BridgeObj, Method, SegmentType):
##        '-no docstring-'
##        #return NumberSegments, SegmentName, Length, pRetVal
##


# values for enumeration 'eFrameDesignOrientation'
eFrameDesignOrientation_Column = 1
eFrameDesignOrientation_Beam = 2
eFrameDesignOrientation_Brace = 3
eFrameDesignOrientation_Null = 4
eFrameDesignOrientation_Other = 5
eFrameDesignOrientation = c_int # enum
cBDRS_CSAS606_SICompCnstNS._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetDemandParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], BSTR, 'DemandName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetDemandParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], BSTR, 'DemandName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_CSAS606_SICompCnstNS implementation
##class cBDRS_CSAS606_SICompCnstNS_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetDemandParam(self, RequestName, DemandName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDemandParam(self, RequestName, DemandName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBDRS_BS5400_PCCompStr(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{44FE0241-1733-4381-B51B-1A957B5F9503}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_BS5400_PCCompStr._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_BS5400_PCCompStr implementation
##class cBDRS_BS5400_PCCompStr_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cDStSP16_13330_2017(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{25B50932-8FFB-4457-992F-91FFB8568EFA}')
    _idlflags_ = ['dual', 'oleautomation']
cDStSP16_13330_2017._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDStSP16_13330_2017 implementation
##class cDStSP16_13330_2017_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_IRC2010_SteelICompService._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_IRC2010_SteelICompService implementation
##class cBDRS_IRC2010_SteelICompService_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_AA_S_02_CBoxShear._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], BSTR, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_S_02_CBoxShear implementation
##class cBDRS_AA_S_02_CBoxShear_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetCapacityParamString(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCapacityParamString(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_CANCSAS606_PCCompShr._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], BSTR, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_CANCSAS606_PCCompShr implementation
##class cBDRS_CANCSAS606_PCCompShr_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetCapacityParamString(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCapacityParamString(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBDRS_EUROCODE_SteelUCompServiceRebar(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{36BAAC1D-7188-4351-AD5F-D26FC35C467C}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_EUROCODE_SteelUCompServiceRebar._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_EUROCODE_SteelUCompServiceRebar implementation
##class cBDRS_EUROCODE_SteelUCompServiceRebar_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cDStCanadian_S16_09(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{2C4A6180-9651-4F41-B6DE-6BD499BCDA29}')
    _idlflags_ = ['dual', 'oleautomation']
cDStCanadian_S16_09._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDStCanadian_S16_09 implementation
##class cDStCanadian_S16_09_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBridgeAdvancedSuper._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'BASConcBox',
              ( ['out', 'retval'], POINTER(POINTER(cBASConcBox)), 'pRetVal' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'BASConcBox2',
              ( ['out', 'retval'], POINTER(POINTER(cBASConcBox2)), 'pRetVal' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'BASPrecastComp',
              ( ['out', 'retval'], POINTER(POINTER(cBASPrecastComp)), 'pRetVal' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'BASSteelIComp',
              ( ['out', 'retval'], POINTER(POINTER(cBASSteelIComp)), 'pRetVal' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'BASSteelUComp',
              ( ['out', 'retval'], POINTER(POINTER(cBASSteelUComp)), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'CountSuperCut',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'Count' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'CountSuperCutStressPoint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in', 'out'], POINTER(c_int), 'Count' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetSpanData',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Span' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetSpanSupports',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'Count' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Station' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Skew' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SupportType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Continuity' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetSuperCutLocation',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in', 'out'], POINTER(c_int), 'Location' ),
              ( ['in', 'out'], POINTER(c_double), 'Station' ),
              ( ['in', 'out'], POINTER(c_double), 'XRefPt' ),
              ( ['in', 'out'], POINTER(c_double), 'YRefPt' ),
              ( ['in', 'out'], POINTER(c_double), 'Skew' ),
              ( ['in', 'out'], POINTER(c_double), 'Grade' ),
              ( ['in', 'out'], POINTER(c_double), 'SuperElev' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetSuperCutSectionProperties',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatPropBase' ),
              ( ['in', 'out'], POINTER(c_double), 'XCG' ),
              ( ['in', 'out'], POINTER(c_double), 'YCG' ),
              ( ['in', 'out'], POINTER(c_double), 'Angle' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_double), 'T2' ),
              ( ['in', 'out'], POINTER(c_double), 'Area' ),
              ( ['in', 'out'], POINTER(c_double), 'As2' ),
              ( ['in', 'out'], POINTER(c_double), 'As3' ),
              ( ['in', 'out'], POINTER(c_double), 'Torsion' ),
              ( ['in', 'out'], POINTER(c_double), 'I22' ),
              ( ['in', 'out'], POINTER(c_double), 'I33' ),
              ( ['in', 'out'], POINTER(c_double), 'I23' ),
              ( ['in', 'out'], POINTER(c_double), 'S22Pos' ),
              ( ['in', 'out'], POINTER(c_double), 'S22Neg' ),
              ( ['in', 'out'], POINTER(c_double), 'S33Pos' ),
              ( ['in', 'out'], POINTER(c_double), 'S33Neg' ),
              ( ['in', 'out'], POINTER(c_double), 'Z22' ),
              ( ['in', 'out'], POINTER(c_double), 'Z33' ),
              ( ['in', 'out'], POINTER(c_double), 'XPna' ),
              ( ['in', 'out'], POINTER(c_double), 'YPna' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetSuperCutSectionPropertiesQuick',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatPropBase' ),
              ( ['in', 'out'], POINTER(c_double), 'XCG' ),
              ( ['in', 'out'], POINTER(c_double), 'YCG' ),
              ( ['in', 'out'], POINTER(c_double), 'Angle' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_double), 'T2' ),
              ( ['in', 'out'], POINTER(c_double), 'Area' ),
              ( ['in', 'out'], POINTER(c_double), 'As2' ),
              ( ['in', 'out'], POINTER(c_double), 'As3' ),
              ( ['in', 'out'], POINTER(c_double), 'I22' ),
              ( ['in', 'out'], POINTER(c_double), 'I33' ),
              ( ['in', 'out'], POINTER(c_double), 'I23' ),
              ( ['in', 'out'], POINTER(c_double), 'S22Pos' ),
              ( ['in', 'out'], POINTER(c_double), 'S22Neg' ),
              ( ['in', 'out'], POINTER(c_double), 'S33Pos' ),
              ( ['in', 'out'], POINTER(c_double), 'S33Neg' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'GetSuperCutStressPoint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'PointIndex' ),
              ( ['in', 'out'], POINTER(c_double), 'X' ),
              ( ['in', 'out'], POINTER(c_double), 'Y' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(BSTR), 'Note' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'GetSuperCutValues',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'GetSpanSegmentSuperCuts',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'SegmentName' ),
              ( ['in', 'out'], POINTER(c_int), 'IndexDownSta' ),
              ( ['in', 'out'], POINTER(c_int), 'IndexUpSta' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'GetSpanSupports_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'Count' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Station' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Skew' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SupportType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Continuity' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SupportLeft' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SupportRight' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17), 'propget'], HRESULT, 'BASConcSlab',
              ( ['out', 'retval'], POINTER(POINTER(cBASConcSlab)), 'pRetVal' )),
    COMMETHOD([dispid(18), 'propget'], HRESULT, 'BASConcSolid',
              ( ['out', 'retval'], POINTER(POINTER(cBASConcSolid)), 'pRetVal' )),
    COMMETHOD([dispid(19), 'propget'], HRESULT, 'BASConcTBeam',
              ( ['out', 'retval'], POINTER(POINTER(cBASConcTBeam)), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'GetGirderPlateSegments',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Span' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_int, 'PlateType' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberSegments' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartWidth' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartThick' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndWidth' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndThick' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Length' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PlateMaterial' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ExtraDataForUGirder' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'GetStiffDefMethodTbl',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'BridgeGirderIndex' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PanelIndex' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Method' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberSets' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PanelLength' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'BridgePanelNumber' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'SetStiffDefMethodTbl',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberItems' ),
              ( ['in'], _midlSAFEARRAY(c_int), 'BridgeGirderIndex' ),
              ( ['in'], _midlSAFEARRAY(c_int), 'PanelIndex' ),
              ( ['in'], _midlSAFEARRAY(BSTR), 'Method' ),
              ( ['in'], _midlSAFEARRAY(c_int), 'NumberSets' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(23)], HRESULT, 'GetStiffUniformTbl',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'BridgeGirderIndex' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PanelIndex' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberStiffeners' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PanelLength' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(24)], HRESULT, 'SetStiffUniformTbl',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberItems' ),
              ( ['in'], _midlSAFEARRAY(c_int), 'BridgeGirderIndex' ),
              ( ['in'], _midlSAFEARRAY(c_int), 'PanelIndex' ),
              ( ['in'], _midlSAFEARRAY(c_int), 'NumberStiffeners' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(25)], HRESULT, 'GetStiffCustomTbl',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'BridgeGirderIndex' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PanelIndex' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'StiffenerIndex' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Spacing' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberSpaces' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PanelLength' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(26)], HRESULT, 'SetStiffCustomTbl',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberItems' ),
              ( ['in'], _midlSAFEARRAY(c_int), 'BridgeGirderIndex' ),
              ( ['in'], _midlSAFEARRAY(c_int), 'PanelIndex' ),
              ( ['in'], _midlSAFEARRAY(c_int), 'StiffenerIndex' ),
              ( ['in'], _midlSAFEARRAY(c_double), 'Spacing' ),
              ( ['in'], _midlSAFEARRAY(c_int), 'NumberSpaces' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBridgeAdvancedSuper implementation
##class cBridgeAdvancedSuper_Impl(object):
##    @property
##    def BASConcBox(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def BASConcBox2(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def BASPrecastComp(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def BASSteelIComp(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def BASSteelUComp(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def CountSuperCut(self, Name):
##        '-no docstring-'
##        #return Count, pRetVal
##
##    def CountSuperCutStressPoint(self, Name, CutIndex):
##        '-no docstring-'
##        #return Count, pRetVal
##
##    def GetSpanData(self, Name, Span, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetSpanSupports(self, Name):
##        '-no docstring-'
##        #return Count, Station, Skew, SupportType, Continuity, pRetVal
##
##    def GetSuperCutLocation(self, Name, CutIndex):
##        '-no docstring-'
##        #return Location, Station, XRefPt, YRefPt, Skew, Grade, SuperElev, pRetVal
##
##    def GetSuperCutSectionProperties(self, Name, CutIndex):
##        '-no docstring-'
##        #return MatPropBase, XCG, YCG, Angle, T3, T2, Area, As2, As3, Torsion, I22, I33, I23, S22Pos, S22Neg, S33Pos, S33Neg, Z22, Z33, XPna, YPna, pRetVal
##
##    def GetSuperCutSectionPropertiesQuick(self, Name, CutIndex):
##        '-no docstring-'
##        #return MatPropBase, XCG, YCG, Angle, T3, T2, Area, As2, As3, I22, I33, I23, S22Pos, S22Neg, S33Pos, S33Neg, pRetVal
##
##    def GetSuperCutStressPoint(self, Name, CutIndex, PointIndex):
##        '-no docstring-'
##        #return X, Y, MatProp, Note, pRetVal
##
##    def GetSuperCutValues(self, Name, CutIndex, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetSpanSegmentSuperCuts(self, Name, SegmentName):
##        '-no docstring-'
##        #return IndexDownSta, IndexUpSta, pRetVal
##
##    def GetSpanSupports_1(self, Name):
##        '-no docstring-'
##        #return Count, Station, Skew, SupportType, Continuity, SupportLeft, SupportRight, pRetVal
##
##    @property
##    def BASConcSlab(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def BASConcSolid(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def BASConcTBeam(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetGirderPlateSegments(self, Name, Span, GirderIndex, PlateType):
##        '-no docstring-'
##        #return NumberSegments, StartWidth, StartThick, EndWidth, EndThick, Length, PlateMaterial, ExtraDataForUGirder, pRetVal
##
##    def GetStiffDefMethodTbl(self, Name):
##        '-no docstring-'
##        #return NumberItems, BridgeGirderIndex, PanelIndex, Method, NumberSets, PanelLength, BridgePanelNumber, pRetVal
##
##    def SetStiffDefMethodTbl(self, Name, NumberItems, BridgeGirderIndex, PanelIndex, Method, NumberSets):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetStiffUniformTbl(self, Name):
##        '-no docstring-'
##        #return NumberItems, BridgeGirderIndex, PanelIndex, NumberStiffeners, PanelLength, pRetVal
##
##    def SetStiffUniformTbl(self, Name, NumberItems, BridgeGirderIndex, PanelIndex, NumberStiffeners):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetStiffCustomTbl(self, Name):
##        '-no docstring-'
##        #return NumberItems, BridgeGirderIndex, PanelIndex, StiffenerIndex, Spacing, NumberSpaces, PanelLength, pRetVal
##
##    def SetStiffCustomTbl(self, Name, NumberItems, BridgeGirderIndex, PanelIndex, StiffenerIndex, Spacing, NumberSpaces):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_CSAS606_SICompServ._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_CSAS606_SICompServ implementation
##class cBDRS_CSAS606_SICompServ_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cFunctionPSD._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetFromFile',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(c_int), 'HeadLines' ),
              ( ['in', 'out'], POINTER(c_int), 'PreChars' ),
              ( ['in', 'out'], POINTER(c_int), 'PointsPerLine' ),
              ( ['in', 'out'], POINTER(c_int), 'ValueType' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'FreeFormat' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberFixed' ),
              ( ['in', 'out'], POINTER(c_int), 'FreqTypeInFile' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetUser',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Frequency' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetFromFile',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'FileName' ),
              ( ['in'], c_int, 'HeadLines' ),
              ( ['in'], c_int, 'PreChars' ),
              ( ['in'], c_int, 'PointsPerLine' ),
              ( ['in'], c_int, 'ValueType' ),
              ( ['in'], VARIANT_BOOL, 'FreeFormat' ),
              ( ['in', 'optional'], c_int, 'NumberFixed', 10 ),
              ( ['in', 'optional'], c_int, 'FreqTypeInFile', 1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetUser',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Frequency' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cFunctionPSD implementation
##class cFunctionPSD_Impl(object):
##    def GetFromFile(self, Name):
##        '-no docstring-'
##        #return FileName, HeadLines, PreChars, PointsPerLine, ValueType, FreeFormat, NumberFixed, FreqTypeInFile, pRetVal
##
##    def GetUser(self, Name):
##        '-no docstring-'
##        #return NumberItems, Frequency, Value, pRetVal
##
##    def SetFromFile(self, Name, FileName, HeadLines, PreChars, PointsPerLine, ValueType, FreeFormat, NumberFixed, FreqTypeInFile):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetUser(self, Name, NumberItems):
##        '-no docstring-'
##        #return Frequency, Value, pRetVal
##

class cBDRS_EUROCODE_ConcSolidStr(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{CDEE0B5E-30DE-4CB8-B47A-FCFD7003AD9F}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_EUROCODE_ConcSolidStr._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_EUROCODE_ConcSolidStr implementation
##class cBDRS_EUROCODE_ConcSolidStr_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cDStAISC360_05_IBC2006(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{AB27DE94-A7D8-4022-8CA9-141B804AF24D}')
    _idlflags_ = ['dual', 'oleautomation']
cDStAISC360_05_IBC2006._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDStAISC360_05_IBC2006 implementation
##class cDStAISC360_05_IBC2006_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBCD_Beam(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{57ABA582-835F-467D-AE30-F976876D6DD8}')
    _idlflags_ = ['dual', 'oleautomation']
cBridgeCrossDiaphragm._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'Add',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'DType' ),
              ( ['in', 'out', 'optional'], POINTER(BSTR), 'ParentDiaphragm', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'Beam',
              ( ['out', 'retval'], POINTER(POINTER(cBCD_Beam)), 'pRetVal' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'Brace',
              ( ['out', 'retval'], POINTER(POINTER(cBCD_Brace)), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetCrossDiaphragmType',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'DType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'optional'], c_int, 'DType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'Solid',
              ( ['out', 'retval'], POINTER(POINTER(cBCD_Solid)), 'pRetVal' )),
]
################################################################
## code template for cBridgeCrossDiaphragm implementation
##class cBridgeCrossDiaphragm_Impl(object):
##    def Add(self, Name, DType):
##        '-no docstring-'
##        #return ParentDiaphragm, pRetVal
##
##    @property
##    def Beam(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Brace(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetCrossDiaphragmType(self, Name, DType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetNameList(self, DType):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    @property
##    def Solid(self):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_IRC2010_SteelICompStrength._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_IRC2010_SteelICompStrength implementation
##class cBDRS_IRC2010_SteelICompStrength_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_AA_L_07_CTBeamFlexRt._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_CTBeamFlexRt implementation
##class cBDRS_AA_L_07_CTBeamFlexRt_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_CANCSAS606_PCCompStr._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_CANCSAS606_PCCompStr implementation
##class cBDRS_CANCSAS606_PCCompStr_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBDRS_BS5400_SICompCnstr(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{BFF8B698-75A0-4CB4-A83D-C285458FE649}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_BS5400_SICompCnstr._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_BS5400_SICompCnstr implementation
##class cBDRS_BS5400_SICompCnstr_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cFunctionSS._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetFromFile',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(c_int), 'HeadLines' ),
              ( ['in', 'out'], POINTER(c_int), 'PreChars' ),
              ( ['in', 'out'], POINTER(c_int), 'PointsPerLine' ),
              ( ['in', 'out'], POINTER(c_int), 'ValueType' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'FreeFormat' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberFixed' ),
              ( ['in', 'out'], POINTER(c_int), 'FreqTypeInFile' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetUser',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Frequency' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetFromFile',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'FileName' ),
              ( ['in'], c_int, 'HeadLines' ),
              ( ['in'], c_int, 'PreChars' ),
              ( ['in'], c_int, 'PointsPerLine' ),
              ( ['in'], c_int, 'ValueType' ),
              ( ['in'], VARIANT_BOOL, 'FreeFormat' ),
              ( ['in', 'optional'], c_int, 'NumberFixed', 10 ),
              ( ['in', 'optional'], c_int, 'FreqTypeInFile', 1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetUser',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Frequency' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cFunctionSS implementation
##class cFunctionSS_Impl(object):
##    def GetFromFile(self, Name):
##        '-no docstring-'
##        #return FileName, HeadLines, PreChars, PointsPerLine, ValueType, FreeFormat, NumberFixed, FreqTypeInFile, pRetVal
##
##    def GetUser(self, Name):
##        '-no docstring-'
##        #return NumberItems, Frequency, Value, pRetVal
##
##    def SetFromFile(self, Name, FileName, HeadLines, PreChars, PointsPerLine, ValueType, FreeFormat, NumberFixed, FreqTypeInFile):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetUser(self, Name, NumberItems):
##        '-no docstring-'
##        #return Frequency, Value, pRetVal
##


# values for enumeration 'eLoadPatternType'
eLoadPatternType_Dead = 1
eLoadPatternType_SuperDead = 2
eLoadPatternType_Live = 3
eLoadPatternType_ReduceLive = 4
eLoadPatternType_Quake = 5
eLoadPatternType_Wind = 6
eLoadPatternType_Snow = 7
eLoadPatternType_Other = 8
eLoadPatternType_Move = 9
eLoadPatternType_Temperature = 10
eLoadPatternType_Rooflive = 11
eLoadPatternType_Notional = 12
eLoadPatternType_PatternLive = 13
eLoadPatternType_Wave = 14
eLoadPatternType_Braking = 15
eLoadPatternType_Centrifugal = 16
eLoadPatternType_Friction = 17
eLoadPatternType_Ice = 18
eLoadPatternType_WindOnLiveLoad = 19
eLoadPatternType_HorizontalEarthPressure = 20
eLoadPatternType_VerticalEarthPressure = 21
eLoadPatternType_EarthSurcharge = 22
eLoadPatternType_DownDrag = 23
eLoadPatternType_VehicleCollision = 24
eLoadPatternType_VesselCollision = 25
eLoadPatternType_TemperatureGradient = 26
eLoadPatternType_Settlement = 27
eLoadPatternType_Shrinkage = 28
eLoadPatternType_Creep = 29
eLoadPatternType_WaterloadPressure = 30
eLoadPatternType_LiveLoadSurcharge = 31
eLoadPatternType_LockedInForces = 32
eLoadPatternType_PedestrianLL = 33
eLoadPatternType_Prestress = 34
eLoadPatternType_Hyperstatic = 35
eLoadPatternType_Bouyancy = 36
eLoadPatternType_StreamFlow = 37
eLoadPatternType_Impact = 38
eLoadPatternType_Construction = 39
eLoadPatternType_DeadWearing = 40
eLoadPatternType_DeadWater = 41
eLoadPatternType_DeadManufacture = 42
eLoadPatternType_EarthHydrostatic = 43
eLoadPatternType_PassiveEarthPressure = 44
eLoadPatternType_ActiveEarthPressure = 45
eLoadPatternType_PedestrianLLReduced = 46
eLoadPatternType_SnowHighAltitude = 47
eLoadPatternType_EuroLm1Char = 48
eLoadPatternType_EuroLm1Freq = 49
eLoadPatternType_EuroLm2 = 50
eLoadPatternType_EuroLm3 = 51
eLoadPatternType_EuroLm4 = 52
eLoadPatternType_SeaState = 53
eLoadPatternType_Permit = 54
eLoadPatternType_MoveFatigue = 55
eLoadPatternType_MoveFatiguePermit = 56
eLoadPatternType_MoveDeflection = 57
eLoadPatternType = c_int # enum
class cAutoWindBridge(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{83890188-812D-45BF-B1B3-8C9F05A90DF0}')
    _idlflags_ = ['dual', 'oleautomation']
cLoadPatterns._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'Add',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eLoadPatternType, 'MyType' ),
              ( ['in', 'optional'], c_double, 'SelfWTMultiplier', 0.0 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'AddAnalysisCase', True ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'AutoSeismic',
              ( ['out', 'retval'], POINTER(POINTER(cAutoSeismic)), 'pRetVal' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'AutoWind',
              ( ['out', 'retval'], POINTER(POINTER(cAutoWind)), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetAutoSeismicCode',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'CodeName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetAutoWindCode',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'CodeName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetLoadType',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(eLoadPatternType), 'MyType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetSelfWTMultiplier',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'SelfWTMultiplier' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'SetLoadType',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eLoadPatternType, 'MyType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'SetSelfWTMultiplier',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'SelfWTMultiplier' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15), 'propget'], HRESULT, 'AutoSeastate',
              ( ['out', 'retval'], POINTER(POINTER(cAutoSeastate)), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'GetAutoWaveCode',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'CodeName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16), 'propget'], HRESULT, 'AutoWindBridge',
              ( ['out', 'retval'], POINTER(POINTER(cAutoWindBridge)), 'pRetVal' )),
]
################################################################
## code template for cLoadPatterns implementation
##class cLoadPatterns_Impl(object):
##    def Add(self, Name, MyType, SelfWTMultiplier, AddAnalysisCase):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def AutoSeismic(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def AutoWind(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetAutoSeismicCode(self, Name):
##        '-no docstring-'
##        #return CodeName, pRetVal
##
##    def GetAutoWindCode(self, Name):
##        '-no docstring-'
##        #return CodeName, pRetVal
##
##    def GetLoadType(self, Name):
##        '-no docstring-'
##        #return MyType, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetSelfWTMultiplier(self, Name):
##        '-no docstring-'
##        #return SelfWTMultiplier, pRetVal
##
##    def SetLoadType(self, Name, MyType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSelfWTMultiplier(self, Name, SelfWTMultiplier):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def AutoSeastate(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetAutoWaveCode(self, Name):
##        '-no docstring-'
##        #return CodeName, pRetVal
##
##    @property
##    def AutoWindBridge(self):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_AA_S_02_CBoxStress._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetDemandParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], BSTR, 'DemandName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetDemandParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], BSTR, 'DemandName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_S_02_CBoxStress implementation
##class cBDRS_AA_S_02_CBoxStress_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetDemandParam(self, RequestName, DemandName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDemandParam(self, RequestName, DemandName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cHelper._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'CreateObject',
              ( ['in'], BSTR, 'fullPath' ),
              ( ['out', 'retval'], POINTER(POINTER(cOAPI)), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetObject',
              ( ['in'], BSTR, 'typeName' ),
              ( ['out', 'retval'], POINTER(POINTER(cOAPI)), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'CreateObjectProgID',
              ( ['in'], BSTR, 'progID' ),
              ( ['out', 'retval'], POINTER(POINTER(cOAPI)), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetOAPIVersionNumber',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'CreateObjectHost',
              ( ['in'], BSTR, 'hostName' ),
              ( ['in'], BSTR, 'fullPath' ),
              ( ['out', 'retval'], POINTER(POINTER(cOAPI)), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'CreateObjectHostPort',
              ( ['in'], BSTR, 'hostName' ),
              ( ['in'], c_int, 'portNumber' ),
              ( ['in'], BSTR, 'fullPath' ),
              ( ['out', 'retval'], POINTER(POINTER(cOAPI)), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'CreateObjectProgIDHost',
              ( ['in'], BSTR, 'hostName' ),
              ( ['in'], BSTR, 'progID' ),
              ( ['out', 'retval'], POINTER(POINTER(cOAPI)), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'CreateObjectProgIDHostPort',
              ( ['in'], BSTR, 'hostName' ),
              ( ['in'], c_int, 'portNumber' ),
              ( ['in'], BSTR, 'progID' ),
              ( ['out', 'retval'], POINTER(POINTER(cOAPI)), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetObjectHost',
              ( ['in'], BSTR, 'hostName' ),
              ( ['in'], BSTR, 'progID' ),
              ( ['out', 'retval'], POINTER(POINTER(cOAPI)), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetObjectHostPort',
              ( ['in'], BSTR, 'hostName' ),
              ( ['in'], c_int, 'portNumber' ),
              ( ['in'], BSTR, 'progID' ),
              ( ['out', 'retval'], POINTER(POINTER(cOAPI)), 'pRetVal' )),
]
################################################################
## code template for cHelper implementation
##class cHelper_Impl(object):
##    def CreateObject(self, fullPath):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetObject(self, typeName):
##        '-no docstring-'
##        #return pRetVal
##
##    def CreateObjectProgID(self, progID):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetOAPIVersionNumber(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def CreateObjectHost(self, hostName, fullPath):
##        '-no docstring-'
##        #return pRetVal
##
##    def CreateObjectHostPort(self, hostName, portNumber, fullPath):
##        '-no docstring-'
##        #return pRetVal
##
##    def CreateObjectProgIDHost(self, hostName, progID):
##        '-no docstring-'
##        #return pRetVal
##
##    def CreateObjectProgIDHostPort(self, hostName, portNumber, progID):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetObjectHost(self, hostName, progID):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetObjectHostPort(self, hostName, portNumber, progID):
##        '-no docstring-'
##        #return pRetVal
##

cGenDispl._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'Add',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'MyType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'CountPoint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'Count' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'DeletePoint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'PointName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetPoint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetTypeOAPI',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'MyType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'SetPoint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'PointName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'SetType',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'MyType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'SetTypeOAPI',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'MyType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetTypeGenDispl',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'MyType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cGenDispl implementation
##class cGenDispl_Impl(object):
##    def Add(self, Name, MyType):
##        '-no docstring-'
##        #return pRetVal
##
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def CountPoint(self, Name):
##        '-no docstring-'
##        #return Count, pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeletePoint(self, Name, PointName):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetPoint(self, Name):
##        '-no docstring-'
##        #return NumberItems, PointName, U1, U2, U3, R1, R2, R3, pRetVal
##
##    def GetTypeOAPI(self, Name):
##        '-no docstring-'
##        #return MyType, pRetVal
##
##    def SetPoint(self, Name, PointName):
##        '-no docstring-'
##        #return SF, pRetVal
##
##    def SetType(self, Name, MyType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetTypeOAPI(self, Name, MyType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetTypeGenDispl(self, Name):
##        '-no docstring-'
##        #return MyType, pRetVal
##

class cDStSP16_13330_2011(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{E6554720-71E8-4BCB-851E-3130F0417FAA}')
    _idlflags_ = ['dual', 'oleautomation']
cDStSP16_13330_2011._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDStSP16_13330_2011 implementation
##class cDStSP16_13330_2011_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBDRS_EUROCODE_SteelUCompService(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{BC60CBB0-738E-468D-8146-999AB625680A}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_EUROCODE_SteelUCompService._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_EUROCODE_SteelUCompService implementation
##class cBDRS_EUROCODE_SteelUCompService_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_IRC2010_SteelUCompConstructibility._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_IRC2010_SteelUCompConstructibility implementation
##class cBDRS_IRC2010_SteelUCompConstructibility_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cDStAISC_ASD89(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{2EA8FC58-BD9E-4673-9925-05E3AD43408D}')
    _idlflags_ = ['dual', 'oleautomation']
cDStAISC_ASD89._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDStAISC_ASD89 implementation
##class cDStAISC_ASD89_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cDCoAS_3600_09(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{CC83A723-77E9-4381-B973-4C1845DA3A37}')
    _idlflags_ = ['dual', 'oleautomation']
cDCoAS_3600_09._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDCoAS_3600_09 implementation
##class cDCoAS_3600_09_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBridgeSection._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'Add',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'SectionType' ),
              ( ['in', 'out', 'optional'], POINTER(BSTR), 'parentSection', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'optional'], c_int, 'SectionType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetSectionType',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'SectionType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'SteelGirderI',
              ( ['out', 'retval'], POINTER(POINTER(cBS_SteelGirderI)), 'pRetVal' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'SteelGirderU',
              ( ['out', 'retval'], POINTER(POINTER(cBS_SteelGirderU)), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'Validate',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IsValid' ),
              ( ['in', 'out'], POINTER(BSTR), 'ErrorMsg' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBridgeSection implementation
##class cBridgeSection_Impl(object):
##    def Add(self, Name, SectionType):
##        '-no docstring-'
##        #return parentSection, pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetNameList(self, SectionType):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetSectionType(self, Name):
##        '-no docstring-'
##        #return SectionType, pRetVal
##
##    @property
##    def SteelGirderI(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelGirderU(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def Validate(self, Name):
##        '-no docstring-'
##        #return IsValid, ErrorMsg, pRetVal
##

class cDCoBS8110_97(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{D63E5D83-4EE4-44BB-ACEB-BA7F7F4C5AE0}')
    _idlflags_ = ['dual', 'oleautomation']
cDCoBS8110_97._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDCoBS8110_97 implementation
##class cDCoBS8110_97_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBridgeGroup._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetNameList',
              ( ['in'], BSTR, 'BridgeObj' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBridgeGroup implementation
##class cBridgeGroup_Impl(object):
##    def GetNameList(self, BridgeObj):
##        '-no docstring-'
##        #return NumberNames, MyName, MyType, pRetVal
##

cBDRS_CSAS606_SICompStr._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_CSAS606_SICompStr implementation
##class cBDRS_CSAS606_SICompStr_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_AA_L_07_CTBeamMinBarRt._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_CTBeamMinBarRt implementation
##class cBDRS_AA_L_07_CTBeamMinBarRt_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBDRS_EUROCODE_ConcSolidCrack(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{A19982D9-018B-4F6C-85BB-45C343053A5A}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_EUROCODE_ConcSolidCrack._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_EUROCODE_ConcSolidCrack implementation
##class cBDRS_EUROCODE_ConcSolidCrack_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBDRS_BS5400_SICompCnstNS(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{87C6861B-BEB7-46B7-A29D-4493778E8E53}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_BS5400_SICompCnstNS._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetDemandParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], BSTR, 'DemandName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetDemandParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], BSTR, 'DemandName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_BS5400_SICompCnstNS implementation
##class cBDRS_BS5400_SICompCnstNS_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetDemandParam(self, RequestName, DemandName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDemandParam(self, RequestName, DemandName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cCaseStaticLinearMultistep(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{FEE328F1-4EDC-4B6B-8A8D-A46A293D5333}')
    _idlflags_ = ['dual', 'oleautomation']
cCaseStaticLinearMultistep._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetInitialCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'InitialCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetLoads',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetLoads_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'StepRange' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'FirstLoadStep' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LastLoadStep' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'StartCaseStep' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ExtrapolateOption' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetInitialCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'InitialCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'SetLoads',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'SetLoads_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'StepRange' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'FirstLoadStep' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LastLoadStep' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'StartCaseStep' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ExtrapolateOption' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cCaseStaticLinearMultistep implementation
##class cCaseStaticLinearMultistep_Impl(object):
##    def GetInitialCase(self, Name):
##        '-no docstring-'
##        #return InitialCase, pRetVal
##
##    def GetLoads(self, Name):
##        '-no docstring-'
##        #return NumberLoads, LoadType, LoadName, SF, pRetVal
##
##    def GetLoads_1(self, Name):
##        '-no docstring-'
##        #return NumberLoads, LoadType, LoadName, SF, StepRange, FirstLoadStep, LastLoadStep, StartCaseStep, ExtrapolateOption, pRetVal
##
##    def SetCase(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetInitialCase(self, Name, InitialCase):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoads(self, Name, NumberLoads):
##        '-no docstring-'
##        #return LoadType, LoadName, SF, pRetVal
##
##    def SetLoads_1(self, Name, NumberLoads):
##        '-no docstring-'
##        #return LoadType, LoadName, SF, StepRange, FirstLoadStep, LastLoadStep, StartCaseStep, ExtrapolateOption, pRetVal
##

class cCaseBuckling(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{E09F8FA5-C4A0-4B14-B908-0E5F41BAECF9}')
    _idlflags_ = ['dual', 'oleautomation']
cCaseBuckling._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetInitialCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'InitialCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetLoads',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetParameters',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumBucklingModes' ),
              ( ['in', 'out'], POINTER(c_double), 'EigenTol' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'SetInitialCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'InitialCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'SetLoads',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'SetParameters',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumBucklingModes' ),
              ( ['in'], c_double, 'EigenTol' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cCaseBuckling implementation
##class cCaseBuckling_Impl(object):
##    def GetInitialCase(self, Name):
##        '-no docstring-'
##        #return InitialCase, pRetVal
##
##    def GetLoads(self, Name):
##        '-no docstring-'
##        #return NumberLoads, LoadType, LoadName, SF, pRetVal
##
##    def GetParameters(self, Name):
##        '-no docstring-'
##        #return NumBucklingModes, EigenTol, pRetVal
##
##    def SetCase(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetInitialCase(self, Name, InitialCase):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoads(self, Name, NumberLoads):
##        '-no docstring-'
##        #return LoadType, LoadName, SF, pRetVal
##
##    def SetParameters(self, Name, NumBucklingModes, EigenTol):
##        '-no docstring-'
##        #return pRetVal
##

cModifierCable._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetModifiers',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'SetModifiers',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cModifierCable implementation
##class cModifierCable_Impl(object):
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetModifiers(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def SetModifiers(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##

class cBDRS_EUROCODE_SteelUCompUltimate(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{39759E47-28EC-4622-A4D0-887763ADA8D3}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_EUROCODE_SteelUCompUltimate._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_EUROCODE_SteelUCompUltimate implementation
##class cBDRS_EUROCODE_SteelUCompUltimate_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##


# values for enumeration 'eBridgeObjectBentPart'
eBridgeObjectBentPart_CapBeam = 1
eBridgeObjectBentPart_Column = 2
eBridgeObjectBentPart_Bearing = 3
eBridgeObjectBentPart_Wall = 4
eBridgeObjectBentPart = c_int # enum
class cDStAISC360_16(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{D4AA3043-D1E6-4864-804E-97D5C1865218}')
    _idlflags_ = ['dual', 'oleautomation']
class cDStAISC_LRFD93(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{B6EF3EB2-8D9E-4C31-8A09-E9BBFA61D47A}')
    _idlflags_ = ['dual', 'oleautomation']
class cDStAustralian_AS4100_98(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{99D7F636-8B6A-4CAF-A27B-48F16750029F}')
    _idlflags_ = ['dual', 'oleautomation']
class cDStBS5950_2000(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{D705F194-49FD-47FA-B710-94589ED37927}')
    _idlflags_ = ['dual', 'oleautomation']
cDesignSteel._methods_ = [
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'AISC360_05_IBC2006',
              ( ['out', 'retval'], POINTER(POINTER(cDStAISC360_05_IBC2006)), 'pRetVal' )),
    COMMETHOD([dispid(13), 'propget'], HRESULT, 'Canadian_S16_09',
              ( ['out', 'retval'], POINTER(POINTER(cDStCanadian_S16_09)), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'DeleteResults',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19), 'propget'], HRESULT, 'Eurocode_3_2005',
              ( ['out', 'retval'], POINTER(POINTER(cDStEurocode_3_2005)), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'GetCode',
              ( ['in', 'out'], POINTER(BSTR), 'CodeName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'GetComboDeflection',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'GetComboStrength',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(23)], HRESULT, 'GetDesignSection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(24)], HRESULT, 'GetGroup',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(65)], HRESULT, 'GetResultsAvailable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(25)], HRESULT, 'GetSummaryResults',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ratio' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'RatioType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Location' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ComboName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ErrorSummary' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'WarningSummary' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(26)], HRESULT, 'GetTargetDispl',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Point' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Displ' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Active' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(27)], HRESULT, 'GetTargetPeriod',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(BSTR), 'ModalCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Mode' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Period' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Active' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(33)], HRESULT, 'ResetOverwrites',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(34)], HRESULT, 'SetAutoSelectNull',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(35)], HRESULT, 'SetCode',
              ( ['in'], BSTR, 'CodeName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(36)], HRESULT, 'SetComboDeflection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'Selected' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(37)], HRESULT, 'SetComboStrength',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'Selected' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(38)], HRESULT, 'SetDesignSection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'PropName' ),
              ( ['in'], VARIANT_BOOL, 'LastAnalysis' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(39)], HRESULT, 'SetGroup',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'Selected' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(40)], HRESULT, 'SetTargetDispl',
              ( ['in'], c_int, 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Point' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Displ' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Active', True ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(41)], HRESULT, 'SetTargetPeriod',
              ( ['in'], c_int, 'NumberItems' ),
              ( ['in'], BSTR, 'ModalCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Mode' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Period' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Active', True ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(42)], HRESULT, 'StartDesign',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(45)], HRESULT, 'VerifyPassed',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(c_int), 'N1' ),
              ( ['in', 'out'], POINTER(c_int), 'N2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(46)], HRESULT, 'VerifySections',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(68), 'propget'], HRESULT, 'SP16_13330_2011',
              ( ['out', 'retval'], POINTER(POINTER(cDStSP16_13330_2011)), 'pRetVal' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'AISC_ASD89',
              ( ['out', 'retval'], POINTER(POINTER(cDStAISC_ASD89)), 'pRetVal' )),
    COMMETHOD([dispid(63)], HRESULT, 'GetComboAutoGenerate',
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'AutoGenerate' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(54)], HRESULT, 'GetDetailResultsText',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemType, 'ItemType' ),
              ( ['in'], c_int, 'Table' ),
              ( ['in'], BSTR, 'Field' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Text' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(55)], HRESULT, 'GetDetailResultsValue',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemType, 'ItemType' ),
              ( ['in'], c_int, 'Table' ),
              ( ['in'], BSTR, 'Field' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(48), 'propget'], HRESULT, 'AISC360_10',
              ( ['out', 'retval'], POINTER(POINTER(cDStAISC360_10)), 'pRetVal' )),
    COMMETHOD([dispid(64)], HRESULT, 'SetComboAutoGenerate',
              ( ['in'], VARIANT_BOOL, 'AutoGenerate' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(67), 'propget'], HRESULT, 'AISC360_16',
              ( ['out', 'retval'], POINTER(POINTER(cDStAISC360_16)), 'pRetVal' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'AISC_LRFD93',
              ( ['out', 'retval'], POINTER(POINTER(cDStAISC_LRFD93)), 'pRetVal' )),
    COMMETHOD([dispid(9), 'propget'], HRESULT, 'Australian_AS4100_98',
              ( ['out', 'retval'], POINTER(POINTER(cDStAustralian_AS4100_98)), 'pRetVal' )),
    COMMETHOD([dispid(10), 'propget'], HRESULT, 'BS5950_2000',
              ( ['out', 'retval'], POINTER(POINTER(cDStBS5950_2000)), 'pRetVal' )),
    COMMETHOD([dispid(15), 'propget'], HRESULT, 'Chinese_2010',
              ( ['out', 'retval'], POINTER(POINTER(cDStChinese_2010)), 'pRetVal' )),
    COMMETHOD([dispid(70), 'propget'], HRESULT, 'Chinese_2018',
              ( ['out', 'retval'], POINTER(POINTER(cDStChinese_2018)), 'pRetVal' )),
    COMMETHOD([dispid(29), 'propget'], HRESULT, 'Indian_IS_800_2007',
              ( ['out', 'retval'], POINTER(POINTER(cDStIndian_IS_800_2007)), 'pRetVal' )),
    COMMETHOD([dispid(31), 'propget'], HRESULT, 'NewZealand_NZS3404_97',
              ( ['out', 'retval'], POINTER(POINTER(cDStNewZealand_NZS3404_97)), 'pRetVal' )),
    COMMETHOD([dispid(60), 'propget'], HRESULT, 'Italian_NTC_2008',
              ( ['out', 'retval'], POINTER(POINTER(cDStItalianNTC2008S)), 'pRetVal' )),
    COMMETHOD([dispid(69), 'propget'], HRESULT, 'Italian_NTC_2018',
              ( ['out', 'retval'], POINTER(POINTER(cDStItalianNTC2018S)), 'pRetVal' )),
    COMMETHOD([dispid(47)], HRESULT, 'GetSummaryResults_2',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'DesignSect' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Status' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PMMCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PMMRatio' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PRatio' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MMajRatio' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MMinRatio' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'VMajCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VMajRatio' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'VMinCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VMinRatio' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'API_RP2A_LRFD97',
              ( ['out', 'retval'], POINTER(POINTER(cDStAPI_RP2A_LRFD97)), 'pRetVal' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'API_RP2A_WSD2000',
              ( ['out', 'retval'], POINTER(POINTER(cDStAPI_RP2A_WSD2000)), 'pRetVal' )),
    COMMETHOD([dispid(66), 'propget'], HRESULT, 'API_RP2A_WSD2014',
              ( ['out', 'retval'], POINTER(POINTER(cDStAPI_RP2A_WSD2014)), 'pRetVal' )),
    COMMETHOD([dispid(8), 'propget'], HRESULT, 'ASCE_10_97',
              ( ['out', 'retval'], POINTER(POINTER(cDStASCE_10_97)), 'pRetVal' )),
    COMMETHOD([dispid(14), 'propget'], HRESULT, 'Chinese_2002',
              ( ['out', 'retval'], POINTER(POINTER(cDStChinese_2002)), 'pRetVal' )),
    COMMETHOD([dispid(62), 'propget'], HRESULT, 'Norsok_N0042013',
              ( ['out', 'retval'], POINTER(POINTER(cDStNorsok_N0042013)), 'pRetVal' )),
]
################################################################
## code template for cDesignSteel implementation
##class cDesignSteel_Impl(object):
##    @property
##    def AISC360_05_IBC2006(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Canadian_S16_09(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteResults(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Eurocode_3_2005(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetCode(self):
##        '-no docstring-'
##        #return CodeName, pRetVal
##
##    def GetComboDeflection(self):
##        '-no docstring-'
##        #return NumberItems, MyName, pRetVal
##
##    def GetComboStrength(self):
##        '-no docstring-'
##        #return NumberItems, MyName, pRetVal
##
##    def GetDesignSection(self, Name):
##        '-no docstring-'
##        #return PropName, pRetVal
##
##    def GetGroup(self):
##        '-no docstring-'
##        #return NumberItems, MyName, pRetVal
##
##    def GetResultsAvailable(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetSummaryResults(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, FrameName, Ratio, RatioType, Location, ComboName, ErrorSummary, WarningSummary, pRetVal
##
##    def GetTargetDispl(self):
##        '-no docstring-'
##        #return NumberItems, LoadCase, Point, Displ, Active, pRetVal
##
##    def GetTargetPeriod(self):
##        '-no docstring-'
##        #return NumberItems, ModalCase, Mode, Period, Active, pRetVal
##
##    def ResetOverwrites(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetAutoSelectNull(self, Name, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCode(self, CodeName):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetComboDeflection(self, Name, Selected):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetComboStrength(self, Name, Selected):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDesignSection(self, Name, PropName, LastAnalysis, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetGroup(self, Name, Selected):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetTargetDispl(self, NumberItems, Active):
##        '-no docstring-'
##        #return LoadCase, Point, Displ, pRetVal
##
##    def SetTargetPeriod(self, NumberItems, ModalCase, Active):
##        '-no docstring-'
##        #return Mode, Period, pRetVal
##
##    def StartDesign(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def VerifyPassed(self):
##        '-no docstring-'
##        #return NumberItems, N1, N2, MyName, pRetVal
##
##    def VerifySections(self):
##        '-no docstring-'
##        #return NumberItems, MyName, pRetVal
##
##    @property
##    def SP16_13330_2011(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def AISC_ASD89(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetComboAutoGenerate(self):
##        '-no docstring-'
##        #return AutoGenerate, pRetVal
##
##    def GetDetailResultsText(self, Name, ItemType, Table, Field):
##        '-no docstring-'
##        #return NumberItems, FrameName, Text, pRetVal
##
##    def GetDetailResultsValue(self, Name, ItemType, Table, Field):
##        '-no docstring-'
##        #return NumberItems, FrameName, Value, pRetVal
##
##    @property
##    def AISC360_10(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetComboAutoGenerate(self, AutoGenerate):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def AISC360_16(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def AISC_LRFD93(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Australian_AS4100_98(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def BS5950_2000(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Chinese_2010(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Chinese_2018(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Indian_IS_800_2007(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def NewZealand_NZS3404_97(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Italian_NTC_2008(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Italian_NTC_2018(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetSummaryResults_2(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, FrameType, DesignSect, Status, PMMCombo, PMMRatio, PRatio, MMajRatio, MMinRatio, VMajCombo, VMajRatio, VMinCombo, VMinRatio, pRetVal
##
##    @property
##    def API_RP2A_LRFD97(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def API_RP2A_WSD2000(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def API_RP2A_WSD2014(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ASCE_10_97(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Chinese_2002(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Norsok_N0042013(self):
##        '-no docstring-'
##        #return pRetVal
##

cBASSteelUComp._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'CountSuperCutStressPointGirder',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_int, 'GirderPart' ),
              ( ['in', 'out'], POINTER(c_int), 'CountPoint' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetCrossDiaphragms',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in', 'out'], POINTER(c_int), 'Count' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SpanNumber' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GirderDist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Side' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Skew' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'DiaphProperty' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetGirderDistance',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in', 'out'], POINTER(c_int), 'Span' ),
              ( ['in', 'out'], POINTER(c_double), 'GirderDistance' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetGirderLength',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in', 'out'], POINTER(c_int), 'SpanCount' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Length' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetSlabStatusAtGirder',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], BSTR, 'LoadCase' ),
              ( ['in'], c_double, 'StepNum' ),
              ( ['in', 'out'], POINTER(c_int), 'Status' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetSpanGirderNames',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Span' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetSuperCutGirderNames',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'sname' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetSuperCutGirderRebarLong',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'Mat' ),
              ( ['in', 'out'], POINTER(c_int), 'RebarCount' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RebarX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RebarY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'DType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'RebarSize' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberBars' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetSuperCutGirderValues',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetSuperCutSectionValues',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetSuperCutStressPointGirder',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_int, 'GirderPart' ),
              ( ['in'], c_int, 'PointIndex' ),
              ( ['in', 'out'], POINTER(c_double), 'X' ),
              ( ['in', 'out'], POINTER(c_double), 'Y' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_int), 'Location' ),
              ( ['in', 'out'], POINTER(BSTR), 'Note' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetTopFlangeInfo',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'GetSuperCutGirderRebarLong_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'Mat' ),
              ( ['in', 'out'], POINTER(c_int), 'RebarCount' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RebarX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RebarY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'DType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'RebarSize' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AreaFactor' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBASSteelUComp implementation
##class cBASSteelUComp_Impl(object):
##    def CountSuperCutStressPointGirder(self, Name, CutIndex, GirderIndex, GirderPart):
##        '-no docstring-'
##        #return CountPoint, pRetVal
##
##    def GetCrossDiaphragms(self, Name, GirderIndex):
##        '-no docstring-'
##        #return Count, SpanNumber, GirderDist, Side, Skew, DiaphProperty, pRetVal
##
##    def GetGirderDistance(self, Name, CutIndex, GirderIndex):
##        '-no docstring-'
##        #return Span, GirderDistance, pRetVal
##
##    def GetGirderLength(self, Name, GirderIndex):
##        '-no docstring-'
##        #return SpanCount, Length, pRetVal
##
##    def GetSlabStatusAtGirder(self, Name, CutIndex, GirderIndex, LoadCase, StepNum):
##        '-no docstring-'
##        #return Status, pRetVal
##
##    def GetSpanGirderNames(self, Name, Span, GirderIndex, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetSuperCutGirderNames(self, Name, CutIndex, GirderIndex, Item):
##        '-no docstring-'
##        #return sname, pRetVal
##
##    def GetSuperCutGirderRebarLong(self, Name, CutIndex, GirderIndex):
##        '-no docstring-'
##        #return Mat, RebarCount, RebarX, RebarY, DType, RebarSize, NumberBars, pRetVal
##
##    def GetSuperCutGirderValues(self, Name, CutIndex, GirderIndex, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetSuperCutSectionValues(self, Name, CutIndex, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetSuperCutStressPointGirder(self, Name, CutIndex, GirderIndex, GirderPart, PointIndex):
##        '-no docstring-'
##        #return X, Y, MatProp, Location, Note, pRetVal
##
##    def GetTopFlangeInfo(self, Name, CutIndex, GirderIndex, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetSuperCutGirderRebarLong_1(self, Name, CutIndex, GirderIndex):
##        '-no docstring-'
##        #return Mat, RebarCount, RebarX, RebarY, DType, RebarSize, NumberBars, AreaFactor, pRetVal
##

cBDRS_IRC2010_SteelUCompConstructibilityNonStgd._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetDemandParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], BSTR, 'DemandName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetDemandParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], BSTR, 'DemandName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_IRC2010_SteelUCompConstructibilityNonStgd implementation
##class cBDRS_IRC2010_SteelUCompConstructibilityNonStgd_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetDemandParam(self, RequestName, DemandName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDemandParam(self, RequestName, DemandName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_CANCSA_S6_06_SteelUCompConstructibility._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_CANCSA_S6_06_SteelUCompConstructibility implementation
##class cBDRS_CANCSA_S6_06_SteelUCompConstructibility_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cModifierArea._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetModifiers',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'SetModifiers',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cModifierArea implementation
##class cModifierArea_Impl(object):
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetModifiers(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def SetModifiers(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##

class cBDRS_RussianSNiP_PCCompStress(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{AEF197C8-3199-43CC-B062-CEFB823FE28B}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_RussianSNiP_PCCompStress._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_RussianSNiP_PCCompStress implementation
##class cBDRS_RussianSNiP_PCCompStress_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_IRC2011_PCCompStr._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_IRC2011_PCCompStr implementation
##class cBDRS_IRC2011_PCCompStr_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_CJ_D62_04_CBoxCrkPrin._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetDemandParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], BSTR, 'DemandName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetDemandParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], BSTR, 'DemandName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_CJ_D62_04_CBoxCrkPrin implementation
##class cBDRS_CJ_D62_04_CBoxCrkPrin_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetDemandParam(self, RequestName, DemandName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDemandParam(self, RequestName, DemandName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_IRC2011_ConcTBeamShr._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], BSTR, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_IRC2011_ConcTBeamShr implementation
##class cBDRS_IRC2011_ConcTBeamShr_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetCapacityParamString(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCapacityParamString(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cCaseModalRitz(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{D87EC8DF-1E6C-40AB-B0AE-6F2CBFD5F18C}')
    _idlflags_ = ['dual', 'oleautomation']
cCaseModalRitz._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetInitialCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'InitialCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetLoads',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'RitzMaxCyc' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TargetPar' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetNumberModes',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'MaxModes' ),
              ( ['in', 'out'], POINTER(c_int), 'MinModes' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'SetInitialCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'InitialCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'SetLoads',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'RitzMaxCyc' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TargetPar' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'SetNumberModes',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'MaxModes' ),
              ( ['in'], c_int, 'MinModes' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cCaseModalRitz implementation
##class cCaseModalRitz_Impl(object):
##    def GetInitialCase(self, Name):
##        '-no docstring-'
##        #return InitialCase, pRetVal
##
##    def GetLoads(self, Name):
##        '-no docstring-'
##        #return NumberLoads, LoadType, LoadName, RitzMaxCyc, TargetPar, pRetVal
##
##    def GetNumberModes(self, Name):
##        '-no docstring-'
##        #return MaxModes, MinModes, pRetVal
##
##    def SetCase(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetInitialCase(self, Name, InitialCase):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoads(self, Name, NumberLoads):
##        '-no docstring-'
##        #return LoadType, LoadName, RitzMaxCyc, TargetPar, pRetVal
##
##    def SetNumberModes(self, Name, MaxModes, MinModes):
##        '-no docstring-'
##        #return pRetVal
##

class cCaseMovingLoad(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{090700ED-4CFC-487A-A759-AA3E326BA130}')
    _idlflags_ = ['dual', 'oleautomation']
cCaseMovingLoad._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetInitialCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'InitialCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetLanesLoaded',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'LoadNumber' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetLoads',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'VehClass' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Min' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Max' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetMultiLaneSF',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'SetCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'SetInitialCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'InitialCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'SetLanesLoaded',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'LoadNumber' ),
              ( ['in'], c_int, 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'SetLoads',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'VehClass' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Min' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Max' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'SetMultiLaneSF',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetDirectionalFactors',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Vertical' ),
              ( ['in', 'out'], POINTER(c_double), 'Braking' ),
              ( ['in', 'out'], POINTER(c_double), 'Centrifugal' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'SetDirectionalFactors',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'Vertical' ),
              ( ['in'], c_double, 'Braking' ),
              ( ['in'], c_double, 'Centrifugal' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cCaseMovingLoad implementation
##class cCaseMovingLoad_Impl(object):
##    def GetInitialCase(self, Name):
##        '-no docstring-'
##        #return InitialCase, pRetVal
##
##    def GetLanesLoaded(self, Name, LoadNumber):
##        '-no docstring-'
##        #return NumberItems, MyName, pRetVal
##
##    def GetLoads(self, Name):
##        '-no docstring-'
##        #return NumberLoads, VehClass, SF, Min, Max, pRetVal
##
##    def GetMultiLaneSF(self, Name):
##        '-no docstring-'
##        #return NumberItems, SF, pRetVal
##
##    def SetCase(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetInitialCase(self, Name, InitialCase):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLanesLoaded(self, Name, LoadNumber, NumberItems):
##        '-no docstring-'
##        #return MyName, pRetVal
##
##    def SetLoads(self, Name, NumberLoads):
##        '-no docstring-'
##        #return VehClass, SF, Min, Max, pRetVal
##
##    def SetMultiLaneSF(self, Name, NumberItems):
##        '-no docstring-'
##        #return SF, pRetVal
##
##    def GetDirectionalFactors(self, Name):
##        '-no docstring-'
##        #return Vertical, Braking, Centrifugal, pRetVal
##
##    def SetDirectionalFactors(self, Name, Vertical, Braking, Centrifugal):
##        '-no docstring-'
##        #return pRetVal
##


# values for enumeration 'eMatTypeAluminum'
eMatTypeAluminum_SubType_6061_T6 = 1
eMatTypeAluminum_SubType_6063_T6 = 2
eMatTypeAluminum_SubType_5052_H34 = 3
eMatTypeAluminum = c_int # enum
cBridgeConcretePour._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBridgeConcretePour implementation
##class cBridgeConcretePour_Impl(object):
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##

cAutoWindBridge._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetAASHTO2018',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'LimitState' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Superstructure' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Substructure' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Vertical' ),
              ( ['in', 'out'], POINTER(c_double), 'GroundElevation' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SuperZProgCalc' ),
              ( ['in', 'out'], POINTER(c_double), 'SuperstructureZ' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SubZProgCalc' ),
              ( ['in', 'out'], POINTER(c_double), 'SubstructureZ' ),
              ( ['in', 'out'], POINTER(c_double), 'WindSpeed' ),
              ( ['in', 'out'], POINTER(c_int), 'ExposureCategory' ),
              ( ['in', 'out'], POINTER(c_double), 'G' ),
              ( ['in', 'out'], POINTER(c_double), 'CdSuper' ),
              ( ['in', 'out'], POINTER(c_double), 'CdSub' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetAngles',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SymmetricTran' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SymmetricLong' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserDefined' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberAngles' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Angles' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TranCoeff' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LongCoeff' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetAutoLiveLoad',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'RefLoadPat' ),
              ( ['in', 'out'], POINTER(c_double), 'Height' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetCSAS614',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Superstructure' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Substructure' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Vertical' ),
              ( ['in', 'out'], POINTER(c_double), 'GroundElevation' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SuperZProgCalc' ),
              ( ['in', 'out'], POINTER(c_double), 'SuperstructureZ' ),
              ( ['in', 'out'], POINTER(c_double), 'q' ),
              ( ['in', 'out'], POINTER(c_double), 'Cg' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'CeProgCalc' ),
              ( ['in', 'out'], POINTER(c_double), 'Ce' ),
              ( ['in', 'out'], POINTER(c_double), 'ChStructure' ),
              ( ['in', 'out'], POINTER(c_double), 'ChLiveLoad' ),
              ( ['in', 'out'], POINTER(c_double), 'Cv' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetEurocode12005',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Superstructure' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Substructure' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Vertical' ),
              ( ['in', 'out'], POINTER(c_double), 'GroundElevation' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SuperZProgCalc' ),
              ( ['in', 'out'], POINTER(c_double), 'SuperstructureZ' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SubZProgCalc' ),
              ( ['in', 'out'], POINTER(c_double), 'SubstructureZ' ),
              ( ['in', 'out'], POINTER(c_double), 'WindSpeed' ),
              ( ['in', 'out'], POINTER(c_int), 'Terrain' ),
              ( ['in', 'out'], POINTER(c_double), 'Orography' ),
              ( ['in', 'out'], POINTER(c_double), 'K1' ),
              ( ['in', 'out'], POINTER(c_double), 'Rho' ),
              ( ['in', 'out'], POINTER(c_double), 'Cfx' ),
              ( ['in', 'out'], POINTER(c_double), 'CfzUp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'SetAASHTO2018',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'LimitState' ),
              ( ['in'], VARIANT_BOOL, 'Superstructure' ),
              ( ['in'], VARIANT_BOOL, 'Substructure' ),
              ( ['in'], VARIANT_BOOL, 'Vertical' ),
              ( ['in'], c_double, 'GroundElevation' ),
              ( ['in'], VARIANT_BOOL, 'SuperZProgCalc' ),
              ( ['in'], c_double, 'SuperstructureZ' ),
              ( ['in'], VARIANT_BOOL, 'SubZProgCalc' ),
              ( ['in'], c_double, 'SubstructureZ' ),
              ( ['in'], c_double, 'WindSpeed' ),
              ( ['in'], c_int, 'ExposureCategory' ),
              ( ['in'], c_double, 'G' ),
              ( ['in'], c_double, 'CdSuper' ),
              ( ['in'], c_double, 'CdSub' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'SetAngles',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'SymmetricTran' ),
              ( ['in'], VARIANT_BOOL, 'SymmetricLong' ),
              ( ['in'], VARIANT_BOOL, 'UserDefined' ),
              ( ['in'], c_int, 'NumberAngles' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Angles' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TranCoeff' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LongCoeff' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'SetAutoLiveLoad',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'RefLoadPat' ),
              ( ['in'], c_double, 'Height' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'SetCSAS614',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'Superstructure' ),
              ( ['in'], VARIANT_BOOL, 'Substructure' ),
              ( ['in'], VARIANT_BOOL, 'Vertical' ),
              ( ['in'], c_double, 'GroundElevation' ),
              ( ['in'], VARIANT_BOOL, 'SuperZProgCalc' ),
              ( ['in'], c_double, 'SuperstructureZ' ),
              ( ['in'], c_double, 'q' ),
              ( ['in'], c_double, 'Cg' ),
              ( ['in'], VARIANT_BOOL, 'CeProgCalc' ),
              ( ['in'], c_double, 'Ce' ),
              ( ['in'], c_double, 'ChStructure' ),
              ( ['in'], c_double, 'ChLiveLoad' ),
              ( ['in'], c_double, 'Cv' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'SetEurocode12005',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'Superstructure' ),
              ( ['in'], VARIANT_BOOL, 'Substructure' ),
              ( ['in'], VARIANT_BOOL, 'Vertical' ),
              ( ['in'], c_double, 'GroundElevation' ),
              ( ['in'], VARIANT_BOOL, 'SuperZProgCalc' ),
              ( ['in'], c_double, 'SuperstructureZ' ),
              ( ['in'], VARIANT_BOOL, 'SubZProgCalc' ),
              ( ['in'], c_double, 'SubstructureZ' ),
              ( ['in'], c_double, 'WindSpeed' ),
              ( ['in'], c_int, 'Terrain' ),
              ( ['in'], c_double, 'Orography' ),
              ( ['in'], c_double, 'K1' ),
              ( ['in'], c_double, 'Rho' ),
              ( ['in'], c_double, 'Cfx' ),
              ( ['in'], c_double, 'CfzUp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'SetNoneLiveLoad',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cAutoWindBridge implementation
##class cAutoWindBridge_Impl(object):
##    def GetAASHTO2018(self, Name):
##        '-no docstring-'
##        #return LimitState, Superstructure, Substructure, Vertical, GroundElevation, SuperZProgCalc, SuperstructureZ, SubZProgCalc, SubstructureZ, WindSpeed, ExposureCategory, G, CdSuper, CdSub, pRetVal
##
##    def GetAngles(self, Name):
##        '-no docstring-'
##        #return SymmetricTran, SymmetricLong, UserDefined, NumberAngles, Angles, TranCoeff, LongCoeff, pRetVal
##
##    def GetAutoLiveLoad(self, Name):
##        '-no docstring-'
##        #return RefLoadPat, Height, pRetVal
##
##    def GetCSAS614(self, Name):
##        '-no docstring-'
##        #return Superstructure, Substructure, Vertical, GroundElevation, SuperZProgCalc, SuperstructureZ, q, Cg, CeProgCalc, Ce, ChStructure, ChLiveLoad, Cv, pRetVal
##
##    def GetEurocode12005(self, Name):
##        '-no docstring-'
##        #return Superstructure, Substructure, Vertical, GroundElevation, SuperZProgCalc, SuperstructureZ, SubZProgCalc, SubstructureZ, WindSpeed, Terrain, Orography, K1, Rho, Cfx, CfzUp, pRetVal
##
##    def SetAASHTO2018(self, Name, LimitState, Superstructure, Substructure, Vertical, GroundElevation, SuperZProgCalc, SuperstructureZ, SubZProgCalc, SubstructureZ, WindSpeed, ExposureCategory, G, CdSuper, CdSub):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetAngles(self, Name, SymmetricTran, SymmetricLong, UserDefined, NumberAngles):
##        '-no docstring-'
##        #return Angles, TranCoeff, LongCoeff, pRetVal
##
##    def SetAutoLiveLoad(self, Name, RefLoadPat, Height):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCSAS614(self, Name, Superstructure, Substructure, Vertical, GroundElevation, SuperZProgCalc, SuperstructureZ, q, Cg, CeProgCalc, Ce, ChStructure, ChLiveLoad, Cv):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetEurocode12005(self, Name, Superstructure, Substructure, Vertical, GroundElevation, SuperZProgCalc, SuperstructureZ, SubZProgCalc, SubstructureZ, WindSpeed, Terrain, Orography, K1, Rho, Cfx, CfzUp):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetNoneLiveLoad(self, Name):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_AA_L_07_CBoxShearRt._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], BSTR, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_CBoxShearRt implementation
##class cBDRS_AA_L_07_CBoxShearRt_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetCapacityParamString(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCapacityParamString(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cFunctionRS._methods_ = [
    COMMETHOD([dispid(57)], HRESULT, 'GetNTC2008',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'ParamsOption' ),
              ( ['in', 'out'], POINTER(c_double), 'Latitude' ),
              ( ['in', 'out'], POINTER(c_double), 'Longitude' ),
              ( ['in', 'out'], POINTER(c_int), 'Island' ),
              ( ['in', 'out'], POINTER(c_int), 'LimitState' ),
              ( ['in', 'out'], POINTER(c_int), 'UsageClass' ),
              ( ['in', 'out'], POINTER(c_double), 'NomLife' ),
              ( ['in', 'out'], POINTER(c_double), 'PeakAccel' ),
              ( ['in', 'out'], POINTER(c_double), 'F0' ),
              ( ['in', 'out'], POINTER(c_double), 'Tcs' ),
              ( ['in', 'out'], POINTER(c_int), 'SpecType' ),
              ( ['in', 'out'], POINTER(c_int), 'SoilType' ),
              ( ['in', 'out'], POINTER(c_int), 'Topography' ),
              ( ['in', 'out'], POINTER(c_double), 'hRatio' ),
              ( ['in', 'out'], POINTER(c_double), 'Damping' ),
              ( ['in', 'out'], POINTER(c_double), 'q' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(58)], HRESULT, 'SetNTC2008',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ParamsOption' ),
              ( ['in'], c_double, 'Latitude' ),
              ( ['in'], c_double, 'Longitude' ),
              ( ['in'], c_int, 'Island' ),
              ( ['in'], c_int, 'LimitState' ),
              ( ['in'], c_int, 'UsageClass' ),
              ( ['in'], c_double, 'NomLife' ),
              ( ['in'], c_double, 'PeakAccel' ),
              ( ['in'], c_double, 'F0' ),
              ( ['in'], c_double, 'Tcs' ),
              ( ['in'], c_int, 'SpecType' ),
              ( ['in'], c_int, 'SoilType' ),
              ( ['in'], c_int, 'Topography' ),
              ( ['in'], c_double, 'hRatio' ),
              ( ['in'], c_double, 'Damping' ),
              ( ['in'], c_double, 'q' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetAS11702007',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'AS2007SiteClass' ),
              ( ['in', 'out'], POINTER(c_double), 'AS2007Kp' ),
              ( ['in', 'out'], POINTER(c_double), 'AS2007Z' ),
              ( ['in', 'out'], POINTER(c_double), 'AS2007Sp' ),
              ( ['in', 'out'], POINTER(c_double), 'AS2007Mu' ),
              ( ['in', 'out'], POINTER(c_double), 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetBOCA96',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'BOCA96Aa' ),
              ( ['in', 'out'], POINTER(c_double), 'BOCA96Av' ),
              ( ['in', 'out'], POINTER(c_double), 'BOCA96S' ),
              ( ['in', 'out'], POINTER(c_double), 'BOCA96R' ),
              ( ['in', 'out'], POINTER(c_double), 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetChinese2010',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'JGJ32002AlphaMax' ),
              ( ['in', 'out'], POINTER(c_int), 'JGJ32002SI' ),
              ( ['in', 'out'], POINTER(c_double), 'JGJ32002Tg' ),
              ( ['in', 'out'], POINTER(c_double), 'JGJ32002PTDF' ),
              ( ['in', 'out'], POINTER(c_double), 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(63)], HRESULT, 'GetCJJ1662011',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'Direction' ),
              ( ['in', 'out'], POINTER(c_double), 'PeakAccel' ),
              ( ['in', 'out'], POINTER(c_double), 'Tg' ),
              ( ['in', 'out'], POINTER(c_double), 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetEuroCode8',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'EuroCode8Ag' ),
              ( ['in', 'out'], POINTER(c_int), 'EuroCode8S' ),
              ( ['in', 'out'], POINTER(c_double), 'EuroCode8N' ),
              ( ['in', 'out'], POINTER(c_double), 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetEurocode82004',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'EURO2004GroundType' ),
              ( ['in', 'out'], POINTER(c_int), 'EURO2004SpectrumType' ),
              ( ['in', 'out'], POINTER(c_double), 'EURO2004Ag' ),
              ( ['in', 'out'], POINTER(c_double), 'EURO2004Beta' ),
              ( ['in', 'out'], POINTER(c_double), 'EURO2004Q' ),
              ( ['in', 'out'], POINTER(c_double), 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetEurocode82004_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'EURO2004Country' ),
              ( ['in', 'out'], POINTER(c_int), 'EURO2004Direction' ),
              ( ['in', 'out'], POINTER(c_int), 'EURO2004SpectrumType' ),
              ( ['in', 'out'], POINTER(c_int), 'EURO2004GroundType' ),
              ( ['in', 'out'], POINTER(c_double), 'EURO2004Ag' ),
              ( ['in', 'out'], POINTER(c_double), 'EURO2004S' ),
              ( ['in', 'out'], POINTER(c_double), 'EURO2004AvgOverAg' ),
              ( ['in', 'out'], POINTER(c_double), 'EURO2004Tb' ),
              ( ['in', 'out'], POINTER(c_double), 'EURO2004Tc' ),
              ( ['in', 'out'], POINTER(c_double), 'EURO2004Td' ),
              ( ['in', 'out'], POINTER(c_double), 'EURO2004Beta' ),
              ( ['in', 'out'], POINTER(c_double), 'EURO2004Q' ),
              ( ['in', 'out'], POINTER(c_double), 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetFromFile',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(c_int), 'HeadLines' ),
              ( ['in', 'out'], POINTER(c_double), 'DampRatio' ),
              ( ['in', 'out'], POINTER(c_int), 'ValueType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'GetIBC2003',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Ss' ),
              ( ['in', 'out'], POINTER(c_double), 'S1' ),
              ( ['in', 'out'], POINTER(c_double), 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'GetIBC2006',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'IBC2006Option' ),
              ( ['in', 'out'], POINTER(c_double), 'Latitude' ),
              ( ['in', 'out'], POINTER(c_double), 'Longitude' ),
              ( ['in', 'out'], POINTER(BSTR), 'ZipCode' ),
              ( ['in', 'out'], POINTER(c_double), 'Ss' ),
              ( ['in', 'out'], POINTER(c_double), 'S1' ),
              ( ['in', 'out'], POINTER(c_double), 'Tl' ),
              ( ['in', 'out'], POINTER(c_int), 'SiteClass' ),
              ( ['in', 'out'], POINTER(c_double), 'Fa' ),
              ( ['in', 'out'], POINTER(c_double), 'Fv' ),
              ( ['in', 'out'], POINTER(c_double), 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(51)], HRESULT, 'GetIBC2009',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'IBC2009Option' ),
              ( ['in', 'out'], POINTER(c_double), 'Latitude' ),
              ( ['in', 'out'], POINTER(c_double), 'Longitude' ),
              ( ['in', 'out'], POINTER(BSTR), 'ZipCode' ),
              ( ['in', 'out'], POINTER(c_double), 'Ss' ),
              ( ['in', 'out'], POINTER(c_double), 'S1' ),
              ( ['in', 'out'], POINTER(c_double), 'Tl' ),
              ( ['in', 'out'], POINTER(c_int), 'SiteClass' ),
              ( ['in', 'out'], POINTER(c_double), 'Fa' ),
              ( ['in', 'out'], POINTER(c_double), 'Fv' ),
              ( ['in', 'out'], POINTER(c_double), 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(52)], HRESULT, 'GetIBC2012',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'IBC2012Option' ),
              ( ['in', 'out'], POINTER(c_double), 'Latitude' ),
              ( ['in', 'out'], POINTER(c_double), 'Longitude' ),
              ( ['in', 'out'], POINTER(BSTR), 'ZipCode' ),
              ( ['in', 'out'], POINTER(c_double), 'Ss' ),
              ( ['in', 'out'], POINTER(c_double), 'S1' ),
              ( ['in', 'out'], POINTER(c_double), 'Tl' ),
              ( ['in', 'out'], POINTER(c_int), 'SiteClass' ),
              ( ['in', 'out'], POINTER(c_double), 'Fa' ),
              ( ['in', 'out'], POINTER(c_double), 'Fv' ),
              ( ['in', 'out'], POINTER(c_double), 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'GetIS18932002',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'INZ' ),
              ( ['in', 'out'], POINTER(c_int), 'INS' ),
              ( ['in', 'out'], POINTER(c_double), 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'GetItalian3274',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'ItalAg' ),
              ( ['in', 'out'], POINTER(c_int), 'ItalSoilType' ),
              ( ['in', 'out'], POINTER(c_double), 'ItalQ' ),
              ( ['in', 'out'], POINTER(c_double), 'ItalLevel' ),
              ( ['in', 'out'], POINTER(c_double), 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(61)], HRESULT, 'GetJTGB022013',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'Direction' ),
              ( ['in', 'out'], POINTER(c_double), 'PeakAccel' ),
              ( ['in', 'out'], POINTER(c_double), 'Tg' ),
              ( ['in', 'out'], POINTER(c_double), 'Ci' ),
              ( ['in', 'out'], POINTER(c_double), 'Cs' ),
              ( ['in', 'out'], POINTER(c_double), 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'GetNBCC2005',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'PGA' ),
              ( ['in', 'out'], POINTER(c_double), 'S02' ),
              ( ['in', 'out'], POINTER(c_double), 'S05' ),
              ( ['in', 'out'], POINTER(c_double), 'S1' ),
              ( ['in', 'out'], POINTER(c_double), 'S2' ),
              ( ['in', 'out'], POINTER(c_int), 'SiteClass' ),
              ( ['in', 'out'], POINTER(c_double), 'Fa' ),
              ( ['in', 'out'], POINTER(c_double), 'Fv' ),
              ( ['in', 'out'], POINTER(c_double), 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(65)], HRESULT, 'GetNBCC2010',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'PGA' ),
              ( ['in', 'out'], POINTER(c_double), 'S02' ),
              ( ['in', 'out'], POINTER(c_double), 'S05' ),
              ( ['in', 'out'], POINTER(c_double), 'S1' ),
              ( ['in', 'out'], POINTER(c_double), 'S2' ),
              ( ['in', 'out'], POINTER(c_int), 'SiteClass' ),
              ( ['in', 'out'], POINTER(c_double), 'Fa' ),
              ( ['in', 'out'], POINTER(c_double), 'Fv' ),
              ( ['in', 'out'], POINTER(c_double), 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(66)], HRESULT, 'GetNBCC2015',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'PGA' ),
              ( ['in', 'out'], POINTER(c_double), 'S02' ),
              ( ['in', 'out'], POINTER(c_double), 'S05' ),
              ( ['in', 'out'], POINTER(c_double), 'S1' ),
              ( ['in', 'out'], POINTER(c_double), 'S2' ),
              ( ['in', 'out'], POINTER(c_double), 'S5' ),
              ( ['in', 'out'], POINTER(c_double), 'S10' ),
              ( ['in', 'out'], POINTER(c_int), 'SiteClass' ),
              ( ['in', 'out'], POINTER(c_double), 'F02' ),
              ( ['in', 'out'], POINTER(c_double), 'F05' ),
              ( ['in', 'out'], POINTER(c_double), 'F1' ),
              ( ['in', 'out'], POINTER(c_double), 'F2' ),
              ( ['in', 'out'], POINTER(c_double), 'F5' ),
              ( ['in', 'out'], POINTER(c_double), 'F10' ),
              ( ['in', 'out'], POINTER(c_double), 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'GetNBCC95',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Zvr' ),
              ( ['in', 'out'], POINTER(c_int), 'Za' ),
              ( ['in', 'out'], POINTER(c_int), 'Zv' ),
              ( ['in', 'out'], POINTER(c_double), 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'GetNEHRP97',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'NEHRP97Ss' ),
              ( ['in', 'out'], POINTER(c_double), 'NEHRP97S1' ),
              ( ['in', 'out'], POINTER(c_double), 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'GetNZS11702004',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NZS2004SiteClass' ),
              ( ['in', 'out'], POINTER(c_double), 'NZS2004Z' ),
              ( ['in', 'out'], POINTER(c_double), 'NZS2004R' ),
              ( ['in', 'out'], POINTER(c_double), 'NZS2004Dist' ),
              ( ['in', 'out'], POINTER(c_double), 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(71)], HRESULT, 'GetNZS11702004_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NZS2004SpectrumType' ),
              ( ['in', 'out'], POINTER(c_int), 'NZS2004SiteClass' ),
              ( ['in', 'out'], POINTER(c_double), 'NZS2004Z' ),
              ( ['in', 'out'], POINTER(c_double), 'NZS2004R' ),
              ( ['in', 'out'], POINTER(c_double), 'NZS2004Dist' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'NZS2004ConsiderTSite' ),
              ( ['in', 'out'], POINTER(c_double), 'NZS2004TSite' ),
              ( ['in', 'out'], POINTER(c_double), 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'GetNZS42031992',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'NZS4203SF' ),
              ( ['in', 'out'], POINTER(c_int), 'NZS4203S' ),
              ( ['in', 'out'], POINTER(c_double), 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(59)], HRESULT, 'GetSP14133302014',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'Direction' ),
              ( ['in', 'out'], POINTER(c_int), 'Seismicity' ),
              ( ['in', 'out'], POINTER(c_int), 'SoilCat' ),
              ( ['in', 'out'], POINTER(c_double), 'K0Factor' ),
              ( ['in', 'out'], POINTER(c_double), 'K1Factor' ),
              ( ['in', 'out'], POINTER(c_double), 'KPsiFactor' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'NonlinearSoil' ),
              ( ['in', 'out'], POINTER(c_double), 'ASoil' ),
              ( ['in', 'out'], POINTER(c_double), 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(23)], HRESULT, 'GetUBC94',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'UBC94Z' ),
              ( ['in', 'out'], POINTER(c_int), 'UBC94S' ),
              ( ['in', 'out'], POINTER(c_double), 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(24)], HRESULT, 'GetUBC97',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'UBC97Ca' ),
              ( ['in', 'out'], POINTER(c_double), 'UBC97Cv' ),
              ( ['in', 'out'], POINTER(c_double), 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(25)], HRESULT, 'GetUser',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Period' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'out'], POINTER(c_double), 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(28)], HRESULT, 'SetAS11702007',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'AS2007SiteClass' ),
              ( ['in'], c_double, 'AS2007Kp' ),
              ( ['in'], c_double, 'AS2007Z' ),
              ( ['in'], c_double, 'AS2007Sp' ),
              ( ['in'], c_double, 'AS2007Mu' ),
              ( ['in'], c_double, 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(29)], HRESULT, 'SetBOCA96',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'BOCA96Aa' ),
              ( ['in'], c_double, 'BOCA96Av' ),
              ( ['in'], c_double, 'BOCA96S' ),
              ( ['in'], c_double, 'BOCA96R' ),
              ( ['in'], c_double, 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(30)], HRESULT, 'SetChinese2002',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'JGJ32002AlphaMax' ),
              ( ['in'], c_int, 'JGJ32002SI' ),
              ( ['in'], c_double, 'JGJ32002Tg' ),
              ( ['in'], c_double, 'JGJ32002PTDF' ),
              ( ['in'], c_double, 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(31)], HRESULT, 'SetChinese2010',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'JGJ32002AlphaMax' ),
              ( ['in'], c_int, 'JGJ32002SI' ),
              ( ['in'], c_double, 'JGJ32002Tg' ),
              ( ['in'], c_double, 'JGJ32002PTDF' ),
              ( ['in'], c_double, 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(64)], HRESULT, 'SetCJJ1662011',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Direction' ),
              ( ['in'], c_double, 'PeakAccel' ),
              ( ['in'], c_double, 'Tg' ),
              ( ['in'], c_double, 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(34)], HRESULT, 'SetEuroCode8',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'EuroCode8Ag' ),
              ( ['in'], c_int, 'EuroCode8S' ),
              ( ['in'], c_double, 'EuroCode8N' ),
              ( ['in'], c_double, 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(35)], HRESULT, 'SetEurocode82004',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'EURO2004GroundType' ),
              ( ['in'], c_int, 'EURO2004SpectrumType' ),
              ( ['in'], c_double, 'EURO2004Ag' ),
              ( ['in'], c_double, 'EURO2004Beta' ),
              ( ['in'], c_double, 'EURO2004Q' ),
              ( ['in'], c_double, 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(36)], HRESULT, 'SetEurocode82004_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'EURO2004Country' ),
              ( ['in'], c_int, 'EURO2004Direction' ),
              ( ['in'], c_int, 'EURO2004SpectrumType' ),
              ( ['in'], c_int, 'EURO2004GroundType' ),
              ( ['in'], c_double, 'EURO2004Ag' ),
              ( ['in'], c_double, 'EURO2004S' ),
              ( ['in'], c_double, 'EURO2004AvgOverAg' ),
              ( ['in'], c_double, 'EURO2004Tb' ),
              ( ['in'], c_double, 'EURO2004Tc' ),
              ( ['in'], c_double, 'EURO2004Td' ),
              ( ['in'], c_double, 'EURO2004Beta' ),
              ( ['in'], c_double, 'EURO2004Q' ),
              ( ['in'], c_double, 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(37)], HRESULT, 'SetFromFile',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'FileName' ),
              ( ['in'], c_int, 'HeadLines' ),
              ( ['in'], c_double, 'DampRatio' ),
              ( ['in', 'optional'], c_int, 'ValueType', 2 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(38)], HRESULT, 'SetIBC2003',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'Ss' ),
              ( ['in'], c_double, 'S1' ),
              ( ['in'], c_double, 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(39)], HRESULT, 'SetIBC2006',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'IBC2006Option' ),
              ( ['in'], c_double, 'Latitude' ),
              ( ['in'], c_double, 'Longitude' ),
              ( ['in'], BSTR, 'ZipCode' ),
              ( ['in'], c_double, 'Ss' ),
              ( ['in'], c_double, 'S1' ),
              ( ['in'], c_double, 'Tl' ),
              ( ['in'], c_int, 'SiteClass' ),
              ( ['in'], c_double, 'Fa' ),
              ( ['in'], c_double, 'Fv' ),
              ( ['in'], c_double, 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(53)], HRESULT, 'SetIBC2009',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'IBC2009Option' ),
              ( ['in'], c_double, 'Latitude' ),
              ( ['in'], c_double, 'Longitude' ),
              ( ['in'], BSTR, 'ZipCode' ),
              ( ['in'], c_double, 'Ss' ),
              ( ['in'], c_double, 'S1' ),
              ( ['in'], c_double, 'Tl' ),
              ( ['in'], c_int, 'SiteClass' ),
              ( ['in'], c_double, 'Fa' ),
              ( ['in'], c_double, 'Fv' ),
              ( ['in'], c_double, 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(54)], HRESULT, 'SetIBC2012',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'IBC2012Option' ),
              ( ['in'], c_double, 'Latitude' ),
              ( ['in'], c_double, 'Longitude' ),
              ( ['in'], BSTR, 'ZipCode' ),
              ( ['in'], c_double, 'Ss' ),
              ( ['in'], c_double, 'S1' ),
              ( ['in'], c_double, 'Tl' ),
              ( ['in'], c_int, 'SiteClass' ),
              ( ['in'], c_double, 'Fa' ),
              ( ['in'], c_double, 'Fv' ),
              ( ['in'], c_double, 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(40)], HRESULT, 'SetIS18932002',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'INZ' ),
              ( ['in'], c_int, 'INS' ),
              ( ['in'], c_double, 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(41)], HRESULT, 'SetItalian3274',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'ItalAg' ),
              ( ['in'], c_int, 'ItalSoilType' ),
              ( ['in'], c_double, 'ItalQ' ),
              ( ['in'], c_double, 'ItalLevel' ),
              ( ['in'], c_double, 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(62)], HRESULT, 'SetJTGB022013',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Direction' ),
              ( ['in'], c_double, 'PeakAccel' ),
              ( ['in'], c_double, 'Tg' ),
              ( ['in'], c_double, 'Ci' ),
              ( ['in'], c_double, 'Cs' ),
              ( ['in'], c_double, 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(42)], HRESULT, 'SetNBCC2005',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'PGA' ),
              ( ['in'], c_double, 'S02' ),
              ( ['in'], c_double, 'S05' ),
              ( ['in'], c_double, 'S1' ),
              ( ['in'], c_double, 'S2' ),
              ( ['in'], c_int, 'SiteClass' ),
              ( ['in'], c_double, 'Fa' ),
              ( ['in'], c_double, 'Fv' ),
              ( ['in'], c_double, 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(67)], HRESULT, 'SetNBCC2010',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'PGA' ),
              ( ['in'], c_double, 'S02' ),
              ( ['in'], c_double, 'S05' ),
              ( ['in'], c_double, 'S1' ),
              ( ['in'], c_double, 'S2' ),
              ( ['in'], c_int, 'SiteClass' ),
              ( ['in'], c_double, 'Fa' ),
              ( ['in'], c_double, 'Fv' ),
              ( ['in'], c_double, 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(68)], HRESULT, 'SetNBCC2015',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'PGA' ),
              ( ['in'], c_double, 'S02' ),
              ( ['in'], c_double, 'S05' ),
              ( ['in'], c_double, 'S1' ),
              ( ['in'], c_double, 'S2' ),
              ( ['in'], c_double, 'S5' ),
              ( ['in'], c_double, 'S10' ),
              ( ['in'], c_int, 'SiteClass' ),
              ( ['in'], c_double, 'F02' ),
              ( ['in'], c_double, 'F05' ),
              ( ['in'], c_double, 'F1' ),
              ( ['in'], c_double, 'F2' ),
              ( ['in'], c_double, 'F5' ),
              ( ['in'], c_double, 'F10' ),
              ( ['in'], c_double, 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(43)], HRESULT, 'SetNBCC95',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'Zvr' ),
              ( ['in'], c_int, 'Za' ),
              ( ['in'], c_int, 'Zv' ),
              ( ['in'], c_double, 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(45)], HRESULT, 'SetNEHRP97',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'NEHRP97Ss' ),
              ( ['in'], c_double, 'NEHRP97S1' ),
              ( ['in'], c_double, 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(46)], HRESULT, 'SetNZS11702004',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NZS2004SiteClass' ),
              ( ['in'], c_double, 'NZS2004Z' ),
              ( ['in'], c_double, 'NZS2004R' ),
              ( ['in'], c_double, 'NZS2004Dist' ),
              ( ['in'], c_double, 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(72)], HRESULT, 'SetNZS11702004_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NZS2004SpectrumType' ),
              ( ['in'], c_int, 'NZS2004SiteClass' ),
              ( ['in'], c_double, 'NZS2004Z' ),
              ( ['in'], c_double, 'NZS2004R' ),
              ( ['in'], c_double, 'NZS2004Dist' ),
              ( ['in'], VARIANT_BOOL, 'NZS2004ConsiderTSite' ),
              ( ['in'], c_double, 'NZS2004TSite' ),
              ( ['in'], c_double, 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(47)], HRESULT, 'SetNZS42031992',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'NZS4203SF' ),
              ( ['in'], c_int, 'NZS4203S' ),
              ( ['in'], c_double, 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(60)], HRESULT, 'SetSP14133302014',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Direction' ),
              ( ['in'], c_int, 'Seismicity' ),
              ( ['in'], c_int, 'SoilCat' ),
              ( ['in'], c_double, 'K0Factor' ),
              ( ['in'], c_double, 'K1Factor' ),
              ( ['in'], c_double, 'KPsiFactor' ),
              ( ['in'], VARIANT_BOOL, 'NonlinearSoil' ),
              ( ['in'], c_double, 'ASoil' ),
              ( ['in'], c_double, 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(48)], HRESULT, 'SetUBC94',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'UBC94Z' ),
              ( ['in'], c_int, 'UBC94S' ),
              ( ['in'], c_double, 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(49)], HRESULT, 'SetUBC97',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'UBC97Ca' ),
              ( ['in'], c_double, 'UBC97Cv' ),
              ( ['in'], c_double, 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(50)], HRESULT, 'SetUser',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Period' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in'], c_double, 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(1)], HRESULT, 'GetAASHTO2006',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'AASHTO2006A' ),
              ( ['in', 'out'], POINTER(c_int), 'AASHTO2006SoilProfileType' ),
              ( ['in', 'out'], POINTER(c_double), 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetAASHTO2007',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'AASHTO2007Option' ),
              ( ['in', 'out'], POINTER(c_double), 'AASHTO2007Latitude' ),
              ( ['in', 'out'], POINTER(c_double), 'AASHTO2007Longitude' ),
              ( ['in', 'out'], POINTER(BSTR), 'AASHTO2007ZipCode' ),
              ( ['in', 'out'], POINTER(c_double), 'AASHTO2007Ss' ),
              ( ['in', 'out'], POINTER(c_double), 'AASHTO2007S1' ),
              ( ['in', 'out'], POINTER(c_double), 'AASHTO2007PGA' ),
              ( ['in', 'out'], POINTER(c_int), 'AASHTO2007SiteClass' ),
              ( ['in', 'out'], POINTER(c_double), 'AASHTO2007Fa' ),
              ( ['in', 'out'], POINTER(c_double), 'AASHTO2007Fv' ),
              ( ['in', 'out'], POINTER(c_double), 'AASHTO2007FPGA' ),
              ( ['in', 'out'], POINTER(c_double), 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(55)], HRESULT, 'GetAASHTO2012',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'AASHTO2012Option' ),
              ( ['in', 'out'], POINTER(c_double), 'AASHTO2012Latitude' ),
              ( ['in', 'out'], POINTER(c_double), 'AASHTO2012Longitude' ),
              ( ['in', 'out'], POINTER(BSTR), 'AASHTO2012ZipCode' ),
              ( ['in', 'out'], POINTER(c_double), 'AASHTO2012Ss' ),
              ( ['in', 'out'], POINTER(c_double), 'AASHTO2012S1' ),
              ( ['in', 'out'], POINTER(c_double), 'AASHTO2012PGA' ),
              ( ['in', 'out'], POINTER(c_int), 'AASHTO2012SiteClass' ),
              ( ['in', 'out'], POINTER(c_double), 'AASHTO2012Fa' ),
              ( ['in', 'out'], POINTER(c_double), 'AASHTO2012Fv' ),
              ( ['in', 'out'], POINTER(c_double), 'AASHTO2012FPGA' ),
              ( ['in', 'out'], POINTER(c_double), 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetChinese2002',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'JGJ32002AlphaMax' ),
              ( ['in', 'out'], POINTER(c_int), 'JGJ32002SI' ),
              ( ['in', 'out'], POINTER(c_double), 'JGJ32002Tg' ),
              ( ['in', 'out'], POINTER(c_double), 'JGJ32002PTDF' ),
              ( ['in', 'out'], POINTER(c_double), 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetChineseGB501112006',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'GB501112006A' ),
              ( ['in', 'out'], POINTER(c_int), 'GB501112006SI' ),
              ( ['in', 'out'], POINTER(c_double), 'GB501112006Tg' ),
              ( ['in', 'out'], POINTER(c_double), 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetChineseJTGTB02012008',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'JTGTB02012008A' ),
              ( ['in', 'out'], POINTER(c_int), 'JTGTB02012008SI' ),
              ( ['in', 'out'], POINTER(c_double), 'JTGTB02012008Tg' ),
              ( ['in', 'out'], POINTER(c_double), 'JTGTB02012008Ci' ),
              ( ['in', 'out'], POINTER(c_double), 'JTGTB02012008Cs' ),
              ( ['in', 'out'], POINTER(c_double), 'JTGTB02012008Dir' ),
              ( ['in', 'out'], POINTER(c_double), 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'GetNCHRP2007',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NCHRP2007Option' ),
              ( ['in', 'out'], POINTER(c_double), 'NCHRP2007Latitude' ),
              ( ['in', 'out'], POINTER(c_double), 'NCHRP2007Longitude' ),
              ( ['in', 'out'], POINTER(BSTR), 'NCHRP2007ZipCode' ),
              ( ['in', 'out'], POINTER(c_double), 'NCHRP2007SS' ),
              ( ['in', 'out'], POINTER(c_double), 'NCHRP2007S1' ),
              ( ['in', 'out'], POINTER(c_int), 'NCHRP2007SiteClass' ),
              ( ['in', 'out'], POINTER(c_double), 'NCHRP2007Fa' ),
              ( ['in', 'out'], POINTER(c_double), 'NCHRP2007Fv' ),
              ( ['in', 'out'], POINTER(c_double), 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(26)], HRESULT, 'SetAASHTO2006',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'AASHTO2006A' ),
              ( ['in'], c_int, 'AASHTO2006SoilProfileType' ),
              ( ['in'], c_double, 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(27)], HRESULT, 'SetAASHTO2007',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'AASHTO2007Option' ),
              ( ['in'], c_double, 'AASHTO2007Latitude' ),
              ( ['in'], c_double, 'AASHTO2007Longitude' ),
              ( ['in'], BSTR, 'AASHTO2007ZipCode' ),
              ( ['in'], c_double, 'AASHTO2007Ss' ),
              ( ['in'], c_double, 'AASHTO2007S1' ),
              ( ['in'], c_double, 'AASHTO2007PGA' ),
              ( ['in'], c_int, 'AASHTO2007SiteClass' ),
              ( ['in'], c_double, 'AASHTO2007Fa' ),
              ( ['in'], c_double, 'AASHTO2007Fv' ),
              ( ['in'], c_double, 'AASHTO2007FPGA' ),
              ( ['in'], c_double, 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(56)], HRESULT, 'SetAASHTO2012',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'AASHTO2012Option' ),
              ( ['in'], c_double, 'AASHTO2012Latitude' ),
              ( ['in'], c_double, 'AASHTO2012Longitude' ),
              ( ['in'], BSTR, 'AASHTO2012ZipCode' ),
              ( ['in'], c_double, 'AASHTO2012Ss' ),
              ( ['in'], c_double, 'AASHTO2012S1' ),
              ( ['in'], c_double, 'AASHTO2012PGA' ),
              ( ['in'], c_int, 'AASHTO2012SiteClass' ),
              ( ['in'], c_double, 'AASHTO2012Fa' ),
              ( ['in'], c_double, 'AASHTO2012Fv' ),
              ( ['in'], c_double, 'AASHTO2012FPGA' ),
              ( ['in'], c_double, 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(32)], HRESULT, 'SetChineseGB501112006',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'GB501112006A' ),
              ( ['in'], c_int, 'GB501112006SI' ),
              ( ['in'], c_double, 'GB501112006Tg' ),
              ( ['in'], c_double, 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(33)], HRESULT, 'SetChineseJTGTB02012008',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'JTGTB02012008A' ),
              ( ['in'], c_int, 'JTGTB02012008SI' ),
              ( ['in'], c_double, 'JTGTB02012008Tg' ),
              ( ['in'], c_double, 'JTGTB02012008Ci' ),
              ( ['in'], c_double, 'JTGTB02012008Cs' ),
              ( ['in'], c_double, 'JTGTB02012008Dir' ),
              ( ['in'], c_double, 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(44)], HRESULT, 'SetNCHRP2007',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NCHRP2007Option' ),
              ( ['in'], c_double, 'NCHRP2007Latitude' ),
              ( ['in'], c_double, 'NCHRP2007Longitude' ),
              ( ['in'], BSTR, 'NCHRP2007ZipCode' ),
              ( ['in'], c_double, 'NCHRP2007SS' ),
              ( ['in'], c_double, 'NCHRP2007S1' ),
              ( ['in'], c_int, 'NCHRP2007SiteClass' ),
              ( ['in'], c_double, 'NCHRP2007Fa' ),
              ( ['in'], c_double, 'NCHRP2007Fv' ),
              ( ['in'], c_double, 'DampRatio' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(69)], HRESULT, 'GetNTC2018',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'ParamsOption' ),
              ( ['in', 'out'], POINTER(c_double), 'Latitude' ),
              ( ['in', 'out'], POINTER(c_double), 'Longitude' ),
              ( ['in', 'out'], POINTER(c_int), 'Island' ),
              ( ['in', 'out'], POINTER(c_int), 'LimitState' ),
              ( ['in', 'out'], POINTER(c_int), 'UsageClass' ),
              ( ['in', 'out'], POINTER(c_double), 'NomLife' ),
              ( ['in', 'out'], POINTER(c_double), 'PeakAccel' ),
              ( ['in', 'out'], POINTER(c_double), 'F0' ),
              ( ['in', 'out'], POINTER(c_double), 'Tcs' ),
              ( ['in', 'out'], POINTER(c_int), 'SpecType' ),
              ( ['in', 'out'], POINTER(c_int), 'SoilType' ),
              ( ['in', 'out'], POINTER(c_int), 'Topography' ),
              ( ['in', 'out'], POINTER(c_double), 'hRatio' ),
              ( ['in', 'out'], POINTER(c_double), 'Damping' ),
              ( ['in', 'out'], POINTER(c_double), 'q' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(70)], HRESULT, 'SetNTC2018',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ParamsOption' ),
              ( ['in'], c_double, 'Latitude' ),
              ( ['in'], c_double, 'Longitude' ),
              ( ['in'], c_int, 'Island' ),
              ( ['in'], c_int, 'LimitState' ),
              ( ['in'], c_int, 'UsageClass' ),
              ( ['in'], c_double, 'NomLife' ),
              ( ['in'], c_double, 'PeakAccel' ),
              ( ['in'], c_double, 'F0' ),
              ( ['in'], c_double, 'Tcs' ),
              ( ['in'], c_int, 'SpecType' ),
              ( ['in'], c_int, 'SoilType' ),
              ( ['in'], c_int, 'Topography' ),
              ( ['in'], c_double, 'hRatio' ),
              ( ['in'], c_double, 'Damping' ),
              ( ['in'], c_double, 'q' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cFunctionRS implementation
##class cFunctionRS_Impl(object):
##    def GetNTC2008(self, Name):
##        '-no docstring-'
##        #return ParamsOption, Latitude, Longitude, Island, LimitState, UsageClass, NomLife, PeakAccel, F0, Tcs, SpecType, SoilType, Topography, hRatio, Damping, q, pRetVal
##
##    def SetNTC2008(self, Name, ParamsOption, Latitude, Longitude, Island, LimitState, UsageClass, NomLife, PeakAccel, F0, Tcs, SpecType, SoilType, Topography, hRatio, Damping, q):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetAS11702007(self, Name):
##        '-no docstring-'
##        #return AS2007SiteClass, AS2007Kp, AS2007Z, AS2007Sp, AS2007Mu, DampRatio, pRetVal
##
##    def GetBOCA96(self, Name):
##        '-no docstring-'
##        #return BOCA96Aa, BOCA96Av, BOCA96S, BOCA96R, DampRatio, pRetVal
##
##    def GetChinese2010(self, Name):
##        '-no docstring-'
##        #return JGJ32002AlphaMax, JGJ32002SI, JGJ32002Tg, JGJ32002PTDF, DampRatio, pRetVal
##
##    def GetCJJ1662011(self, Name):
##        '-no docstring-'
##        #return Direction, PeakAccel, Tg, DampRatio, pRetVal
##
##    def GetEuroCode8(self, Name):
##        '-no docstring-'
##        #return EuroCode8Ag, EuroCode8S, EuroCode8N, DampRatio, pRetVal
##
##    def GetEurocode82004(self, Name):
##        '-no docstring-'
##        #return EURO2004GroundType, EURO2004SpectrumType, EURO2004Ag, EURO2004Beta, EURO2004Q, DampRatio, pRetVal
##
##    def GetEurocode82004_1(self, Name):
##        '-no docstring-'
##        #return EURO2004Country, EURO2004Direction, EURO2004SpectrumType, EURO2004GroundType, EURO2004Ag, EURO2004S, EURO2004AvgOverAg, EURO2004Tb, EURO2004Tc, EURO2004Td, EURO2004Beta, EURO2004Q, DampRatio, pRetVal
##
##    def GetFromFile(self, Name):
##        '-no docstring-'
##        #return FileName, HeadLines, DampRatio, ValueType, pRetVal
##
##    def GetIBC2003(self, Name):
##        '-no docstring-'
##        #return Ss, S1, DampRatio, pRetVal
##
##    def GetIBC2006(self, Name):
##        '-no docstring-'
##        #return IBC2006Option, Latitude, Longitude, ZipCode, Ss, S1, Tl, SiteClass, Fa, Fv, DampRatio, pRetVal
##
##    def GetIBC2009(self, Name):
##        '-no docstring-'
##        #return IBC2009Option, Latitude, Longitude, ZipCode, Ss, S1, Tl, SiteClass, Fa, Fv, DampRatio, pRetVal
##
##    def GetIBC2012(self, Name):
##        '-no docstring-'
##        #return IBC2012Option, Latitude, Longitude, ZipCode, Ss, S1, Tl, SiteClass, Fa, Fv, DampRatio, pRetVal
##
##    def GetIS18932002(self, Name):
##        '-no docstring-'
##        #return INZ, INS, DampRatio, pRetVal
##
##    def GetItalian3274(self, Name):
##        '-no docstring-'
##        #return ItalAg, ItalSoilType, ItalQ, ItalLevel, DampRatio, pRetVal
##
##    def GetJTGB022013(self, Name):
##        '-no docstring-'
##        #return Direction, PeakAccel, Tg, Ci, Cs, DampRatio, pRetVal
##
##    def GetNBCC2005(self, Name):
##        '-no docstring-'
##        #return PGA, S02, S05, S1, S2, SiteClass, Fa, Fv, DampRatio, pRetVal
##
##    def GetNBCC2010(self, Name):
##        '-no docstring-'
##        #return PGA, S02, S05, S1, S2, SiteClass, Fa, Fv, DampRatio, pRetVal
##
##    def GetNBCC2015(self, Name):
##        '-no docstring-'
##        #return PGA, S02, S05, S1, S2, S5, S10, SiteClass, F02, F05, F1, F2, F5, F10, DampRatio, pRetVal
##
##    def GetNBCC95(self, Name):
##        '-no docstring-'
##        #return Zvr, Za, Zv, DampRatio, pRetVal
##
##    def GetNEHRP97(self, Name):
##        '-no docstring-'
##        #return NEHRP97Ss, NEHRP97S1, DampRatio, pRetVal
##
##    def GetNZS11702004(self, Name):
##        '-no docstring-'
##        #return NZS2004SiteClass, NZS2004Z, NZS2004R, NZS2004Dist, DampRatio, pRetVal
##
##    def GetNZS11702004_1(self, Name):
##        '-no docstring-'
##        #return NZS2004SpectrumType, NZS2004SiteClass, NZS2004Z, NZS2004R, NZS2004Dist, NZS2004ConsiderTSite, NZS2004TSite, DampRatio, pRetVal
##
##    def GetNZS42031992(self, Name):
##        '-no docstring-'
##        #return NZS4203SF, NZS4203S, DampRatio, pRetVal
##
##    def GetSP14133302014(self, Name):
##        '-no docstring-'
##        #return Direction, Seismicity, SoilCat, K0Factor, K1Factor, KPsiFactor, NonlinearSoil, ASoil, DampRatio, pRetVal
##
##    def GetUBC94(self, Name):
##        '-no docstring-'
##        #return UBC94Z, UBC94S, DampRatio, pRetVal
##
##    def GetUBC97(self, Name):
##        '-no docstring-'
##        #return UBC97Ca, UBC97Cv, DampRatio, pRetVal
##
##    def GetUser(self, Name):
##        '-no docstring-'
##        #return NumberItems, Period, Value, DampRatio, pRetVal
##
##    def SetAS11702007(self, Name, AS2007SiteClass, AS2007Kp, AS2007Z, AS2007Sp, AS2007Mu, DampRatio):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetBOCA96(self, Name, BOCA96Aa, BOCA96Av, BOCA96S, BOCA96R, DampRatio):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetChinese2002(self, Name, JGJ32002AlphaMax, JGJ32002SI, JGJ32002Tg, JGJ32002PTDF, DampRatio):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetChinese2010(self, Name, JGJ32002AlphaMax, JGJ32002SI, JGJ32002Tg, JGJ32002PTDF, DampRatio):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCJJ1662011(self, Name, Direction, PeakAccel, Tg, DampRatio):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetEuroCode8(self, Name, EuroCode8Ag, EuroCode8S, EuroCode8N, DampRatio):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetEurocode82004(self, Name, EURO2004GroundType, EURO2004SpectrumType, EURO2004Ag, EURO2004Beta, EURO2004Q, DampRatio):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetEurocode82004_1(self, Name, EURO2004Country, EURO2004Direction, EURO2004SpectrumType, EURO2004GroundType, EURO2004Ag, EURO2004S, EURO2004AvgOverAg, EURO2004Tb, EURO2004Tc, EURO2004Td, EURO2004Beta, EURO2004Q, DampRatio):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetFromFile(self, Name, FileName, HeadLines, DampRatio, ValueType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetIBC2003(self, Name, Ss, S1, DampRatio):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetIBC2006(self, Name, IBC2006Option, Latitude, Longitude, ZipCode, Ss, S1, Tl, SiteClass, Fa, Fv, DampRatio):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetIBC2009(self, Name, IBC2009Option, Latitude, Longitude, ZipCode, Ss, S1, Tl, SiteClass, Fa, Fv, DampRatio):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetIBC2012(self, Name, IBC2012Option, Latitude, Longitude, ZipCode, Ss, S1, Tl, SiteClass, Fa, Fv, DampRatio):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetIS18932002(self, Name, INZ, INS, DampRatio):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetItalian3274(self, Name, ItalAg, ItalSoilType, ItalQ, ItalLevel, DampRatio):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetJTGB022013(self, Name, Direction, PeakAccel, Tg, Ci, Cs, DampRatio):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetNBCC2005(self, Name, PGA, S02, S05, S1, S2, SiteClass, Fa, Fv, DampRatio):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetNBCC2010(self, Name, PGA, S02, S05, S1, S2, SiteClass, Fa, Fv, DampRatio):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetNBCC2015(self, Name, PGA, S02, S05, S1, S2, S5, S10, SiteClass, F02, F05, F1, F2, F5, F10, DampRatio):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetNBCC95(self, Name, Zvr, Za, Zv, DampRatio):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetNEHRP97(self, Name, NEHRP97Ss, NEHRP97S1, DampRatio):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetNZS11702004(self, Name, NZS2004SiteClass, NZS2004Z, NZS2004R, NZS2004Dist, DampRatio):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetNZS11702004_1(self, Name, NZS2004SpectrumType, NZS2004SiteClass, NZS2004Z, NZS2004R, NZS2004Dist, NZS2004ConsiderTSite, NZS2004TSite, DampRatio):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetNZS42031992(self, Name, NZS4203SF, NZS4203S, DampRatio):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSP14133302014(self, Name, Direction, Seismicity, SoilCat, K0Factor, K1Factor, KPsiFactor, NonlinearSoil, ASoil, DampRatio):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetUBC94(self, Name, UBC94Z, UBC94S, DampRatio):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetUBC97(self, Name, UBC97Ca, UBC97Cv, DampRatio):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetUser(self, Name, NumberItems, DampRatio):
##        '-no docstring-'
##        #return Period, Value, pRetVal
##
##    def GetAASHTO2006(self, Name):
##        '-no docstring-'
##        #return AASHTO2006A, AASHTO2006SoilProfileType, DampRatio, pRetVal
##
##    def GetAASHTO2007(self, Name):
##        '-no docstring-'
##        #return AASHTO2007Option, AASHTO2007Latitude, AASHTO2007Longitude, AASHTO2007ZipCode, AASHTO2007Ss, AASHTO2007S1, AASHTO2007PGA, AASHTO2007SiteClass, AASHTO2007Fa, AASHTO2007Fv, AASHTO2007FPGA, DampRatio, pRetVal
##
##    def GetAASHTO2012(self, Name):
##        '-no docstring-'
##        #return AASHTO2012Option, AASHTO2012Latitude, AASHTO2012Longitude, AASHTO2012ZipCode, AASHTO2012Ss, AASHTO2012S1, AASHTO2012PGA, AASHTO2012SiteClass, AASHTO2012Fa, AASHTO2012Fv, AASHTO2012FPGA, DampRatio, pRetVal
##
##    def GetChinese2002(self, Name):
##        '-no docstring-'
##        #return JGJ32002AlphaMax, JGJ32002SI, JGJ32002Tg, JGJ32002PTDF, DampRatio, pRetVal
##
##    def GetChineseGB501112006(self, Name):
##        '-no docstring-'
##        #return GB501112006A, GB501112006SI, GB501112006Tg, DampRatio, pRetVal
##
##    def GetChineseJTGTB02012008(self, Name):
##        '-no docstring-'
##        #return JTGTB02012008A, JTGTB02012008SI, JTGTB02012008Tg, JTGTB02012008Ci, JTGTB02012008Cs, JTGTB02012008Dir, DampRatio, pRetVal
##
##    def GetNCHRP2007(self, Name):
##        '-no docstring-'
##        #return NCHRP2007Option, NCHRP2007Latitude, NCHRP2007Longitude, NCHRP2007ZipCode, NCHRP2007SS, NCHRP2007S1, NCHRP2007SiteClass, NCHRP2007Fa, NCHRP2007Fv, DampRatio, pRetVal
##
##    def SetAASHTO2006(self, Name, AASHTO2006A, AASHTO2006SoilProfileType, DampRatio):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetAASHTO2007(self, Name, AASHTO2007Option, AASHTO2007Latitude, AASHTO2007Longitude, AASHTO2007ZipCode, AASHTO2007Ss, AASHTO2007S1, AASHTO2007PGA, AASHTO2007SiteClass, AASHTO2007Fa, AASHTO2007Fv, AASHTO2007FPGA, DampRatio):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetAASHTO2012(self, Name, AASHTO2012Option, AASHTO2012Latitude, AASHTO2012Longitude, AASHTO2012ZipCode, AASHTO2012Ss, AASHTO2012S1, AASHTO2012PGA, AASHTO2012SiteClass, AASHTO2012Fa, AASHTO2012Fv, AASHTO2012FPGA, DampRatio):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetChineseGB501112006(self, Name, GB501112006A, GB501112006SI, GB501112006Tg, DampRatio):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetChineseJTGTB02012008(self, Name, JTGTB02012008A, JTGTB02012008SI, JTGTB02012008Tg, JTGTB02012008Ci, JTGTB02012008Cs, JTGTB02012008Dir, DampRatio):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetNCHRP2007(self, Name, NCHRP2007Option, NCHRP2007Latitude, NCHRP2007Longitude, NCHRP2007ZipCode, NCHRP2007SS, NCHRP2007S1, NCHRP2007SiteClass, NCHRP2007Fa, NCHRP2007Fv, DampRatio):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetNTC2018(self, Name):
##        '-no docstring-'
##        #return ParamsOption, Latitude, Longitude, Island, LimitState, UsageClass, NomLife, PeakAccel, F0, Tcs, SpecType, SoilType, Topography, hRatio, Damping, q, pRetVal
##
##    def SetNTC2018(self, Name, ParamsOption, Latitude, Longitude, Island, LimitState, UsageClass, NomLife, PeakAccel, F0, Tcs, SpecType, SoilType, Topography, hRatio, Damping, q):
##        '-no docstring-'
##        #return pRetVal
##


# values for enumeration 'eMatTypeColdFormed'
eMatTypeColdFormed_ASTM_A653SQGr33 = 1
eMatTypeColdFormed_ASTM_A653SQGr50 = 2
eMatTypeColdFormed = c_int # enum
class cDCoTS_500_2000(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{6F89808F-2765-47AE-BAEA-88D3880C2FCF}')
    _idlflags_ = ['dual', 'oleautomation']
cDCoTS_500_2000._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDCoTS_500_2000 implementation
##class cDCoTS_500_2000_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cFunctionTH._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCosine',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'CosineP' ),
              ( ['in', 'out'], POINTER(c_int), 'CosineSteps' ),
              ( ['in', 'out'], POINTER(c_int), 'CosineCycles' ),
              ( ['in', 'out'], POINTER(c_double), 'CosineAmp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetFromFile',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(c_int), 'HeadLines' ),
              ( ['in', 'out'], POINTER(c_int), 'PreChars' ),
              ( ['in', 'out'], POINTER(c_int), 'PointsPerLine' ),
              ( ['in', 'out'], POINTER(c_int), 'ValueType' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'FreeFormat' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberFixed' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetFromFile_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(c_int), 'HeadLines' ),
              ( ['in', 'out'], POINTER(c_int), 'PreChars' ),
              ( ['in', 'out'], POINTER(c_int), 'PointsPerLine' ),
              ( ['in', 'out'], POINTER(c_int), 'ValueType' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'FreeFormat' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberFixed' ),
              ( ['in', 'out'], POINTER(c_double), 'Dt' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetRamp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'RampTime' ),
              ( ['in', 'out'], POINTER(c_double), 'RampAmp' ),
              ( ['in', 'out'], POINTER(c_double), 'RampMaxTime' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetSawtooth',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'SawP' ),
              ( ['in', 'out'], POINTER(c_double), 'SawTime' ),
              ( ['in', 'out'], POINTER(c_int), 'SawCycles' ),
              ( ['in', 'out'], POINTER(c_double), 'SawAmp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetSine',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'SineP' ),
              ( ['in', 'out'], POINTER(c_int), 'SineSteps' ),
              ( ['in', 'out'], POINTER(c_int), 'SineCycles' ),
              ( ['in', 'out'], POINTER(c_double), 'SineAmp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetTriangular',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'TriP' ),
              ( ['in', 'out'], POINTER(c_int), 'TriCycles' ),
              ( ['in', 'out'], POINTER(c_double), 'TriAmp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetUser',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MyTime' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetUserPeriodic',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'UPCycles' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MyTime' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'SetCosine',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'CosineP' ),
              ( ['in'], c_int, 'CosineSteps' ),
              ( ['in'], c_int, 'CosineCycles' ),
              ( ['in'], c_double, 'CosineAmp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'SetFromFile',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'FileName' ),
              ( ['in'], c_int, 'HeadLines' ),
              ( ['in'], c_int, 'PreChars' ),
              ( ['in'], c_int, 'PointsPerLine' ),
              ( ['in'], c_int, 'ValueType' ),
              ( ['in'], VARIANT_BOOL, 'FreeFormat' ),
              ( ['in', 'optional'], c_int, 'NumberFixed', 10 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'SetFromFile_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'FileName' ),
              ( ['in'], c_int, 'HeadLines' ),
              ( ['in'], c_int, 'PreChars' ),
              ( ['in'], c_int, 'PointsPerLine' ),
              ( ['in'], c_int, 'ValueType' ),
              ( ['in'], VARIANT_BOOL, 'FreeFormat' ),
              ( ['in', 'optional'], c_int, 'NumberFixed', 10 ),
              ( ['in', 'optional'], c_double, 'Dt', 0.02 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'SetRamp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'RampTime' ),
              ( ['in'], c_double, 'RampAmp' ),
              ( ['in'], c_double, 'RampMaxTime' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'SetSawtooth',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'SawP' ),
              ( ['in'], c_double, 'SawTime' ),
              ( ['in'], c_int, 'SawCycles' ),
              ( ['in'], c_double, 'SawAmp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'SetSine',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'SineP' ),
              ( ['in'], c_int, 'SineSteps' ),
              ( ['in'], c_int, 'SineCycles' ),
              ( ['in'], c_double, 'SineAmp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'SetTriangular',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'TriP' ),
              ( ['in'], c_int, 'TriCycles' ),
              ( ['in'], c_double, 'TriAmp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'SetUser',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MyTime' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'SetUserPeriodic',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'UPCycles' ),
              ( ['in'], c_int, 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MyTime' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cFunctionTH implementation
##class cFunctionTH_Impl(object):
##    def GetCosine(self, Name):
##        '-no docstring-'
##        #return CosineP, CosineSteps, CosineCycles, CosineAmp, pRetVal
##
##    def GetFromFile(self, Name):
##        '-no docstring-'
##        #return FileName, HeadLines, PreChars, PointsPerLine, ValueType, FreeFormat, NumberFixed, pRetVal
##
##    def GetFromFile_1(self, Name):
##        '-no docstring-'
##        #return FileName, HeadLines, PreChars, PointsPerLine, ValueType, FreeFormat, NumberFixed, Dt, pRetVal
##
##    def GetRamp(self, Name):
##        '-no docstring-'
##        #return RampTime, RampAmp, RampMaxTime, pRetVal
##
##    def GetSawtooth(self, Name):
##        '-no docstring-'
##        #return SawP, SawTime, SawCycles, SawAmp, pRetVal
##
##    def GetSine(self, Name):
##        '-no docstring-'
##        #return SineP, SineSteps, SineCycles, SineAmp, pRetVal
##
##    def GetTriangular(self, Name):
##        '-no docstring-'
##        #return TriP, TriCycles, TriAmp, pRetVal
##
##    def GetUser(self, Name):
##        '-no docstring-'
##        #return NumberItems, MyTime, Value, pRetVal
##
##    def GetUserPeriodic(self, Name):
##        '-no docstring-'
##        #return UPCycles, NumberItems, MyTime, Value, pRetVal
##
##    def SetCosine(self, Name, CosineP, CosineSteps, CosineCycles, CosineAmp):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetFromFile(self, Name, FileName, HeadLines, PreChars, PointsPerLine, ValueType, FreeFormat, NumberFixed):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetFromFile_1(self, Name, FileName, HeadLines, PreChars, PointsPerLine, ValueType, FreeFormat, NumberFixed, Dt):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetRamp(self, Name, RampTime, RampAmp, RampMaxTime):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSawtooth(self, Name, SawP, SawTime, SawCycles, SawAmp):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSine(self, Name, SineP, SineSteps, SineCycles, SineAmp):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetTriangular(self, Name, TriP, TriCycles, TriAmp):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetUser(self, Name, NumberItems):
##        '-no docstring-'
##        #return MyTime, Value, pRetVal
##
##    def SetUserPeriodic(self, Name, UPCycles, NumberItems):
##        '-no docstring-'
##        #return MyTime, Value, pRetVal
##

cBDRS_CANCSA_S6_06_SteelUCompServiceRating._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_CANCSA_S6_06_SteelUCompServiceRating implementation
##class cBDRS_CANCSA_S6_06_SteelUCompServiceRating_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_CJ_D62_04_CBoxShear._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], BSTR, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_CJ_D62_04_CBoxShear implementation
##class cBDRS_CJ_D62_04_CBoxShear_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetCapacityParamString(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCapacityParamString(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##


# values for enumeration 'eMatTypeRebar'
eMatTypeRebar_ASTM_A615Gr40 = 1
eMatTypeRebar_ASTM_A615Gr60 = 2
eMatTypeRebar_ASTM_A615Gr75 = 3
eMatTypeRebar_ASTM_A706 = 4
eMatTypeRebar_Chinese_HPB235 = 5
eMatTypeRebar_Chinese_HRB335 = 6
eMatTypeRebar_Chinese_HRB400 = 7
eMatTypeRebar_Indian_Mild250 = 8
eMatTypeRebar_Indian_HYSD415 = 9
eMatTypeRebar_Indian_HYSD500 = 10
eMatTypeRebar_Indian_HYSD550 = 11
eMatTypeRebar = c_int # enum
cAreaElm._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetLoadTemperature',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName' ),
              ( ['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetLoadUniform',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Dir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetLocalAxes',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Ang' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetMaterialOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetModifiers',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetObj',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'Obj' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetOffsets',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'OffsetType' ),
              ( ['in', 'out'], POINTER(BSTR), 'OffsetPattern' ),
              ( ['in', 'out'], POINTER(c_double), 'OffsetPatternSF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetPoints',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Point' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetProperty',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetThickness',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'ThicknessType' ),
              ( ['in', 'out'], POINTER(BSTR), 'ThicknessPattern' ),
              ( ['in', 'out'], POINTER(c_double), 'ThicknessPatternSF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Thickness' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'GetTransformationMatrix',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'GetLoadGravity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z' ),
              ( ['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'GetLoadPorePressure',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName' ),
              ( ['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'GetLoadStrain',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Component' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName' ),
              ( ['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'GetLoadSurfacePressure',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Face' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName' ),
              ( ['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'GetMatTemp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Temp' ),
              ( ['in', 'out'], POINTER(BSTR), 'PatternName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cAreaElm implementation
##class cAreaElm_Impl(object):
##    def Count(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetLoadTemperature(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberItems, AreaName, LoadPat, MyType, Value, PatternName, pRetVal
##
##    def GetLoadUniform(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberItems, AreaName, LoadPat, CSys, Dir, Value, pRetVal
##
##    def GetLocalAxes(self, Name):
##        '-no docstring-'
##        #return Ang, pRetVal
##
##    def GetMaterialOverwrite(self, Name):
##        '-no docstring-'
##        #return PropName, pRetVal
##
##    def GetModifiers(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetObj(self, Name):
##        '-no docstring-'
##        #return Obj, pRetVal
##
##    def GetOffsets(self, Name):
##        '-no docstring-'
##        #return OffsetType, OffsetPattern, OffsetPatternSF, Offset, pRetVal
##
##    def GetPoints(self, Name):
##        '-no docstring-'
##        #return NumberPoints, Point, pRetVal
##
##    def GetProperty(self, Name):
##        '-no docstring-'
##        #return PropName, pRetVal
##
##    def GetThickness(self, Name):
##        '-no docstring-'
##        #return ThicknessType, ThicknessPattern, ThicknessPatternSF, Thickness, pRetVal
##
##    def GetTransformationMatrix(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetLoadGravity(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberItems, AreaName, LoadPat, CSys, X, Y, Z, pRetVal
##
##    def GetLoadPorePressure(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberItems, AreaName, LoadPat, Value, PatternName, pRetVal
##
##    def GetLoadStrain(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberItems, AreaName, LoadPat, Component, Value, PatternName, pRetVal
##
##    def GetLoadSurfacePressure(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberItems, AreaName, LoadPat, Face, Value, PatternName, pRetVal
##
##    def GetMatTemp(self, Name):
##        '-no docstring-'
##        #return Temp, PatternName, pRetVal
##

class cDCoMexican_RCDF_2004(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{7A78F53F-FDE5-45C9-B92C-D27B69EDA8C4}')
    _idlflags_ = ['dual', 'oleautomation']
cDCoMexican_RCDF_2004._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDCoMexican_RCDF_2004 implementation
##class cDCoMexican_RCDF_2004_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_IRC2011_ConcTBeamStr._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_IRC2011_ConcTBeamStr implementation
##class cBDRS_IRC2011_ConcTBeamStr_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cFrameObj._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'AddByCoord',
              ( ['in'], c_double, 'XI' ),
              ( ['in'], c_double, 'YI' ),
              ( ['in'], c_double, 'ZI' ),
              ( ['in'], c_double, 'XJ' ),
              ( ['in'], c_double, 'YJ' ),
              ( ['in'], c_double, 'ZJ' ),
              ( ['in', 'out'], POINTER(BSTR), 'Name' ),
              ( ['in', 'optional'], BSTR, 'PropName', 'Default' ),
              ( ['in', 'optional'], BSTR, 'UserName', '' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'AddByPoint',
              ( ['in'], BSTR, 'Point1' ),
              ( ['in'], BSTR, 'Point2' ),
              ( ['in', 'out'], POINTER(BSTR), 'Name' ),
              ( ['in', 'optional'], BSTR, 'PropName', 'Default' ),
              ( ['in', 'optional'], BSTR, 'UserName', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'Count',
              ( ['in', 'optional'], BSTR, 'MyType', 'All' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'DeleteLateralBracing',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], c_int, 'MyType', 3 ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'DeleteLoadDistributed',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'DeleteLoadPoint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'DeleteLoadTemperature',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'DeleteMass',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'DeleteModifiers',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'DeleteSpring',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'GetDesignProcedure',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'MyType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'GetElm',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NElm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RDI' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RDJ' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'GetEndLengthOffset',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'AutoOffset' ),
              ( ['in', 'out'], POINTER(c_double), 'Length1' ),
              ( ['in', 'out'], POINTER(c_double), 'Length2' ),
              ( ['in', 'out'], POINTER(c_double), 'RZ' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'GetGUID',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'GetHingeAssigns',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberHinges' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'HingeNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Prop' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Behavior' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Source' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Rd' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(122)], HRESULT, 'GetHingeAssigns_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberHinges' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'HingeNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Prop' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Behavior' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Source' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(eHingeLocationType)), 'LocType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Rd' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AD' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(23)], HRESULT, 'GetInsertionPoint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'CardinalPoint' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Mirror2' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'StiffTransform' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset2' ),
              ( ['in', 'out'], POINTER(BSTR), 'CSys' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(24)], HRESULT, 'GetLateralBracing',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Loc' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RD1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RD2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist2' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(25)], HRESULT, 'GetLoadDistributed',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Dir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RD1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RD2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Val1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Val2' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(26)], HRESULT, 'GetLoadPoint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Dir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RelDist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Val' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(27)], HRESULT, 'GetLoadTemperature',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Val' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(28)], HRESULT, 'GetLocalAxes',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Ang' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Advanced' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(30)], HRESULT, 'GetMass',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'MassOverL' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(31)], HRESULT, 'GetMaterialOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(33)], HRESULT, 'GetModifiers',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(34)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(35)], HRESULT, 'GetOutputStations',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'MyType' ),
              ( ['in', 'out'], POINTER(c_double), 'MaxSegSize' ),
              ( ['in', 'out'], POINTER(c_int), 'MinSections' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'NoOutPutAndDesignAtElementEnds' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'NoOutPutAndDesignAtPointLoads' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(36)], HRESULT, 'GetPoints',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'Point1' ),
              ( ['in', 'out'], POINTER(BSTR), 'Point2' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(37)], HRESULT, 'GetReleases',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'II' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'JJ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartValue' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndValue' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(38)], HRESULT, 'GetSection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['in', 'out'], POINTER(BSTR), 'SAuto' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(39)], HRESULT, 'GetSectionNonPrismatic',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['in', 'out'], POINTER(c_double), 'SVarTotalLength' ),
              ( ['in', 'out'], POINTER(c_double), 'SVarRelStartLoc' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(40)], HRESULT, 'GetSelected',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Selected' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(42)], HRESULT, 'GetTCLimits',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'LimitCompressionExists' ),
              ( ['in', 'out'], POINTER(c_double), 'LimitCompression' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'LimitTensionExists' ),
              ( ['in', 'out'], POINTER(c_double), 'LimitTension' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(43)], HRESULT, 'GetTransformationMatrix',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'IsGlobal', True ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(71)], HRESULT, 'GetTypeOAPI',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'MyType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(47)], HRESULT, 'SetDesignProcedure',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'MyType' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(48)], HRESULT, 'SetEndLengthOffset',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'AutoOffset' ),
              ( ['in'], c_double, 'Length1' ),
              ( ['in'], c_double, 'Length2' ),
              ( ['in'], c_double, 'RZ' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(51)], HRESULT, 'SetGroupAssign',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'GroupName' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Remove', False ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(52)], HRESULT, 'SetGUID',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(53)], HRESULT, 'SetInsertionPoint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CardinalPoint' ),
              ( ['in'], VARIANT_BOOL, 'Mirror2' ),
              ( ['in'], VARIANT_BOOL, 'StiffTransform' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset2' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Local' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(54)], HRESULT, 'SetLateralBracing',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'MyType' ),
              ( ['in'], c_int, 'Loc' ),
              ( ['in'], c_double, 'MyDist1' ),
              ( ['in'], c_double, 'MyDist2' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'RelDist', True ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(55)], HRESULT, 'SetLoadDistributed',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in'], c_int, 'MyType' ),
              ( ['in'], c_int, 'Dir' ),
              ( ['in'], c_double, 'Dist1' ),
              ( ['in'], c_double, 'Dist2' ),
              ( ['in'], c_double, 'Val1' ),
              ( ['in'], c_double, 'Val2' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'RelDist', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', True ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(56)], HRESULT, 'SetLoadPoint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in'], c_int, 'MyType' ),
              ( ['in'], c_int, 'Dir' ),
              ( ['in'], c_double, 'Dist' ),
              ( ['in'], c_double, 'Val' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'RelDist', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', True ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(57)], HRESULT, 'SetLoadTemperature',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in'], c_int, 'MyType' ),
              ( ['in'], c_double, 'Val' ),
              ( ['in', 'optional'], BSTR, 'PatternName', '' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', True ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(58)], HRESULT, 'SetLocalAxes',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'Ang' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(60)], HRESULT, 'SetMass',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'MassOverL' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', False ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(61)], HRESULT, 'SetMaterialOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'PropName' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(62)], HRESULT, 'SetModifiers',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(63)], HRESULT, 'SetOutputStations',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'MyType' ),
              ( ['in'], c_double, 'MaxSegSize' ),
              ( ['in'], c_int, 'MinSections' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'NoOutPutAndDesignAtElementEnds', False ),
              ( ['in', 'optional'], VARIANT_BOOL, 'NoOutPutAndDesignAtPointLoads', False ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(64)], HRESULT, 'SetReleases',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'II' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'JJ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartValue' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndValue' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(65)], HRESULT, 'SetSection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'PropName' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['in', 'optional'], c_double, 'SVarRelStartLoc', 0.0 ),
              ( ['in', 'optional'], c_double, 'SVarTotalLength', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(66)], HRESULT, 'SetSelected',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'Selected' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(69)], HRESULT, 'SetTCLimits',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'LimitCompressionExists' ),
              ( ['in'], c_double, 'LimitCompression' ),
              ( ['in'], VARIANT_BOOL, 'LimitTensionExists' ),
              ( ['in'], c_double, 'LimitTension' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(116)], HRESULT, 'GetGroupAssign',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberGroups' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Groups' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(32)], HRESULT, 'GetMatTemp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Temp' ),
              ( ['in', 'out'], POINTER(BSTR), 'PatternName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'DeleteFireproofing',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'GetEndSkew',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'SkewI' ),
              ( ['in', 'out'], POINTER(c_double), 'SkewJ' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'GetFireproofing',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'MyType' ),
              ( ['in', 'out'], POINTER(c_double), 'Thickness' ),
              ( ['in', 'out'], POINTER(c_double), 'Perimeter' ),
              ( ['in', 'out'], POINTER(c_double), 'Density' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Tf' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(49)], HRESULT, 'SetEndSkew',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'SkewI' ),
              ( ['in'], c_double, 'SkewJ' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(50)], HRESULT, 'SetFireproofing',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'MyType' ),
              ( ['in'], c_double, 'Thickness' ),
              ( ['in'], c_double, 'Perimeter' ),
              ( ['in'], c_double, 'Density' ),
              ( ['in'], VARIANT_BOOL, 'Tf' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'GetAutoMesh',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'AutoMesh' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'AutoMeshAtPoints' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'AutoMeshAtLines' ),
              ( ['in', 'out'], POINTER(c_int), 'NumSegs' ),
              ( ['in', 'out'], POINTER(c_double), 'AutoMeshMaxLength' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'GetCurved',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Radius' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumSegs' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(104)], HRESULT, 'GetCurved_1',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Radius' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumSegs' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(45)], HRESULT, 'SetAutoMesh',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'AutoMesh' ),
              ( ['in'], VARIANT_BOOL, 'AutoMeshAtPoints' ),
              ( ['in'], VARIANT_BOOL, 'AutoMeshAtLines' ),
              ( ['in'], c_int, 'NumSegs' ),
              ( ['in'], c_double, 'AutoMeshMaxLength' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(46)], HRESULT, 'SetCurved',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'MyType' ),
              ( ['in'], c_double, 'X' ),
              ( ['in'], c_double, 'Y' ),
              ( ['in'], c_double, 'Z' ),
              ( ['in'], BSTR, 'PointName' ),
              ( ['in'], c_double, 'Radius' ),
              ( ['in'], c_int, 'NumSegs' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(41)], HRESULT, 'GetSpring',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberSprings' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SimpleSpringType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LinkProp' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SpringLocalOneType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Dir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Plane23Angle' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VecX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VecY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VecZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ang' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(29)], HRESULT, 'GetLocalAxesAdvanced',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Active' ),
              ( ['in', 'out'], POINTER(c_int), 'Plane2' ),
              ( ['in', 'out'], POINTER(c_int), 'PlVectOpt' ),
              ( ['in', 'out'], POINTER(BSTR), 'PlCSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PlDir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PlPt' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PlVect' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(59)], HRESULT, 'SetLocalAxesAdvanced',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'Active' ),
              ( ['in'], c_int, 'Plane2' ),
              ( ['in'], c_int, 'PlVectOpt' ),
              ( ['in'], BSTR, 'PlCSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PlDir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PlPt' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PlVect' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(67)], HRESULT, 'SetSpring',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'MyType' ),
              ( ['in'], c_double, 'S' ),
              ( ['in'], c_int, 'SimpleSpringType' ),
              ( ['in'], BSTR, 'LinkProp' ),
              ( ['in'], c_int, 'SpringLocalOneType' ),
              ( ['in'], c_int, 'Dir' ),
              ( ['in'], c_double, 'Plane23Angle' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Vec' ),
              ( ['in'], c_double, 'Ang' ),
              ( ['in'], VARIANT_BOOL, 'Replace' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Local' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(68)], HRESULT, 'SetStraight',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(72)], HRESULT, 'DeleteLoadDeformation',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(73)], HRESULT, 'DeleteLoadGravity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(74)], HRESULT, 'DeleteLoadStrain',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in'], c_int, 'DOF' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(75)], HRESULT, 'DeleteLoadTargetForce',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(76)], HRESULT, 'DeletePDeltaForce',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(77)], HRESULT, 'GetDAMModifiers',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'EAModifier' ),
              ( ['in', 'out'], POINTER(c_double), 'EIModifier' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(78)], HRESULT, 'GetFireproofing_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'MyType' ),
              ( ['in', 'out'], POINTER(c_double), 'Thickness' ),
              ( ['in', 'out'], POINTER(c_double), 'Perimeter' ),
              ( ['in', 'out'], POINTER(c_double), 'Density' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Tf' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IncludeInSelfWeight' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IncludeInGravityLoads' ),
              ( ['in', 'out'], POINTER(BSTR), 'IncludeInThisLoadPattern' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(79)], HRESULT, 'GetInsertionPoint_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'CardinalPoint' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Mirror2' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Mirror3' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'StiffTransform' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset2' ),
              ( ['in', 'out'], POINTER(BSTR), 'CSys' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(80)], HRESULT, 'GetLoadDeformation',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF4' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF5' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF6' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(81)], HRESULT, 'GetLoadGravity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(82)], HRESULT, 'GetLoadStrain',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Val' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(83)], HRESULT, 'GetLoadTargetForce',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF4' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF5' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF6' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'P' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T4' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T5' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T6' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(84)], HRESULT, 'GetLoadTransfer',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Val' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(85)], HRESULT, 'GetPDeltaForce',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberForces' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PDeltaForce' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Dir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(86)], HRESULT, 'SetFireproofing_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'MyType' ),
              ( ['in'], c_double, 'Thickness' ),
              ( ['in'], c_double, 'Perimeter' ),
              ( ['in'], c_double, 'Density' ),
              ( ['in'], VARIANT_BOOL, 'Tf' ),
              ( ['in'], VARIANT_BOOL, 'IncludeInSelfWeight' ),
              ( ['in'], VARIANT_BOOL, 'IncludeInGravityLoads' ),
              ( ['in', 'optional'], BSTR, 'IncludeInThisLoadPattern', 'None' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(87)], HRESULT, 'SetInsertionPoint_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CardinalPoint' ),
              ( ['in'], VARIANT_BOOL, 'Mirror2' ),
              ( ['in'], VARIANT_BOOL, 'Mirror3' ),
              ( ['in'], VARIANT_BOOL, 'StiffTransform' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset2' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Local' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(88)], HRESULT, 'SetLoadDeformation',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'D' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(89)], HRESULT, 'SetLoadGravity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in'], c_double, 'X' ),
              ( ['in'], c_double, 'Y' ),
              ( ['in'], c_double, 'Z' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', True ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(90)], HRESULT, 'SetLoadStrain',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in'], c_int, 'DOF' ),
              ( ['in'], c_double, 'Val' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', True ),
              ( ['in', 'optional'], BSTR, 'PatternName', '' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(91)], HRESULT, 'SetLoadTargetForce',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Rd' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(92)], HRESULT, 'SetLoadTransfer',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'Val' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(93)], HRESULT, 'SetMatTemp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'Temp' ),
              ( ['in', 'optional'], BSTR, 'PatternName', '' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(94)], HRESULT, 'SetPDeltaForce',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'PDeltaForce' ),
              ( ['in'], c_int, 'Dir' ),
              ( ['in'], VARIANT_BOOL, 'Replace' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(98)], HRESULT, 'GetLoadDistributedWithGUID',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Dir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RD1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RD2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Val1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Val2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GUID' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(99)], HRESULT, 'SetLoadDistributedWithGUID',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in'], c_int, 'MyType' ),
              ( ['in'], c_int, 'Dir' ),
              ( ['in'], c_double, 'Dist1' ),
              ( ['in'], c_double, 'Dist2' ),
              ( ['in'], c_double, 'Val1' ),
              ( ['in'], c_double, 'Val2' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'RelDist', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', True ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(100)], HRESULT, 'DeleteLoadDistributedWithGUID',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(101)], HRESULT, 'GetLoadPointWithGUID',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Dir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RelDist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Val' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GUID' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(102)], HRESULT, 'SetLoadPointWithGUID',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in'], c_int, 'MyType' ),
              ( ['in'], c_int, 'Dir' ),
              ( ['in'], c_double, 'Dist' ),
              ( ['in'], c_double, 'Val' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'RelDist', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', True ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(103)], HRESULT, 'DeleteLoadPointWithGUID',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(118)], HRESULT, 'GetBridgeObjectFoundationFlag',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BObjName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SpanIndex' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'FoundationIndex' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(eBridgeObjectFoundationPart)), 'Part' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PartIndex' ),
              ( ['in', 'out', 'optional'], POINTER(eItemType), 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(119)], HRESULT, 'SetBridgeObjectFoundationFlag',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'BObjName' ),
              ( ['in'], c_int, 'SpanIndex' ),
              ( ['in'], c_int, 'FoundationIndex' ),
              ( ['in'], eBridgeObjectFoundationPart, 'Part' ),
              ( ['in'], c_int, 'PartIndex' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(120)], HRESULT, 'GetAxialRatingResistance',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'RatingType' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IsResistanceDefined' ),
              ( ['in', 'out'], POINTER(c_double), 'CompressiveResistance' ),
              ( ['in', 'out'], POINTER(c_double), 'TensileResistance' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(121)], HRESULT, 'SetAxialRatingResistance',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'RatingType' ),
              ( ['in'], VARIANT_BOOL, 'IsResistanceDefined' ),
              ( ['in'], c_double, 'CompressiveResistance' ),
              ( ['in'], c_double, 'TensileResistance' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(112)], HRESULT, 'GetColumnSpliceOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'SpliceOption' ),
              ( ['in', 'out'], POINTER(c_double), 'Height' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(70)], HRESULT, 'GetNameListOnStory',
              ( ['in'], BSTR, 'StoryName' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(95)], HRESULT, 'GetLabelNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyLabel' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyStory' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(96)], HRESULT, 'GetLabelFromName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'Label' ),
              ( ['in', 'out'], POINTER(BSTR), 'Story' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(97)], HRESULT, 'GetNameFromLabel',
              ( ['in'], BSTR, 'Label' ),
              ( ['in'], BSTR, 'Story' ),
              ( ['in', 'out'], POINTER(BSTR), 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(105)], HRESULT, 'GetSupports',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'SupportName1' ),
              ( ['in', 'out'], POINTER(eObjType), 'SupportType1' ),
              ( ['in', 'out'], POINTER(BSTR), 'SupportName2' ),
              ( ['in', 'out'], POINTER(eObjType), 'SupportType2' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(106)], HRESULT, 'GetAllFrames',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PropName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StoryName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointName1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointName2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Point1X' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Point1Y' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Point1Z' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Point2X' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Point2Y' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Point2Z' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Angle' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset1X' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset2X' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset1Y' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset2Y' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset1Z' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset2Z' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'CardinalPoint' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(107)], HRESULT, 'GetDesignOrientation',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(eFrameDesignOrientation), 'DesignOrientation' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(108)], HRESULT, 'GetPier',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'PierName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(109)], HRESULT, 'SetPier',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'PierName' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(110)], HRESULT, 'GetSpandrel',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'SpandrelName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(113)], HRESULT, 'SetColumnSpliceOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'SpliceOption' ),
              ( ['in'], c_double, 'Height' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(111)], HRESULT, 'SetSpandrel',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'SpandrelName' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(114)], HRESULT, 'GetSpringAssignment',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'SpringProp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(115)], HRESULT, 'SetSpringAssignment',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'SpringProp' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(117)], HRESULT, 'GetCurved_2',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'CurveType' ),
              ( ['in', 'out'], POINTER(c_double), 'Tension' ),
              ( ['in', 'out'], POINTER(c_int), 'NumPnts' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GZ' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cFrameObj implementation
##class cFrameObj_Impl(object):
##    def AddByCoord(self, XI, YI, ZI, XJ, YJ, ZJ, PropName, UserName, CSys):
##        '-no docstring-'
##        #return Name, pRetVal
##
##    def AddByPoint(self, Point1, Point2, PropName, UserName):
##        '-no docstring-'
##        #return Name, pRetVal
##
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self, MyType):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteLateralBracing(self, Name, MyType, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteLoadDistributed(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteLoadPoint(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteLoadTemperature(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteMass(self, Name, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteModifiers(self, Name, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteSpring(self, Name, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetDesignProcedure(self, Name):
##        '-no docstring-'
##        #return MyType, pRetVal
##
##    def GetElm(self, Name):
##        '-no docstring-'
##        #return NElm, Elm, RDI, RDJ, pRetVal
##
##    def GetEndLengthOffset(self, Name):
##        '-no docstring-'
##        #return AutoOffset, Length1, Length2, RZ, pRetVal
##
##    def GetGUID(self, Name):
##        '-no docstring-'
##        #return GUID, pRetVal
##
##    def GetHingeAssigns(self, Name):
##        '-no docstring-'
##        #return NumberHinges, HingeNum, Prop, MyType, Behavior, Source, Rd, pRetVal
##
##    def GetHingeAssigns_1(self, Name):
##        '-no docstring-'
##        #return NumberHinges, HingeNum, Prop, MyType, Behavior, Source, LocType, Rd, AD, pRetVal
##
##    def GetInsertionPoint(self, Name):
##        '-no docstring-'
##        #return CardinalPoint, Mirror2, StiffTransform, Offset1, Offset2, CSys, pRetVal
##
##    def GetLateralBracing(self, Name):
##        '-no docstring-'
##        #return NumberItems, FrameName, MyType, Loc, RD1, RD2, Dist1, Dist2, pRetVal
##
##    def GetLoadDistributed(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, FrameName, LoadPat, MyType, CSys, Dir, RD1, RD2, Dist1, Dist2, Val1, Val2, pRetVal
##
##    def GetLoadPoint(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, FrameName, LoadPat, MyType, CSys, Dir, RelDist, Dist, Val, pRetVal
##
##    def GetLoadTemperature(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, FrameName, LoadPat, MyType, Val, PatternName, pRetVal
##
##    def GetLocalAxes(self, Name):
##        '-no docstring-'
##        #return Ang, Advanced, pRetVal
##
##    def GetMass(self, Name):
##        '-no docstring-'
##        #return MassOverL, pRetVal
##
##    def GetMaterialOverwrite(self, Name):
##        '-no docstring-'
##        #return PropName, pRetVal
##
##    def GetModifiers(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetOutputStations(self, Name):
##        '-no docstring-'
##        #return MyType, MaxSegSize, MinSections, NoOutPutAndDesignAtElementEnds, NoOutPutAndDesignAtPointLoads, pRetVal
##
##    def GetPoints(self, Name):
##        '-no docstring-'
##        #return Point1, Point2, pRetVal
##
##    def GetReleases(self, Name):
##        '-no docstring-'
##        #return II, JJ, StartValue, EndValue, pRetVal
##
##    def GetSection(self, Name):
##        '-no docstring-'
##        #return PropName, SAuto, pRetVal
##
##    def GetSectionNonPrismatic(self, Name):
##        '-no docstring-'
##        #return PropName, SVarTotalLength, SVarRelStartLoc, pRetVal
##
##    def GetSelected(self, Name):
##        '-no docstring-'
##        #return Selected, pRetVal
##
##    def GetTCLimits(self, Name):
##        '-no docstring-'
##        #return LimitCompressionExists, LimitCompression, LimitTensionExists, LimitTension, pRetVal
##
##    def GetTransformationMatrix(self, Name, IsGlobal):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetTypeOAPI(self, Name):
##        '-no docstring-'
##        #return MyType, pRetVal
##
##    def SetDesignProcedure(self, Name, MyType, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetEndLengthOffset(self, Name, AutoOffset, Length1, Length2, RZ, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetGroupAssign(self, Name, GroupName, Remove, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetGUID(self, Name, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetInsertionPoint(self, Name, CardinalPoint, Mirror2, StiffTransform, CSys, ItemType):
##        '-no docstring-'
##        #return Offset1, Offset2, pRetVal
##
##    def SetLateralBracing(self, Name, MyType, Loc, MyDist1, MyDist2, RelDist, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoadDistributed(self, Name, LoadPat, MyType, Dir, Dist1, Dist2, Val1, Val2, CSys, RelDist, Replace, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoadPoint(self, Name, LoadPat, MyType, Dir, Dist, Val, CSys, RelDist, Replace, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoadTemperature(self, Name, LoadPat, MyType, Val, PatternName, Replace, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLocalAxes(self, Name, Ang, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetMass(self, Name, MassOverL, Replace, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetMaterialOverwrite(self, Name, PropName, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetModifiers(self, Name, ItemType):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOutputStations(self, Name, MyType, MaxSegSize, MinSections, NoOutPutAndDesignAtElementEnds, NoOutPutAndDesignAtPointLoads, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetReleases(self, Name, ItemType):
##        '-no docstring-'
##        #return II, JJ, StartValue, EndValue, pRetVal
##
##    def SetSection(self, Name, PropName, ItemType, SVarRelStartLoc, SVarTotalLength):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSelected(self, Name, Selected, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetTCLimits(self, Name, LimitCompressionExists, LimitCompression, LimitTensionExists, LimitTension, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetGroupAssign(self, Name):
##        '-no docstring-'
##        #return NumberGroups, Groups, pRetVal
##
##    def GetMatTemp(self, Name):
##        '-no docstring-'
##        #return Temp, PatternName, pRetVal
##
##    def DeleteFireproofing(self, Name, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetEndSkew(self, Name):
##        '-no docstring-'
##        #return SkewI, SkewJ, pRetVal
##
##    def GetFireproofing(self, Name):
##        '-no docstring-'
##        #return MyType, Thickness, Perimeter, Density, Tf, pRetVal
##
##    def SetEndSkew(self, Name, SkewI, SkewJ, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetFireproofing(self, Name, MyType, Thickness, Perimeter, Density, Tf, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetAutoMesh(self, Name):
##        '-no docstring-'
##        #return AutoMesh, AutoMeshAtPoints, AutoMeshAtLines, NumSegs, AutoMeshMaxLength, pRetVal
##
##    def GetCurved(self):
##        '-no docstring-'
##        #return NumberItems, MyType, GX, GY, GZ, PointName, Radius, NumSegs, pRetVal
##
##    def GetCurved_1(self):
##        '-no docstring-'
##        #return NumberItems, MyName, MyType, GX, GY, GZ, PointName, Radius, NumSegs, pRetVal
##
##    def SetAutoMesh(self, Name, AutoMesh, AutoMeshAtPoints, AutoMeshAtLines, NumSegs, AutoMeshMaxLength, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCurved(self, Name, MyType, X, Y, Z, PointName, Radius, NumSegs, CSys):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetSpring(self, Name):
##        '-no docstring-'
##        #return NumberSprings, MyType, S, SimpleSpringType, LinkProp, SpringLocalOneType, Dir, Plane23Angle, VecX, VecY, VecZ, CSys, Ang, pRetVal
##
##    def GetLocalAxesAdvanced(self, Name):
##        '-no docstring-'
##        #return Active, Plane2, PlVectOpt, PlCSys, PlDir, PlPt, PlVect, pRetVal
##
##    def SetLocalAxesAdvanced(self, Name, Active, Plane2, PlVectOpt, PlCSys, ItemType):
##        '-no docstring-'
##        #return PlDir, PlPt, PlVect, pRetVal
##
##    def SetSpring(self, Name, MyType, S, SimpleSpringType, LinkProp, SpringLocalOneType, Dir, Plane23Angle, Ang, Replace, CSys, ItemType):
##        '-no docstring-'
##        #return Vec, pRetVal
##
##    def SetStraight(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteLoadDeformation(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteLoadGravity(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteLoadStrain(self, Name, LoadPat, DOF, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteLoadTargetForce(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeletePDeltaForce(self, Name, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetDAMModifiers(self, Name):
##        '-no docstring-'
##        #return EAModifier, EIModifier, pRetVal
##
##    def GetFireproofing_1(self, Name):
##        '-no docstring-'
##        #return MyType, Thickness, Perimeter, Density, Tf, IncludeInSelfWeight, IncludeInGravityLoads, IncludeInThisLoadPattern, pRetVal
##
##    def GetInsertionPoint_1(self, Name):
##        '-no docstring-'
##        #return CardinalPoint, Mirror2, Mirror3, StiffTransform, Offset1, Offset2, CSys, pRetVal
##
##    def GetLoadDeformation(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, FrameName, LoadPat, DOF1, DOF2, DOF3, DOF4, DOF5, DOF6, U1, U2, U3, R1, R2, R3, pRetVal
##
##    def GetLoadGravity(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, FrameName, LoadPat, CSys, X, Y, Z, pRetVal
##
##    def GetLoadStrain(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, FrameName, LoadPat, DOF, Val, PatternName, pRetVal
##
##    def GetLoadTargetForce(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, FrameName, LoadPat, DOF1, DOF2, DOF3, DOF4, DOF5, DOF6, P, V2, V3, T, M2, M3, T1, T2, T3, T4, T5, T6, pRetVal
##
##    def GetLoadTransfer(self, Name):
##        '-no docstring-'
##        #return Val, pRetVal
##
##    def GetPDeltaForce(self, Name):
##        '-no docstring-'
##        #return NumberForces, PDeltaForce, Dir, CSys, pRetVal
##
##    def SetFireproofing_1(self, Name, MyType, Thickness, Perimeter, Density, Tf, IncludeInSelfWeight, IncludeInGravityLoads, IncludeInThisLoadPattern, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetInsertionPoint_1(self, Name, CardinalPoint, Mirror2, Mirror3, StiffTransform, CSys, ItemType):
##        '-no docstring-'
##        #return Offset1, Offset2, pRetVal
##
##    def SetLoadDeformation(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return DOF, D, pRetVal
##
##    def SetLoadGravity(self, Name, LoadPat, X, Y, Z, Replace, CSys, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoadStrain(self, Name, LoadPat, DOF, Val, Replace, PatternName, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoadTargetForce(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return DOF, F, Rd, pRetVal
##
##    def SetLoadTransfer(self, Name, Val, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetMatTemp(self, Name, Temp, PatternName, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPDeltaForce(self, Name, PDeltaForce, Dir, Replace, CSys, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetLoadDistributedWithGUID(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, FrameName, LoadPat, MyType, CSys, Dir, RD1, RD2, Dist1, Dist2, Val1, Val2, GUID, pRetVal
##
##    def SetLoadDistributedWithGUID(self, Name, LoadPat, MyType, Dir, Dist1, Dist2, Val1, Val2, CSys, RelDist, Replace):
##        '-no docstring-'
##        #return GUID, pRetVal
##
##    def DeleteLoadDistributedWithGUID(self, Name, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetLoadPointWithGUID(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, FrameName, LoadPat, MyType, CSys, Dir, RelDist, Dist, Val, GUID, pRetVal
##
##    def SetLoadPointWithGUID(self, Name, LoadPat, MyType, Dir, Dist, Val, CSys, RelDist, Replace):
##        '-no docstring-'
##        #return GUID, pRetVal
##
##    def DeleteLoadPointWithGUID(self, Name, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetBridgeObjectFoundationFlag(self, Name):
##        '-no docstring-'
##        #return NumberItems, FrameName, BObjName, SpanIndex, FoundationIndex, Part, PartIndex, ItemType, pRetVal
##
##    def SetBridgeObjectFoundationFlag(self, Name, BObjName, SpanIndex, FoundationIndex, Part, PartIndex, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetAxialRatingResistance(self, Name, RatingType):
##        '-no docstring-'
##        #return IsResistanceDefined, CompressiveResistance, TensileResistance, pRetVal
##
##    def SetAxialRatingResistance(self, Name, RatingType, IsResistanceDefined, CompressiveResistance, TensileResistance):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetColumnSpliceOverwrite(self, Name):
##        '-no docstring-'
##        #return SpliceOption, Height, pRetVal
##
##    def GetNameListOnStory(self, StoryName):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetLabelNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, MyLabel, MyStory, pRetVal
##
##    def GetLabelFromName(self, Name):
##        '-no docstring-'
##        #return Label, Story, pRetVal
##
##    def GetNameFromLabel(self, Label, Story):
##        '-no docstring-'
##        #return Name, pRetVal
##
##    def GetSupports(self, Name):
##        '-no docstring-'
##        #return SupportName1, SupportType1, SupportName2, SupportType2, pRetVal
##
##    def GetAllFrames(self, CSys):
##        '-no docstring-'
##        #return NumberNames, MyName, PropName, StoryName, PointName1, PointName2, Point1X, Point1Y, Point1Z, Point2X, Point2Y, Point2Z, Angle, Offset1X, Offset2X, Offset1Y, Offset2Y, Offset1Z, Offset2Z, CardinalPoint, pRetVal
##
##    def GetDesignOrientation(self, Name):
##        '-no docstring-'
##        #return DesignOrientation, pRetVal
##
##    def GetPier(self, Name):
##        '-no docstring-'
##        #return PierName, pRetVal
##
##    def SetPier(self, Name, PierName, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetSpandrel(self, Name):
##        '-no docstring-'
##        #return SpandrelName, pRetVal
##
##    def SetColumnSpliceOverwrite(self, Name, SpliceOption, Height, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSpandrel(self, Name, SpandrelName, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetSpringAssignment(self, Name):
##        '-no docstring-'
##        #return SpringProp, pRetVal
##
##    def SetSpringAssignment(self, Name, SpringProp, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetCurved_2(self, Name):
##        '-no docstring-'
##        #return CurveType, Tension, NumPnts, GX, GY, GZ, pRetVal
##

cBDRS_CJ_D62_04_CBoxCrkWth._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_CJ_D62_04_CBoxCrkWth implementation
##class cBDRS_CJ_D62_04_CBoxCrkWth_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class StartService(CoClass):
    _reg_clsid_ = GUID('{A953267D-34E7-32F7-BADA-3ADD23C8DE52}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{F896D55D-8BDF-4232-B9AB-4B210897A81D}', 1, 0)
class _StartService(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{682F2220-53A2-382C-8D68-1F58F625DDBE}')
    _idlflags_ = ['hidden', 'dual', 'oleautomation']
StartService._com_interfaces_ = [_StartService, comtypes.gen._BED7F4EA_1A96_11D2_8F08_00A0C9A6186D_0_2_4._Object]

class cCaseExternalResults(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{D8F59E7E-3715-47CC-A106-28CFDC374B05}')
    _idlflags_ = ['dual', 'oleautomation']
cCaseExternalResults._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'SetCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetNumberSteps',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'FirstStep' ),
              ( ['in'], c_int, 'LastStep' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cCaseExternalResults implementation
##class cCaseExternalResults_Impl(object):
##    def SetCase(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetNumberSteps(self, Name, FirstStep, LastStep):
##        '-no docstring-'
##        #return pRetVal
##


# values for enumeration 'eDesignActionType'
eDesignActionType_NonComposite = 1
eDesignActionType_ShortTermComposite = 2
eDesignActionType_LongTermComposite = 3
eDesignActionType_Staged = 4
eDesignActionType_Other = 5
eDesignActionType = c_int # enum
_StartService._methods_ = [
]
################################################################
## code template for _StartService implementation
##class _StartService_Impl(object):

class cDCoSP63133302011(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{4D27ECEB-BC0A-4CC3-AFFE-8ED987CB0906}')
    _idlflags_ = ['dual', 'oleautomation']
class cDCoACI318_19(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{05E0564F-818E-4DCD-A9F8-CA26456C3416}')
    _idlflags_ = ['dual', 'oleautomation']
class cDCoAS_3600_2018(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{B3BF727A-AAA3-44C6-AE4A-CEAC46CBD9B3}')
    _idlflags_ = ['dual', 'oleautomation']
class cDCoItalianNTC2008C(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{4A8A1F77-7272-4494-B817-3A13ED8AE10E}')
    _idlflags_ = ['dual', 'oleautomation']
class cDCoNZS_3101_2006(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{E94E5473-4348-4193-A764-94C93F615176}')
    _idlflags_ = ['dual', 'oleautomation']
class cDCoHong_Kong_CP_2013(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{1AFCAAFF-D895-4362-811A-032D56A9CCAA}')
    _idlflags_ = ['dual', 'oleautomation']
cDesignConcrete._methods_ = [
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'ACI318_08_IBC2009',
              ( ['out', 'retval'], POINTER(POINTER(cDCoACI318_08_IBC2009)), 'pRetVal' )),
    COMMETHOD([dispid(16), 'propget'], HRESULT, 'Eurocode_2_2004',
              ( ['out', 'retval'], POINTER(POINTER(cDCoEurocode_2_2004)), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'GetCode',
              ( ['in', 'out'], POINTER(BSTR), 'CodeName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'GetDesignSection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(48)], HRESULT, 'GetResultsAvailable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'GetSummaryResultsBeam',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Location' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TopCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TopArea' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BotCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BotArea' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'VMajorCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VMajorArea' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TLCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TLArea' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TTCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TTArea' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ErrorSummary' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'WarningSummary' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'GetSummaryResultsColumn',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyOption' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Location' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PMMCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PMMArea' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PMMRatio' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'VMajorCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AVMajor' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'VMinorCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AVMinor' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ErrorSummary' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'WarningSummary' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'GetSummaryResultsJoint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LCJSRatioMajor' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'JSRatioMajor' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LCJSRatioMinor' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'JSRatioMinor' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LCBCCRatioMajor' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BCCRatioMajor' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LCBCCRatioMinor' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BCCRatioMinor' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ErrorSummary' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'WarningSummary' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(30)], HRESULT, 'SetCode',
              ( ['in'], BSTR, 'CodeName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(32)], HRESULT, 'SetDesignSection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'PropName' ),
              ( ['in'], VARIANT_BOOL, 'LastAnalysis' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(34)], HRESULT, 'StartDesign',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(51), 'propget'], HRESULT, 'SP63_13330_2012',
              ( ['out', 'retval'], POINTER(POINTER(cDCoSP63133302011)), 'pRetVal' )),
    COMMETHOD([dispid(12), 'propget'], HRESULT, 'CSA_A23_3_04',
              ( ['out', 'retval'], POINTER(POINTER(cDCoCSA_A23_3_04)), 'pRetVal' )),
    COMMETHOD([dispid(38), 'propget'], HRESULT, 'ACI318_11',
              ( ['out', 'retval'], POINTER(POINTER(cDCoACI318_11)), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'DeleteResults',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(46)], HRESULT, 'GetComboAutoGenerate',
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'AutoGenerate' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'GetComboStrength',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(47)], HRESULT, 'SetComboAutoGenerate',
              ( ['in'], VARIANT_BOOL, 'AutoGenerate' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(31)], HRESULT, 'SetComboStrength',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'Selected' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(36)], HRESULT, 'VerifyPassed',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(c_int), 'N1' ),
              ( ['in', 'out'], POINTER(c_int), 'N2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(37)], HRESULT, 'VerifySections',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(29)], HRESULT, 'ResetOverwrites',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'AS_3600_09',
              ( ['out', 'retval'], POINTER(POINTER(cDCoAS_3600_09)), 'pRetVal' )),
    COMMETHOD([dispid(9), 'propget'], HRESULT, 'BS8110_97',
              ( ['out', 'retval'], POINTER(POINTER(cDCoBS8110_97)), 'pRetVal' )),
    COMMETHOD([dispid(11), 'propget'], HRESULT, 'Chinese_2010',
              ( ['out', 'retval'], POINTER(POINTER(cDCoChinese_2010)), 'pRetVal' )),
    COMMETHOD([dispid(24), 'propget'], HRESULT, 'Indian_IS_456_2000',
              ( ['out', 'retval'], POINTER(POINTER(cDCoIndian_IS_456_2000)), 'pRetVal' )),
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'AASHTO_Concrete_07',
              ( ['out', 'retval'], POINTER(POINTER(cDCoAASHTO_07)), 'pRetVal' )),
    COMMETHOD([dispid(44), 'propget'], HRESULT, 'AASHTO_Concrete_12',
              ( ['out', 'retval'], POINTER(POINTER(cDCoAASHTO_12)), 'pRetVal' )),
    COMMETHOD([dispid(45), 'propget'], HRESULT, 'AASHTO_Concrete_14',
              ( ['out', 'retval'], POINTER(POINTER(cDCoAASHTO_14)), 'pRetVal' )),
    COMMETHOD([dispid(49)], HRESULT, 'GetRebarPrefsBeam',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(50)], HRESULT, 'GetRebarPrefsColumn',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(52), 'propget'], HRESULT, 'ACI318_14',
              ( ['out', 'retval'], POINTER(POINTER(cDCoACI318_14)), 'pRetVal' )),
    COMMETHOD([dispid(53)], HRESULT, 'GetSummaryResultsBeam_2',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Location' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TopCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TopArea' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TopAreaReq' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TopAreaMin' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TopAreaProvided' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BotCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BotArea' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BotAreaReq' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BotAreaMin' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BotAreaProvided' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'VMajorCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VMajorArea' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VmajorAreaReq' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VmajorAreaMin' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VmajorAreaProvided' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TLCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TLArea' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TTCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TTArea' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ErrorSummary' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'WarningSummary' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(54), 'propget'], HRESULT, 'ACI318_19',
              ( ['out', 'retval'], POINTER(POINTER(cDCoACI318_19)), 'pRetVal' )),
    COMMETHOD([dispid(55), 'propget'], HRESULT, 'AS_3600_2018',
              ( ['out', 'retval'], POINTER(POINTER(cDCoAS_3600_2018)), 'pRetVal' )),
    COMMETHOD([dispid(56), 'propget'], HRESULT, 'Mexican_RCDF_2017',
              ( ['out', 'retval'], POINTER(POINTER(cDCoMexican_RCDF_2017)), 'pRetVal' )),
    COMMETHOD([dispid(57), 'propget'], HRESULT, 'TS_500_2000_R2018',
              ( ['out', 'retval'], POINTER(POINTER(cDCoTS_500_2000_R2018)), 'pRetVal' )),
    COMMETHOD([dispid(58)], HRESULT, 'GetSeismicFramingType',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'FramingType' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(33), 'propget'], HRESULT, 'Singapore_CP_65_99',
              ( ['out', 'retval'], POINTER(POINTER(cDCoSingapore_CP_65_99)), 'pRetVal' )),
    COMMETHOD([dispid(26), 'propget'], HRESULT, 'KCI_1999',
              ( ['out', 'retval'], POINTER(POINTER(cDCoKCI_1999)), 'pRetVal' )),
    COMMETHOD([dispid(10), 'propget'], HRESULT, 'Chinese_2002',
              ( ['out', 'retval'], POINTER(POINTER(cDCoChinese_2002)), 'pRetVal' )),
    COMMETHOD([dispid(43), 'propget'], HRESULT, 'TS_500_2000',
              ( ['out', 'retval'], POINTER(POINTER(cDCoTS_500_2000)), 'pRetVal' )),
    COMMETHOD([dispid(40), 'propget'], HRESULT, 'Italian_NTC_2008',
              ( ['out', 'retval'], POINTER(POINTER(cDCoItalianNTC2008C)), 'pRetVal' )),
    COMMETHOD([dispid(42), 'propget'], HRESULT, 'NZS_3101_2006',
              ( ['out', 'retval'], POINTER(POINTER(cDCoNZS_3101_2006)), 'pRetVal' )),
    COMMETHOD([dispid(41), 'propget'], HRESULT, 'Mexican_RCDF_2004',
              ( ['out', 'retval'], POINTER(POINTER(cDCoMexican_RCDF_2004)), 'pRetVal' )),
    COMMETHOD([dispid(39), 'propget'], HRESULT, 'Hong_Kong_CP_2013',
              ( ['out', 'retval'], POINTER(POINTER(cDCoHong_Kong_CP_2013)), 'pRetVal' )),
]
################################################################
## code template for cDesignConcrete implementation
##class cDesignConcrete_Impl(object):
##    @property
##    def ACI318_08_IBC2009(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Eurocode_2_2004(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetCode(self):
##        '-no docstring-'
##        #return CodeName, pRetVal
##
##    def GetDesignSection(self, Name):
##        '-no docstring-'
##        #return PropName, pRetVal
##
##    def GetResultsAvailable(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetSummaryResultsBeam(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, FrameName, Location, TopCombo, TopArea, BotCombo, BotArea, VMajorCombo, VMajorArea, TLCombo, TLArea, TTCombo, TTArea, ErrorSummary, WarningSummary, pRetVal
##
##    def GetSummaryResultsColumn(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, FrameName, MyOption, Location, PMMCombo, PMMArea, PMMRatio, VMajorCombo, AVMajor, VMinorCombo, AVMinor, ErrorSummary, WarningSummary, pRetVal
##
##    def GetSummaryResultsJoint(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, FrameName, LCJSRatioMajor, JSRatioMajor, LCJSRatioMinor, JSRatioMinor, LCBCCRatioMajor, BCCRatioMajor, LCBCCRatioMinor, BCCRatioMinor, ErrorSummary, WarningSummary, pRetVal
##
##    def SetCode(self, CodeName):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDesignSection(self, Name, PropName, LastAnalysis, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def StartDesign(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SP63_13330_2012(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def CSA_A23_3_04(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ACI318_11(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteResults(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetComboAutoGenerate(self):
##        '-no docstring-'
##        #return AutoGenerate, pRetVal
##
##    def GetComboStrength(self):
##        '-no docstring-'
##        #return NumberItems, MyName, pRetVal
##
##    def SetComboAutoGenerate(self, AutoGenerate):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetComboStrength(self, Name, Selected):
##        '-no docstring-'
##        #return pRetVal
##
##    def VerifyPassed(self):
##        '-no docstring-'
##        #return NumberItems, N1, N2, MyName, pRetVal
##
##    def VerifySections(self):
##        '-no docstring-'
##        #return NumberItems, MyName, pRetVal
##
##    def ResetOverwrites(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def AS_3600_09(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def BS8110_97(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Chinese_2010(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Indian_IS_456_2000(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def AASHTO_Concrete_07(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def AASHTO_Concrete_12(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def AASHTO_Concrete_14(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetRebarPrefsBeam(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetRebarPrefsColumn(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    @property
##    def ACI318_14(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetSummaryResultsBeam_2(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, FrameName, Location, TopCombo, TopArea, TopAreaReq, TopAreaMin, TopAreaProvided, BotCombo, BotArea, BotAreaReq, BotAreaMin, BotAreaProvided, VMajorCombo, VMajorArea, VmajorAreaReq, VmajorAreaMin, VmajorAreaProvided, TLCombo, TLArea, TTCombo, TTArea, ErrorSummary, WarningSummary, pRetVal
##
##    @property
##    def ACI318_19(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def AS_3600_2018(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Mexican_RCDF_2017(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def TS_500_2000_R2018(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetSeismicFramingType(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, FrameName, FramingType, pRetVal
##
##    @property
##    def Singapore_CP_65_99(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def KCI_1999(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Chinese_2002(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def TS_500_2000(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Italian_NTC_2008(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def NZS_3101_2006(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Mexican_RCDF_2004(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Hong_Kong_CP_2013(self):
##        '-no docstring-'
##        #return pRetVal
##

cCableObj._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'AddByCoord',
              ( ['in'], c_double, 'XI' ),
              ( ['in'], c_double, 'YI' ),
              ( ['in'], c_double, 'ZI' ),
              ( ['in'], c_double, 'XJ' ),
              ( ['in'], c_double, 'YJ' ),
              ( ['in'], c_double, 'ZJ' ),
              ( ['in', 'out'], POINTER(BSTR), 'Name' ),
              ( ['in', 'optional'], BSTR, 'PropName', 'Default' ),
              ( ['in', 'optional'], BSTR, 'UserName', '' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'AddByPoint',
              ( ['in'], BSTR, 'Point1' ),
              ( ['in'], BSTR, 'Point2' ),
              ( ['in', 'out'], POINTER(BSTR), 'Name' ),
              ( ['in', 'optional'], BSTR, 'PropName', 'Default' ),
              ( ['in', 'optional'], BSTR, 'UserName', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'DeleteLoadDeformation',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'DeleteLoadDistributed',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'DeleteLoadGravity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'DeleteLoadStrain',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'DeleteLoadTargetForce',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'DeleteLoadTemperature',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'DeleteMass',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'DeleteModifiers',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'GetCableData',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'CableType' ),
              ( ['in', 'out'], POINTER(c_int), 'NumSegs' ),
              ( ['in', 'out'], POINTER(c_double), 'Weight' ),
              ( ['in', 'out'], POINTER(c_double), 'ProjectedLoad' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UseDeformedGeom' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ModelUsingFrames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Parameter' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'GetCableGeometry',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Sag' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Rd' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'GetElm',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NElm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RDI' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RDJ' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(55)], HRESULT, 'GetGroupAssign',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberGroups' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Groups' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'GetGUID',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'GetInsertionPoint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'StiffTransform' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset2' ),
              ( ['in', 'out'], POINTER(BSTR), 'CSys' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'GetLoadDeformation',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CableName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'GetLoadDistributed',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CableName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Dir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'GetLoadGravity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CableName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'GetLoadStrain',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CableName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Strain' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(23)], HRESULT, 'GetLoadTargetForce',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CableName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'P' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Rd' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(24)], HRESULT, 'GetLoadTemperature',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CableName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Val' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(25)], HRESULT, 'GetMass',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'MassOverL' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(26)], HRESULT, 'GetMaterialOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(27)], HRESULT, 'GetMatTemp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Temp' ),
              ( ['in', 'out'], POINTER(BSTR), 'PatternName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(28)], HRESULT, 'GetModifiers',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(29)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(30)], HRESULT, 'GetOutputStations',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'MyType' ),
              ( ['in', 'out'], POINTER(c_double), 'MaxSegSize' ),
              ( ['in', 'out'], POINTER(c_int), 'MinSections' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'NoOutPutAndDesignAtElementEnds' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'NoOutPutAndDesignAtPointLoads' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(31)], HRESULT, 'GetPoints',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'Point1' ),
              ( ['in', 'out'], POINTER(BSTR), 'Point2' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(32)], HRESULT, 'GetProperty',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(33)], HRESULT, 'GetSelected',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Selected' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(34)], HRESULT, 'GetTransformationMatrix',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'IsGlobal', True ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(35)], HRESULT, 'SetCableData',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CableType' ),
              ( ['in'], c_int, 'NumSegs' ),
              ( ['in'], c_double, 'Weight' ),
              ( ['in'], c_double, 'ProjectedLoad' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'UseDeformedGeom', False ),
              ( ['in', 'optional'], VARIANT_BOOL, 'ModelUsingFrames', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(36)], HRESULT, 'SetGroupAssign',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'GroupName' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Remove', False ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(37)], HRESULT, 'SetGUID',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(38)], HRESULT, 'SetInsertionPoint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'StiffTransform' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset2' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Local' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(39)], HRESULT, 'SetLoadDeformation',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'out'], POINTER(c_double), 'D' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(40)], HRESULT, 'SetLoadDistributed',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in'], c_int, 'MyType' ),
              ( ['in'], c_int, 'Dir' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', True ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(41)], HRESULT, 'SetLoadGravity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in'], c_double, 'X' ),
              ( ['in'], c_double, 'Y' ),
              ( ['in'], c_double, 'Z' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', True ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(42)], HRESULT, 'SetLoadStrain',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in'], c_double, 'Strain' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', True ),
              ( ['in', 'optional'], BSTR, 'PatternName', '' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(43)], HRESULT, 'SetLoadTargetForce',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'out'], POINTER(c_double), 'P' ),
              ( ['in', 'out'], POINTER(c_double), 'Rd' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(44)], HRESULT, 'SetLoadTemperature',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in'], c_double, 'Val' ),
              ( ['in', 'optional'], BSTR, 'PatternName', '' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', True ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(45)], HRESULT, 'SetMass',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'MassOverL' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', False ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(46)], HRESULT, 'SetMaterialOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'PropName' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(47)], HRESULT, 'SetMatTemp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'Temp' ),
              ( ['in', 'optional'], BSTR, 'PatternName', '' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(48)], HRESULT, 'SetModifiers',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(49)], HRESULT, 'SetOutputStations',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'MyType' ),
              ( ['in'], c_double, 'MaxSegSize' ),
              ( ['in'], c_int, 'MinSections' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'NoOutPutAndDesignAtElementEnds', False ),
              ( ['in', 'optional'], VARIANT_BOOL, 'NoOutPutAndDesignAtPointLoads', False ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(50)], HRESULT, 'SetProperty',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'PropName' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(51)], HRESULT, 'SetSelected',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'Selected' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(52)], HRESULT, 'GetLoadDistributedWithGUID',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CableName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Dir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GUID' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(53)], HRESULT, 'SetLoadDistributedWithGUID',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in'], c_int, 'MyType' ),
              ( ['in'], c_int, 'Dir' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', True ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(54)], HRESULT, 'DeleteLoadDistributedWithGUID',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cCableObj implementation
##class cCableObj_Impl(object):
##    def AddByCoord(self, XI, YI, ZI, XJ, YJ, ZJ, PropName, UserName, CSys):
##        '-no docstring-'
##        #return Name, pRetVal
##
##    def AddByPoint(self, Point1, Point2, PropName, UserName):
##        '-no docstring-'
##        #return Name, pRetVal
##
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteLoadDeformation(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteLoadDistributed(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteLoadGravity(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteLoadStrain(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteLoadTargetForce(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteLoadTemperature(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteMass(self, Name, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteModifiers(self, Name, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetCableData(self, Name):
##        '-no docstring-'
##        #return CableType, NumSegs, Weight, ProjectedLoad, UseDeformedGeom, ModelUsingFrames, Parameter, pRetVal
##
##    def GetCableGeometry(self, Name, CSys):
##        '-no docstring-'
##        #return NumberPoints, X, Y, Z, Sag, Dist, Rd, pRetVal
##
##    def GetElm(self, Name):
##        '-no docstring-'
##        #return NElm, Elm, RDI, RDJ, pRetVal
##
##    def GetGroupAssign(self, Name):
##        '-no docstring-'
##        #return NumberGroups, Groups, pRetVal
##
##    def GetGUID(self, Name):
##        '-no docstring-'
##        #return GUID, pRetVal
##
##    def GetInsertionPoint(self, Name):
##        '-no docstring-'
##        #return StiffTransform, Offset1, Offset2, CSys, pRetVal
##
##    def GetLoadDeformation(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, CableName, LoadPat, U1, pRetVal
##
##    def GetLoadDistributed(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, CableName, LoadPat, MyType, CSys, Dir, Value, pRetVal
##
##    def GetLoadGravity(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, CableName, LoadPat, CSys, X, Y, Z, pRetVal
##
##    def GetLoadStrain(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, CableName, LoadPat, Strain, PatternName, pRetVal
##
##    def GetLoadTargetForce(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, CableName, LoadPat, P, Rd, pRetVal
##
##    def GetLoadTemperature(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, CableName, LoadPat, Val, PatternName, pRetVal
##
##    def GetMass(self, Name):
##        '-no docstring-'
##        #return MassOverL, pRetVal
##
##    def GetMaterialOverwrite(self, Name):
##        '-no docstring-'
##        #return PropName, pRetVal
##
##    def GetMatTemp(self, Name):
##        '-no docstring-'
##        #return Temp, PatternName, pRetVal
##
##    def GetModifiers(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetOutputStations(self, Name):
##        '-no docstring-'
##        #return MyType, MaxSegSize, MinSections, NoOutPutAndDesignAtElementEnds, NoOutPutAndDesignAtPointLoads, pRetVal
##
##    def GetPoints(self, Name):
##        '-no docstring-'
##        #return Point1, Point2, pRetVal
##
##    def GetProperty(self, Name):
##        '-no docstring-'
##        #return PropName, pRetVal
##
##    def GetSelected(self, Name):
##        '-no docstring-'
##        #return Selected, pRetVal
##
##    def GetTransformationMatrix(self, Name, IsGlobal):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCableData(self, Name, CableType, NumSegs, Weight, ProjectedLoad, Value, UseDeformedGeom, ModelUsingFrames):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetGroupAssign(self, Name, GroupName, Remove, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetGUID(self, Name, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetInsertionPoint(self, Name, StiffTransform, CSys, ItemType):
##        '-no docstring-'
##        #return Offset1, Offset2, pRetVal
##
##    def SetLoadDeformation(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return D, pRetVal
##
##    def SetLoadDistributed(self, Name, LoadPat, MyType, Dir, Value, CSys, Replace, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoadGravity(self, Name, LoadPat, X, Y, Z, Replace, CSys, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoadStrain(self, Name, LoadPat, Strain, Replace, PatternName, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoadTargetForce(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return P, Rd, pRetVal
##
##    def SetLoadTemperature(self, Name, LoadPat, Val, PatternName, Replace, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetMass(self, Name, MassOverL, Replace, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetMaterialOverwrite(self, Name, PropName, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetMatTemp(self, Name, Temp, PatternName, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetModifiers(self, Name, ItemType):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOutputStations(self, Name, MyType, MaxSegSize, MinSections, NoOutPutAndDesignAtElementEnds, NoOutPutAndDesignAtPointLoads, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetProperty(self, Name, PropName, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSelected(self, Name, Selected, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetLoadDistributedWithGUID(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, CableName, LoadPat, MyType, CSys, Dir, Value, GUID, pRetVal
##
##    def SetLoadDistributedWithGUID(self, Name, LoadPat, MyType, Dir, Value, CSys, Replace):
##        '-no docstring-'
##        #return GUID, pRetVal
##
##    def DeleteLoadDistributedWithGUID(self, Name, GUID):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_CANCSA_S6_06_SteelUCompStrengthRating._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_CANCSA_S6_06_SteelUCompStrengthRating implementation
##class cBDRS_CANCSA_S6_06_SteelUCompStrengthRating_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_AA_L_07_CBoxStress._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_CBoxStress implementation
##class cBDRS_AA_L_07_CBoxStress_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cLinkObj._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'AddByCoord',
              ( ['in'], c_double, 'XI' ),
              ( ['in'], c_double, 'YI' ),
              ( ['in'], c_double, 'ZI' ),
              ( ['in'], c_double, 'XJ' ),
              ( ['in'], c_double, 'YJ' ),
              ( ['in'], c_double, 'ZJ' ),
              ( ['in', 'out'], POINTER(BSTR), 'Name' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'IsSingleJoint', False ),
              ( ['in', 'optional'], BSTR, 'PropName', 'Default' ),
              ( ['in', 'optional'], BSTR, 'UserName', '' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'AddByPoint',
              ( ['in'], BSTR, 'Point1' ),
              ( ['in'], BSTR, 'Point2' ),
              ( ['in', 'out'], POINTER(BSTR), 'Name' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'IsSingleJoint', False ),
              ( ['in', 'optional'], BSTR, 'PropName', 'Default' ),
              ( ['in', 'optional'], BSTR, 'UserName', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetElm',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'Elm' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetGUID',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetLocalAxes',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Ang' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Advanced' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetLocalAxesAdvanced',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Active' ),
              ( ['in', 'out'], POINTER(c_int), 'AxVectOpt' ),
              ( ['in', 'out'], POINTER(BSTR), 'AxCSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'AxDir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AxPt' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AxVect' ),
              ( ['in', 'out'], POINTER(c_int), 'Plane2' ),
              ( ['in', 'out'], POINTER(c_int), 'PlVectOpt' ),
              ( ['in', 'out'], POINTER(BSTR), 'PlCSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PlDir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PlPt' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PlVect' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetPoints',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'Point1' ),
              ( ['in', 'out'], POINTER(BSTR), 'Point2' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetProperty',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'GetSelected',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Selected' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'GetTransformationMatrix',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'IsGlobal', True ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'SetGroupAssign',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'GroupName' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Remove', False ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'SetGUID',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'SetLocalAxes',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'Ang' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'SetLocalAxesAdvanced',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'Active' ),
              ( ['in'], c_int, 'AxVectOpt' ),
              ( ['in'], BSTR, 'AxCSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'AxDir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AxPt' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AxVect' ),
              ( ['in'], c_int, 'Plane2' ),
              ( ['in'], c_int, 'PlVectOpt' ),
              ( ['in'], BSTR, 'PlCSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PlDir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PlPt' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PlVect' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'SetProperty',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'PropName' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'SetSelected',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'Selected' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(33)], HRESULT, 'GetGroupAssign',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberGroups' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Groups' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'DeleteLoadDeformation',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(23)], HRESULT, 'DeleteLoadGravity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(24)], HRESULT, 'DeleteLoadTargetForce',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(25)], HRESULT, 'GetLoadDeformation',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LinkName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF4' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF5' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF6' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(26)], HRESULT, 'GetLoadGravity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LinkName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(27)], HRESULT, 'GetLoadTargetForce',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LinkName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF4' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF5' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF6' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'P' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T4' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T5' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T6' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(28)], HRESULT, 'GetPropertyFD',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(29)], HRESULT, 'SetLoadDeformation',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'D' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(30)], HRESULT, 'SetLoadGravity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in'], c_double, 'X' ),
              ( ['in'], c_double, 'Y' ),
              ( ['in'], c_double, 'Z' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', True ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(31)], HRESULT, 'SetLoadTargetForce',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Rd' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(32)], HRESULT, 'SetPropertyFD',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'PropName' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(34)], HRESULT, 'GetBridgeObjectFoundationFlag',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LinkName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BObjName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SpanIndex' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'FoundationIndex' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(eBridgeObjectFoundationPart)), 'Part' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PartIndex' ),
              ( ['in', 'out', 'optional'], POINTER(eItemType), 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(35)], HRESULT, 'SetBridgeObjectFoundationFlag',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'BObjName' ),
              ( ['in'], c_int, 'SpanIndex' ),
              ( ['in'], c_int, 'FoundationIndex' ),
              ( ['in'], eBridgeObjectFoundationPart, 'Part' ),
              ( ['in'], c_int, 'PartIndex' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'GetNameListOnStory',
              ( ['in'], BSTR, 'StoryName' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cLinkObj implementation
##class cLinkObj_Impl(object):
##    def AddByCoord(self, XI, YI, ZI, XJ, YJ, ZJ, IsSingleJoint, PropName, UserName, CSys):
##        '-no docstring-'
##        #return Name, pRetVal
##
##    def AddByPoint(self, Point1, Point2, IsSingleJoint, PropName, UserName):
##        '-no docstring-'
##        #return Name, pRetVal
##
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetElm(self, Name):
##        '-no docstring-'
##        #return Elm, pRetVal
##
##    def GetGUID(self, Name):
##        '-no docstring-'
##        #return GUID, pRetVal
##
##    def GetLocalAxes(self, Name):
##        '-no docstring-'
##        #return Ang, Advanced, pRetVal
##
##    def GetLocalAxesAdvanced(self, Name):
##        '-no docstring-'
##        #return Active, AxVectOpt, AxCSys, AxDir, AxPt, AxVect, Plane2, PlVectOpt, PlCSys, PlDir, PlPt, PlVect, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetPoints(self, Name):
##        '-no docstring-'
##        #return Point1, Point2, pRetVal
##
##    def GetProperty(self, Name):
##        '-no docstring-'
##        #return PropName, pRetVal
##
##    def GetSelected(self, Name):
##        '-no docstring-'
##        #return Selected, pRetVal
##
##    def GetTransformationMatrix(self, Name, IsGlobal):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetGroupAssign(self, Name, GroupName, Remove, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetGUID(self, Name, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLocalAxes(self, Name, Ang, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLocalAxesAdvanced(self, Name, Active, AxVectOpt, AxCSys, Plane2, PlVectOpt, PlCSys, ItemType):
##        '-no docstring-'
##        #return AxDir, AxPt, AxVect, PlDir, PlPt, PlVect, pRetVal
##
##    def SetProperty(self, Name, PropName, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSelected(self, Name, Selected, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetGroupAssign(self, Name):
##        '-no docstring-'
##        #return NumberGroups, Groups, pRetVal
##
##    def DeleteLoadDeformation(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteLoadGravity(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteLoadTargetForce(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetLoadDeformation(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, LinkName, LoadPat, DOF1, DOF2, DOF3, DOF4, DOF5, DOF6, U1, U2, U3, R1, R2, R3, pRetVal
##
##    def GetLoadGravity(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, LinkName, LoadPat, CSys, X, Y, Z, pRetVal
##
##    def GetLoadTargetForce(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, LinkName, LoadPat, DOF1, DOF2, DOF3, DOF4, DOF5, DOF6, P, V2, V3, T, M2, M3, T1, T2, T3, T4, T5, T6, pRetVal
##
##    def GetPropertyFD(self, Name):
##        '-no docstring-'
##        #return PropName, pRetVal
##
##    def SetLoadDeformation(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return DOF, D, pRetVal
##
##    def SetLoadGravity(self, Name, LoadPat, X, Y, Z, Replace, CSys, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoadTargetForce(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return DOF, F, Rd, pRetVal
##
##    def SetPropertyFD(self, Name, PropName, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetBridgeObjectFoundationFlag(self, Name):
##        '-no docstring-'
##        #return NumberItems, LinkName, BObjName, SpanIndex, FoundationIndex, Part, PartIndex, ItemType, pRetVal
##
##    def SetBridgeObjectFoundationFlag(self, Name, BObjName, SpanIndex, FoundationIndex, Part, PartIndex, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetNameListOnStory(self, StoryName):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##

class cCasePowerSpectralDensity(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{DE9E7C02-9EBC-4F58-A86F-8C7254EC8F02}')
    _idlflags_ = ['dual', 'oleautomation']
cCasePowerSpectralDensity._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetDampConstant',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'HysConMassCoeff' ),
              ( ['in', 'out'], POINTER(c_double), 'HysConStiffCoeff' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetDampInterpolated',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'HysIntFreqUnits' ),
              ( ['in', 'out'], POINTER(c_int), 'HysIntNumFreqs' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'HysIntFreq' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'HysIntMassCoeff' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'HysIntStiffCoeff' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetDampType',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'DampType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetFreqData',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'FreqFirst' ),
              ( ['in', 'out'], POINTER(c_double), 'FreqLast' ),
              ( ['in', 'out'], POINTER(c_int), 'FreqNumIncs' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'FreqAddModal' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'FreqAddModalDev' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'FreqAddSpecified' ),
              ( ['in', 'out'], POINTER(BSTR), 'ModalCase' ),
              ( ['in', 'out'], POINTER(c_int), 'FreqNumModalDev' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FreqModalDev' ),
              ( ['in', 'out'], POINTER(c_int), 'FreqNumSpecified' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FreqSpecified' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetInitialCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'InitialCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetLoads',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Func' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PhaseAngle' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ang' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'SetCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'SetDampConstant',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'HysConMassCoeff' ),
              ( ['in'], c_double, 'HysConStiffCoeff' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'SetDampInterpolated',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'HysIntFreqUnits' ),
              ( ['in'], c_int, 'HysIntNumFreqs' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'HysIntFreq' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'HysIntMassCoeff' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'HysIntStiffCoeff' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'SetFreqData',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'FreqFirst' ),
              ( ['in'], c_double, 'FreqLast' ),
              ( ['in'], c_int, 'FreqNumIncs' ),
              ( ['in'], VARIANT_BOOL, 'FreqAddModal' ),
              ( ['in'], VARIANT_BOOL, 'FreqAddModalDev' ),
              ( ['in'], VARIANT_BOOL, 'FreqAddSpecified' ),
              ( ['in'], BSTR, 'ModalCase' ),
              ( ['in'], c_int, 'FreqNumModalDev' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FreqModalDev' ),
              ( ['in'], c_int, 'FreqNumSpecified' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FreqSpecified' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'SetInitialCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'InitialCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'SetLoads',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Func' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PhaseAngle' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ang' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cCasePowerSpectralDensity implementation
##class cCasePowerSpectralDensity_Impl(object):
##    def GetDampConstant(self, Name):
##        '-no docstring-'
##        #return HysConMassCoeff, HysConStiffCoeff, pRetVal
##
##    def GetDampInterpolated(self, Name):
##        '-no docstring-'
##        #return HysIntFreqUnits, HysIntNumFreqs, HysIntFreq, HysIntMassCoeff, HysIntStiffCoeff, pRetVal
##
##    def GetDampType(self, Name):
##        '-no docstring-'
##        #return DampType, pRetVal
##
##    def GetFreqData(self, Name):
##        '-no docstring-'
##        #return FreqFirst, FreqLast, FreqNumIncs, FreqAddModal, FreqAddModalDev, FreqAddSpecified, ModalCase, FreqNumModalDev, FreqModalDev, FreqNumSpecified, FreqSpecified, pRetVal
##
##    def GetInitialCase(self, Name):
##        '-no docstring-'
##        #return InitialCase, pRetVal
##
##    def GetLoads(self, Name):
##        '-no docstring-'
##        #return NumberLoads, LoadType, LoadName, Func, SF, PhaseAngle, CSys, Ang, pRetVal
##
##    def SetCase(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDampConstant(self, Name, HysConMassCoeff, HysConStiffCoeff):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDampInterpolated(self, Name, HysIntFreqUnits, HysIntNumFreqs):
##        '-no docstring-'
##        #return HysIntFreq, HysIntMassCoeff, HysIntStiffCoeff, pRetVal
##
##    def SetFreqData(self, Name, FreqFirst, FreqLast, FreqNumIncs, FreqAddModal, FreqAddModalDev, FreqAddSpecified, ModalCase, FreqNumModalDev, FreqNumSpecified):
##        '-no docstring-'
##        #return FreqModalDev, FreqSpecified, pRetVal
##
##    def SetInitialCase(self, Name, InitialCase):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoads(self, Name, NumberLoads):
##        '-no docstring-'
##        #return LoadType, LoadName, Func, SF, PhaseAngle, CSys, Ang, pRetVal
##


# values for enumeration 'eMatTypeTendon'
eMatTypeTendon_ASTM_A416Gr250 = 1
eMatTypeTendon_ASTM_A416Gr270 = 2
eMatTypeTendon = c_int # enum
cBCD_Beam._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetDiaphragmProp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'SectBeam' ),
              ( ['in', 'out'], POINTER(c_double), 'WorkPointTop' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetDiaphragmProp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'SectBeam' ),
              ( ['in'], c_double, 'WorkPointTop' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBCD_Beam implementation
##class cBCD_Beam_Impl(object):
##    def GetDiaphragmProp(self, Name):
##        '-no docstring-'
##        #return SectBeam, WorkPointTop, pRetVal
##
##    def SetDiaphragmProp(self, Name, SectBeam, WorkPointTop):
##        '-no docstring-'
##        #return pRetVal
##


# values for enumeration 'eLoadCaseType'
eLoadCaseType_LinearStatic = 1
eLoadCaseType_NonlinearStatic = 2
eLoadCaseType_Modal = 3
eLoadCaseType_ResponseSpectrum = 4
eLoadCaseType_LinearHistory = 5
eLoadCaseType_NonlinearHistory = 6
eLoadCaseType_LinearDynamic = 7
eLoadCaseType_NonlinearDynamic = 8
eLoadCaseType_MovingLoad = 9
eLoadCaseType_Buckling = 10
eLoadCaseType_SteadyState = 11
eLoadCaseType_PowerSpectralDensity = 12
eLoadCaseType_LinearStaticMultiStep = 13
eLoadCaseType_HyperStatic = 14
eLoadCaseType_ExternalResults = 15
eLoadCaseType_StagedConstruction = 16
eLoadCaseType_NonlinearStaticMultiStep = 17
eLoadCaseType = c_int # enum
class cCaseDirectHistoryLinear(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{30095E0D-7EFC-4F59-ACAC-425205C981CA}')
    _idlflags_ = ['dual', 'oleautomation']
class cCaseHyperStatic(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{42B442AE-1620-4148-A63A-13367823CA22}')
    _idlflags_ = ['dual', 'oleautomation']
class cCaseStaticNonlinear(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{9DB10EB1-E89C-4E97-A0FB-0DA6C924D8A2}')
    _idlflags_ = ['dual', 'oleautomation']
cLoadCases._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Buckling',
              ( ['out', 'retval'], POINTER(POINTER(cCaseBuckling)), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'Count',
              ( ['in', 'optional'], eLoadCaseType, 'CaseType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'DirHistLinear',
              ( ['out', 'retval'], POINTER(POINTER(cCaseDirectHistoryLinear)), 'pRetVal' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'DirHistNonlinear',
              ( ['out', 'retval'], POINTER(POINTER(cCaseDirectHistoryNonlinear)), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'optional'], eLoadCaseType, 'CaseType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(27)], HRESULT, 'GetTypeOAPI_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(eLoadCaseType), 'CaseType' ),
              ( ['in', 'out'], POINTER(c_int), 'SubType' ),
              ( ['in', 'out'], POINTER(eLoadPatternType), 'DesignType' ),
              ( ['in', 'out'], POINTER(c_int), 'DesignTypeOption' ),
              ( ['in', 'out'], POINTER(c_int), 'Auto' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10), 'propget'], HRESULT, 'HyperStatic',
              ( ['out', 'retval'], POINTER(POINTER(cCaseHyperStatic)), 'pRetVal' )),
    COMMETHOD([dispid(11), 'propget'], HRESULT, 'ModalEigen',
              ( ['out', 'retval'], POINTER(POINTER(cCaseModalEigen)), 'pRetVal' )),
    COMMETHOD([dispid(12), 'propget'], HRESULT, 'ModalRitz',
              ( ['out', 'retval'], POINTER(POINTER(cCaseModalRitz)), 'pRetVal' )),
    COMMETHOD([dispid(13), 'propget'], HRESULT, 'ModHistLinear',
              ( ['out', 'retval'], POINTER(POINTER(cCaseModalHistoryLinear)), 'pRetVal' )),
    COMMETHOD([dispid(14), 'propget'], HRESULT, 'ModHistNonlinear',
              ( ['out', 'retval'], POINTER(POINTER(cCaseModalHistoryNonlinear)), 'pRetVal' )),
    COMMETHOD([dispid(15), 'propget'], HRESULT, 'ResponseSpectrum',
              ( ['out', 'retval'], POINTER(POINTER(cCaseResponseSpectrum)), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'SetDesignType',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'DesignTypeOption' ),
              ( ['in', 'optional'], eLoadPatternType, 'DesignType', 1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18), 'propget'], HRESULT, 'StaticLinear',
              ( ['out', 'retval'], POINTER(POINTER(cCaseStaticLinear)), 'pRetVal' )),
    COMMETHOD([dispid(19), 'propget'], HRESULT, 'StaticNonlinear',
              ( ['out', 'retval'], POINTER(POINTER(cCaseStaticNonlinear)), 'pRetVal' )),
    COMMETHOD([dispid(20), 'propget'], HRESULT, 'StaticNonlinearStaged',
              ( ['out', 'retval'], POINTER(POINTER(cCaseStaticNonlinearStaged)), 'pRetVal' )),
    COMMETHOD([dispid(26)], HRESULT, 'GetTypeOAPI',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(eLoadCaseType), 'CaseType' ),
              ( ['in', 'out'], POINTER(c_int), 'SubType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(28), 'propget'], HRESULT, 'ExternalResults',
              ( ['out', 'retval'], POINTER(POINTER(cCaseExternalResults)), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'GetDesignAction',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'DesignActionOption' ),
              ( ['in', 'out'], POINTER(eDesignActionType), 'DesignAction' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22), 'propget'], HRESULT, 'Moving',
              ( ['out', 'retval'], POINTER(POINTER(cCaseMovingLoad)), 'pRetVal' )),
    COMMETHOD([dispid(23), 'propget'], HRESULT, 'PSD',
              ( ['out', 'retval'], POINTER(POINTER(cCasePowerSpectralDensity)), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'SetDesignAction',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'DesignActionOption' ),
              ( ['in', 'optional'], eDesignActionType, 'DesignAction', 3 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(24), 'propget'], HRESULT, 'StaticLinearMultistep',
              ( ['out', 'retval'], POINTER(POINTER(cCaseStaticLinearMultistep)), 'pRetVal' )),
    COMMETHOD([dispid(31), 'propget'], HRESULT, 'StaticNonlinearMultistep',
              ( ['out', 'retval'], POINTER(POINTER(cCaseStaticNonlinearMultistep)), 'pRetVal' )),
    COMMETHOD([dispid(25), 'propget'], HRESULT, 'SteadyState',
              ( ['out', 'retval'], POINTER(POINTER(cCaseSteadyState)), 'pRetVal' )),
    COMMETHOD([dispid(29)], HRESULT, 'GetScheduleName',
              ( ['in'], BSTR, 'LoadName' ),
              ( ['in', 'out'], POINTER(BSTR), 'ScheduleName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(30)], HRESULT, 'SetScheduleName',
              ( ['in'], BSTR, 'LoadName' ),
              ( ['in'], BSTR, 'ScheduleName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(32)], HRESULT, 'GetTypeOAPI_2',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(eLoadCaseType), 'CaseType' ),
              ( ['in', 'out'], POINTER(c_int), 'SubType' ),
              ( ['in', 'out'], POINTER(eLoadPatternType), 'DesignType' ),
              ( ['in', 'out'], POINTER(c_int), 'DesignTypeOption' ),
              ( ['in', 'out'], POINTER(c_int), 'Auto' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(33)], HRESULT, 'GetNameList_1',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'optional'], eLoadCaseType, 'CaseType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cLoadCases implementation
##class cLoadCases_Impl(object):
##    @property
##    def Buckling(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self, CaseType):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def DirHistLinear(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def DirHistNonlinear(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetNameList(self, CaseType):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetTypeOAPI_1(self, Name):
##        '-no docstring-'
##        #return CaseType, SubType, DesignType, DesignTypeOption, Auto, pRetVal
##
##    @property
##    def HyperStatic(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ModalEigen(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ModalRitz(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ModHistLinear(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ModHistNonlinear(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ResponseSpectrum(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDesignType(self, Name, DesignTypeOption, DesignType):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def StaticLinear(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def StaticNonlinear(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def StaticNonlinearStaged(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetTypeOAPI(self, Name):
##        '-no docstring-'
##        #return CaseType, SubType, pRetVal
##
##    @property
##    def ExternalResults(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetDesignAction(self, Name):
##        '-no docstring-'
##        #return DesignActionOption, DesignAction, pRetVal
##
##    @property
##    def Moving(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PSD(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDesignAction(self, Name, DesignActionOption, DesignAction):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def StaticLinearMultistep(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def StaticNonlinearMultistep(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteadyState(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetScheduleName(self, LoadName):
##        '-no docstring-'
##        #return ScheduleName, pRetVal
##
##    def SetScheduleName(self, LoadName, ScheduleName):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetTypeOAPI_2(self, Name):
##        '-no docstring-'
##        #return CaseType, SubType, DesignType, DesignTypeOption, Auto, pRetVal
##
##    def GetNameList_1(self, CaseType):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##

cDCoItalianNTC2008C._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDCoItalianNTC2008C implementation
##class cDCoItalianNTC2008C_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_CJ_D62_04_CBoxStress._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetDemandParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], BSTR, 'DemandName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetDemandParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], BSTR, 'DemandName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_CJ_D62_04_CBoxStress implementation
##class cBDRS_CJ_D62_04_CBoxStress_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetDemandParam(self, RequestName, DemandName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDemandParam(self, RequestName, DemandName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_IRC2010_SteelICompConstructibility._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_IRC2010_SteelICompConstructibility implementation
##class cBDRS_IRC2010_SteelICompConstructibility_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBDRS_RussianSNiP_CBoxShear(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{B21A1563-D719-4C2F-80C3-50416AA1B027}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_RussianSNiP_CBox2Stress(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{AF9D3E84-8BD6-4E06-886D-59D34433B52F}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_RussianSNiP_PCCompFlexure(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{8EED347C-B33B-4A46-AD10-142DC8C14B8B}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_RussianSNiP_PCCompShear(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{8F223EDE-9063-46CB-98BE-17D12CBDE249}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_RussianSNiP._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'ConcBoxFlexure',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_RussianSNiP_CBoxFlexure)), 'pRetVal' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'ConcBoxShear',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_RussianSNiP_CBoxShear)), 'pRetVal' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'ConcBoxStress',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_RussianSNiP_CBoxStress)), 'pRetVal' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'ConcBox2Flexure',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_RussianSNiP_CBox2Flexure)), 'pRetVal' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'ConcBox2Shear',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_RussianSNiP_CBox2Shear)), 'pRetVal' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'ConcBox2Stress',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_RussianSNiP_CBox2Stress)), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetCheckType',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in', 'out'], POINTER(c_int), 'CheckType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetLiveLoadDistrib',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9), 'propget'], HRESULT, 'PrecastCompFlexure',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_RussianSNiP_PCCompFlexure)), 'pRetVal' )),
    COMMETHOD([dispid(10), 'propget'], HRESULT, 'PrecastCompShear',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_RussianSNiP_PCCompShear)), 'pRetVal' )),
    COMMETHOD([dispid(11), 'propget'], HRESULT, 'PrecastCompStress',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_RussianSNiP_PCCompStress)), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'SetCheckType',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'CheckType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'SetLiveLoadDistrib',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_RussianSNiP implementation
##class cBDRS_RussianSNiP_Impl(object):
##    @property
##    def ConcBoxFlexure(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBoxShear(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBoxStress(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBox2Flexure(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBox2Shear(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBox2Stress(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetCheckType(self, RequestName):
##        '-no docstring-'
##        #return CheckType, pRetVal
##
##    def GetLiveLoadDistrib(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    @property
##    def PrecastCompFlexure(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PrecastCompShear(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PrecastCompStress(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCheckType(self, RequestName, CheckType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLiveLoadDistrib(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cDCoHong_Kong_CP_2013._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDCoHong_Kong_CP_2013 implementation
##class cDCoHong_Kong_CP_2013_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cCaseDirectHistoryLinear._methods_ = [
    COMMETHOD([dispid(3)], HRESULT, 'GetLoads',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Func' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Tf' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'At' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ang' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(1)], HRESULT, 'GetDampProportional',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'DampType' ),
              ( ['in', 'out'], POINTER(c_double), 'DampA' ),
              ( ['in', 'out'], POINTER(c_double), 'DampB' ),
              ( ['in', 'out'], POINTER(c_double), 'DampF1' ),
              ( ['in', 'out'], POINTER(c_double), 'DampF2' ),
              ( ['in', 'out'], POINTER(c_double), 'DampD1' ),
              ( ['in', 'out'], POINTER(c_double), 'DampD2' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetInitialCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'InitialCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetTimeIntegration',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'IntegrationType' ),
              ( ['in', 'out'], POINTER(c_double), 'Alpha' ),
              ( ['in', 'out'], POINTER(c_double), 'Beta' ),
              ( ['in', 'out'], POINTER(c_double), 'Gamma' ),
              ( ['in', 'out'], POINTER(c_double), 'Theta' ),
              ( ['in', 'out'], POINTER(c_double), 'M' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetTimeStep',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NStep' ),
              ( ['in', 'out'], POINTER(c_double), 'Dt' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'SetCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'SetDampProportional',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'DampType' ),
              ( ['in'], c_double, 'DampA' ),
              ( ['in'], c_double, 'DampB' ),
              ( ['in'], c_double, 'DampF1' ),
              ( ['in'], c_double, 'DampF2' ),
              ( ['in'], c_double, 'DampD1' ),
              ( ['in'], c_double, 'DampD2' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'SetInitialCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'InitialCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'SetLoads',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Func' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Tf' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'At' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ang' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'SetTimeIntegration',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'IntegrationType' ),
              ( ['in'], c_double, 'Alpha' ),
              ( ['in'], c_double, 'Beta' ),
              ( ['in'], c_double, 'Gamma' ),
              ( ['in'], c_double, 'Theta' ),
              ( ['in', 'optional'], c_double, 'M', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'SetTimeStep',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NStep' ),
              ( ['in'], c_double, 'Dt' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cCaseDirectHistoryLinear implementation
##class cCaseDirectHistoryLinear_Impl(object):
##    def GetLoads(self, Name):
##        '-no docstring-'
##        #return NumberLoads, LoadType, LoadName, Func, SF, Tf, At, CSys, Ang, pRetVal
##
##    def GetDampProportional(self, Name):
##        '-no docstring-'
##        #return DampType, DampA, DampB, DampF1, DampF2, DampD1, DampD2, pRetVal
##
##    def GetInitialCase(self, Name):
##        '-no docstring-'
##        #return InitialCase, pRetVal
##
##    def GetTimeIntegration(self, Name):
##        '-no docstring-'
##        #return IntegrationType, Alpha, Beta, Gamma, Theta, M, pRetVal
##
##    def GetTimeStep(self, Name):
##        '-no docstring-'
##        #return NStep, Dt, pRetVal
##
##    def SetCase(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDampProportional(self, Name, DampType, DampA, DampB, DampF1, DampF2, DampD1, DampD2):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetInitialCase(self, Name, InitialCase):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoads(self, Name, NumberLoads):
##        '-no docstring-'
##        #return LoadType, LoadName, Func, SF, Tf, At, CSys, Ang, pRetVal
##
##    def SetTimeIntegration(self, Name, IntegrationType, Alpha, Beta, Gamma, Theta, M):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetTimeStep(self, Name, NStep, Dt):
##        '-no docstring-'
##        #return pRetVal
##


# values for enumeration 'eMatCoupledType'
eMatCoupledType_None = 1
eMatCoupledType_VonMisesPlasticity = 2
eMatCoupledType_ModifiedDarwinPecknoldConcrete = 3
eMatCoupledType = c_int # enum
cBDRS_CJ_D62_04_CBoxFlex._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetDemandParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], BSTR, 'DemandName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetDemandParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], BSTR, 'DemandName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_CJ_D62_04_CBoxFlex implementation
##class cBDRS_CJ_D62_04_CBoxFlex_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetDemandParam(self, RequestName, DemandName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDemandParam(self, RequestName, DemandName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cTower._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'AddCopyOfTower',
              ( ['in'], BSTR, 'TowerName' ),
              ( ['in'], BSTR, 'NewTowerName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'AddNewTower',
              ( ['in'], BSTR, 'TowerName' ),
              ( ['in'], c_int, 'NumberStories' ),
              ( ['in'], c_double, 'TypicalStoryHeight' ),
              ( ['in'], c_double, 'BotttomStoryHeight' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'AllowMultipleTowers',
              ( ['in'], VARIANT_BOOL, 'AllowMultTowers' ),
              ( ['in', 'optional'], BSTR, 'RetainedTower', '' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Combine', True ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'DeleteTower',
              ( ['in'], BSTR, 'TowerName' ),
              ( ['in'], VARIANT_BOOL, 'Associate' ),
              ( ['in', 'optional'], BSTR, 'AssocWithTower', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetActiveTower',
              ( ['in', 'out'], POINTER(BSTR), 'TowerName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'RenameTower',
              ( ['in'], BSTR, 'TowerName' ),
              ( ['in'], BSTR, 'NewTowerName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'SetActiveTower',
              ( ['in'], BSTR, 'TowerName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cTower implementation
##class cTower_Impl(object):
##    def AddCopyOfTower(self, TowerName, NewTowerName):
##        '-no docstring-'
##        #return pRetVal
##
##    def AddNewTower(self, TowerName, NumberStories, TypicalStoryHeight, BotttomStoryHeight):
##        '-no docstring-'
##        #return pRetVal
##
##    def AllowMultipleTowers(self, AllowMultTowers, RetainedTower, Combine):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteTower(self, TowerName, Associate, AssocWithTower):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetActiveTower(self):
##        '-no docstring-'
##        #return TowerName, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def RenameTower(self, TowerName, NewTowerName):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetActiveTower(self, TowerName):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_IRC2010_SteelICompConstructibilityNonStgd._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetDemandParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], BSTR, 'DemandName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetDemandParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], BSTR, 'DemandName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_IRC2010_SteelICompConstructibilityNonStgd implementation
##class cBDRS_IRC2010_SteelICompConstructibilityNonStgd_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetDemandParam(self, RequestName, DemandName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDemandParam(self, RequestName, DemandName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cDesignAluminum._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'AA_ASD_2000',
              ( ['out', 'retval'], POINTER(POINTER(cDAlAA_ASD_2000)), 'pRetVal' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'AA_LRFD_2000',
              ( ['out', 'retval'], POINTER(POINTER(cDAlAA_LRFD_2000)), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'DeleteResults',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetCode',
              ( ['in', 'out'], POINTER(BSTR), 'CodeName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'GetComboAutoGenerate',
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'AutoGenerate' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetComboDeflection',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetComboStrength',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetDesignSection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetGroup',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'GetResultsAvailable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetSummaryResults',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ratio' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'RatioType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Location' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ComboName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ErrorSummary' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'WarningSummary' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'ResetOverwrites',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'SetAutoSelectNull',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'SetCode',
              ( ['in'], BSTR, 'CodeName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'SetComboAutoGenerate',
              ( ['in'], VARIANT_BOOL, 'AutoGenerate' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'SetComboDeflection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'Selected' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'SetComboStrength',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'Selected' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'SetDesignSection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'PropName' ),
              ( ['in'], VARIANT_BOOL, 'LastAnalysis' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'SetGroup',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'Selected' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'StartDesign',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'VerifyPassed',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(c_int), 'N1' ),
              ( ['in', 'out'], POINTER(c_int), 'N2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'VerifySections',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDesignAluminum implementation
##class cDesignAluminum_Impl(object):
##    @property
##    def AA_ASD_2000(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def AA_LRFD_2000(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteResults(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetCode(self):
##        '-no docstring-'
##        #return CodeName, pRetVal
##
##    def GetComboAutoGenerate(self):
##        '-no docstring-'
##        #return AutoGenerate, pRetVal
##
##    def GetComboDeflection(self):
##        '-no docstring-'
##        #return NumberItems, MyName, pRetVal
##
##    def GetComboStrength(self):
##        '-no docstring-'
##        #return NumberItems, MyName, pRetVal
##
##    def GetDesignSection(self, Name):
##        '-no docstring-'
##        #return PropName, pRetVal
##
##    def GetGroup(self):
##        '-no docstring-'
##        #return NumberItems, MyName, pRetVal
##
##    def GetResultsAvailable(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetSummaryResults(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, FrameName, Ratio, RatioType, Location, ComboName, ErrorSummary, WarningSummary, pRetVal
##
##    def ResetOverwrites(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetAutoSelectNull(self, Name, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCode(self, CodeName):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetComboAutoGenerate(self, AutoGenerate):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetComboDeflection(self, Name, Selected):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetComboStrength(self, Name, Selected):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDesignSection(self, Name, PropName, LastAnalysis, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetGroup(self, Name, Selected):
##        '-no docstring-'
##        #return pRetVal
##
##    def StartDesign(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def VerifyPassed(self):
##        '-no docstring-'
##        #return NumberItems, N1, N2, MyName, pRetVal
##
##    def VerifySections(self):
##        '-no docstring-'
##        #return NumberItems, MyName, pRetVal
##

cBDRS_AA_L_07_CBox2Flex._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_CBox2Flex implementation
##class cBDRS_AA_L_07_CBox2Flex_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cDCoNZS_3101_2006._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDCoNZS_3101_2006 implementation
##class cDCoNZS_3101_2006_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBDRS_BS5400_PCCompFlex(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{4CCAD0D2-CA66-439B-867B-5ABADD8E4611}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_BS5400_PCCompShr(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{90569553-84E5-49AA-A22A-6833A58913B5}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_BS5400._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCheckType',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in', 'out'], POINTER(c_int), 'CheckType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetLiveLoadDistrib',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCheckType',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'CheckType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetLiveLoadDistrib',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'PrecastCompFlexure',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_BS5400_PCCompFlex)), 'pRetVal' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'PrecastCompShear',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_BS5400_PCCompShr)), 'pRetVal' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'PrecastCompStress',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_BS5400_PCCompStr)), 'pRetVal' )),
    COMMETHOD([dispid(8), 'propget'], HRESULT, 'SteelICompConstruct',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_BS5400_SICompCnstr)), 'pRetVal' )),
    COMMETHOD([dispid(9), 'propget'], HRESULT, 'SteelICompConstructNonStgd',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_BS5400_SICompCnstNS)), 'pRetVal' )),
    COMMETHOD([dispid(10), 'propget'], HRESULT, 'SteelICompService',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_BS5400_SICompServ)), 'pRetVal' )),
    COMMETHOD([dispid(11), 'propget'], HRESULT, 'SteelICompStrength',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_BS5400_SICompStr)), 'pRetVal' )),
]
################################################################
## code template for cBDRS_BS5400 implementation
##class cBDRS_BS5400_Impl(object):
##    def GetCheckType(self, RequestName):
##        '-no docstring-'
##        #return CheckType, pRetVal
##
##    def GetLiveLoadDistrib(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCheckType(self, RequestName, CheckType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLiveLoadDistrib(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PrecastCompFlexure(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PrecastCompShear(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PrecastCompStress(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelICompConstruct(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelICompConstructNonStgd(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelICompService(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelICompStrength(self):
##        '-no docstring-'
##        #return pRetVal
##

cBASConcTBeam._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'CountSuperCutStressPointGirder',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in', 'out'], POINTER(c_int), 'CountPoint' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetSuperCutGirderNames',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'sname' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetSuperCutGirderRebarLong',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'Mat' ),
              ( ['in', 'out'], POINTER(c_int), 'RebarCount' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RebarX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RebarY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'DType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'RebarSize' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberBars' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetSuperCutGirderRebarTransv',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_double, 'DistBefore' ),
              ( ['in'], c_double, 'DistAfter' ),
              ( ['in', 'out'], POINTER(BSTR), 'Mat' ),
              ( ['in', 'out'], POINTER(c_double), 'RebarTransV' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetSuperCutGirderTendonNames',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_int, 'TendonIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'BridgeTendon' ),
              ( ['in', 'out'], POINTER(BSTR), 'TendonObj' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetSuperCutGirderTendonValues',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_int, 'TendonIndex' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetSuperCutGirderValues',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetSuperCutSectionValues',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetSuperCutStressPointGirder',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_int, 'PointIndex' ),
              ( ['in', 'out'], POINTER(c_double), 'X' ),
              ( ['in', 'out'], POINTER(c_double), 'Y' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_int), 'Location' ),
              ( ['in', 'out'], POINTER(BSTR), 'Note' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetSuperCutWebCoordsAtY',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_double, 'Y' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberWebs' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'WebIsCut' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WebLeft' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WebRight' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetSuperCutGirderRebarTransvSpac',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in'], c_int, 'DirectionFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'RebarSpacing' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetSuperCutGirderRebarLong_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CutIndex' ),
              ( ['in'], c_int, 'GirderIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'Mat' ),
              ( ['in', 'out'], POINTER(c_int), 'RebarCount' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RebarX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RebarY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'DType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'RebarSize' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AreaFactor' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBASConcTBeam implementation
##class cBASConcTBeam_Impl(object):
##    def CountSuperCutStressPointGirder(self, Name, CutIndex, GirderIndex):
##        '-no docstring-'
##        #return CountPoint, pRetVal
##
##    def GetSuperCutGirderNames(self, Name, CutIndex, GirderIndex, Item):
##        '-no docstring-'
##        #return sname, pRetVal
##
##    def GetSuperCutGirderRebarLong(self, Name, CutIndex, GirderIndex):
##        '-no docstring-'
##        #return Mat, RebarCount, RebarX, RebarY, DType, RebarSize, NumberBars, pRetVal
##
##    def GetSuperCutGirderRebarTransv(self, Name, CutIndex, GirderIndex, DistBefore, DistAfter):
##        '-no docstring-'
##        #return Mat, RebarTransV, pRetVal
##
##    def GetSuperCutGirderTendonNames(self, Name, CutIndex, GirderIndex, TendonIndex):
##        '-no docstring-'
##        #return BridgeTendon, TendonObj, pRetVal
##
##    def GetSuperCutGirderTendonValues(self, Name, CutIndex, GirderIndex, TendonIndex, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetSuperCutGirderValues(self, Name, CutIndex, GirderIndex, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetSuperCutSectionValues(self, Name, CutIndex, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetSuperCutStressPointGirder(self, Name, CutIndex, GirderIndex, PointIndex):
##        '-no docstring-'
##        #return X, Y, MatProp, Location, Note, pRetVal
##
##    def GetSuperCutWebCoordsAtY(self, Name, CutIndex, Y):
##        '-no docstring-'
##        #return NumberWebs, WebIsCut, WebLeft, WebRight, pRetVal
##
##    def GetSuperCutGirderRebarTransvSpac(self, Name, CutIndex, GirderIndex, DirectionFlag):
##        '-no docstring-'
##        #return RebarSpacing, pRetVal
##
##    def GetSuperCutGirderRebarLong_1(self, Name, CutIndex, GirderIndex):
##        '-no docstring-'
##        #return Mat, RebarCount, RebarX, RebarY, DType, RebarSize, NumberBars, AreaFactor, pRetVal
##

cBDRS_IRC2010_SteelICompRebar._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_IRC2010_SteelICompRebar implementation
##class cBDRS_IRC2010_SteelICompRebar_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_CJ_D62_04_CBoxPrin._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetDemandParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], BSTR, 'DemandName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetDemandParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], BSTR, 'DemandName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_CJ_D62_04_CBoxPrin implementation
##class cBDRS_CJ_D62_04_CBoxPrin_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetDemandParam(self, RequestName, DemandName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDemandParam(self, RequestName, DemandName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_CJ_D62_04_CBoxTdnStr._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_CJ_D62_04_CBoxTdnStr implementation
##class cBDRS_CJ_D62_04_CBoxTdnStr_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_BS5400_PCCompFlex._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_BS5400_PCCompFlex implementation
##class cBDRS_BS5400_PCCompFlex_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cDCdAISI_16._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDCdAISI_16 implementation
##class cDCdAISI_16_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_CJ_D62_04_CBoxCrkStr._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetDemandParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], BSTR, 'DemandName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetDemandParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], BSTR, 'DemandName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_CJ_D62_04_CBoxCrkStr implementation
##class cBDRS_CJ_D62_04_CBoxCrkStr_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetDemandParam(self, RequestName, DemandName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDemandParam(self, RequestName, DemandName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_RussianSNiP_CBoxShear._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], BSTR, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_RussianSNiP_CBoxShear implementation
##class cBDRS_RussianSNiP_CBoxShear_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetCapacityParamString(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCapacityParamString(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cDCoSP63133302011._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDCoSP63133302011 implementation
##class cDCoSP63133302011_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cBDRS_EUROCODE_SICompSrvRb(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{1CDA49FF-8409-4F49-8F32-B43D231F43BE}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_EUROCODE_SICompServ(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{23081615-8BF7-403B-992E-71D9EF6CD3DC}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_EUROCODE_SICompUlt(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{9C12FE02-09EF-455C-8DD3-408074F4B4B0}')
    _idlflags_ = ['dual', 'oleautomation']
class cBDRS_EUROCODE_SteelUCompConstructibility(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{5E3DC247-DBE8-4FEA-8BBE-83A7A2089F91}')
    _idlflags_ = ['dual', 'oleautomation']
cBDRS_EUROCODE._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'ConcBoxFlexure',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_EUROCODE_CBoxFlex)), 'pRetVal' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'ConcBoxShear',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_EUROCODE_CBoxShr)), 'pRetVal' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'ConcBoxStress',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_EUROCODE_CBoxStr)), 'pRetVal' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'ConcBox2Flexure',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_EUROCODE_CBox2Flex)), 'pRetVal' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'ConcBox2Shear',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_EUROCODE_CBox2Shr)), 'pRetVal' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'ConcBox2Stress',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_EUROCODE_CBox2Str)), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetCheckType',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in', 'out'], POINTER(c_int), 'CheckType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetLiveLoadDistrib',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9), 'propget'], HRESULT, 'PrecastCompFlexure',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_EUROCODE_PCCompFlex)), 'pRetVal' )),
    COMMETHOD([dispid(10), 'propget'], HRESULT, 'PrecastCompShear',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_EUROCODE_PCCompShr)), 'pRetVal' )),
    COMMETHOD([dispid(11), 'propget'], HRESULT, 'PrecastCompStress',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_EUROCODE_PCCompStr)), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'SetCheckType',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'CheckType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'SetLiveLoadDistrib',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14), 'propget'], HRESULT, 'SteelICompConstruct',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_EUROCODE_SICmpCnstr)), 'pRetVal' )),
    COMMETHOD([dispid(15), 'propget'], HRESULT, 'SteelICompConstructNonStgd',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_EUROCODE_SICmpCnstNS)), 'pRetVal' )),
    COMMETHOD([dispid(16), 'propget'], HRESULT, 'SteelICompRebar',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_EUROCODE_SICompSrvRb)), 'pRetVal' )),
    COMMETHOD([dispid(17), 'propget'], HRESULT, 'SteelICompService',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_EUROCODE_SICompServ)), 'pRetVal' )),
    COMMETHOD([dispid(18), 'propget'], HRESULT, 'SteelICompStrength',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_EUROCODE_SICompUlt)), 'pRetVal' )),
    COMMETHOD([dispid(19), 'propget'], HRESULT, 'SteelUCompConstruct',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_EUROCODE_SteelUCompConstructibility)), 'pRetVal' )),
    COMMETHOD([dispid(20), 'propget'], HRESULT, 'SteelUCompConstructNonStgd',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_EUROCODE_SteelUCompConstructibilityNonStgd)), 'pRetVal' )),
    COMMETHOD([dispid(21), 'propget'], HRESULT, 'SteelUCompRebar',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_EUROCODE_SteelUCompServiceRebar)), 'pRetVal' )),
    COMMETHOD([dispid(22), 'propget'], HRESULT, 'SteelUCompService',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_EUROCODE_SteelUCompService)), 'pRetVal' )),
    COMMETHOD([dispid(23), 'propget'], HRESULT, 'SteelUCompStrength',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_EUROCODE_SteelUCompUltimate)), 'pRetVal' )),
    COMMETHOD([dispid(24), 'propget'], HRESULT, 'ConcBoxCrack',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_EUROCODE_CBoxCrack)), 'pRetVal' )),
    COMMETHOD([dispid(25), 'propget'], HRESULT, 'ConcBox2Crack',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_EUROCODE_CBox2Crack)), 'pRetVal' )),
    COMMETHOD([dispid(26), 'propget'], HRESULT, 'PrecastCompCrack',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_EUROCODE_PCCompCrack)), 'pRetVal' )),
    COMMETHOD([dispid(27), 'propget'], HRESULT, 'ConcTBeamFlexure',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_EUROCODE_ConTBeamFlex)), 'pRetVal' )),
    COMMETHOD([dispid(28), 'propget'], HRESULT, 'ConcTBeamShear',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_EUROCODE_ConTBeamShr)), 'pRetVal' )),
    COMMETHOD([dispid(29), 'propget'], HRESULT, 'ConcTBeamStress',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_EUROCODE_ConTBeamStr)), 'pRetVal' )),
    COMMETHOD([dispid(30), 'propget'], HRESULT, 'ConcTBeamCrack',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_EUROCODE_ConTBeamCrack)), 'pRetVal' )),
    COMMETHOD([dispid(31), 'propget'], HRESULT, 'ConcSlabFlexure',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_EUROCODE_ConcSlabFlex)), 'pRetVal' )),
    COMMETHOD([dispid(32), 'propget'], HRESULT, 'ConcSlabShear',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_EUROCODE_ConcSlabShr)), 'pRetVal' )),
    COMMETHOD([dispid(33), 'propget'], HRESULT, 'ConcSlabStress',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_EUROCODE_ConcSlabStr)), 'pRetVal' )),
    COMMETHOD([dispid(34), 'propget'], HRESULT, 'ConcSlabCrack',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_EUROCODE_ConcSlabCrack)), 'pRetVal' )),
    COMMETHOD([dispid(35), 'propget'], HRESULT, 'ConcSolidFlexure',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_EUROCODE_ConcSolidFlex)), 'pRetVal' )),
    COMMETHOD([dispid(36), 'propget'], HRESULT, 'ConcSolidShear',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_EUROCODE_ConcSolidShr)), 'pRetVal' )),
    COMMETHOD([dispid(37), 'propget'], HRESULT, 'ConcSolidStress',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_EUROCODE_ConcSolidStr)), 'pRetVal' )),
    COMMETHOD([dispid(38), 'propget'], HRESULT, 'ConcSolidCrack',
              ( ['out', 'retval'], POINTER(POINTER(cBDRS_EUROCODE_ConcSolidCrack)), 'pRetVal' )),
]
################################################################
## code template for cBDRS_EUROCODE implementation
##class cBDRS_EUROCODE_Impl(object):
##    @property
##    def ConcBoxFlexure(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBoxShear(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBoxStress(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBox2Flexure(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBox2Shear(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBox2Stress(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetCheckType(self, RequestName):
##        '-no docstring-'
##        #return CheckType, pRetVal
##
##    def GetLiveLoadDistrib(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    @property
##    def PrecastCompFlexure(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PrecastCompShear(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PrecastCompStress(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCheckType(self, RequestName, CheckType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLiveLoadDistrib(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelICompConstruct(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelICompConstructNonStgd(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelICompRebar(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelICompService(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelICompStrength(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelUCompConstruct(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelUCompConstructNonStgd(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelUCompRebar(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelUCompService(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SteelUCompStrength(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBoxCrack(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcBox2Crack(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PrecastCompCrack(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcTBeamFlexure(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcTBeamShear(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcTBeamStress(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcTBeamCrack(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcSlabFlexure(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcSlabShear(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcSlabStress(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcSlabCrack(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcSolidFlexure(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcSolidShear(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcSolidStress(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConcSolidCrack(self):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_BS5400_PCCompShr._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], BSTR, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_BS5400_PCCompShr implementation
##class cBDRS_BS5400_PCCompShr_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetCapacityParamString(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCapacityParamString(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cCaseStaticNonlinear._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetGeometricNonlinearity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NLGeomType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetHingeUnloading',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'UnloadType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetInitialCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'InitialCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetLoadApplication',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'LoadControl' ),
              ( ['in', 'out'], POINTER(c_int), 'DispType' ),
              ( ['in', 'out'], POINTER(c_double), 'Displ' ),
              ( ['in', 'out'], POINTER(c_int), 'Monitor' ),
              ( ['in', 'out'], POINTER(c_int), 'DOF' ),
              ( ['in', 'out'], POINTER(BSTR), 'PointName' ),
              ( ['in', 'out'], POINTER(BSTR), 'GDispl' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetLoads',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetModalCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'ModalCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetResultsSaved',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SaveMultipleSteps' ),
              ( ['in', 'out'], POINTER(c_int), 'MinSavedStates' ),
              ( ['in', 'out'], POINTER(c_int), 'MaxSavedStates' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'PositiveOnly' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetSolControlParameters',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'MaxTotalSteps' ),
              ( ['in', 'out'], POINTER(c_int), 'MaxFailedSubSteps' ),
              ( ['in', 'out'], POINTER(c_int), 'MaxIterCS' ),
              ( ['in', 'out'], POINTER(c_int), 'MaxIterNR' ),
              ( ['in', 'out'], POINTER(c_double), 'TolConvD' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UseEventStepping' ),
              ( ['in', 'out'], POINTER(c_double), 'TolEventD' ),
              ( ['in', 'out'], POINTER(c_int), 'MaxLineSearchPerIter' ),
              ( ['in', 'out'], POINTER(c_double), 'TolLineSearch' ),
              ( ['in', 'out'], POINTER(c_double), 'LineSearchStepFact' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetTargetForceParameters',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'TolConvF' ),
              ( ['in', 'out'], POINTER(c_int), 'MaxIter' ),
              ( ['in', 'out'], POINTER(c_double), 'AccelFact' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'NoStop' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'SetCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'SetGeometricNonlinearity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NLGeomType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'SetHingeUnloading',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'UnloadType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'SetInitialCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'InitialCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'SetLoadApplication',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'LoadControl' ),
              ( ['in'], c_int, 'DispType' ),
              ( ['in'], c_double, 'Displ' ),
              ( ['in'], c_int, 'Monitor' ),
              ( ['in'], c_int, 'DOF' ),
              ( ['in'], BSTR, 'PointName' ),
              ( ['in'], BSTR, 'GDispl' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'SetLoads',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'SetModalCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'ModalCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'SetResultsSaved',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'SaveMultipleSteps' ),
              ( ['in', 'optional'], c_int, 'MinSavedStates', 10 ),
              ( ['in', 'optional'], c_int, 'MaxSavedStates', 100 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'PositiveOnly', True ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'SetSolControlParameters',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'MaxTotalSteps' ),
              ( ['in'], c_int, 'MaxFailedSubSteps' ),
              ( ['in'], c_int, 'MaxIterCS' ),
              ( ['in'], c_int, 'MaxIterNR' ),
              ( ['in'], c_double, 'TolConvD' ),
              ( ['in'], VARIANT_BOOL, 'UseEventStepping' ),
              ( ['in'], c_double, 'TolEventD' ),
              ( ['in'], c_int, 'MaxLineSearchPerIter' ),
              ( ['in'], c_double, 'TolLineSearch' ),
              ( ['in'], c_double, 'LineSearchStepFact' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'SetTargetForceParameters',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'TolConvF' ),
              ( ['in'], c_int, 'MaxIter' ),
              ( ['in'], c_double, 'AccelFact' ),
              ( ['in'], VARIANT_BOOL, 'NoStop' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'GetMassSource',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'mSource' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'SetMassSource',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'mSource' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cCaseStaticNonlinear implementation
##class cCaseStaticNonlinear_Impl(object):
##    def GetGeometricNonlinearity(self, Name):
##        '-no docstring-'
##        #return NLGeomType, pRetVal
##
##    def GetHingeUnloading(self, Name):
##        '-no docstring-'
##        #return UnloadType, pRetVal
##
##    def GetInitialCase(self, Name):
##        '-no docstring-'
##        #return InitialCase, pRetVal
##
##    def GetLoadApplication(self, Name):
##        '-no docstring-'
##        #return LoadControl, DispType, Displ, Monitor, DOF, PointName, GDispl, pRetVal
##
##    def GetLoads(self, Name):
##        '-no docstring-'
##        #return NumberLoads, LoadType, LoadName, SF, pRetVal
##
##    def GetModalCase(self, Name):
##        '-no docstring-'
##        #return ModalCase, pRetVal
##
##    def GetResultsSaved(self, Name):
##        '-no docstring-'
##        #return SaveMultipleSteps, MinSavedStates, MaxSavedStates, PositiveOnly, pRetVal
##
##    def GetSolControlParameters(self, Name):
##        '-no docstring-'
##        #return MaxTotalSteps, MaxFailedSubSteps, MaxIterCS, MaxIterNR, TolConvD, UseEventStepping, TolEventD, MaxLineSearchPerIter, TolLineSearch, LineSearchStepFact, pRetVal
##
##    def GetTargetForceParameters(self, Name):
##        '-no docstring-'
##        #return TolConvF, MaxIter, AccelFact, NoStop, pRetVal
##
##    def SetCase(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetGeometricNonlinearity(self, Name, NLGeomType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetHingeUnloading(self, Name, UnloadType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetInitialCase(self, Name, InitialCase):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoadApplication(self, Name, LoadControl, DispType, Displ, Monitor, DOF, PointName, GDispl):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoads(self, Name, NumberLoads):
##        '-no docstring-'
##        #return LoadType, LoadName, SF, pRetVal
##
##    def SetModalCase(self, Name, ModalCase):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetResultsSaved(self, Name, SaveMultipleSteps, MinSavedStates, MaxSavedStates, PositiveOnly):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSolControlParameters(self, Name, MaxTotalSteps, MaxFailedSubSteps, MaxIterCS, MaxIterNR, TolConvD, UseEventStepping, TolEventD, MaxLineSearchPerIter, TolLineSearch, LineSearchStepFact):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetTargetForceParameters(self, Name, TolConvF, MaxIter, AccelFact, NoStop):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetMassSource(self, Name):
##        '-no docstring-'
##        #return mSource, pRetVal
##
##    def SetMassSource(self, Name, mSource):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_AA_L_07_SINCompStrRt._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_SINCompStrRt implementation
##class cBDRS_AA_L_07_SINCompStrRt_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_CANCSAS606_CBoxFlexRating._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_CANCSAS606_CBoxFlexRating implementation
##class cBDRS_CANCSAS606_CBoxFlexRating_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_AA_L_07_CBoxServiceRt._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], BSTR, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_CBoxServiceRt implementation
##class cBDRS_AA_L_07_CBoxServiceRt_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetCapacityParamString(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCapacityParamString(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_EUROCODE_SICompSrvRb._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_EUROCODE_SICompSrvRb implementation
##class cBDRS_EUROCODE_SICompSrvRb_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_RussianSNiP_CBox2Stress._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_RussianSNiP_CBox2Stress implementation
##class cBDRS_RussianSNiP_CBox2Stress_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_CANCSAS606_PCCompFlexRating._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_CANCSAS606_PCCompFlexRating implementation
##class cBDRS_CANCSAS606_PCCompFlexRating_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cDesignCompositeBeam._methods_ = [
    COMMETHOD([dispid(6)], HRESULT, 'DeleteResults',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetCode',
              ( ['in', 'out'], POINTER(BSTR), 'CodeName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetComboDeflection',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetComboStrength',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetDesignSection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetGroup',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(28)], HRESULT, 'GetResultsAvailable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'GetSummaryResults',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'DesignSect' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BeamFy' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StudDia' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StudLayout' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'BeamShored' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BeamCamber' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PassFail' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ReacLeft' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ReacRt' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MMaxNeg' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MMaxPos' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PCC' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'OverallRatio' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StudRatio' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StrPMRat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ConstPMRat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StrShrRat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ConShrRat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PCDLDfRat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SDLDfRat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LLDfRat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TotCamDfRat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FreqRat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MDampRat' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'GetTargetDispl',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Point' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Displ' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Active' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'GetTargetPeriod',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(BSTR), 'ModalCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Mode' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Period' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Active' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'ResetOverwrites',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'SetAutoSelectNull',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'SetCode',
              ( ['in'], BSTR, 'CodeName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'SetComboDeflection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'Selected' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'SetComboStrength',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'Selected' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'SetDesignSection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'PropName' ),
              ( ['in'], VARIANT_BOOL, 'LastAnalysis' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'SetGroup',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'Selected' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(23)], HRESULT, 'SetTargetDispl',
              ( ['in'], c_int, 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Point' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Displ' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Active', True ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(24)], HRESULT, 'SetTargetPeriod',
              ( ['in'], c_int, 'NumberItems' ),
              ( ['in'], BSTR, 'ModalCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Mode' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Period' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Active', True ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(25)], HRESULT, 'StartDesign',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(26)], HRESULT, 'VerifyPassed',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(c_int), 'N1' ),
              ( ['in', 'out'], POINTER(c_int), 'N2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(27)], HRESULT, 'VerifySections',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDesignCompositeBeam implementation
##class cDesignCompositeBeam_Impl(object):
##    def DeleteResults(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetCode(self):
##        '-no docstring-'
##        #return CodeName, pRetVal
##
##    def GetComboDeflection(self):
##        '-no docstring-'
##        #return NumberItems, MyName, pRetVal
##
##    def GetComboStrength(self):
##        '-no docstring-'
##        #return NumberItems, MyName, pRetVal
##
##    def GetDesignSection(self, Name):
##        '-no docstring-'
##        #return PropName, pRetVal
##
##    def GetGroup(self):
##        '-no docstring-'
##        #return NumberItems, MyName, pRetVal
##
##    def GetResultsAvailable(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetSummaryResults(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, DesignSect, BeamFy, StudDia, StudLayout, BeamShored, BeamCamber, PassFail, ReacLeft, ReacRt, MMaxNeg, MMaxPos, PCC, OverallRatio, StudRatio, StrPMRat, ConstPMRat, StrShrRat, ConShrRat, PCDLDfRat, SDLDfRat, LLDfRat, TotCamDfRat, FreqRat, MDampRat, pRetVal
##
##    def GetTargetDispl(self):
##        '-no docstring-'
##        #return NumberItems, LoadCase, Point, Displ, Active, pRetVal
##
##    def GetTargetPeriod(self):
##        '-no docstring-'
##        #return NumberItems, ModalCase, Mode, Period, Active, pRetVal
##
##    def ResetOverwrites(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetAutoSelectNull(self, Name, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCode(self, CodeName):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetComboDeflection(self, Name, Selected):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetComboStrength(self, Name, Selected):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDesignSection(self, Name, PropName, LastAnalysis, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetGroup(self, Name, Selected):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetTargetDispl(self, NumberItems, Active):
##        '-no docstring-'
##        #return LoadCase, Point, Displ, pRetVal
##
##    def SetTargetPeriod(self, NumberItems, ModalCase, Active):
##        '-no docstring-'
##        #return Mode, Period, pRetVal
##
##    def StartDesign(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def VerifyPassed(self):
##        '-no docstring-'
##        #return NumberItems, N1, N2, MyName, pRetVal
##
##    def VerifySections(self):
##        '-no docstring-'
##        #return NumberItems, MyName, pRetVal
##

cBDRS_CANCSAS606_CBox2Flex._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_CANCSAS606_CBox2Flex implementation
##class cBDRS_CANCSAS606_CBox2Flex_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cGridSys._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetGridSys',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'X' ),
              ( ['in', 'out'], POINTER(c_double), 'Y' ),
              ( ['in', 'out'], POINTER(c_double), 'RZ' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetTransformationMatrix',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'SetGridSys',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'X' ),
              ( ['in'], c_double, 'Y' ),
              ( ['in'], c_double, 'RZ' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetGridSys_2',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Xo' ),
              ( ['in', 'out'], POINTER(c_double), 'Yo' ),
              ( ['in', 'out'], POINTER(c_double), 'RZ' ),
              ( ['in', 'out'], POINTER(BSTR), 'GridSysType' ),
              ( ['in', 'out'], POINTER(c_int), 'NumXLines' ),
              ( ['in', 'out'], POINTER(c_int), 'NumYLines' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GridLineIDX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GridLineIDY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'OrdinateX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'OrdinateY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'VisibleX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'VisibleY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BubbleLocX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BubbleLocY' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetGridSysType',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'GridSysType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetNameTypeList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GridSysName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GridSysType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetGridSysCartesian',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Xo' ),
              ( ['in', 'out'], POINTER(c_double), 'Yo' ),
              ( ['in', 'out'], POINTER(c_double), 'RZ' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'StoryRangeIsDefault' ),
              ( ['in', 'out'], POINTER(BSTR), 'TopStory' ),
              ( ['in', 'out'], POINTER(BSTR), 'BottomStory' ),
              ( ['in', 'out'], POINTER(c_double), 'BubbleSize' ),
              ( ['in', 'out'], POINTER(c_int), 'GridColor' ),
              ( ['in', 'out'], POINTER(c_int), 'NumXLines' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GridLineIDX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'OrdinateX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'VisibleX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BubbleLocX' ),
              ( ['in', 'out'], POINTER(c_int), 'NumYLines' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GridLineIDY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'OrdinateY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'VisibleY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BubbleLocY' ),
              ( ['in', 'out'], POINTER(c_int), 'NumGenLines' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GridLineIDGen' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GenOrdX1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GenOrdY1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GenOrdX2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GenOrdY2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'VisibleGen' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BubbleLocGen' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetGridSysCylindrical',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Xo' ),
              ( ['in', 'out'], POINTER(c_double), 'Yo' ),
              ( ['in', 'out'], POINTER(c_double), 'RZ' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'StoryRangeIsDefault' ),
              ( ['in', 'out'], POINTER(BSTR), 'TopStory' ),
              ( ['in', 'out'], POINTER(BSTR), 'BottomStory' ),
              ( ['in', 'out'], POINTER(c_double), 'BubbleSize' ),
              ( ['in', 'out'], POINTER(c_int), 'GridColor' ),
              ( ['in', 'out'], POINTER(c_int), 'NumRLines' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GridLineIDR' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'OrdinateR' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'VisibleR' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BubbleLocR' ),
              ( ['in', 'out'], POINTER(c_int), 'NumTLines' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GridLineIDT' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'OrdinateT' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'VisibleT' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BubbleLocT' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cGridSys implementation
##class cGridSys_Impl(object):
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetGridSys(self, Name):
##        '-no docstring-'
##        #return X, Y, RZ, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetTransformationMatrix(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetGridSys(self, Name, X, Y, RZ):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetGridSys_2(self, Name):
##        '-no docstring-'
##        #return Xo, Yo, RZ, GridSysType, NumXLines, NumYLines, GridLineIDX, GridLineIDY, OrdinateX, OrdinateY, VisibleX, VisibleY, BubbleLocX, BubbleLocY, pRetVal
##
##    def GetGridSysType(self, Name):
##        '-no docstring-'
##        #return GridSysType, pRetVal
##
##    def GetNameTypeList(self):
##        '-no docstring-'
##        #return NumberNames, GridSysName, GridSysType, pRetVal
##
##    def GetGridSysCartesian(self, Name):
##        '-no docstring-'
##        #return Xo, Yo, RZ, StoryRangeIsDefault, TopStory, BottomStory, BubbleSize, GridColor, NumXLines, GridLineIDX, OrdinateX, VisibleX, BubbleLocX, NumYLines, GridLineIDY, OrdinateY, VisibleY, BubbleLocY, NumGenLines, GridLineIDGen, GenOrdX1, GenOrdY1, GenOrdX2, GenOrdY2, VisibleGen, BubbleLocGen, pRetVal
##
##    def GetGridSysCylindrical(self, Name):
##        '-no docstring-'
##        #return Xo, Yo, RZ, StoryRangeIsDefault, TopStory, BottomStory, BubbleSize, GridColor, NumRLines, GridLineIDR, OrdinateR, VisibleR, BubbleLocR, NumTLines, GridLineIDT, OrdinateT, VisibleT, BubbleLocT, pRetVal
##

cPlaneElm._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetLoadGravity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PlaneName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z' ),
              ( ['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetLoadPorePressure',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PlaneName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName' ),
              ( ['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetLoadRotate',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PlaneName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetLoadStrain',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PlaneName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Component' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName' ),
              ( ['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetLoadSurfacePressure',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PlaneName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Face' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName' ),
              ( ['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetLoadTemperature',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PlaneName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName' ),
              ( ['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetLoadUniform',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PlaneName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Dir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetLocalAxes',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Ang' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetMatTemp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Temp' ),
              ( ['in', 'out'], POINTER(BSTR), 'PatternName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetObj',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'Obj' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'GetPoints',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Point' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'GetProperty',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'GetTransformationMatrix',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cPlaneElm implementation
##class cPlaneElm_Impl(object):
##    def Count(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetLoadGravity(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberItems, PlaneName, LoadPat, CSys, X, Y, Z, pRetVal
##
##    def GetLoadPorePressure(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberItems, PlaneName, LoadPat, Value, PatternName, pRetVal
##
##    def GetLoadRotate(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberItems, PlaneName, LoadPat, Value, pRetVal
##
##    def GetLoadStrain(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberItems, PlaneName, LoadPat, Component, Value, PatternName, pRetVal
##
##    def GetLoadSurfacePressure(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberItems, PlaneName, LoadPat, Face, Value, PatternName, pRetVal
##
##    def GetLoadTemperature(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberItems, PlaneName, LoadPat, MyType, Value, PatternName, pRetVal
##
##    def GetLoadUniform(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberItems, PlaneName, LoadPat, CSys, Dir, Value, pRetVal
##
##    def GetLocalAxes(self, Name):
##        '-no docstring-'
##        #return Ang, pRetVal
##
##    def GetMatTemp(self, Name):
##        '-no docstring-'
##        #return Temp, PatternName, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetObj(self, Name):
##        '-no docstring-'
##        #return Obj, pRetVal
##
##    def GetPoints(self, Name):
##        '-no docstring-'
##        #return NumberPoints, Point, pRetVal
##
##    def GetProperty(self, Name):
##        '-no docstring-'
##        #return PropName, pRetVal
##
##    def GetTransformationMatrix(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##

cDStAISC360_16._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDStAISC360_16 implementation
##class cDStAISC360_16_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cDStAISC_LRFD93._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDStAISC_LRFD93 implementation
##class cDStAISC_LRFD93_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_AA_L_07_SUCompConstr._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_SUCompConstr implementation
##class cBDRS_AA_L_07_SUCompConstr_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cCaseHyperStatic._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetBaseCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'HyperStaticCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetBaseCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'HyperStaticCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cCaseHyperStatic implementation
##class cCaseHyperStatic_Impl(object):
##    def GetBaseCase(self, Name):
##        '-no docstring-'
##        #return HyperStaticCase, pRetVal
##
##    def SetBaseCase(self, Name, HyperStaticCase):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCase(self, Name):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_CANCSAS606_CBoxShrRating._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], BSTR, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_CANCSAS606_CBoxShrRating implementation
##class cBDRS_CANCSAS606_CBoxShrRating_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetCapacityParamString(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCapacityParamString(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cPropLineSpring._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetLineSpringProp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'U1' ),
              ( ['in', 'out'], POINTER(c_double), 'U2' ),
              ( ['in', 'out'], POINTER(c_double), 'U3' ),
              ( ['in', 'out'], POINTER(c_double), 'R1' ),
              ( ['in', 'out'], POINTER(c_int), 'NonlinearOption2' ),
              ( ['in', 'out'], POINTER(c_int), 'NonlinearOption3' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'iGUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'SetLineSpringProp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'U1' ),
              ( ['in'], c_double, 'U2' ),
              ( ['in'], c_double, 'U3' ),
              ( ['in'], c_double, 'R1' ),
              ( ['in'], c_int, 'NonlinearOption2' ),
              ( ['in'], c_int, 'NonlinearOption3' ),
              ( ['in', 'optional'], c_int, 'Color', 0 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'iGUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cPropLineSpring implementation
##class cPropLineSpring_Impl(object):
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetLineSpringProp(self, Name):
##        '-no docstring-'
##        #return U1, U2, U3, R1, NonlinearOption2, NonlinearOption3, Color, Notes, iGUID, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def SetLineSpringProp(self, Name, U1, U2, U3, R1, NonlinearOption2, NonlinearOption3, Color, Notes, iGUID):
##        '-no docstring-'
##        #return pRetVal
##

cSolidObj._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'AddByCoord',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z' ),
              ( ['in', 'out'], POINTER(BSTR), 'Name' ),
              ( ['in', 'optional'], BSTR, 'PropName', 'Default' ),
              ( ['in', 'optional'], BSTR, 'UserName', '' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'AddByPoint',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Point' ),
              ( ['in', 'out'], POINTER(BSTR), 'Name' ),
              ( ['in', 'optional'], BSTR, 'PropName', 'Default' ),
              ( ['in', 'optional'], BSTR, 'UserName', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'DeleteLoadGravity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'DeleteLoadPorePressure',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'DeleteLoadStrain',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in'], c_int, 'Component' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'DeleteLoadSurfacePressure',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'DeleteLoadTemperature',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'DeleteSpring',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetAutoMesh',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'MeshType' ),
              ( ['in', 'out'], POINTER(c_int), 'N1' ),
              ( ['in', 'out'], POINTER(c_int), 'N2' ),
              ( ['in', 'out'], POINTER(c_int), 'N3' ),
              ( ['in', 'out'], POINTER(c_double), 'MaxSize1' ),
              ( ['in', 'out'], POINTER(c_double), 'MaxSize2' ),
              ( ['in', 'out'], POINTER(c_double), 'MaxSize3' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'RestraintsOnEdge' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'RestraintsOnFace' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'GetEdgeConstraint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ConstraintExists' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'GetElm',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NElm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(45)], HRESULT, 'GetGroupAssign',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberGroups' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Groups' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'GetGUID',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'GetLoadGravity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SolidName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'GetLoadPorePressure',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SolidName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'GetLoadStrain',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SolidName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Component' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'GetLoadSurfacePressure',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SolidName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Face' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'GetLoadTemperature',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SolidName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'GetLocalAxes',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'A' ),
              ( ['in', 'out'], POINTER(c_double), 'B' ),
              ( ['in', 'out'], POINTER(c_double), 'C' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Advanced' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'GetLocalAxesAdvanced',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Active' ),
              ( ['in', 'out'], POINTER(c_int), 'AxVectOpt' ),
              ( ['in', 'out'], POINTER(BSTR), 'AxCSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'AxDir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AxPt' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AxVect' ),
              ( ['in', 'out'], POINTER(c_int), 'Plane2' ),
              ( ['in', 'out'], POINTER(c_int), 'PlVectOpt' ),
              ( ['in', 'out'], POINTER(BSTR), 'PlCSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PlDir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PlPt' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PlVect' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(23)], HRESULT, 'GetMatTemp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Temp' ),
              ( ['in', 'out'], POINTER(BSTR), 'PatternName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(24)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(25)], HRESULT, 'GetPoints',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Point' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(26)], HRESULT, 'GetProperty',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(27)], HRESULT, 'GetSelected',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Selected' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(28)], HRESULT, 'GetSpring',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberSprings' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SimpleSpringType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LinkProp' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Face' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SpringLocalOneType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Dir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Outward' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VecX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VecY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VecZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ang' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(29)], HRESULT, 'GetTransformationMatrix',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'IsGlobal', True ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(30)], HRESULT, 'SetAutoMesh',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'MeshType' ),
              ( ['in', 'optional'], c_int, 'N1', 2 ),
              ( ['in', 'optional'], c_int, 'N2', 2 ),
              ( ['in', 'optional'], c_int, 'N3', 2 ),
              ( ['in', 'optional'], c_double, 'MaxSize1', 0.0 ),
              ( ['in', 'optional'], c_double, 'MaxSize2', 0.0 ),
              ( ['in', 'optional'], c_double, 'MaxSize3', 0.0 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'RestraintsOnEdge', False ),
              ( ['in', 'optional'], VARIANT_BOOL, 'RestraintsOnFace', False ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(31)], HRESULT, 'SetEdgeConstraint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'ConstraintExists' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(32)], HRESULT, 'SetGroupAssign',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'GroupName' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Remove', False ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(33)], HRESULT, 'SetGUID',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(34)], HRESULT, 'SetLoadGravity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in'], c_double, 'X' ),
              ( ['in'], c_double, 'Y' ),
              ( ['in'], c_double, 'Z' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', True ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(35)], HRESULT, 'SetLoadPorePressure',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], BSTR, 'PatternName', '' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', True ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(36)], HRESULT, 'SetLoadStrain',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in'], c_int, 'Component' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', True ),
              ( ['in', 'optional'], BSTR, 'PatternName', '' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(37)], HRESULT, 'SetLoadSurfacePressure',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in'], c_int, 'Face' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], BSTR, 'PatternName', '' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', True ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(38)], HRESULT, 'SetLoadTemperature',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], BSTR, 'PatternName', '' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', True ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(39)], HRESULT, 'SetLocalAxes',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'A' ),
              ( ['in'], c_double, 'B' ),
              ( ['in'], c_double, 'C' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(40)], HRESULT, 'SetLocalAxesAdvanced',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'Active' ),
              ( ['in'], c_int, 'AxVectOpt' ),
              ( ['in'], BSTR, 'AxCSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'AxDir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AxPt' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AxVect' ),
              ( ['in'], c_int, 'Plane2' ),
              ( ['in'], c_int, 'PlVectOpt' ),
              ( ['in'], BSTR, 'PlCSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PlDir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PlPt' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PlVect' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(41)], HRESULT, 'SetMatTemp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'Temp' ),
              ( ['in', 'optional'], BSTR, 'PatternName', '' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(42)], HRESULT, 'SetProperty',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'PropName' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(43)], HRESULT, 'SetSelected',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'Selected' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(44)], HRESULT, 'SetSpring',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'MyType' ),
              ( ['in'], c_double, 'S' ),
              ( ['in'], c_int, 'SimpleSpringType' ),
              ( ['in'], BSTR, 'LinkProp' ),
              ( ['in'], c_int, 'Face' ),
              ( ['in'], c_int, 'SpringLocalOneType' ),
              ( ['in'], c_int, 'Dir' ),
              ( ['in'], VARIANT_BOOL, 'Outward' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Vec' ),
              ( ['in'], c_double, 'Ang' ),
              ( ['in'], VARIANT_BOOL, 'Replace' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Local' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(46)], HRESULT, 'GetBridgeObjectFoundationFlag',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SolidName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BObjName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SpanIndex' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'FoundationIndex' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(eBridgeObjectFoundationPart)), 'Part' ),
              ( ['in', 'out', 'optional'], POINTER(eItemType), 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(47)], HRESULT, 'SetBridgeObjectFoundationFlag',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'BObjName' ),
              ( ['in'], c_int, 'SpanIndex' ),
              ( ['in'], c_int, 'FoundationIndex' ),
              ( ['in'], eBridgeObjectFoundationPart, 'Part' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cSolidObj implementation
##class cSolidObj_Impl(object):
##    def AddByCoord(self, PropName, UserName, CSys):
##        '-no docstring-'
##        #return X, Y, Z, Name, pRetVal
##
##    def AddByPoint(self, PropName, UserName):
##        '-no docstring-'
##        #return Point, Name, pRetVal
##
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteLoadGravity(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteLoadPorePressure(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteLoadStrain(self, Name, LoadPat, Component, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteLoadSurfacePressure(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteLoadTemperature(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteSpring(self, Name, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetAutoMesh(self, Name):
##        '-no docstring-'
##        #return MeshType, N1, N2, N3, MaxSize1, MaxSize2, MaxSize3, RestraintsOnEdge, RestraintsOnFace, pRetVal
##
##    def GetEdgeConstraint(self, Name):
##        '-no docstring-'
##        #return ConstraintExists, pRetVal
##
##    def GetElm(self, Name):
##        '-no docstring-'
##        #return NElm, Elm, pRetVal
##
##    def GetGroupAssign(self, Name):
##        '-no docstring-'
##        #return NumberGroups, Groups, pRetVal
##
##    def GetGUID(self, Name):
##        '-no docstring-'
##        #return GUID, pRetVal
##
##    def GetLoadGravity(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, SolidName, LoadPat, CSys, X, Y, Z, pRetVal
##
##    def GetLoadPorePressure(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, SolidName, LoadPat, Value, PatternName, pRetVal
##
##    def GetLoadStrain(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, SolidName, LoadPat, Component, Value, PatternName, pRetVal
##
##    def GetLoadSurfacePressure(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, SolidName, LoadPat, Face, Value, PatternName, pRetVal
##
##    def GetLoadTemperature(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, SolidName, LoadPat, Value, PatternName, pRetVal
##
##    def GetLocalAxes(self, Name):
##        '-no docstring-'
##        #return A, B, C, Advanced, pRetVal
##
##    def GetLocalAxesAdvanced(self, Name):
##        '-no docstring-'
##        #return Active, AxVectOpt, AxCSys, AxDir, AxPt, AxVect, Plane2, PlVectOpt, PlCSys, PlDir, PlPt, PlVect, pRetVal
##
##    def GetMatTemp(self, Name):
##        '-no docstring-'
##        #return Temp, PatternName, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetPoints(self, Name):
##        '-no docstring-'
##        #return Point, pRetVal
##
##    def GetProperty(self, Name):
##        '-no docstring-'
##        #return PropName, pRetVal
##
##    def GetSelected(self, Name):
##        '-no docstring-'
##        #return Selected, pRetVal
##
##    def GetSpring(self, Name):
##        '-no docstring-'
##        #return NumberSprings, MyType, S, SimpleSpringType, LinkProp, Face, SpringLocalOneType, Dir, Outward, VecX, VecY, VecZ, CSys, Ang, pRetVal
##
##    def GetTransformationMatrix(self, Name, IsGlobal):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetAutoMesh(self, Name, MeshType, N1, N2, N3, MaxSize1, MaxSize2, MaxSize3, RestraintsOnEdge, RestraintsOnFace, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetEdgeConstraint(self, Name, ConstraintExists, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetGroupAssign(self, Name, GroupName, Remove, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetGUID(self, Name, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoadGravity(self, Name, LoadPat, X, Y, Z, Replace, CSys, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoadPorePressure(self, Name, LoadPat, Value, PatternName, Replace, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoadStrain(self, Name, LoadPat, Component, Value, Replace, PatternName, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoadSurfacePressure(self, Name, LoadPat, Face, Value, PatternName, Replace, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoadTemperature(self, Name, LoadPat, Value, PatternName, Replace, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLocalAxes(self, Name, A, B, C, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLocalAxesAdvanced(self, Name, Active, AxVectOpt, AxCSys, Plane2, PlVectOpt, PlCSys, ItemType):
##        '-no docstring-'
##        #return AxDir, AxPt, AxVect, PlDir, PlPt, PlVect, pRetVal
##
##    def SetMatTemp(self, Name, Temp, PatternName, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetProperty(self, Name, PropName, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSelected(self, Name, Selected, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSpring(self, Name, MyType, S, SimpleSpringType, LinkProp, Face, SpringLocalOneType, Dir, Outward, Ang, Replace, CSys, ItemType):
##        '-no docstring-'
##        #return Vec, pRetVal
##
##    def GetBridgeObjectFoundationFlag(self, Name):
##        '-no docstring-'
##        #return NumberItems, SolidName, BObjName, SpanIndex, FoundationIndex, Part, ItemType, pRetVal
##
##    def SetBridgeObjectFoundationFlag(self, Name, BObjName, SpanIndex, FoundationIndex, Part, ItemType):
##        '-no docstring-'
##        #return pRetVal
##


# values for enumeration 'eMatTypeSteel'
eMatTypeSteel_ASTM_A36 = 1
eMatTypeSteel_ASTM_A53GrB = 2
eMatTypeSteel_ASTM_A500GrB_Fy42 = 3
eMatTypeSteel_ASTM_A500GrB_Fy46 = 4
eMatTypeSteel_ASTM_A572Gr50 = 5
eMatTypeSteel_ASTM_A913Gr50 = 6
eMatTypeSteel_ASTM_A992_Fy50 = 7
eMatTypeSteel_Chinese_Q235 = 8
eMatTypeSteel_Chinese_Q355 = 9
eMatTypeSteel_Indian_Fe250 = 10
eMatTypeSteel_Indian_Fe345 = 11
eMatTypeSteel_EN100252_S235 = 12
eMatTypeSteel_EN100252_S275 = 13
eMatTypeSteel_EN100252_S355 = 14
eMatTypeSteel_EN100252_S450 = 15
eMatTypeSteel = c_int # enum

# values for enumeration 'eMatTypeConcrete'
eMatTypeConcrete_FC3000_NormalWeight = 1
eMatTypeConcrete_FC4000_NormalWeight = 2
eMatTypeConcrete_FC5000_NormalWeight = 3
eMatTypeConcrete_FC6000_NormalWeight = 4
eMatTypeConcrete_FC3000_LightWeight = 5
eMatTypeConcrete_FC4000_LightWeight = 6
eMatTypeConcrete_FC5000_LightWeight = 7
eMatTypeConcrete_FC6000_LightWeight = 8
eMatTypeConcrete_Chinese_C20_NormalWeight = 9
eMatTypeConcrete_Chinese_C30_NormalWeight = 10
eMatTypeConcrete_Chinese_C40_NormalWeight = 11
eMatTypeConcrete_Indian_M15_NormalWeight = 12
eMatTypeConcrete_Indian_M20_NormalWeight = 13
eMatTypeConcrete_Indian_M25_NormalWeight = 14
eMatTypeConcrete_Indian_M30_NormalWeight = 15
eMatTypeConcrete_Indian_M35_NormalWeight = 16
eMatTypeConcrete_Indian_M40_NormalWeight = 17
eMatTypeConcrete_Indian_M45_NormalWeight = 18
eMatTypeConcrete_Indian_M50_NormalWeight = 19
eMatTypeConcrete_Indian_M55_NormalWeight = 20
eMatTypeConcrete_Indian_M60_NormalWeight = 21
eMatTypeConcrete_EN_C12_NormalWeight = 22
eMatTypeConcrete_EN_C16_NormalWeight = 23
eMatTypeConcrete_EN_C20_NormalWeight = 24
eMatTypeConcrete_EN_C25_NormalWeight = 25
eMatTypeConcrete_EN_C30_NormalWeight = 26
eMatTypeConcrete_EN_C35_NormalWeight = 27
eMatTypeConcrete_EN_C40_NormalWeight = 28
eMatTypeConcrete_EN_C45_NormalWeight = 29
eMatTypeConcrete_EN_C50_NormalWeight = 30
eMatTypeConcrete_EN_C55_NormalWeight = 31
eMatTypeConcrete_EN_C60_NormalWeight = 32
eMatTypeConcrete_EN_C70_NormalWeight = 33
eMatTypeConcrete_EN_C80_NormalWeight = 34
eMatTypeConcrete_EN_C90_NormalWeight = 35
eMatTypeConcrete = c_int # enum
cPropMaterial._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'AddMaterial',
              ( ['in', 'out'], POINTER(BSTR), 'Name' ),
              ( ['in'], eMatType, 'MatType' ),
              ( ['in'], BSTR, 'Region' ),
              ( ['in'], BSTR, 'Standard' ),
              ( ['in'], BSTR, 'Grade' ),
              ( ['in', 'optional'], BSTR, 'UserName', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'Count',
              ( ['in', 'optional'], eMatType, 'MatType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetDamping',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'ModalRatio' ),
              ( ['in', 'out'], POINTER(c_double), 'ViscousMassCoeff' ),
              ( ['in', 'out'], POINTER(c_double), 'ViscousStiffCoeff' ),
              ( ['in', 'out'], POINTER(c_double), 'HystereticMassCoeff' ),
              ( ['in', 'out'], POINTER(c_double), 'HystereticStiffCoeff' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetMassSource',
              ( ['in', 'out'], POINTER(c_int), 'MyOption' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetMaterial',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(eMatType), 'MatType' ),
              ( ['in', 'out'], POINTER(c_int), 'Color' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetMPAnisotropic',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'E' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'A' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'G' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetMPIsotropic',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'E' ),
              ( ['in', 'out'], POINTER(c_double), 'U' ),
              ( ['in', 'out'], POINTER(c_double), 'A' ),
              ( ['in', 'out'], POINTER(c_double), 'G' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetMPOrthotropic',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'E' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'A' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'G' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetMPUniaxial',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'E' ),
              ( ['in', 'out'], POINTER(c_double), 'A' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'optional'], eMatType, 'MatType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'GetOConcrete',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Fc' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IsLightweight' ),
              ( ['in', 'out'], POINTER(c_double), 'FcsFactor' ),
              ( ['in', 'out'], POINTER(c_int), 'SSType' ),
              ( ['in', 'out'], POINTER(c_int), 'SSHysType' ),
              ( ['in', 'out'], POINTER(c_double), 'StrainAtFc' ),
              ( ['in', 'out'], POINTER(c_double), 'StrainUltimate' ),
              ( ['in', 'out'], POINTER(c_double), 'FrictionAngle' ),
              ( ['in', 'out'], POINTER(c_double), 'DilatationalAngle' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'GetOConcrete_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Fc' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IsLightweight' ),
              ( ['in', 'out'], POINTER(c_double), 'FcsFactor' ),
              ( ['in', 'out'], POINTER(c_int), 'SSType' ),
              ( ['in', 'out'], POINTER(c_int), 'SSHysType' ),
              ( ['in', 'out'], POINTER(c_double), 'StrainAtFc' ),
              ( ['in', 'out'], POINTER(c_double), 'StrainUltimate' ),
              ( ['in', 'out'], POINTER(c_double), 'FinalSlope' ),
              ( ['in', 'out'], POINTER(c_double), 'FrictionAngle' ),
              ( ['in', 'out'], POINTER(c_double), 'DilatationalAngle' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'GetONoDesign',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'FrictionAngle' ),
              ( ['in', 'out'], POINTER(c_double), 'DilatationalAngle' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'GetORebar',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'FY' ),
              ( ['in', 'out'], POINTER(c_double), 'Fu' ),
              ( ['in', 'out'], POINTER(c_double), 'EFy' ),
              ( ['in', 'out'], POINTER(c_double), 'EFu' ),
              ( ['in', 'out'], POINTER(c_int), 'SSType' ),
              ( ['in', 'out'], POINTER(c_int), 'SSHysType' ),
              ( ['in', 'out'], POINTER(c_double), 'StrainAtHardening' ),
              ( ['in', 'out'], POINTER(c_double), 'StrainUltimate' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UseCaltransSSDefaults' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'GetORebar_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'FY' ),
              ( ['in', 'out'], POINTER(c_double), 'Fu' ),
              ( ['in', 'out'], POINTER(c_double), 'EFy' ),
              ( ['in', 'out'], POINTER(c_double), 'EFu' ),
              ( ['in', 'out'], POINTER(c_int), 'SSType' ),
              ( ['in', 'out'], POINTER(c_int), 'SSHysType' ),
              ( ['in', 'out'], POINTER(c_double), 'StrainAtHardening' ),
              ( ['in', 'out'], POINTER(c_double), 'StrainUltimate' ),
              ( ['in', 'out'], POINTER(c_double), 'FinalSlope' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UseCaltransSSDefaults' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'GetOSteel',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'FY' ),
              ( ['in', 'out'], POINTER(c_double), 'Fu' ),
              ( ['in', 'out'], POINTER(c_double), 'EFy' ),
              ( ['in', 'out'], POINTER(c_double), 'EFu' ),
              ( ['in', 'out'], POINTER(c_int), 'SSType' ),
              ( ['in', 'out'], POINTER(c_int), 'SSHysType' ),
              ( ['in', 'out'], POINTER(c_double), 'StrainAtHardening' ),
              ( ['in', 'out'], POINTER(c_double), 'StrainAtMaxStress' ),
              ( ['in', 'out'], POINTER(c_double), 'StrainAtRupture' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'GetOSteel_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'FY' ),
              ( ['in', 'out'], POINTER(c_double), 'Fu' ),
              ( ['in', 'out'], POINTER(c_double), 'EFy' ),
              ( ['in', 'out'], POINTER(c_double), 'EFu' ),
              ( ['in', 'out'], POINTER(c_int), 'SSType' ),
              ( ['in', 'out'], POINTER(c_int), 'SSHysType' ),
              ( ['in', 'out'], POINTER(c_double), 'StrainAtHardening' ),
              ( ['in', 'out'], POINTER(c_double), 'StrainAtMaxStress' ),
              ( ['in', 'out'], POINTER(c_double), 'StrainAtRupture' ),
              ( ['in', 'out'], POINTER(c_double), 'FinalSlope' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'GetOTendon',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'FY' ),
              ( ['in', 'out'], POINTER(c_double), 'Fu' ),
              ( ['in', 'out'], POINTER(c_int), 'SSType' ),
              ( ['in', 'out'], POINTER(c_int), 'SSHysType' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'GetOTendon_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'FY' ),
              ( ['in', 'out'], POINTER(c_double), 'Fu' ),
              ( ['in', 'out'], POINTER(c_int), 'SSType' ),
              ( ['in', 'out'], POINTER(c_int), 'SSHysType' ),
              ( ['in', 'out'], POINTER(c_double), 'FinalSlope' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'GetSSCurve',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PointID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Strain' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Stress' ),
              ( ['in', 'optional'], BSTR, 'SectName', '' ),
              ( ['in', 'optional'], c_double, 'RebarArea', 0.0 ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(23)], HRESULT, 'GetTemp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Temp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(53)], HRESULT, 'GetTypeOAPI',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(eMatType), 'MatType' ),
              ( ['in', 'out'], POINTER(c_int), 'SymType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(25)], HRESULT, 'GetWeightAndMass',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'W' ),
              ( ['in', 'out'], POINTER(c_double), 'M' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(26)], HRESULT, 'SetDamping',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'ModalRatio' ),
              ( ['in'], c_double, 'ViscousMassCoeff' ),
              ( ['in'], c_double, 'ViscousStiffCoeff' ),
              ( ['in'], c_double, 'HystereticMassCoeff' ),
              ( ['in'], c_double, 'HystereticStiffCoeff' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(27)], HRESULT, 'SetMassSource',
              ( ['in'], c_int, 'MyOption' ),
              ( ['in'], c_int, 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(28)], HRESULT, 'SetMaterial',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eMatType, 'MatType' ),
              ( ['in', 'optional'], c_int, 'Color', -1 ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(29)], HRESULT, 'SetMPAnisotropic',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'E' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'A' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'G' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(30)], HRESULT, 'SetMPIsotropic',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'E' ),
              ( ['in'], c_double, 'U' ),
              ( ['in'], c_double, 'A' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(31)], HRESULT, 'SetMPOrthotropic',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'E' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'A' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'G' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(32)], HRESULT, 'SetMPUniaxial',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'E' ),
              ( ['in'], c_double, 'A' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(33)], HRESULT, 'SetOConcrete',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'Fc' ),
              ( ['in'], VARIANT_BOOL, 'IsLightweight' ),
              ( ['in'], c_double, 'FcsFactor' ),
              ( ['in'], c_int, 'SSType' ),
              ( ['in'], c_int, 'SSHysType' ),
              ( ['in'], c_double, 'StrainAtFc' ),
              ( ['in'], c_double, 'StrainUltimate' ),
              ( ['in', 'optional'], c_double, 'FrictionAngle', 0.0 ),
              ( ['in', 'optional'], c_double, 'DilatationalAngle', 0.0 ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(34)], HRESULT, 'SetOConcrete_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'Fc' ),
              ( ['in'], VARIANT_BOOL, 'IsLightweight' ),
              ( ['in'], c_double, 'FcsFactor' ),
              ( ['in'], c_int, 'SSType' ),
              ( ['in'], c_int, 'SSHysType' ),
              ( ['in'], c_double, 'StrainAtFc' ),
              ( ['in'], c_double, 'StrainUltimate' ),
              ( ['in'], c_double, 'FinalSlope' ),
              ( ['in', 'optional'], c_double, 'FrictionAngle', 0.0 ),
              ( ['in', 'optional'], c_double, 'DilatationalAngle', 0.0 ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(35)], HRESULT, 'SetONoDesign',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], c_double, 'FrictionAngle', 0.0 ),
              ( ['in', 'optional'], c_double, 'DilatationalAngle', 0.0 ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(36)], HRESULT, 'SetORebar',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'FY' ),
              ( ['in'], c_double, 'Fu' ),
              ( ['in'], c_double, 'EFy' ),
              ( ['in'], c_double, 'EFu' ),
              ( ['in'], c_int, 'SSType' ),
              ( ['in'], c_int, 'SSHysType' ),
              ( ['in'], c_double, 'StrainAtHardening' ),
              ( ['in'], c_double, 'StrainUltimate' ),
              ( ['in'], VARIANT_BOOL, 'UseCaltransSSDefaults' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(37)], HRESULT, 'SetORebar_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'FY' ),
              ( ['in'], c_double, 'Fu' ),
              ( ['in'], c_double, 'EFy' ),
              ( ['in'], c_double, 'EFu' ),
              ( ['in'], c_int, 'SSType' ),
              ( ['in'], c_int, 'SSHysType' ),
              ( ['in'], c_double, 'StrainAtHardening' ),
              ( ['in'], c_double, 'StrainUltimate' ),
              ( ['in'], c_double, 'FinalSlope' ),
              ( ['in'], VARIANT_BOOL, 'UseCaltransSSDefaults' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(38)], HRESULT, 'SetOSteel',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'FY' ),
              ( ['in'], c_double, 'Fu' ),
              ( ['in'], c_double, 'EFy' ),
              ( ['in'], c_double, 'EFu' ),
              ( ['in'], c_int, 'SSType' ),
              ( ['in'], c_int, 'SSHysType' ),
              ( ['in'], c_double, 'StrainAtHardening' ),
              ( ['in'], c_double, 'StrainAtMaxStress' ),
              ( ['in'], c_double, 'StrainAtRupture' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(39)], HRESULT, 'SetOSteel_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'FY' ),
              ( ['in'], c_double, 'Fu' ),
              ( ['in'], c_double, 'EFy' ),
              ( ['in'], c_double, 'EFu' ),
              ( ['in'], c_int, 'SSType' ),
              ( ['in'], c_int, 'SSHysType' ),
              ( ['in'], c_double, 'StrainAtHardening' ),
              ( ['in'], c_double, 'StrainAtMaxStress' ),
              ( ['in'], c_double, 'StrainAtRupture' ),
              ( ['in'], c_double, 'FinalSlope' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(40)], HRESULT, 'SetOTendon',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'FY' ),
              ( ['in'], c_double, 'Fu' ),
              ( ['in'], c_int, 'SSType' ),
              ( ['in'], c_int, 'SSHysType' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(41)], HRESULT, 'SetOTendon_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'FY' ),
              ( ['in'], c_double, 'Fu' ),
              ( ['in'], c_int, 'SSType' ),
              ( ['in'], c_int, 'SSHysType' ),
              ( ['in'], c_double, 'FinalSlope' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(42)], HRESULT, 'SetSSCurve',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PointID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Strain' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Stress' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(43)], HRESULT, 'SetTemp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Temp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(44)], HRESULT, 'SetWeightAndMass',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'MyOption' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(45), 'propget'], HRESULT, 'TimeDep',
              ( ['out', 'retval'], POINTER(POINTER(cPropMaterialTD)), 'pRetVal' )),
    COMMETHOD([dispid(48)], HRESULT, 'AddQuick',
              ( ['in', 'out'], POINTER(BSTR), 'Name' ),
              ( ['in'], eMatType, 'MatType' ),
              ( ['in', 'optional'], eMatTypeSteel, 'SteelType', 7 ),
              ( ['in', 'optional'], eMatTypeConcrete, 'ConcreteType', 2 ),
              ( ['in', 'optional'], eMatTypeAluminum, 'AluminumType', 1 ),
              ( ['in', 'optional'], eMatTypeColdFormed, 'ColdFormedType', 2 ),
              ( ['in', 'optional'], eMatTypeRebar, 'RebarType', 2 ),
              ( ['in', 'optional'], eMatTypeTendon, 'TendonType', 2 ),
              ( ['in', 'optional'], BSTR, 'UserName', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(56)], HRESULT, 'GetCoupledModelType',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(eMatCoupledType), 'MatCoupledType' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(49)], HRESULT, 'GetOAluminum',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'MyType' ),
              ( ['in', 'out'], POINTER(BSTR), 'Alloy' ),
              ( ['in', 'out'], POINTER(c_double), 'Fcy' ),
              ( ['in', 'out'], POINTER(c_double), 'Fty' ),
              ( ['in', 'out'], POINTER(c_double), 'Ftu' ),
              ( ['in', 'out'], POINTER(c_double), 'Fsu' ),
              ( ['in', 'out'], POINTER(c_int), 'SSHysType' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(50)], HRESULT, 'GetOColdFormed',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'FY' ),
              ( ['in', 'out'], POINTER(c_double), 'Fu' ),
              ( ['in', 'out'], POINTER(c_int), 'SSHysType' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(54)], HRESULT, 'GetOConcrete_2',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Fc' ),
              ( ['in', 'out'], POINTER(c_double), 'eFc' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IsLightweight' ),
              ( ['in', 'out'], POINTER(c_double), 'FcsFactor' ),
              ( ['in', 'out'], POINTER(c_int), 'SSType' ),
              ( ['in', 'out'], POINTER(c_int), 'SSHysType' ),
              ( ['in', 'out'], POINTER(c_double), 'StrainAtFc' ),
              ( ['in', 'out'], POINTER(c_double), 'StrainUltimate' ),
              ( ['in', 'out'], POINTER(c_double), 'FinalSlope' ),
              ( ['in', 'out'], POINTER(c_double), 'FrictionAngle' ),
              ( ['in', 'out'], POINTER(c_double), 'DilatationalAngle' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(58)], HRESULT, 'GetVonMisesPlasticityParameters',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UseIsoLinHardening' ),
              ( ['in', 'out'], POINTER(c_double), 'IsoLinHardeningModulus' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UseIsoNLHardening' ),
              ( ['in', 'out'], POINTER(c_double), 'IsoNLUltimateStressRatio' ),
              ( ['in', 'out'], POINTER(c_double), 'IsoNLHardeningRate' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UseKinLinHardening' ),
              ( ['in', 'out'], POINTER(c_double), 'KinLinHardeningModulus' ),
              ( ['in', 'out'], POINTER(c_double), 'YieldStress' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(57)], HRESULT, 'SetCoupledModelType',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eMatCoupledType, 'MatCoupledType' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(51)], HRESULT, 'SetOAluminum',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'MyType' ),
              ( ['in'], BSTR, 'Alloy' ),
              ( ['in'], c_double, 'Fcy' ),
              ( ['in'], c_double, 'Fty' ),
              ( ['in'], c_double, 'Ftu' ),
              ( ['in'], c_double, 'Fsu' ),
              ( ['in'], c_int, 'SSHysType' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(52)], HRESULT, 'SetOColdFormed',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'FY' ),
              ( ['in'], c_double, 'Fu' ),
              ( ['in'], c_int, 'SSHysType' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(55)], HRESULT, 'SetOConcrete_2',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'Fc' ),
              ( ['in'], c_double, 'eFc' ),
              ( ['in'], VARIANT_BOOL, 'IsLightweight' ),
              ( ['in'], c_double, 'FcsFactor' ),
              ( ['in'], c_int, 'SSType' ),
              ( ['in'], c_int, 'SSHysType' ),
              ( ['in'], c_double, 'StrainAtFc' ),
              ( ['in'], c_double, 'StrainUltimate' ),
              ( ['in'], c_double, 'FinalSlope' ),
              ( ['in', 'optional'], c_double, 'FrictionAngle', 0.0 ),
              ( ['in', 'optional'], c_double, 'DilatationalAngle', 0.0 ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(59)], HRESULT, 'SetVonMisesPlasticityParameters',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'UseIsoLinHardening' ),
              ( ['in'], c_double, 'IsoLinHardeningModulus' ),
              ( ['in'], VARIANT_BOOL, 'UseIsoNLHardening' ),
              ( ['in'], c_double, 'IsoNLUltimateStressRatio' ),
              ( ['in'], c_double, 'IsoNLHardeningRate' ),
              ( ['in'], VARIANT_BOOL, 'UseKinLinHardening' ),
              ( ['in'], c_double, 'KinLinHardeningModulus' ),
              ( ['in', 'optional'], c_double, 'YieldStress', 0.0 ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(46)], HRESULT, 'GetMassSource_1',
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IncludeElements' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IncludeAddedMass' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IncludeLoads' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(47)], HRESULT, 'SetMassSource_1',
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IncludeElements' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IncludeAddedMass' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IncludeLoads' ),
              ( ['in'], c_int, 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cPropMaterial implementation
##class cPropMaterial_Impl(object):
##    def AddMaterial(self, MatType, Region, Standard, Grade, UserName):
##        '-no docstring-'
##        #return Name, pRetVal
##
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self, MatType):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetDamping(self, Name, Temp):
##        '-no docstring-'
##        #return ModalRatio, ViscousMassCoeff, ViscousStiffCoeff, HystereticMassCoeff, HystereticStiffCoeff, pRetVal
##
##    def GetMassSource(self):
##        '-no docstring-'
##        #return MyOption, NumberLoads, LoadPat, SF, pRetVal
##
##    def GetMaterial(self, Name):
##        '-no docstring-'
##        #return MatType, Color, Notes, GUID, pRetVal
##
##    def GetMPAnisotropic(self, Name, Temp):
##        '-no docstring-'
##        #return E, U, A, G, pRetVal
##
##    def GetMPIsotropic(self, Name, Temp):
##        '-no docstring-'
##        #return E, U, A, G, pRetVal
##
##    def GetMPOrthotropic(self, Name, Temp):
##        '-no docstring-'
##        #return E, U, A, G, pRetVal
##
##    def GetMPUniaxial(self, Name, Temp):
##        '-no docstring-'
##        #return E, A, pRetVal
##
##    def GetNameList(self, MatType):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetOConcrete(self, Name, Temp):
##        '-no docstring-'
##        #return Fc, IsLightweight, FcsFactor, SSType, SSHysType, StrainAtFc, StrainUltimate, FrictionAngle, DilatationalAngle, pRetVal
##
##    def GetOConcrete_1(self, Name, Temp):
##        '-no docstring-'
##        #return Fc, IsLightweight, FcsFactor, SSType, SSHysType, StrainAtFc, StrainUltimate, FinalSlope, FrictionAngle, DilatationalAngle, pRetVal
##
##    def GetONoDesign(self, Name, Temp):
##        '-no docstring-'
##        #return FrictionAngle, DilatationalAngle, pRetVal
##
##    def GetORebar(self, Name, Temp):
##        '-no docstring-'
##        #return FY, Fu, EFy, EFu, SSType, SSHysType, StrainAtHardening, StrainUltimate, UseCaltransSSDefaults, pRetVal
##
##    def GetORebar_1(self, Name, Temp):
##        '-no docstring-'
##        #return FY, Fu, EFy, EFu, SSType, SSHysType, StrainAtHardening, StrainUltimate, FinalSlope, UseCaltransSSDefaults, pRetVal
##
##    def GetOSteel(self, Name, Temp):
##        '-no docstring-'
##        #return FY, Fu, EFy, EFu, SSType, SSHysType, StrainAtHardening, StrainAtMaxStress, StrainAtRupture, pRetVal
##
##    def GetOSteel_1(self, Name, Temp):
##        '-no docstring-'
##        #return FY, Fu, EFy, EFu, SSType, SSHysType, StrainAtHardening, StrainAtMaxStress, StrainAtRupture, FinalSlope, pRetVal
##
##    def GetOTendon(self, Name, Temp):
##        '-no docstring-'
##        #return FY, Fu, SSType, SSHysType, pRetVal
##
##    def GetOTendon_1(self, Name, Temp):
##        '-no docstring-'
##        #return FY, Fu, SSType, SSHysType, FinalSlope, pRetVal
##
##    def GetSSCurve(self, Name, SectName, RebarArea, Temp):
##        '-no docstring-'
##        #return NumberPoints, PointID, Strain, Stress, pRetVal
##
##    def GetTemp(self, Name):
##        '-no docstring-'
##        #return NumberItems, Temp, pRetVal
##
##    def GetTypeOAPI(self, Name):
##        '-no docstring-'
##        #return MatType, SymType, pRetVal
##
##    def GetWeightAndMass(self, Name, Temp):
##        '-no docstring-'
##        #return W, M, pRetVal
##
##    def SetDamping(self, Name, ModalRatio, ViscousMassCoeff, ViscousStiffCoeff, HystereticMassCoeff, HystereticStiffCoeff, Temp):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetMassSource(self, MyOption, NumberLoads):
##        '-no docstring-'
##        #return LoadPat, SF, pRetVal
##
##    def SetMaterial(self, Name, MatType, Color, Notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetMPAnisotropic(self, Name, Temp):
##        '-no docstring-'
##        #return E, U, A, G, pRetVal
##
##    def SetMPIsotropic(self, Name, E, U, A, Temp):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetMPOrthotropic(self, Name, Temp):
##        '-no docstring-'
##        #return E, U, A, G, pRetVal
##
##    def SetMPUniaxial(self, Name, E, A, Temp):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetOConcrete(self, Name, Fc, IsLightweight, FcsFactor, SSType, SSHysType, StrainAtFc, StrainUltimate, FrictionAngle, DilatationalAngle, Temp):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetOConcrete_1(self, Name, Fc, IsLightweight, FcsFactor, SSType, SSHysType, StrainAtFc, StrainUltimate, FinalSlope, FrictionAngle, DilatationalAngle, Temp):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetONoDesign(self, Name, FrictionAngle, DilatationalAngle, Temp):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetORebar(self, Name, FY, Fu, EFy, EFu, SSType, SSHysType, StrainAtHardening, StrainUltimate, UseCaltransSSDefaults, Temp):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetORebar_1(self, Name, FY, Fu, EFy, EFu, SSType, SSHysType, StrainAtHardening, StrainUltimate, FinalSlope, UseCaltransSSDefaults, Temp):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetOSteel(self, Name, FY, Fu, EFy, EFu, SSType, SSHysType, StrainAtHardening, StrainAtMaxStress, StrainAtRupture, Temp):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetOSteel_1(self, Name, FY, Fu, EFy, EFu, SSType, SSHysType, StrainAtHardening, StrainAtMaxStress, StrainAtRupture, FinalSlope, Temp):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetOTendon(self, Name, FY, Fu, SSType, SSHysType, Temp):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetOTendon_1(self, Name, FY, Fu, SSType, SSHysType, FinalSlope, Temp):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSSCurve(self, Name, NumberPoints, Temp):
##        '-no docstring-'
##        #return PointID, Strain, Stress, pRetVal
##
##    def SetTemp(self, Name, NumberItems):
##        '-no docstring-'
##        #return Temp, pRetVal
##
##    def SetWeightAndMass(self, Name, MyOption, Value, Temp):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def TimeDep(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def AddQuick(self, MatType, SteelType, ConcreteType, AluminumType, ColdFormedType, RebarType, TendonType, UserName):
##        '-no docstring-'
##        #return Name, pRetVal
##
##    def GetCoupledModelType(self, Name, Temp):
##        '-no docstring-'
##        #return MatCoupledType, pRetVal
##
##    def GetOAluminum(self, Name, Temp):
##        '-no docstring-'
##        #return MyType, Alloy, Fcy, Fty, Ftu, Fsu, SSHysType, pRetVal
##
##    def GetOColdFormed(self, Name, Temp):
##        '-no docstring-'
##        #return FY, Fu, SSHysType, pRetVal
##
##    def GetOConcrete_2(self, Name, Temp):
##        '-no docstring-'
##        #return Fc, eFc, IsLightweight, FcsFactor, SSType, SSHysType, StrainAtFc, StrainUltimate, FinalSlope, FrictionAngle, DilatationalAngle, pRetVal
##
##    def GetVonMisesPlasticityParameters(self, Name, Temp):
##        '-no docstring-'
##        #return UseIsoLinHardening, IsoLinHardeningModulus, UseIsoNLHardening, IsoNLUltimateStressRatio, IsoNLHardeningRate, UseKinLinHardening, KinLinHardeningModulus, YieldStress, pRetVal
##
##    def SetCoupledModelType(self, Name, MatCoupledType, Temp):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetOAluminum(self, Name, MyType, Alloy, Fcy, Fty, Ftu, Fsu, SSHysType, Temp):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetOColdFormed(self, Name, FY, Fu, SSHysType, Temp):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetOConcrete_2(self, Name, Fc, eFc, IsLightweight, FcsFactor, SSType, SSHysType, StrainAtFc, StrainUltimate, FinalSlope, FrictionAngle, DilatationalAngle, Temp):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetVonMisesPlasticityParameters(self, Name, UseIsoLinHardening, IsoLinHardeningModulus, UseIsoNLHardening, IsoNLUltimateStressRatio, IsoNLHardeningRate, UseKinLinHardening, KinLinHardeningModulus, YieldStress, Temp):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetMassSource_1(self):
##        '-no docstring-'
##        #return IncludeElements, IncludeAddedMass, IncludeLoads, NumberLoads, LoadPat, SF, pRetVal
##
##    def SetMassSource_1(self, NumberLoads):
##        '-no docstring-'
##        #return IncludeElements, IncludeAddedMass, IncludeLoads, LoadPat, SF, pRetVal
##

cBDRS_CANCSAS606_CBox2Shr._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], BSTR, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_CANCSAS606_CBox2Shr implementation
##class cBDRS_CANCSAS606_CBox2Shr_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetCapacityParamString(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCapacityParamString(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_AA_L_07_CBox2ServiceRt._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], BSTR, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_CBox2ServiceRt implementation
##class cBDRS_AA_L_07_CBox2ServiceRt_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetCapacityParamString(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCapacityParamString(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_EUROCODE_SICompServ._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_EUROCODE_SICompServ implementation
##class cBDRS_EUROCODE_SICompServ_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cMassSource._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetDefault',
              ( ['in', 'out'], POINTER(BSTR), 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetMassSource',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'MassFromElements' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'MassFromMasses' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'MassFromLoads' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IsDefault' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'SetDefault',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'SetMassSource',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'MassFromElements' ),
              ( ['in'], VARIANT_BOOL, 'MassFromMasses' ),
              ( ['in'], VARIANT_BOOL, 'MassFromLoads' ),
              ( ['in'], VARIANT_BOOL, 'IsDefault' ),
              ( ['in'], c_int, 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cMassSource implementation
##class cMassSource_Impl(object):
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetDefault(self):
##        '-no docstring-'
##        #return Name, pRetVal
##
##    def GetMassSource(self, Name):
##        '-no docstring-'
##        #return MassFromElements, MassFromMasses, MassFromLoads, IsDefault, NumberLoads, LoadPat, SF, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def SetDefault(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetMassSource(self, Name, MassFromElements, MassFromMasses, MassFromLoads, IsDefault, NumberLoads):
##        '-no docstring-'
##        #return LoadPat, SF, pRetVal
##

cBDRS_CANCSAS606_PCCompShrRating._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], BSTR, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_CANCSAS606_PCCompShrRating implementation
##class cBDRS_CANCSAS606_PCCompShrRating_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetCapacityParamString(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCapacityParamString(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cTendonObj._methods_ = [
    COMMETHOD([dispid(3)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'GetProperty',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'GetSelected',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Selected' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(23)], HRESULT, 'GetTendonGeometry',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(36)], HRESULT, 'SetSelected',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'Selected' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(46)], HRESULT, 'GetGroupAssign',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberGroups' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Groups' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(26)], HRESULT, 'SetGroupAssign',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'GroupName' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Remove', False ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(1)], HRESULT, 'AddByCoord',
              ( ['in'], c_double, 'XI' ),
              ( ['in'], c_double, 'YI' ),
              ( ['in'], c_double, 'ZI' ),
              ( ['in'], c_double, 'XJ' ),
              ( ['in'], c_double, 'YJ' ),
              ( ['in'], c_double, 'ZJ' ),
              ( ['in', 'out'], POINTER(BSTR), 'Name' ),
              ( ['in', 'optional'], BSTR, 'PropName', 'Default' ),
              ( ['in', 'optional'], BSTR, 'UserName', '' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'AddByPoint',
              ( ['in'], BSTR, 'Point1' ),
              ( ['in'], BSTR, 'Point2' ),
              ( ['in', 'out'], POINTER(BSTR), 'Name' ),
              ( ['in', 'optional'], BSTR, 'PropName', 'Default' ),
              ( ['in', 'optional'], BSTR, 'UserName', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'DeleteLoadDeformation',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'DeleteLoadForceStress',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'DeleteLoadTemperature',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetDiscretization',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetElm',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NElm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RDI' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RDJ' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetGUID',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetLoadDeformation',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TendonName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'GetLoadedGroup',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'GroupName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'GetLoadForceStress',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TendonName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'JackFrom' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CurvatureCoeff' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WobbleCoeff' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LossAnchorage' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LossShortening' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LossCreep' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LossShrinkage' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LossSteelRelax' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'GetLoadTemperature',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TendonName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Val' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'GetLocalAxes',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Ang' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'GetPoints',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'Point1' ),
              ( ['in', 'out'], POINTER(BSTR), 'Point2' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'GetTCLimits',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'LimitCompressionExists' ),
              ( ['in', 'out'], POINTER(c_double), 'LimitCompression' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'LimitTensionExists' ),
              ( ['in', 'out'], POINTER(c_double), 'LimitTension' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'GetTendonData',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(24)], HRESULT, 'GetTransformationMatrix',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'IsGlobal', True ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(25)], HRESULT, 'SetDiscretization',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(27)], HRESULT, 'SetGUID',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(28)], HRESULT, 'SetLoadDeformation',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'out'], POINTER(c_double), 'D' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(29)], HRESULT, 'SetLoadedGroup',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'GroupName' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(30)], HRESULT, 'SetLoadForceStress',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in'], c_int, 'JackFrom' ),
              ( ['in'], c_int, 'LoadType' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in'], c_double, 'CurvatureCoeff' ),
              ( ['in'], c_double, 'WobbleCoeff' ),
              ( ['in'], c_double, 'LossAnchorage' ),
              ( ['in'], c_double, 'LossShortening' ),
              ( ['in'], c_double, 'LossCreep' ),
              ( ['in'], c_double, 'LossShrinkage' ),
              ( ['in'], c_double, 'LossSteelRelax' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', True ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(31)], HRESULT, 'SetLoadGravity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in'], c_double, 'X' ),
              ( ['in'], c_double, 'Y' ),
              ( ['in'], c_double, 'Z' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', True ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(32)], HRESULT, 'SetLoadStrain',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in'], c_double, 'Strain' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', True ),
              ( ['in', 'optional'], BSTR, 'PatternName', '' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(33)], HRESULT, 'SetLoadTemperature',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in'], c_double, 'Val' ),
              ( ['in', 'optional'], BSTR, 'PatternName', '' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', True ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(34)], HRESULT, 'SetLocalAxes',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'Ang' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(35)], HRESULT, 'SetProperty',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'PropName' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(37)], HRESULT, 'SetTCLimits',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'LimitCompressionExists' ),
              ( ['in'], c_double, 'LimitCompression' ),
              ( ['in'], VARIANT_BOOL, 'LimitTensionExists' ),
              ( ['in'], c_double, 'LimitTension' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(38)], HRESULT, 'SetTendonData',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(40)], HRESULT, 'DeleteLoadGravity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(41)], HRESULT, 'DeleteLoadStrain',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(42)], HRESULT, 'GetLoadGravity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TendonName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(43)], HRESULT, 'GetLoadStrain',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TendonName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Strain' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(44)], HRESULT, 'GetMatTemp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Temp' ),
              ( ['in', 'out'], POINTER(BSTR), 'PatternName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(45)], HRESULT, 'SetMatTemp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'Temp' ),
              ( ['in', 'optional'], BSTR, 'PatternName', '' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(39)], HRESULT, 'GetNameListOnStory',
              ( ['in'], BSTR, 'StoryName' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(47)], HRESULT, 'GetLoadForceStress_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TendonName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPatFinal' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPatTransfer' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'JackFrom' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LoadValue' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LossSpecification' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(48)], HRESULT, 'GetLossesDetailed',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TendonName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CurvatureCoeff' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WobbleCoeff' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LossAnchorage' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LossShortening' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LossCreep' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LossShrinkage' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LossSteelRelax' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(49)], HRESULT, 'GetLossesFixed',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TendonName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StressingFixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LongTermFixed' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(50)], HRESULT, 'GetLossesPercent',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TendonName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StressingPercent' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LongTermPercent' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(51)], HRESULT, 'GetNumberStrands',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TendonName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberStrands' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(52)], HRESULT, 'GetDatumOffset',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TendonName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DatumOffset' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(53)], HRESULT, 'GetDrawingPoint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TendonName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'DrawingPointID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GZ' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cTendonObj implementation
##class cTendonObj_Impl(object):
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetProperty(self, Name):
##        '-no docstring-'
##        #return PropName, pRetVal
##
##    def GetSelected(self, Name):
##        '-no docstring-'
##        #return Selected, pRetVal
##
##    def GetTendonGeometry(self, Name, CSys):
##        '-no docstring-'
##        #return NumberPoints, X, Y, Z, pRetVal
##
##    def SetSelected(self, Name, Selected, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetGroupAssign(self, Name):
##        '-no docstring-'
##        #return NumberGroups, Groups, pRetVal
##
##    def SetGroupAssign(self, Name, GroupName, Remove, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def AddByCoord(self, XI, YI, ZI, XJ, YJ, ZJ, PropName, UserName, CSys):
##        '-no docstring-'
##        #return Name, pRetVal
##
##    def AddByPoint(self, Point1, Point2, PropName, UserName):
##        '-no docstring-'
##        #return Name, pRetVal
##
##    def Delete(self, Name, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteLoadDeformation(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteLoadForceStress(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteLoadTemperature(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetDiscretization(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetElm(self, Name):
##        '-no docstring-'
##        #return NElm, Elm, RDI, RDJ, pRetVal
##
##    def GetGUID(self, Name):
##        '-no docstring-'
##        #return GUID, pRetVal
##
##    def GetLoadDeformation(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, TendonName, LoadPat, U1, pRetVal
##
##    def GetLoadedGroup(self, Name):
##        '-no docstring-'
##        #return GroupName, pRetVal
##
##    def GetLoadForceStress(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, TendonName, LoadPat, JackFrom, LoadType, Value, CurvatureCoeff, WobbleCoeff, LossAnchorage, LossShortening, LossCreep, LossShrinkage, LossSteelRelax, pRetVal
##
##    def GetLoadTemperature(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, TendonName, LoadPat, Val, PatternName, pRetVal
##
##    def GetLocalAxes(self, Name):
##        '-no docstring-'
##        #return Ang, pRetVal
##
##    def GetPoints(self, Name):
##        '-no docstring-'
##        #return Point1, Point2, pRetVal
##
##    def GetTCLimits(self, Name):
##        '-no docstring-'
##        #return LimitCompressionExists, LimitCompression, LimitTensionExists, LimitTension, pRetVal
##
##    def GetTendonData(self, Name, CSys):
##        '-no docstring-'
##        #return NumberPoints, MyType, X, Y, Z, pRetVal
##
##    def GetTransformationMatrix(self, Name, IsGlobal):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetDiscretization(self, Name, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetGUID(self, Name, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoadDeformation(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return D, pRetVal
##
##    def SetLoadedGroup(self, Name, GroupName, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoadForceStress(self, Name, LoadPat, JackFrom, LoadType, Value, CurvatureCoeff, WobbleCoeff, LossAnchorage, LossShortening, LossCreep, LossShrinkage, LossSteelRelax, Replace, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoadGravity(self, Name, LoadPat, X, Y, Z, Replace, CSys, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoadStrain(self, Name, LoadPat, Strain, Replace, PatternName, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoadTemperature(self, Name, LoadPat, Val, PatternName, Replace, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLocalAxes(self, Name, Ang, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetProperty(self, Name, PropName, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetTCLimits(self, Name, LimitCompressionExists, LimitCompression, LimitTensionExists, LimitTension, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetTendonData(self, Name, NumberPoints, CSys):
##        '-no docstring-'
##        #return MyType, X, Y, Z, pRetVal
##
##    def DeleteLoadGravity(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteLoadStrain(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetLoadGravity(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, TendonName, LoadPat, CSys, X, Y, Z, pRetVal
##
##    def GetLoadStrain(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, TendonName, LoadPat, Strain, PatternName, pRetVal
##
##    def GetMatTemp(self, Name):
##        '-no docstring-'
##        #return Temp, PatternName, pRetVal
##
##    def SetMatTemp(self, Name, Temp, PatternName, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetNameListOnStory(self, StoryName):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetLoadForceStress_1(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, TendonName, LoadPatFinal, LoadPatTransfer, JackFrom, LoadType, LoadValue, LossSpecification, pRetVal
##
##    def GetLossesDetailed(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, TendonName, CurvatureCoeff, WobbleCoeff, LossAnchorage, LossShortening, LossCreep, LossShrinkage, LossSteelRelax, pRetVal
##
##    def GetLossesFixed(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, TendonName, StressingFixed, LongTermFixed, pRetVal
##
##    def GetLossesPercent(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, TendonName, StressingPercent, LongTermPercent, pRetVal
##
##    def GetNumberStrands(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, TendonName, NumberStrands, pRetVal
##
##    def GetDatumOffset(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, TendonName, DatumOffset, pRetVal
##
##    def GetDrawingPoint(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, TendonName, DrawingPointID, GX, GY, GZ, pRetVal
##

cView._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'RefreshView',
              ( ['in', 'optional'], c_int, 'Window', 0 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Zoom', True ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'RefreshWindow',
              ( ['in', 'optional'], c_int, 'Window', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cView implementation
##class cView_Impl(object):
##    def RefreshView(self, Window, Zoom):
##        '-no docstring-'
##        #return pRetVal
##
##    def RefreshWindow(self, Window):
##        '-no docstring-'
##        #return pRetVal
##

cBridgeDesign._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'AASHTO_LRFD_2007',
              ( ['out', 'retval'], POINTER(POINTER(cBD_AASHTO_LRFD_2007)), 'pRetVal' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'AASHTO_STD_2002',
              ( ['out', 'retval'], POINTER(POINTER(cBD_AASHTO_STD_2002)), 'pRetVal' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'CANCSAS606',
              ( ['out', 'retval'], POINTER(POINTER(cBD_CAN_CSA_S6_06)), 'pRetVal' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'EUROCODE',
              ( ['out', 'retval'], POINTER(POINTER(cBD_EUROCODE)), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetCode',
              ( ['in', 'out'], POINTER(BSTR), 'CodeName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetCodeRating',
              ( ['in', 'out'], POINTER(BSTR), 'CodeName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetCodeSeismic',
              ( ['in', 'out'], POINTER(BSTR), 'CodeName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetCodeSuper',
              ( ['in', 'out'], POINTER(BSTR), 'CodeName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9), 'propget'], HRESULT, 'IRC2011',
              ( ['out', 'retval'], POINTER(POINTER(cBD_IRC2011)), 'pRetVal' )),
    COMMETHOD([dispid(10), 'propget'], HRESULT, 'JTG_D62_2004',
              ( ['out', 'retval'], POINTER(POINTER(cBD_JTG_D62_2004)), 'pRetVal' )),
    COMMETHOD([dispid(11), 'propget'], HRESULT, 'Request',
              ( ['out', 'retval'], POINTER(POINTER(cBridgeDesignRequest)), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'SetCode',
              ( ['in'], BSTR, 'CodeName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'SetCodeRating',
              ( ['in'], BSTR, 'CodeName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'SetCodeSeismic',
              ( ['in'], BSTR, 'CodeName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'SetCodeSuper',
              ( ['in'], BSTR, 'CodeName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16), 'propget'], HRESULT, 'RussianSNiP',
              ( ['out', 'retval'], POINTER(POINTER(cBD_RussianSNiP)), 'pRetVal' )),
    COMMETHOD([dispid(17), 'propget'], HRESULT, 'BS5400',
              ( ['out', 'retval'], POINTER(POINTER(cBD_BS5400)), 'pRetVal' )),
]
################################################################
## code template for cBridgeDesign implementation
##class cBridgeDesign_Impl(object):
##    @property
##    def AASHTO_LRFD_2007(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def AASHTO_STD_2002(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def CANCSAS606(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def EUROCODE(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetCode(self):
##        '-no docstring-'
##        #return CodeName, pRetVal
##
##    def GetCodeRating(self):
##        '-no docstring-'
##        #return CodeName, pRetVal
##
##    def GetCodeSeismic(self):
##        '-no docstring-'
##        #return CodeName, pRetVal
##
##    def GetCodeSuper(self):
##        '-no docstring-'
##        #return CodeName, pRetVal
##
##    @property
##    def IRC2011(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def JTG_D62_2004(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Request(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCode(self, CodeName):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCodeRating(self, CodeName):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCodeSeismic(self, CodeName):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCodeSuper(self, CodeName):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def RussianSNiP(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def BS5400(self):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_AA_L_07_SUCompConstNS._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetDemandParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], BSTR, 'DemandName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetDemandParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], BSTR, 'DemandName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_SUCompConstNS implementation
##class cBDRS_AA_L_07_SUCompConstNS_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetDemandParam(self, RequestName, DemandName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDemandParam(self, RequestName, DemandName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cSectionCut._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'AddQuad',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetCutInfo',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'GroupName' ),
              ( ['in', 'out'], POINTER(c_int), 'MyType' ),
              ( ['in', 'out'], POINTER(c_int), 'Num' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetLocalAxesAdvancedAnalysis',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Active' ),
              ( ['in', 'out'], POINTER(c_int), 'AxVectOpt' ),
              ( ['in', 'out'], POINTER(BSTR), 'AxCSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'AxDir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AxPt' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AxVect' ),
              ( ['in', 'out'], POINTER(c_int), 'Plane2' ),
              ( ['in', 'out'], POINTER(c_int), 'PlVectOpt' ),
              ( ['in', 'out'], POINTER(BSTR), 'PlCSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PlDir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PlPt' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PlVect' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetLocalAxesAnalysis',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Z' ),
              ( ['in', 'out'], POINTER(c_double), 'Y' ),
              ( ['in', 'out'], POINTER(c_double), 'X' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IsAdvanced' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetLocalAxesAngleDesign',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Angle' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetQuad',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Num' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetResultLocation',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IsDefault' ),
              ( ['in', 'out'], POINTER(c_double), 'X' ),
              ( ['in', 'out'], POINTER(c_double), 'Y' ),
              ( ['in', 'out'], POINTER(c_double), 'Z' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetResultsSide',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'Side' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'SetByGroup',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'GroupName' ),
              ( ['in'], c_int, 'MyType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'SetByQuad',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'GroupName' ),
              ( ['in'], c_int, 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'SetLocalAxesAdvancedAnalysis',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'Active' ),
              ( ['in'], c_int, 'AxVectOpt' ),
              ( ['in'], BSTR, 'AxCSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'AxDir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AxPt' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AxVect' ),
              ( ['in'], c_int, 'Plane2' ),
              ( ['in'], c_int, 'PlVectOpt' ),
              ( ['in'], BSTR, 'PlCSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PlDir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PlPt' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PlVect' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'SetLocalAxesAnalysis',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'Z' ),
              ( ['in'], c_double, 'Y' ),
              ( ['in'], c_double, 'X' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'SetLocalAxesAngleDesign',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'Angle' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'SetResultLocation',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'IsDefault' ),
              ( ['in', 'optional'], c_double, 'X', 0.0 ),
              ( ['in', 'optional'], c_double, 'Y', 0.0 ),
              ( ['in', 'optional'], c_double, 'Z', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'SetResultsSide',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Side' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cSectionCut implementation
##class cSectionCut_Impl(object):
##    def AddQuad(self, Name):
##        '-no docstring-'
##        #return X, Y, Z, pRetVal
##
##    def GetCutInfo(self, Name):
##        '-no docstring-'
##        #return GroupName, MyType, Num, pRetVal
##
##    def GetLocalAxesAdvancedAnalysis(self, Name):
##        '-no docstring-'
##        #return Active, AxVectOpt, AxCSys, AxDir, AxPt, AxVect, Plane2, PlVectOpt, PlCSys, PlDir, PlPt, PlVect, pRetVal
##
##    def GetLocalAxesAnalysis(self, Name):
##        '-no docstring-'
##        #return Z, Y, X, IsAdvanced, pRetVal
##
##    def GetLocalAxesAngleDesign(self, Name):
##        '-no docstring-'
##        #return Angle, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetQuad(self, Name, Num):
##        '-no docstring-'
##        #return X, Y, Z, pRetVal
##
##    def GetResultLocation(self, Name):
##        '-no docstring-'
##        #return IsDefault, X, Y, Z, pRetVal
##
##    def GetResultsSide(self, Name):
##        '-no docstring-'
##        #return Side, pRetVal
##
##    def SetByGroup(self, Name, GroupName, MyType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetByQuad(self, Name, GroupName, MyType):
##        '-no docstring-'
##        #return X, Y, Z, pRetVal
##
##    def SetLocalAxesAdvancedAnalysis(self, Name, Active, AxVectOpt, AxCSys, Plane2, PlVectOpt, PlCSys):
##        '-no docstring-'
##        #return AxDir, AxPt, AxVect, PlDir, PlPt, PlVect, pRetVal
##
##    def SetLocalAxesAnalysis(self, Name, Z, Y, X):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLocalAxesAngleDesign(self, Name, Angle):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetResultLocation(self, Name, IsDefault, X, Y, Z):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetResultsSide(self, Name, Side):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_CANCSAS606_CBox2FlexRating._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_CANCSAS606_CBox2FlexRating implementation
##class cBDRS_CANCSAS606_CBox2FlexRating_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cDetailing._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'ClearDetailing',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetDetailedBeamLines',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BeamLineIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetDetailedBeamLineData',
              ( ['in'], BSTR, 'BeamLineID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectUniqueNames' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberSpans' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SpanLength' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumLongBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LongBarDiameter' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LongBarNotation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LongBarStartDist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LongBarStartBend' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LongBarEndBend' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LongBarLength' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LongBarNumLayers' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumTieBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumTieVertLegs' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TieBarDiameter' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TieBarNotation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TieBarStartDist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TieBarSpacing' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'TieBarType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'GetDetailedBeamLineData_1',
              ( ['in'], BSTR, 'BeamLineID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectUniqueNames' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberSpans' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SpanLength' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumLongBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LongBarGUID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LongBarDiameter' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LongBarNotation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LongBarStartDist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LongBarStartBend' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LongBarEndBend' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LongBarLength' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LongBarNumLayers' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumTieBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumTieVertLegs' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TieBarGUID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TieBarDiameter' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TieBarNotation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TieBarStartDist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TieBarSpacing' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'TieBarType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetDetailedColumnStacks',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ColumnStackIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetDetailedColumnStackData',
              ( ['in'], BSTR, 'ColumnStackID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectUniqueNames' ),
              ( ['in', 'out'], POINTER(c_int), 'NumLongBarSets' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumLongBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LongBarDiameter' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LongBarNotation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LongBarStartDist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LongBarStartBend' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LongBarEndBend' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LongBarLength' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LongBarNumLayers' ),
              ( ['in', 'out'], POINTER(c_int), 'NumTieZones' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TieBarZones' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumTieBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumTieVertLegs' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TieBarDiameter' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TieBarNotation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TieBarStartDist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TieBarSpacing' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'TieBarType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'GetDetailedColumnStackData_1',
              ( ['in'], BSTR, 'ColumnStackID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectUniqueNames' ),
              ( ['in', 'out'], POINTER(c_int), 'NumLongBarSets' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumLongBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LongBarGUID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LongBarDiameter' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LongBarNotation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LongBarStartDist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LongBarStartBend' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LongBarEndBend' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LongBarLength' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LongBarNumLayers' ),
              ( ['in', 'out'], POINTER(c_int), 'NumTieZones' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TieBarZones' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumTieBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumTieHorLegs' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumTieVertLegs' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TieBarGUID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TieBarDiameter' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TieBarNotation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TieBarStartDist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TieBarSpacing' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'TieBarType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetDetailedSlabs',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Names' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SlabElevations' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GUIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetDetailedSlabBotBarData',
              ( ['in'], BSTR, 'SlabName' ),
              ( ['in', 'out'], POINTER(c_int), 'NumData' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Names' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BarDiameter' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BarNotation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BarMaterial' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WidthLeft' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WidthRight' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'OffsetFromTop' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'OffsetFromBot' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'StartBarBend' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'EndBarBend' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GUIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'GetDetailedSlabBotBarData_1',
              ( ['in'], BSTR, 'SlabName' ),
              ( ['in', 'out'], POINTER(c_int), 'NumData' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Names' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BarDiameter' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BarNotation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BarMaterial' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WidthLeft' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WidthRight' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'OffsetFromTop' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'OffsetFromBot' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'StartBarBend' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'EndBarBend' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GUIDs' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StripNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SpanNos' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetDetailedSlabTopBarData',
              ( ['in'], BSTR, 'SlabName' ),
              ( ['in', 'out'], POINTER(c_int), 'NumData' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Names' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BarDiameter' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BarNotation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BarMaterial' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WidthLeft' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WidthRight' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'OffsetFromTop' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'OffsetFromBot' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'StartBarBend' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'EndBarBend' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GUIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'GetDetailedSlabTopBarData_1',
              ( ['in'], BSTR, 'SlabName' ),
              ( ['in', 'out'], POINTER(c_int), 'NumData' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Names' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BarDiameter' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BarNotation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BarMaterial' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WidthLeft' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WidthRight' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'OffsetFromTop' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'OffsetFromBot' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'StartBarBend' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'EndBarBend' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GUIDs' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StripNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SpanNos' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'GetDetailingAvailable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetSimilarBeamLines',
              ( ['in'], BSTR, 'BeamLineID' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberSimilarBeams' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberUniqueObjects' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectUniqueNames' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetSimilarColumnStacks',
              ( ['in'], BSTR, 'ColumnStackID' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberSimilarColumns' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberUniqueObjects' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectUniqueNames' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetSimilarSlabs',
              ( ['in'], BSTR, 'SlabName' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberSimilarSlabs' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Names' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'StartDetailing',
              ( ['in'], VARIANT_BOOL, 'OverwriteExisting' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'GetBeamLongRebarData',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberRebarSets' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BarSizeName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BarArea' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Location' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ClearCover' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartCoord1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BarLength' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BendingAngleStart' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BendingAngleEnd' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'RebarSetGUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'GetBeamTieRebarData',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberRebarSets' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BarSizeName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BarArea' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'NumberLegs' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Location' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ClearCover' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartCoord1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Spacing' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Lengths' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'RebarSetGUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'GetColumnLongRebarData',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberRebarSets' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BarSizeName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BarArea' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberCBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberR3Bars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberR2Bars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Location' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ClearCover' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'RebarSetGUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'GetColumnTieRebarData',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberRebarSets' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BarSizeName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BarArea' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Pattern' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ConfineType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberLegs2Dir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberLegs3Dir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Location' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ClearCover' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartCoord1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Spacing' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Heights' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'RebarSetGUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(43)], HRESULT, 'GetDetailedBeamLineGuidData',
              ( ['in'], BSTR, 'BeamLineID' ),
              ( ['in'], BSTR, 'SimilarFirstBeamUniqueID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LongitudinalABars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LongitudinalBBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LongitudinalCBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LongitudinalDBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LongitudinalEBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LongitudinalFBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LongitudinalGBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LongitudinalHBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ZoneATies' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ZoneBTies' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ZoneCTies' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(44)], HRESULT, 'GetDetailedColumnStackGuidData',
              ( ['in'], BSTR, 'ColumnStackID' ),
              ( ['in'], BSTR, 'SimilarFirstColumnUniqueID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LongitudinalBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TiesA' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TiesB' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TiesC' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(45)], HRESULT, 'GetDetailedColumnStackData_2',
              ( ['in'], BSTR, 'ColumnStackID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectUniqueNames' ),
              ( ['in', 'out'], POINTER(c_int), 'NumLongBarSets' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumLongBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumLongR2Bars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumLongR3Bars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LongBarGUID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LongBarDiameter' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LongBarNotation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LongBarStartDist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LongBarStartBend' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LongBarEndBend' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LongBarLength' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LongBarNumLayers' ),
              ( ['in', 'out'], POINTER(c_int), 'NumTieZones' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TieBarZone' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumTieBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumTieR2Legs' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumTieR3Legs' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TieBarGUID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TieBarDiameter' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TieBarNotation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TieBarStartDist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TieBarSpacing' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'TieBarType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'GetNumberDetailedSlabs',
              ( ['in', 'out'], POINTER(c_int), 'NumberDetailingOutput' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(23)], HRESULT, 'GetDetailedSlab_OneDetailingOutputInfo',
              ( ['in'], c_int, 'DetailingOutputIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'Guid_ETABS' ),
              ( ['in', 'out'], POINTER(BSTR), 'Floor' ),
              ( ['in', 'out'], POINTER(BSTR), 'StoryNameETABS' ),
              ( ['in', 'out'], POINTER(c_double), 'LevelZ' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberStrips' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(24)], HRESULT, 'GetOneDetailedSlab_OneDetailingOutput_StripInfo',
              ( ['in'], c_int, 'DetailingOutputIndex' ),
              ( ['in'], c_int, 'StripIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'LayerName' ),
              ( ['in', 'out'], POINTER(BSTR), 'StripType' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberRegions' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(46)], HRESULT, 'GetOneDetailedSlab_OneDetailingOutput_StripGUID',
              ( ['in'], c_int, 'DetailingOutputIndex' ),
              ( ['in'], c_int, 'StripIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'Guid_ETABS' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(25)], HRESULT, 'GetOneDetailedSlab_OneDetailingOutput_OneStrip_OneDetailingRegionInfo',
              ( ['in'], c_int, 'DetailingOutputIndex' ),
              ( ['in'], c_int, 'StripIndex' ),
              ( ['in'], c_int, 'DetailingRegionIndex' ),
              ( ['in', 'out'], POINTER(c_double), 'X1' ),
              ( ['in', 'out'], POINTER(c_double), 'Y1' ),
              ( ['in', 'out'], POINTER(c_double), 'X2' ),
              ( ['in', 'out'], POINTER(c_double), 'Y2' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberTopBars' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberBottomBars' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(26)], HRESULT, 'GetOneDetailedSlab_OneDetailingOutput_OneStrip_OneDetailingRegion_OneTopRebarInfo',
              ( ['in'], c_int, 'DetailingOutputIndex' ),
              ( ['in'], c_int, 'StripIndex' ),
              ( ['in'], c_int, 'DetailingRegionIndex' ),
              ( ['in'], c_int, 'TopRebarIndex' ),
              ( ['in', 'out'], POINTER(c_double), 'X1' ),
              ( ['in', 'out'], POINTER(c_double), 'Y1' ),
              ( ['in', 'out'], POINTER(c_double), 'X2' ),
              ( ['in', 'out'], POINTER(c_double), 'Y2' ),
              ( ['in', 'out'], POINTER(c_double), 'WidthRight' ),
              ( ['in', 'out'], POINTER(c_double), 'WidthLeft' ),
              ( ['in', 'out'], POINTER(c_double), 'Z' ),
              ( ['in', 'out'], POINTER(c_double), 'ReqAst' ),
              ( ['in', 'out'], POINTER(c_double), 'ProvAst' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(27)], HRESULT, 'GetOneDetailedSlab_OneDetailingOutput_OneStrip_OneDetailingRegion_OneBottomRebarInfo',
              ( ['in'], c_int, 'DetailingOutputIndex' ),
              ( ['in'], c_int, 'StripIndex' ),
              ( ['in'], c_int, 'DetailingRegionIndex' ),
              ( ['in'], c_int, 'BottomRebarIndex' ),
              ( ['in', 'out'], POINTER(c_double), 'X1' ),
              ( ['in', 'out'], POINTER(c_double), 'Y1' ),
              ( ['in', 'out'], POINTER(c_double), 'X2' ),
              ( ['in', 'out'], POINTER(c_double), 'Y2' ),
              ( ['in', 'out'], POINTER(c_double), 'WidthRight' ),
              ( ['in', 'out'], POINTER(c_double), 'WidthLeft' ),
              ( ['in', 'out'], POINTER(c_double), 'Z' ),
              ( ['in', 'out'], POINTER(c_double), 'ReqAst' ),
              ( ['in', 'out'], POINTER(c_double), 'ProvAst' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(28)], HRESULT, 'GetOneDetailedSlab_OneDetailingOutput_OneStrip_OneDetailingRegion_OneTopRebar_Bar1Info',
              ( ['in'], c_int, 'DetailingOutputIndex' ),
              ( ['in'], c_int, 'StripIndex' ),
              ( ['in'], c_int, 'DetailingRegionIndex' ),
              ( ['in'], c_int, 'TopRebarIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['in', 'out'], POINTER(BSTR), 'PlaceCode' ),
              ( ['in', 'out'], POINTER(c_double), 'Dia' ),
              ( ['in', 'out'], POINTER(BSTR), 'Size' ),
              ( ['in', 'out'], POINTER(c_int), 'Number' ),
              ( ['in', 'out'], POINTER(c_double), 'StartDist' ),
              ( ['in', 'out'], POINTER(c_double), 'EndDist' ),
              ( ['in', 'out'], POINTER(c_int), 'StartBend' ),
              ( ['in', 'out'], POINTER(c_int), 'EndBend' ),
              ( ['in', 'out'], POINTER(BSTR), 'Material' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(29)], HRESULT, 'GetOneDetailedSlab_OneDetailingOutput_OneStrip_OneDetailingRegion_OneTopRebar_Bar2Info',
              ( ['in'], c_int, 'DetailingOutputIndex' ),
              ( ['in'], c_int, 'StripIndex' ),
              ( ['in'], c_int, 'DetailingRegionIndex' ),
              ( ['in'], c_int, 'TopRebarIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['in', 'out'], POINTER(BSTR), 'PlaceCode' ),
              ( ['in', 'out'], POINTER(c_double), 'Dia' ),
              ( ['in', 'out'], POINTER(BSTR), 'Size' ),
              ( ['in', 'out'], POINTER(c_int), 'Number' ),
              ( ['in', 'out'], POINTER(c_double), 'StartDist' ),
              ( ['in', 'out'], POINTER(c_double), 'EndDist' ),
              ( ['in', 'out'], POINTER(c_int), 'StartBend' ),
              ( ['in', 'out'], POINTER(c_int), 'EndBend' ),
              ( ['in', 'out'], POINTER(BSTR), 'Material' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(30)], HRESULT, 'GetOneDetailedSlab_OneDetailingOutput_OneStrip_OneDetailingRegion_OneBottomRebar_Bar1Info',
              ( ['in'], c_int, 'DetailingOutputIndex' ),
              ( ['in'], c_int, 'StripIndex' ),
              ( ['in'], c_int, 'DetailingRegionIndex' ),
              ( ['in'], c_int, 'BottomRebarIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['in', 'out'], POINTER(BSTR), 'PlaceCode' ),
              ( ['in', 'out'], POINTER(c_double), 'Dia' ),
              ( ['in', 'out'], POINTER(BSTR), 'Size' ),
              ( ['in', 'out'], POINTER(c_int), 'Number' ),
              ( ['in', 'out'], POINTER(c_double), 'StartDist' ),
              ( ['in', 'out'], POINTER(c_double), 'EndDist' ),
              ( ['in', 'out'], POINTER(c_int), 'StartBend' ),
              ( ['in', 'out'], POINTER(c_int), 'EndBend' ),
              ( ['in', 'out'], POINTER(BSTR), 'Material' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(31)], HRESULT, 'GetOneDetailedSlab_OneDetailingOutput_OneStrip_OneDetailingRegion_OneBottomRebar_Bar2Info',
              ( ['in'], c_int, 'DetailingOutputIndex' ),
              ( ['in'], c_int, 'StripIndex' ),
              ( ['in'], c_int, 'DetailingRegionIndex' ),
              ( ['in'], c_int, 'BottomRebarIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['in', 'out'], POINTER(BSTR), 'PlaceCode' ),
              ( ['in', 'out'], POINTER(c_double), 'Dia' ),
              ( ['in', 'out'], POINTER(BSTR), 'Size' ),
              ( ['in', 'out'], POINTER(c_int), 'Number' ),
              ( ['in', 'out'], POINTER(c_double), 'StartDist' ),
              ( ['in', 'out'], POINTER(c_double), 'EndDist' ),
              ( ['in', 'out'], POINTER(c_int), 'StartBend' ),
              ( ['in', 'out'], POINTER(c_int), 'EndBend' ),
              ( ['in', 'out'], POINTER(BSTR), 'Material' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(32)], HRESULT, 'GetNumberDetailedWallStacks',
              ( ['in', 'out'], POINTER(c_int), 'NumberWallStacks' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(33)], HRESULT, 'GetDetailed_OneWallStack',
              ( ['in'], c_int, 'WallStackIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['in', 'out'], POINTER(c_int), 'TowerID' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberPiers' ),
              ( ['in', 'out'], POINTER(c_int), 'NUmberSpandrels' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(34)], HRESULT, 'GetDetailedWall_OneWallStack_OnePierOutputInfo',
              ( ['in'], c_int, 'WallStackIndex' ),
              ( ['in'], c_int, 'PierIndex' ),
              ( ['in', 'out'], POINTER(c_int), 'StoryID' ),
              ( ['in', 'out'], POINTER(BSTR), 'ETABSStoryName' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberDesignLegs' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(35)], HRESULT, 'GetDetailedWall_OneWallStack_OnePier_OneDesignLegOutputInfo',
              ( ['in'], c_int, 'WallStackIndex' ),
              ( ['in'], c_int, 'PierIndex' ),
              ( ['in'], c_int, 'DesignLegIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['in', 'out'], POINTER(BSTR), 'PierLabel' ),
              ( ['in', 'out'], POINTER(c_double), 'X1' ),
              ( ['in', 'out'], POINTER(c_double), 'Y1' ),
              ( ['in', 'out'], POINTER(c_double), 'z1' ),
              ( ['in', 'out'], POINTER(c_double), 'X2' ),
              ( ['in', 'out'], POINTER(c_double), 'Y2' ),
              ( ['in', 'out'], POINTER(c_double), 'z2' ),
              ( ['in', 'out'], POINTER(c_double), 'ZLevel' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberVerticalBars' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberHorizontalBars' ),
              ( ['in', 'out'], POINTER(c_int), 'TotalAreaObjects' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaObjectNames' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(36)], HRESULT, 'GetDetailedWall_OneWallStack_OnePier_OneDesignLeg_OneVerticalBarInfo',
              ( ['in'], c_int, 'WallStackIndex' ),
              ( ['in'], c_int, 'PierIndex' ),
              ( ['in'], c_int, 'DesignLegIndex' ),
              ( ['in'], c_int, 'VerticalBarIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['in', 'out'], POINTER(c_double), 'BarSizeFirst_Dia' ),
              ( ['in', 'out'], POINTER(c_double), 'BarSizeFirst_Area' ),
              ( ['in', 'out'], POINTER(c_double), 'BarSizeFirst_Fy' ),
              ( ['in', 'out'], POINTER(BSTR), 'BarSizeFirst_Notation' ),
              ( ['in', 'out'], POINTER(c_double), 'BarSizeLast_Dia' ),
              ( ['in', 'out'], POINTER(c_double), 'BarSizeLast_Area' ),
              ( ['in', 'out'], POINTER(c_double), 'BarSizeLast_Fy' ),
              ( ['in', 'out'], POINTER(BSTR), 'BarSizeLast_Notation' ),
              ( ['in', 'out'], POINTER(c_double), 'BarSizeOthers_Dia' ),
              ( ['in', 'out'], POINTER(c_double), 'BarSizeOthers_Area' ),
              ( ['in', 'out'], POINTER(c_double), 'BarSizeOthers_Fy' ),
              ( ['in', 'out'], POINTER(BSTR), 'BarSizeOthers_Notation' ),
              ( ['in', 'out'], POINTER(c_int), 'Number' ),
              ( ['in', 'out'], POINTER(c_double), 'StartX' ),
              ( ['in', 'out'], POINTER(c_double), 'StartY' ),
              ( ['in', 'out'], POINTER(c_double), 'EndX' ),
              ( ['in', 'out'], POINTER(c_double), 'EndY' ),
              ( ['in', 'out'], POINTER(c_int), 'StartBarBend' ),
              ( ['in', 'out'], POINTER(c_int), 'EndBarBend' ),
              ( ['in', 'out'], POINTER(c_double), 'OffsetZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BarLength' ),
              ( ['in', 'out'], POINTER(c_int), 'LocationCode' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(37)], HRESULT, 'GetDetailedWall_OneWallStack_OnePier_OneDesignLeg_OneTieBarInfo',
              ( ['in'], c_int, 'WallStackIndex' ),
              ( ['in'], c_int, 'PierIndex' ),
              ( ['in'], c_int, 'DesignLegIndex' ),
              ( ['in'], c_int, 'TieBarIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['in', 'out'], POINTER(c_double), 'BarSize_Dia' ),
              ( ['in', 'out'], POINTER(c_double), 'BarSize_Area' ),
              ( ['in', 'out'], POINTER(c_double), 'BarSize_Fy' ),
              ( ['in', 'out'], POINTER(BSTR), 'BarSize_Notation' ),
              ( ['in', 'out'], POINTER(c_double), 'Spacing' ),
              ( ['in', 'out'], POINTER(c_double), 'StartZ' ),
              ( ['in', 'out'], POINTER(c_double), 'EndZ' ),
              ( ['in', 'out'], POINTER(c_int), 'TieShape' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberOfTiePlines' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(38)], HRESULT, 'GetDetailedWall_OneWallStack_OnePier_OneDesignLeg_OneTieBar_OneTiePlineInfo',
              ( ['in'], c_int, 'WallStackIndex' ),
              ( ['in'], c_int, 'PierIndex' ),
              ( ['in'], c_int, 'DesignLegIndex' ),
              ( ['in'], c_int, 'TieBarIndex' ),
              ( ['in'], c_int, 'TiePLineIndex' ),
              ( ['in', 'out'], POINTER(c_double), 'Dia' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberPoints' ),
              ( ['in', 'out'], POINTER(c_double), 'ZoneLength' ),
              ( ['in', 'out'], POINTER(c_int), 'LocationCode' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(39)], HRESULT, 'GetDetailedWall_OnePier_OneDesignLeg_OneTieBar_OneTiePline_OnePoint',
              ( ['in'], c_int, 'WallStackIndex' ),
              ( ['in'], c_int, 'PierIndex' ),
              ( ['in'], c_int, 'DesignLegIndex' ),
              ( ['in'], c_int, 'TieBarIndex' ),
              ( ['in'], c_int, 'TiePLineIndex' ),
              ( ['in'], c_int, 'TPLinePointIndex' ),
              ( ['in', 'out'], POINTER(c_double), 'X' ),
              ( ['in', 'out'], POINTER(c_double), 'Y' ),
              ( ['in', 'out'], POINTER(c_double), 'Z' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(40)], HRESULT, 'GetDetailedWall_OneWallStack_OneSpandrelOutputInfo',
              ( ['in'], c_int, 'WallStackIndex' ),
              ( ['in'], c_int, 'SpandrelIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['in', 'out'], POINTER(BSTR), 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Height' ),
              ( ['in', 'out'], POINTER(c_double), 'Width' ),
              ( ['in', 'out'], POINTER(c_double), 'Thickness' ),
              ( ['in', 'out'], POINTER(c_double), 'CoverLongBar' ),
              ( ['in', 'out'], POINTER(c_double), 'CoverStirrups' ),
              ( ['in', 'out'], POINTER(c_double), 'X1' ),
              ( ['in', 'out'], POINTER(c_double), 'Y1' ),
              ( ['in', 'out'], POINTER(c_double), 'z1' ),
              ( ['in', 'out'], POINTER(c_double), 'X2' ),
              ( ['in', 'out'], POINTER(c_double), 'Y2' ),
              ( ['in', 'out'], POINTER(c_double), 'z2' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberLongBars' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberStirrups' ),
              ( ['in', 'out'], POINTER(c_int), 'TotalAreaObjects' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaObjectNames' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(41)], HRESULT, 'GetDetailedWall_OneWallStack_OneSpandrel_OneLongBarInfo',
              ( ['in'], c_int, 'WallStackIndex' ),
              ( ['in'], c_int, 'SpandrelIndex' ),
              ( ['in'], c_int, 'LongBarIndex' ),
              ( ['in', 'out'], POINTER(c_double), 'BarSize_Dia' ),
              ( ['in', 'out'], POINTER(c_double), 'BarSize_Area' ),
              ( ['in', 'out'], POINTER(c_double), 'BarSize_Fy' ),
              ( ['in', 'out'], POINTER(BSTR), 'BarSize_Notation' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z' ),
              ( ['in', 'out'], POINTER(c_int), 'StartType' ),
              ( ['in', 'out'], POINTER(c_int), 'EndType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(42)], HRESULT, 'GetDetailedWall_OneWallStack_OneSpandrel_OneStirrupsInfo',
              ( ['in'], c_int, 'WallStackIndex' ),
              ( ['in'], c_int, 'SpandrelIndex' ),
              ( ['in'], c_int, 'StirrupsIndex' ),
              ( ['in', 'out'], POINTER(c_double), 'BarSize_Dia' ),
              ( ['in', 'out'], POINTER(c_double), 'BarSize_Area' ),
              ( ['in', 'out'], POINTER(c_double), 'BarSize_Fy' ),
              ( ['in', 'out'], POINTER(BSTR), 'BarSize_Notation' ),
              ( ['in', 'out'], POINTER(c_double), 'X1' ),
              ( ['in', 'out'], POINTER(c_double), 'X2' ),
              ( ['in', 'out'], POINTER(c_double), 'Spacing' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberLegs' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDetailing implementation
##class cDetailing_Impl(object):
##    def ClearDetailing(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetDetailedBeamLines(self):
##        '-no docstring-'
##        #return NumberItems, BeamLineIDs, pRetVal
##
##    def GetDetailedBeamLineData(self, BeamLineID):
##        '-no docstring-'
##        #return ObjectUniqueNames, NumberSpans, SpanLength, NumLongBars, LongBarDiameter, LongBarNotation, LongBarStartDist, LongBarStartBend, LongBarEndBend, LongBarLength, LongBarNumLayers, NumTieBars, NumTieVertLegs, TieBarDiameter, TieBarNotation, TieBarStartDist, TieBarSpacing, TieBarType, pRetVal
##
##    def GetDetailedBeamLineData_1(self, BeamLineID):
##        '-no docstring-'
##        #return ObjectUniqueNames, NumberSpans, SpanLength, NumLongBars, LongBarGUID, LongBarDiameter, LongBarNotation, LongBarStartDist, LongBarStartBend, LongBarEndBend, LongBarLength, LongBarNumLayers, NumTieBars, NumTieVertLegs, TieBarGUID, TieBarDiameter, TieBarNotation, TieBarStartDist, TieBarSpacing, TieBarType, pRetVal
##
##    def GetDetailedColumnStacks(self):
##        '-no docstring-'
##        #return NumberItems, ColumnStackIDs, pRetVal
##
##    def GetDetailedColumnStackData(self, ColumnStackID):
##        '-no docstring-'
##        #return ObjectUniqueNames, NumLongBarSets, NumLongBars, LongBarDiameter, LongBarNotation, LongBarStartDist, LongBarStartBend, LongBarEndBend, LongBarLength, LongBarNumLayers, NumTieZones, TieBarZones, NumTieBars, NumTieVertLegs, TieBarDiameter, TieBarNotation, TieBarStartDist, TieBarSpacing, TieBarType, pRetVal
##
##    def GetDetailedColumnStackData_1(self, ColumnStackID):
##        '-no docstring-'
##        #return ObjectUniqueNames, NumLongBarSets, NumLongBars, LongBarGUID, LongBarDiameter, LongBarNotation, LongBarStartDist, LongBarStartBend, LongBarEndBend, LongBarLength, LongBarNumLayers, NumTieZones, TieBarZones, NumTieBars, NumTieHorLegs, NumTieVertLegs, TieBarGUID, TieBarDiameter, TieBarNotation, TieBarStartDist, TieBarSpacing, TieBarType, pRetVal
##
##    def GetDetailedSlabs(self):
##        '-no docstring-'
##        #return NumberItems, Names, SlabElevations, GUIDs, pRetVal
##
##    def GetDetailedSlabBotBarData(self, SlabName):
##        '-no docstring-'
##        #return NumData, Names, NumBars, BarDiameter, BarNotation, BarMaterial, StartX, StartY, StartZ, EndX, EndY, EndZ, WidthLeft, WidthRight, OffsetFromTop, OffsetFromBot, StartBarBend, EndBarBend, GUIDs, pRetVal
##
##    def GetDetailedSlabBotBarData_1(self, SlabName):
##        '-no docstring-'
##        #return NumData, Names, NumBars, BarDiameter, BarNotation, BarMaterial, StartX, StartY, StartZ, EndX, EndY, EndZ, WidthLeft, WidthRight, OffsetFromTop, OffsetFromBot, StartBarBend, EndBarBend, GUIDs, StripNames, SpanNos, pRetVal
##
##    def GetDetailedSlabTopBarData(self, SlabName):
##        '-no docstring-'
##        #return NumData, Names, NumBars, BarDiameter, BarNotation, BarMaterial, StartX, StartY, StartZ, EndX, EndY, EndZ, WidthLeft, WidthRight, OffsetFromTop, OffsetFromBot, StartBarBend, EndBarBend, GUIDs, pRetVal
##
##    def GetDetailedSlabTopBarData_1(self, SlabName):
##        '-no docstring-'
##        #return NumData, Names, NumBars, BarDiameter, BarNotation, BarMaterial, StartX, StartY, StartZ, EndX, EndY, EndZ, WidthLeft, WidthRight, OffsetFromTop, OffsetFromBot, StartBarBend, EndBarBend, GUIDs, StripNames, SpanNos, pRetVal
##
##    def GetDetailingAvailable(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetSimilarBeamLines(self, BeamLineID):
##        '-no docstring-'
##        #return NumberSimilarBeams, NumberUniqueObjects, ObjectUniqueNames, pRetVal
##
##    def GetSimilarColumnStacks(self, ColumnStackID):
##        '-no docstring-'
##        #return NumberSimilarColumns, NumberUniqueObjects, ObjectUniqueNames, pRetVal
##
##    def GetSimilarSlabs(self, SlabName):
##        '-no docstring-'
##        #return NumberSimilarSlabs, Names, pRetVal
##
##    def StartDetailing(self, OverwriteExisting):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetBeamLongRebarData(self, Name):
##        '-no docstring-'
##        #return NumberRebarSets, BarSizeName, BarArea, NumberBars, Location, ClearCover, StartCoord1, BarLength, BendingAngleStart, BendingAngleEnd, RebarSetGUID, pRetVal
##
##    def GetBeamTieRebarData(self, Name):
##        '-no docstring-'
##        #return NumberRebarSets, BarSizeName, BarArea, NumberLegs, Location, ClearCover, StartCoord1, Spacing, Lengths, RebarSetGUID, pRetVal
##
##    def GetColumnLongRebarData(self, Name):
##        '-no docstring-'
##        #return NumberRebarSets, BarSizeName, BarArea, NumberCBars, NumberR3Bars, NumberR2Bars, Location, ClearCover, RebarSetGUID, pRetVal
##
##    def GetColumnTieRebarData(self, Name):
##        '-no docstring-'
##        #return NumberRebarSets, BarSizeName, BarArea, Pattern, ConfineType, NumberLegs2Dir, NumberLegs3Dir, Location, ClearCover, StartCoord1, Spacing, Heights, RebarSetGUID, pRetVal
##
##    def GetDetailedBeamLineGuidData(self, BeamLineID, SimilarFirstBeamUniqueID):
##        '-no docstring-'
##        #return LongitudinalABars, LongitudinalBBars, LongitudinalCBars, LongitudinalDBars, LongitudinalEBars, LongitudinalFBars, LongitudinalGBars, LongitudinalHBars, ZoneATies, ZoneBTies, ZoneCTies, pRetVal
##
##    def GetDetailedColumnStackGuidData(self, ColumnStackID, SimilarFirstColumnUniqueID):
##        '-no docstring-'
##        #return LongitudinalBars, TiesA, TiesB, TiesC, pRetVal
##
##    def GetDetailedColumnStackData_2(self, ColumnStackID):
##        '-no docstring-'
##        #return ObjectUniqueNames, NumLongBarSets, NumLongBars, NumLongR2Bars, NumLongR3Bars, LongBarGUID, LongBarDiameter, LongBarNotation, LongBarStartDist, LongBarStartBend, LongBarEndBend, LongBarLength, LongBarNumLayers, NumTieZones, TieBarZone, NumTieBars, NumTieR2Legs, NumTieR3Legs, TieBarGUID, TieBarDiameter, TieBarNotation, TieBarStartDist, TieBarSpacing, TieBarType, pRetVal
##
##    def GetNumberDetailedSlabs(self):
##        '-no docstring-'
##        #return NumberDetailingOutput, pRetVal
##
##    def GetDetailedSlab_OneDetailingOutputInfo(self, DetailingOutputIndex):
##        '-no docstring-'
##        #return Guid_ETABS, Floor, StoryNameETABS, LevelZ, NumberStrips, pRetVal
##
##    def GetOneDetailedSlab_OneDetailingOutput_StripInfo(self, DetailingOutputIndex, StripIndex):
##        '-no docstring-'
##        #return Name, LayerName, StripType, NumberRegions, pRetVal
##
##    def GetOneDetailedSlab_OneDetailingOutput_StripGUID(self, DetailingOutputIndex, StripIndex):
##        '-no docstring-'
##        #return Guid_ETABS, pRetVal
##
##    def GetOneDetailedSlab_OneDetailingOutput_OneStrip_OneDetailingRegionInfo(self, DetailingOutputIndex, StripIndex, DetailingRegionIndex):
##        '-no docstring-'
##        #return X1, Y1, X2, Y2, NumberTopBars, NumberBottomBars, pRetVal
##
##    def GetOneDetailedSlab_OneDetailingOutput_OneStrip_OneDetailingRegion_OneTopRebarInfo(self, DetailingOutputIndex, StripIndex, DetailingRegionIndex, TopRebarIndex):
##        '-no docstring-'
##        #return X1, Y1, X2, Y2, WidthRight, WidthLeft, Z, ReqAst, ProvAst, pRetVal
##
##    def GetOneDetailedSlab_OneDetailingOutput_OneStrip_OneDetailingRegion_OneBottomRebarInfo(self, DetailingOutputIndex, StripIndex, DetailingRegionIndex, BottomRebarIndex):
##        '-no docstring-'
##        #return X1, Y1, X2, Y2, WidthRight, WidthLeft, Z, ReqAst, ProvAst, pRetVal
##
##    def GetOneDetailedSlab_OneDetailingOutput_OneStrip_OneDetailingRegion_OneTopRebar_Bar1Info(self, DetailingOutputIndex, StripIndex, DetailingRegionIndex, TopRebarIndex):
##        '-no docstring-'
##        #return GUID, PlaceCode, Dia, Size, Number, StartDist, EndDist, StartBend, EndBend, Material, pRetVal
##
##    def GetOneDetailedSlab_OneDetailingOutput_OneStrip_OneDetailingRegion_OneTopRebar_Bar2Info(self, DetailingOutputIndex, StripIndex, DetailingRegionIndex, TopRebarIndex):
##        '-no docstring-'
##        #return GUID, PlaceCode, Dia, Size, Number, StartDist, EndDist, StartBend, EndBend, Material, pRetVal
##
##    def GetOneDetailedSlab_OneDetailingOutput_OneStrip_OneDetailingRegion_OneBottomRebar_Bar1Info(self, DetailingOutputIndex, StripIndex, DetailingRegionIndex, BottomRebarIndex):
##        '-no docstring-'
##        #return GUID, PlaceCode, Dia, Size, Number, StartDist, EndDist, StartBend, EndBend, Material, pRetVal
##
##    def GetOneDetailedSlab_OneDetailingOutput_OneStrip_OneDetailingRegion_OneBottomRebar_Bar2Info(self, DetailingOutputIndex, StripIndex, DetailingRegionIndex, BottomRebarIndex):
##        '-no docstring-'
##        #return GUID, PlaceCode, Dia, Size, Number, StartDist, EndDist, StartBend, EndBend, Material, pRetVal
##
##    def GetNumberDetailedWallStacks(self):
##        '-no docstring-'
##        #return NumberWallStacks, pRetVal
##
##    def GetDetailed_OneWallStack(self, WallStackIndex):
##        '-no docstring-'
##        #return GUID, TowerID, NumberPiers, NUmberSpandrels, pRetVal
##
##    def GetDetailedWall_OneWallStack_OnePierOutputInfo(self, WallStackIndex, PierIndex):
##        '-no docstring-'
##        #return StoryID, ETABSStoryName, NumberDesignLegs, pRetVal
##
##    def GetDetailedWall_OneWallStack_OnePier_OneDesignLegOutputInfo(self, WallStackIndex, PierIndex, DesignLegIndex):
##        '-no docstring-'
##        #return GUID, PierLabel, X1, Y1, z1, X2, Y2, z2, ZLevel, NumberVerticalBars, NumberHorizontalBars, TotalAreaObjects, AreaObjectNames, pRetVal
##
##    def GetDetailedWall_OneWallStack_OnePier_OneDesignLeg_OneVerticalBarInfo(self, WallStackIndex, PierIndex, DesignLegIndex, VerticalBarIndex):
##        '-no docstring-'
##        #return GUID, BarSizeFirst_Dia, BarSizeFirst_Area, BarSizeFirst_Fy, BarSizeFirst_Notation, BarSizeLast_Dia, BarSizeLast_Area, BarSizeLast_Fy, BarSizeLast_Notation, BarSizeOthers_Dia, BarSizeOthers_Area, BarSizeOthers_Fy, BarSizeOthers_Notation, Number, StartX, StartY, EndX, EndY, StartBarBend, EndBarBend, OffsetZ, BarLength, LocationCode, pRetVal
##
##    def GetDetailedWall_OneWallStack_OnePier_OneDesignLeg_OneTieBarInfo(self, WallStackIndex, PierIndex, DesignLegIndex, TieBarIndex):
##        '-no docstring-'
##        #return GUID, BarSize_Dia, BarSize_Area, BarSize_Fy, BarSize_Notation, Spacing, StartZ, EndZ, TieShape, NumberOfTiePlines, pRetVal
##
##    def GetDetailedWall_OneWallStack_OnePier_OneDesignLeg_OneTieBar_OneTiePlineInfo(self, WallStackIndex, PierIndex, DesignLegIndex, TieBarIndex, TiePLineIndex):
##        '-no docstring-'
##        #return Dia, NumberPoints, ZoneLength, LocationCode, pRetVal
##
##    def GetDetailedWall_OnePier_OneDesignLeg_OneTieBar_OneTiePline_OnePoint(self, WallStackIndex, PierIndex, DesignLegIndex, TieBarIndex, TiePLineIndex, TPLinePointIndex):
##        '-no docstring-'
##        #return X, Y, Z, pRetVal
##
##    def GetDetailedWall_OneWallStack_OneSpandrelOutputInfo(self, WallStackIndex, SpandrelIndex):
##        '-no docstring-'
##        #return GUID, Name, Height, Width, Thickness, CoverLongBar, CoverStirrups, X1, Y1, z1, X2, Y2, z2, NumberLongBars, NumberStirrups, TotalAreaObjects, AreaObjectNames, pRetVal
##
##    def GetDetailedWall_OneWallStack_OneSpandrel_OneLongBarInfo(self, WallStackIndex, SpandrelIndex, LongBarIndex):
##        '-no docstring-'
##        #return BarSize_Dia, BarSize_Area, BarSize_Fy, BarSize_Notation, NumberPoints, X, Y, Z, StartType, EndType, pRetVal
##
##    def GetDetailedWall_OneWallStack_OneSpandrel_OneStirrupsInfo(self, WallStackIndex, SpandrelIndex, StirrupsIndex):
##        '-no docstring-'
##        #return BarSize_Dia, BarSize_Area, BarSize_Fy, BarSize_Notation, X1, X2, Spacing, NumberLegs, pRetVal
##

cDStAustralian_AS4100_98._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDStAustralian_AS4100_98 implementation
##class cDStAustralian_AS4100_98_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_CANCSAS606_CBox2Str._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_CANCSAS606_CBox2Str implementation
##class cBDRS_CANCSAS606_CBox2Str_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_EUROCODE_SICompUlt._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_EUROCODE_SICompUlt implementation
##class cBDRS_EUROCODE_SICompUlt_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_RussianSNiP_PCCompFlexure._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_RussianSNiP_PCCompFlexure implementation
##class cBDRS_RussianSNiP_PCCompFlexure_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cPropLink._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Count',
              ( ['in', 'optional'], eLinkPropType, 'PropType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetDamper',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'C' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CExp' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ2' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ3' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetFrictionIsolator',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Slow' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Fast' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Rate' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Radius' ),
              ( ['in', 'out'], POINTER(c_double), 'Damping' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ2' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ3' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetGap',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dis' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ2' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ3' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetHook',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dis' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ2' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ3' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetLinear',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ2' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ3' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'KeCoupled' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'CeCoupled' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetMultiLinearElastic',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ2' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ3' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetMultiLinearPlastic',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ2' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ3' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetMultiLinearPoints',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'DOF' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'D' ),
              ( ['in', 'out'], POINTER(c_int), 'MyType' ),
              ( ['in', 'out'], POINTER(c_double), 'A1' ),
              ( ['in', 'out'], POINTER(c_double), 'A2' ),
              ( ['in', 'out'], POINTER(c_double), 'B1' ),
              ( ['in', 'out'], POINTER(c_double), 'B2' ),
              ( ['in', 'out'], POINTER(c_double), 'Eta' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'optional'], eLinkPropType, 'PropType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'GetPDelta',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'GetPlasticWen',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Yield' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ratio' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Exp' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ2' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ3' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'GetRubberIsolator',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Yield' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ratio' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ2' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ3' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'GetSpringData',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'DefinedForThisLength' ),
              ( ['in', 'out'], POINTER(c_double), 'DefinedForThisArea' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'GetTCFrictionIsolator',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Slow' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Fast' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Rate' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Radius' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SlowT' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FastT' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RateT' ),
              ( ['in', 'out'], POINTER(c_double), 'Kt' ),
              ( ['in', 'out'], POINTER(c_double), 'Dis' ),
              ( ['in', 'out'], POINTER(c_double), 'Dist' ),
              ( ['in', 'out'], POINTER(c_double), 'Damping' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ2' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ3' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'GetTypeOAPI',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(eLinkPropType), 'PropType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'GetWeightAndMass',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'W' ),
              ( ['in', 'out'], POINTER(c_double), 'M' ),
              ( ['in', 'out'], POINTER(c_double), 'R1' ),
              ( ['in', 'out'], POINTER(c_double), 'R2' ),
              ( ['in', 'out'], POINTER(c_double), 'R3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'SetDamper',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'C' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CExp' ),
              ( ['in'], c_double, 'DJ2' ),
              ( ['in'], c_double, 'DJ3' ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'SetFrictionIsolator',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Slow' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Fast' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Rate' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Radius' ),
              ( ['in'], c_double, 'Damping' ),
              ( ['in'], c_double, 'DJ2' ),
              ( ['in'], c_double, 'DJ3' ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'SetGap',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dis' ),
              ( ['in'], c_double, 'DJ2' ),
              ( ['in'], c_double, 'DJ3' ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(23)], HRESULT, 'SetHook',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dis' ),
              ( ['in'], c_double, 'DJ2' ),
              ( ['in'], c_double, 'DJ3' ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(24)], HRESULT, 'SetLinear',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in'], c_double, 'DJ2' ),
              ( ['in'], c_double, 'DJ3' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'KeCoupled', False ),
              ( ['in', 'optional'], VARIANT_BOOL, 'CeCoupled', False ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(25)], HRESULT, 'SetMultiLinearElastic',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in'], c_double, 'DJ2' ),
              ( ['in'], c_double, 'DJ3' ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(26)], HRESULT, 'SetMultiLinearPlastic',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in'], c_double, 'DJ2' ),
              ( ['in'], c_double, 'DJ3' ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(27)], HRESULT, 'SetMultiLinearPoints',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'DOF' ),
              ( ['in'], c_int, 'NumberPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'D' ),
              ( ['in', 'optional'], c_int, 'MyType', 1 ),
              ( ['in', 'optional'], c_double, 'A1', 0.0 ),
              ( ['in', 'optional'], c_double, 'A2', 0.0 ),
              ( ['in', 'optional'], c_double, 'B1', 0.0 ),
              ( ['in', 'optional'], c_double, 'B2', 0.0 ),
              ( ['in', 'optional'], c_double, 'Eta', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(28)], HRESULT, 'SetPDelta',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(29)], HRESULT, 'SetPlasticWen',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Yield' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ratio' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Exp' ),
              ( ['in'], c_double, 'DJ2' ),
              ( ['in'], c_double, 'DJ3' ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(30)], HRESULT, 'SetRubberIsolator',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Yield' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ratio' ),
              ( ['in'], c_double, 'DJ2' ),
              ( ['in'], c_double, 'DJ3' ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(31)], HRESULT, 'SetSpringData',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'DefinedForThisLength' ),
              ( ['in'], c_double, 'DefinedForThisArea' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(32)], HRESULT, 'SetTCFrictionIsolator',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Slow' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Fast' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Rate' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Radius' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SlowT' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FastT' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RateT' ),
              ( ['in'], c_double, 'Kt' ),
              ( ['in'], c_double, 'Dis' ),
              ( ['in'], c_double, 'Dist' ),
              ( ['in'], c_double, 'Damping' ),
              ( ['in'], c_double, 'DJ2' ),
              ( ['in'], c_double, 'DJ3' ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(33)], HRESULT, 'SetWeightAndMass',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'W' ),
              ( ['in'], c_double, 'M' ),
              ( ['in'], c_double, 'R1' ),
              ( ['in'], c_double, 'R2' ),
              ( ['in'], c_double, 'R3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(34)], HRESULT, 'GetDamperBilinear',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'C' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ForceLimit' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ2' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ3' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(35)], HRESULT, 'GetDamperFrictionSpring',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'u0' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Us' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Direction' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ2' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ3' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(38)], HRESULT, 'SetDamperBilinear',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'C' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ForceLimit' ),
              ( ['in'], c_double, 'DJ2' ),
              ( ['in'], c_double, 'DJ3' ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(39)], HRESULT, 'SetDamperFrictionSpring',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'u0' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Us' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Direction' ),
              ( ['in'], c_double, 'DJ2' ),
              ( ['in'], c_double, 'DJ3' ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(36)], HRESULT, 'GetDamperLinearExponential',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'C' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CExp' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ForceLimit' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ2' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ3' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(37)], HRESULT, 'GetTriplePendulumIsolator',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in', 'out'], POINTER(c_double), 'K1' ),
              ( ['in', 'out'], POINTER(c_double), 'Damping' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Slow' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Fast' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Rate' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Radius' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StopDist' ),
              ( ['in', 'out'], POINTER(c_double), 'HeightOut' ),
              ( ['in', 'out'], POINTER(c_double), 'HeightIn' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ2' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ3' ),
              ( ['in', 'out'], POINTER(BSTR), 'Notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(40)], HRESULT, 'SetDamperLinearExponential',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'C' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CExp' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ForceLimit' ),
              ( ['in'], c_double, 'DJ2' ),
              ( ['in'], c_double, 'DJ3' ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(41)], HRESULT, 'SetTriplePendulumIsolator',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in'], c_double, 'K1' ),
              ( ['in'], c_double, 'Damping' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Slow' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Fast' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Rate' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Radius' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StopDist' ),
              ( ['in'], c_double, 'HeightOut' ),
              ( ['in'], c_double, 'HeightIn' ),
              ( ['in'], c_double, 'DJ2' ),
              ( ['in'], c_double, 'DJ3' ),
              ( ['in', 'optional'], BSTR, 'Notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(42)], HRESULT, 'GetAcceptanceCriteria',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'AcceptanceType' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Symmetric' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Active' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'IOPos' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LSPos' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CPPos' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'IONeg' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LSNeg' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CPNeg' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(43)], HRESULT, 'SetAcceptanceCriteria',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'AcceptanceType' ),
              ( ['in'], VARIANT_BOOL, 'Symmetric' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Active' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'IOPos' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LSPos' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CPPos' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'IONeg' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LSNeg' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CPNeg' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cPropLink implementation
##class cPropLink_Impl(object):
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self, PropType):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetDamper(self, Name):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, K, C, CExp, DJ2, DJ3, Notes, GUID, pRetVal
##
##    def GetFrictionIsolator(self, Name):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, K, Slow, Fast, Rate, Radius, Damping, DJ2, DJ3, Notes, GUID, pRetVal
##
##    def GetGap(self, Name):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, K, Dis, DJ2, DJ3, Notes, GUID, pRetVal
##
##    def GetHook(self, Name):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, K, Dis, DJ2, DJ3, Notes, GUID, pRetVal
##
##    def GetLinear(self, Name):
##        '-no docstring-'
##        #return DOF, Fixed, Ke, Ce, DJ2, DJ3, KeCoupled, CeCoupled, Notes, GUID, pRetVal
##
##    def GetMultiLinearElastic(self, Name):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, DJ2, DJ3, Notes, GUID, pRetVal
##
##    def GetMultiLinearPlastic(self, Name):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, DJ2, DJ3, Notes, GUID, pRetVal
##
##    def GetMultiLinearPoints(self, Name, DOF):
##        '-no docstring-'
##        #return NumberPoints, F, D, MyType, A1, A2, B1, B2, Eta, pRetVal
##
##    def GetNameList(self, PropType):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetPDelta(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetPlasticWen(self, Name):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, K, Yield, Ratio, Exp, DJ2, DJ3, Notes, GUID, pRetVal
##
##    def GetRubberIsolator(self, Name):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, K, Yield, Ratio, DJ2, DJ3, Notes, GUID, pRetVal
##
##    def GetSpringData(self, Name):
##        '-no docstring-'
##        #return DefinedForThisLength, DefinedForThisArea, pRetVal
##
##    def GetTCFrictionIsolator(self, Name):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, K, Slow, Fast, Rate, Radius, SlowT, FastT, RateT, Kt, Dis, Dist, Damping, DJ2, DJ3, Notes, GUID, pRetVal
##
##    def GetTypeOAPI(self, Name):
##        '-no docstring-'
##        #return PropType, pRetVal
##
##    def GetWeightAndMass(self, Name):
##        '-no docstring-'
##        #return W, M, R1, R2, R3, pRetVal
##
##    def SetDamper(self, Name, DJ2, DJ3, Notes, GUID):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, K, C, CExp, pRetVal
##
##    def SetFrictionIsolator(self, Name, Damping, DJ2, DJ3, Notes, GUID):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, K, Slow, Fast, Rate, Radius, pRetVal
##
##    def SetGap(self, Name, DJ2, DJ3, Notes, GUID):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, K, Dis, pRetVal
##
##    def SetHook(self, Name, DJ2, DJ3, Notes, GUID):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, K, Dis, pRetVal
##
##    def SetLinear(self, Name, DJ2, DJ3, KeCoupled, CeCoupled, Notes, GUID):
##        '-no docstring-'
##        #return DOF, Fixed, Ke, Ce, pRetVal
##
##    def SetMultiLinearElastic(self, Name, DJ2, DJ3, Notes, GUID):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, pRetVal
##
##    def SetMultiLinearPlastic(self, Name, DJ2, DJ3, Notes, GUID):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, pRetVal
##
##    def SetMultiLinearPoints(self, Name, DOF, NumberPoints, MyType, A1, A2, B1, B2, Eta):
##        '-no docstring-'
##        #return F, D, pRetVal
##
##    def SetPDelta(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetPlasticWen(self, Name, DJ2, DJ3, Notes, GUID):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, K, Yield, Ratio, Exp, pRetVal
##
##    def SetRubberIsolator(self, Name, DJ2, DJ3, Notes, GUID):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, K, Yield, Ratio, pRetVal
##
##    def SetSpringData(self, Name, DefinedForThisLength, DefinedForThisArea):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetTCFrictionIsolator(self, Name, Kt, Dis, Dist, Damping, DJ2, DJ3, Notes, GUID):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, K, Slow, Fast, Rate, Radius, SlowT, FastT, RateT, pRetVal
##
##    def SetWeightAndMass(self, Name, W, M, R1, R2, R3):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetDamperBilinear(self, Name):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, K, C, CY, ForceLimit, DJ2, DJ3, Notes, GUID, pRetVal
##
##    def GetDamperFrictionSpring(self, Name):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, K, K1, K2, u0, Us, Direction, DJ2, DJ3, Notes, GUID, pRetVal
##
##    def SetDamperBilinear(self, Name, DJ2, DJ3, Notes, GUID):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, K, C, CY, ForceLimit, pRetVal
##
##    def SetDamperFrictionSpring(self, Name, DJ2, DJ3, Notes, GUID):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, K, K1, K2, u0, Us, Direction, pRetVal
##
##    def GetDamperLinearExponential(self, Name):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, K, C, CExp, ForceLimit, DJ2, DJ3, Notes, GUID, pRetVal
##
##    def GetTriplePendulumIsolator(self, Name):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, K1, Damping, K, Slow, Fast, Rate, Radius, StopDist, HeightOut, HeightIn, DJ2, DJ3, Notes, GUID, pRetVal
##
##    def SetDamperLinearExponential(self, Name, DJ2, DJ3, Notes, GUID):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, K, C, CExp, ForceLimit, pRetVal
##
##    def SetTriplePendulumIsolator(self, Name, K1, Damping, HeightOut, HeightIn, DJ2, DJ3, Notes, GUID):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, K, Slow, Fast, Rate, Radius, StopDist, pRetVal
##
##    def GetAcceptanceCriteria(self, Name):
##        '-no docstring-'
##        #return AcceptanceType, Symmetric, Active, IOPos, LSPos, CPPos, IONeg, LSNeg, CPNeg, pRetVal
##
##    def SetAcceptanceCriteria(self, Name, AcceptanceType, Symmetric):
##        '-no docstring-'
##        #return Active, IOPos, LSPos, CPPos, IONeg, LSNeg, CPNeg, pRetVal
##

cBDRS_CSAS606_SICompServRating._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_CSAS606_SICompServRating implementation
##class cBDRS_CSAS606_SICompServRating_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_AA_L_07_SUCompServ._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_SUCompServ implementation
##class cBDRS_AA_L_07_SUCompServ_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_AA_L_07_PCCServiceRt._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], BSTR, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_AA_L_07_PCCServiceRt implementation
##class cBDRS_AA_L_07_PCCServiceRt_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetCapacityParamString(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCapacityParamString(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_RussianSNiP_PCCompShear._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], BSTR, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_RussianSNiP_PCCompShear implementation
##class cBDRS_RussianSNiP_PCCompShear_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetCapacityParamString(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCapacityParamString(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cAnalysisResultsSetup._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'DeselectAllCasesAndCombosForOutput',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetCaseSelectedForOutput',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Selected' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetComboSelectedForOutput',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Selected' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetOptionBaseReactLoc',
              ( ['in', 'out'], POINTER(c_double), 'GX' ),
              ( ['in', 'out'], POINTER(c_double), 'GY' ),
              ( ['in', 'out'], POINTER(c_double), 'GZ' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetOptionBucklingMode',
              ( ['in', 'out'], POINTER(c_int), 'BuckModeStart' ),
              ( ['in', 'out'], POINTER(c_int), 'BuckModeEnd' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'BuckModeAll' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetOptionDirectHist',
              ( ['in', 'out'], POINTER(c_int), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetOptionModalHist',
              ( ['in', 'out'], POINTER(c_int), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetOptionModeShape',
              ( ['in', 'out'], POINTER(c_int), 'ModeShapeStart' ),
              ( ['in', 'out'], POINTER(c_int), 'ModeShapeEnd' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ModeShapesAll' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetOptionMultiStepStatic',
              ( ['in', 'out'], POINTER(c_int), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetOptionMultiValuedCombo',
              ( ['in', 'out'], POINTER(c_int), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetOptionNLStatic',
              ( ['in', 'out'], POINTER(c_int), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'SetCaseSelectedForOutput',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Selected', True ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'SetComboSelectedForOutput',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Selected', True ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'SetOptionBaseReactLoc',
              ( ['in'], c_double, 'GX' ),
              ( ['in'], c_double, 'GY' ),
              ( ['in'], c_double, 'GZ' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'SetOptionBucklingMode',
              ( ['in'], c_int, 'BuckModeStart' ),
              ( ['in'], c_int, 'BuckModeEnd' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'BuckModeAll', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'SetOptionDirectHist',
              ( ['in'], c_int, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'SetOptionModalHist',
              ( ['in'], c_int, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'SetOptionModeShape',
              ( ['in'], c_int, 'ModeShapeStart' ),
              ( ['in'], c_int, 'ModeShapeEnd' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'ModeShapesAll', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'SetOptionMultiStepStatic',
              ( ['in'], c_int, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'SetOptionMultiValuedCombo',
              ( ['in'], c_int, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'SetOptionNLStatic',
              ( ['in'], c_int, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'GetOptionPSD',
              ( ['in', 'out'], POINTER(c_int), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(23)], HRESULT, 'GetOptionSteadyState',
              ( ['in', 'out'], POINTER(c_int), 'Value' ),
              ( ['in', 'out'], POINTER(c_int), 'SteadyStateOption' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(24)], HRESULT, 'GetSectionCutSelectedForOutput',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Selected' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(25)], HRESULT, 'SelectAllSectionCutsForOutput',
              ( ['in'], VARIANT_BOOL, 'Selected' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(26)], HRESULT, 'SetOptionPSD',
              ( ['in'], c_int, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(27)], HRESULT, 'SetOptionSteadyState',
              ( ['in'], c_int, 'Value' ),
              ( ['in'], c_int, 'SteadyStateOption' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(28)], HRESULT, 'SetSectionCutSelectedForOutput',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'Selected' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cAnalysisResultsSetup implementation
##class cAnalysisResultsSetup_Impl(object):
##    def DeselectAllCasesAndCombosForOutput(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetCaseSelectedForOutput(self, Name):
##        '-no docstring-'
##        #return Selected, pRetVal
##
##    def GetComboSelectedForOutput(self, Name):
##        '-no docstring-'
##        #return Selected, pRetVal
##
##    def GetOptionBaseReactLoc(self):
##        '-no docstring-'
##        #return GX, GY, GZ, pRetVal
##
##    def GetOptionBucklingMode(self):
##        '-no docstring-'
##        #return BuckModeStart, BuckModeEnd, BuckModeAll, pRetVal
##
##    def GetOptionDirectHist(self):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetOptionModalHist(self):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetOptionModeShape(self):
##        '-no docstring-'
##        #return ModeShapeStart, ModeShapeEnd, ModeShapesAll, pRetVal
##
##    def GetOptionMultiStepStatic(self):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetOptionMultiValuedCombo(self):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetOptionNLStatic(self):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCaseSelectedForOutput(self, Name, Selected):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetComboSelectedForOutput(self, Name, Selected):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetOptionBaseReactLoc(self, GX, GY, GZ):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetOptionBucklingMode(self, BuckModeStart, BuckModeEnd, BuckModeAll):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetOptionDirectHist(self, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetOptionModalHist(self, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetOptionModeShape(self, ModeShapeStart, ModeShapeEnd, ModeShapesAll):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetOptionMultiStepStatic(self, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetOptionMultiValuedCombo(self, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetOptionNLStatic(self, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetOptionPSD(self):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetOptionSteadyState(self):
##        '-no docstring-'
##        #return Value, SteadyStateOption, pRetVal
##
##    def GetSectionCutSelectedForOutput(self, Name):
##        '-no docstring-'
##        #return Selected, pRetVal
##
##    def SelectAllSectionCutsForOutput(self, Selected):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetOptionPSD(self, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetOptionSteadyState(self, Value, SteadyStateOption):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSectionCutSelectedForOutput(self, Name, Selected):
##        '-no docstring-'
##        #return pRetVal
##

cDCoACI318_19._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDCoACI318_19 implementation
##class cDCoACI318_19_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_CANCSAS606_CBox2ShrRating._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetCapacityParamString',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], BSTR, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_CANCSAS606_CBox2ShrRating implementation
##class cBDRS_CANCSAS606_CBox2ShrRating_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetCapacityParamString(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCapacityParamString(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cAnalyze._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'CreateAnalysisModel',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'DeleteResults',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'All', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetActiveDOF',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetCaseStatus',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CaseName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Status' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetRunCaseFlag',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CaseName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Run' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetSolverOption',
              ( ['in', 'out'], POINTER(c_int), 'SolverType' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Force32BitSolver' ),
              ( ['in', 'out'], POINTER(BSTR), 'StiffCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetSolverOption_1',
              ( ['in', 'out'], POINTER(c_int), 'SolverType' ),
              ( ['in', 'out'], POINTER(c_int), 'SolverProcessType' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Force32BitSolver' ),
              ( ['in', 'out'], POINTER(BSTR), 'StiffCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'ModifyUndeformedGeometry',
              ( ['in'], BSTR, 'CaseName' ),
              ( ['in'], c_double, 'SF' ),
              ( ['in', 'optional'], c_int, 'Stage', -1 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Original', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'RunAnalysis',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'SetActiveDOF',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'SetRunCaseFlag',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'Run' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'All', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'SetSolverOption',
              ( ['in'], c_int, 'SolverType' ),
              ( ['in'], VARIANT_BOOL, 'Force32BitSolver' ),
              ( ['in', 'optional'], BSTR, 'StiffCase', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'SetSolverOption_1',
              ( ['in'], c_int, 'SolverType' ),
              ( ['in'], c_int, 'SolverProcessType' ),
              ( ['in'], VARIANT_BOOL, 'Force32BitSolver' ),
              ( ['in', 'optional'], BSTR, 'StiffCase', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'ModifyUndeformedGeometryModeShape',
              ( ['in'], BSTR, 'CaseName' ),
              ( ['in'], c_int, 'Mode' ),
              ( ['in'], c_double, 'MaxDispl' ),
              ( ['in'], c_int, 'Direction' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Original', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'GetSolverOption_2',
              ( ['in', 'out'], POINTER(c_int), 'SolverType' ),
              ( ['in', 'out'], POINTER(c_int), 'SolverProcessType' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberParallelRuns' ),
              ( ['in', 'out'], POINTER(BSTR), 'StiffCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'SetSolverOption_2',
              ( ['in'], c_int, 'SolverType' ),
              ( ['in'], c_int, 'SolverProcessType' ),
              ( ['in'], c_int, 'NumberParallelRuns' ),
              ( ['in', 'optional'], BSTR, 'StiffCase', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'MergeAnalysisResults',
              ( ['in'], BSTR, 'SourceFileName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'GetSolverOption_3',
              ( ['in', 'out'], POINTER(c_int), 'SolverType' ),
              ( ['in', 'out'], POINTER(c_int), 'SolverProcessType' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberParallelRuns' ),
              ( ['in', 'out'], POINTER(c_int), 'ResponseFileSizeMaxMB' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberAnalysisThreads' ),
              ( ['in', 'out'], POINTER(BSTR), 'StiffCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'SetSolverOption_3',
              ( ['in'], c_int, 'SolverType' ),
              ( ['in'], c_int, 'SolverProcessType' ),
              ( ['in'], c_int, 'NumberParallelRuns' ),
              ( ['in'], c_int, 'ResponseFileSizeMaxMB' ),
              ( ['in'], c_int, 'NumberAnalysisThreads' ),
              ( ['in', 'optional'], BSTR, 'StiffCase', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'GetDesignResponseOption',
              ( ['in', 'out'], POINTER(c_int), 'NumberDesignThreads' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResponseRecoveryThreads' ),
              ( ['in', 'out'], POINTER(c_int), 'UseMemoryMappedFilesForResponseRecovery' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ModelDifferencesOKWhenMergingResults' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'SetDesignResponseOption',
              ( ['in'], c_int, 'NumberDesignThreads' ),
              ( ['in'], c_int, 'NumberResponseRecoveryThreads' ),
              ( ['in'], c_int, 'UseMemoryMappedFilesForResponseRecovery' ),
              ( ['in'], VARIANT_BOOL, 'ModelDifferencesOKWhenMergingResults' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cAnalyze implementation
##class cAnalyze_Impl(object):
##    def CreateAnalysisModel(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteResults(self, Name, All):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetActiveDOF(self):
##        '-no docstring-'
##        #return DOF, pRetVal
##
##    def GetCaseStatus(self):
##        '-no docstring-'
##        #return NumberItems, CaseName, Status, pRetVal
##
##    def GetRunCaseFlag(self):
##        '-no docstring-'
##        #return NumberItems, CaseName, Run, pRetVal
##
##    def GetSolverOption(self):
##        '-no docstring-'
##        #return SolverType, Force32BitSolver, StiffCase, pRetVal
##
##    def GetSolverOption_1(self):
##        '-no docstring-'
##        #return SolverType, SolverProcessType, Force32BitSolver, StiffCase, pRetVal
##
##    def ModifyUndeformedGeometry(self, CaseName, SF, Stage, Original):
##        '-no docstring-'
##        #return pRetVal
##
##    def RunAnalysis(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetActiveDOF(self):
##        '-no docstring-'
##        #return DOF, pRetVal
##
##    def SetRunCaseFlag(self, Name, Run, All):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSolverOption(self, SolverType, Force32BitSolver, StiffCase):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSolverOption_1(self, SolverType, SolverProcessType, Force32BitSolver, StiffCase):
##        '-no docstring-'
##        #return pRetVal
##
##    def ModifyUndeformedGeometryModeShape(self, CaseName, Mode, MaxDispl, Direction, Original):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetSolverOption_2(self):
##        '-no docstring-'
##        #return SolverType, SolverProcessType, NumberParallelRuns, StiffCase, pRetVal
##
##    def SetSolverOption_2(self, SolverType, SolverProcessType, NumberParallelRuns, StiffCase):
##        '-no docstring-'
##        #return pRetVal
##
##    def MergeAnalysisResults(self, SourceFileName):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetSolverOption_3(self):
##        '-no docstring-'
##        #return SolverType, SolverProcessType, NumberParallelRuns, ResponseFileSizeMaxMB, NumberAnalysisThreads, StiffCase, pRetVal
##
##    def SetSolverOption_3(self, SolverType, SolverProcessType, NumberParallelRuns, ResponseFileSizeMaxMB, NumberAnalysisThreads, StiffCase):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetDesignResponseOption(self):
##        '-no docstring-'
##        #return NumberDesignThreads, NumberResponseRecoveryThreads, UseMemoryMappedFilesForResponseRecovery, ModelDifferencesOKWhenMergingResults, pRetVal
##
##    def SetDesignResponseOption(self, NumberDesignThreads, NumberResponseRecoveryThreads, UseMemoryMappedFilesForResponseRecovery, ModelDifferencesOKWhenMergingResults):
##        '-no docstring-'
##        #return pRetVal
##

cDCoAS_3600_2018._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDCoAS_3600_2018 implementation
##class cDCoAS_3600_2018_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cDStBS5950_2000._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDStBS5950_2000 implementation
##class cDStBS5950_2000_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBDRS_EUROCODE_SteelUCompConstructibility._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_EUROCODE_SteelUCompConstructibility implementation
##class cBDRS_EUROCODE_SteelUCompConstructibility_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cBridgeLayoutLine._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetLayoutLineDataGeneral',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'CoordSys' ),
              ( ['in', 'out'], POINTER(c_double), 'InitStation' ),
              ( ['in', 'out'], POINTER(BSTR), 'InitBearing' ),
              ( ['in', 'out'], POINTER(c_double), 'InitBearingVal' ),
              ( ['in', 'out'], POINTER(c_double), 'InitGrade' ),
              ( ['in', 'out'], POINTER(c_double), 'EndStation' ),
              ( ['in', 'out'], POINTER(c_double), 'X' ),
              ( ['in', 'out'], POINTER(c_double), 'Y' ),
              ( ['in', 'out'], POINTER(c_double), 'Z' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBridgeLayoutLine implementation
##class cBridgeLayoutLine_Impl(object):
##    def GetLayoutLineDataGeneral(self, Name):
##        '-no docstring-'
##        #return CoordSys, InitStation, InitBearing, InitBearingVal, InitGrade, EndStation, X, Y, Z, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##

cBDRS_CSAS606_SICompStrRating._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetCapacityParam',
              ( ['in'], BSTR, 'RequestName' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cBDRS_CSAS606_SICompStrRating implementation
##class cBDRS_CSAS606_SICompStrRating_Impl(object):
##    def GetCapacityParam(self, RequestName, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCapacityParam(self, RequestName, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

__all__ = [ 'cBDRS_AA_L_07_CTBeamServiceRt', 'eFramePropType_Cold_C',
           'eFramePropType_FilledPipe', 'eShellType_ShellThin',
           'eLoadPatternType_VerticalEarthPressure',
           'cBDRS_CANCSAS606_CBoxShrRating', 'cDStChinese_2018',
           'eFramePropType_Circle', 'cDStCanadian_S16_14',
           'e2DFrameType_PortalFrame', 'cBridgeDesignRequest',
           'eHingeLocationType_OffsetFromJEnd', 'cPropSolid',
           'eShellType_Layered',
           'eMatTypeConcrete_Indian_M60_NormalWeight',
           'cDCoACI318_11', 'cBDRS_IRC2011_CBox2Shr',
           'eBridgeCodeInterims_Interim_2011', 'cDCoEurocode_2_2004',
           'eBridgeResponsePart_All_Girders',
           'cBDRS_CANCSAS606_CBoxFlex',
           'eBridgeTendonCategory_TopSpan',
           'eBridgeSegmentType_Rigid', 'eConstraintType_Local',
           'cBDRS_AASHTO_LRFD_2007', 'eTemplateType_Cylinder',
           'eMatType', 'eTemplateType_Frame2D', 'cPointObj',
           'cBDRS_CANCSA_S6_06_SteelUCompServiceRating',
           'cNamedAssign', 'eBridgeObjectBentPart_Wall', 'cLinkElm',
           'eTemplateType_Truss2D', 'cBDRS_AA_L_07_PCCMinBarRt',
           '_StartService', 'cBDRS_EUROCODE_ConcSlabShr',
           'eConstraintAxis_Z', 'cBDRS_JTG_D62_2004',
           'eLinkPropType_DamperFrictionSpring',
           'cBDRS_RussianSNiP_PCCompFlexure', 'cDCoChinese_2010',
           'cBDRS_AA_L_07_CBoxShearRt', 'cDStAPI_RP2A_LRFD97',
           'eBridgeResponseStress_S11_Longitudinal_Top_ULeft_Center',
           'cBDRS_CSAS606_SICompServRating',
           'cBDRS_EUROCODE_CBox2Crack', 'eAreaDesignOrientation_Null',
           'cBDRS_AA_L_07_CBox2Flex',
           'eBridgeResponseDesignRating_Rating_Strength_Shear_Rating',
           'eDesignActionType_ShortTermComposite',
           'eMatType_Aluminum',
           'eMatTypeConcrete_Chinese_C40_NormalWeight',
           'eBridgeResponseDisplLoc_Right_Web',
           'eFramePropType_EncasedRectangle',
           'cBDRS_EUROCODE_ConTBeamStr', 'eConstraintType',
           'cBDRS_AA_S_02_CBoxFlex', 'eSlabType_Slab',
           'eSuperObjectClass', 'eFramePropType_PCCGirderU',
           'cBDRS_CJ_D62_04_CBoxTdnStr', 'eShellType_ShellThick',
           'eLinkPropType_Damper', 'cDCoMexican_RCDF_2004',
           'eBridgeCodeAASHTO_AASHTO_STD_2002',
           'eWallPierRebarLayerType_Vertical_Distributed_EndZoneI_Total',
           'cBD_IRC2011', 'cDCoItalianNTC2008C', 'cPropCable',
           'cBDRS_AA_L_07_CBox2ShearRt', 'cExternalAnalysisResults',
           'cFunction', 'eCNameType',
           'eBridgeResponseDesignRating_S11_Longitudinal_Slab_Top_Beam_Center',
           'eMatTypeSteel_ASTM_A992_Fy50',
           'cBDRS_RussianSNiP_CBoxStress',
           'eTemplateType_SlopedTruss', 'eMatTypeRebar',
           'cBDRS_AA_L_07_SUCompStrRt',
           'eBridgeResponseDesignRating_Design_Crack_Bot_Crack_Width',
           'eBridgeCodeInterims_Interim_2014',
           'eTemplateType_Staircases', 'eConstraintType_Rod',
           'eBridgeResponseDesignRating_Rating_Shear',
           'eMatTypeConcrete',
           'eBridgeResponseDesignRating_Design_Shear_Longit_Rebar_Area_Top_Slab',
           'cGroup', 'eMatTypeAluminum_SubType_6063_T6',
           'eDiaphragmOption_DefinedDiaphragm', 'cNamedSet',
           'cBDRS_AA_L_07_SINCompStrRt', 'cCableObj',
           'eBridgeResponseDesignRating_S11_Longitudinal_Bot_Center',
           'eLoadPatternType_Construction',
           'eBridgeResponseStress_S11_Longitudinal_Top_ULeft_Left',
           'eTemplateType_CableBridges',
           'eBridgeResponseDesignRating_Rating_Flexure_Live_load_Capacity_Factor_F',
           'eUnits_N_cm_C', 'eBridgeTendonCategory_Continuity',
           'eMatTypeAluminum_SubType_6061_T6',
           'eFramePropType_CoreBrace_BRB',
           'cBDRS_IRC2010_SteelUCompConstructibility',
           'eMatTypeConcrete_Indian_M40_NormalWeight',
           'cBDRS_AASHTO_STD_2002',
           'eBridgeCodeAASHTO_AASHTO_LRFD_2014',
           'cCaseDirectHistoryNonlinear', 'cDStCanadian_S16_09',
           'cPropAreaSpring',
           'eBridgeResponseDesignRating_S11_Longitudinal_Top_Center',
           'cBDRS_AA_L_07_CTBeamFlexRt',
           'eLoadPatternType_EarthSurcharge',
           'eMatTypeConcrete_Indian_M45_NormalWeight',
           'eBridgeResponseDesignRating_Design_Strength_DC_Ratio_FlexureShearInteract_Pos',
           'eBridgeCodeAASHTO_AASHTO_LRFD_2012',
           'eLoadCaseType_NonlinearHistory', 'cDCoAASHTO_14',
           'eLoadPatternType_ActiveEarthPressure', 'cDAlAA_LRFD_2000',
           'cBASConcSlab',
           'eBridgeResponseDesignRating_Design_Shear_Required_Extra_Longit_Rebar_Area_Top_Slab',
           'eTemplateType_BridgeWizard', 'cDCoAASHTO_12',
           'cFunctionRS',
           'eBridgeResponseDesignRating_Design_Shear_Controlling_DC_Ratio',
           'cAreaObj',
           'eBridgeResponseDesignRating_S11_Longitudinal_Bot_Envelope',
           'eBridgeResponseForce',
           'cBDRS_EUROCODE_SteelUCompConstructibilityNonStgd',
           'eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Beam_Left',
           'eBridgeResponseDisplLoc_Web',
           'cBDRS_CANCSAS606_PCCompFlexRating',
           'eBridgeResponseDesignRating_Design_Fatigue_DC_Ratio_Web_Shear',
           'eLoadPatternType_Temperature', 'cAreaElm',
           'eAreaDesignOrientation_Floor', 'cDCoBS8110_97',
           'cPropMaterial',
           'eBridgeResponseDesignRating_Design_Shear_Torsion_Plus_Shear_Rebar_Area_PerL',
           'eMatTypeConcrete_Indian_M30_NormalWeight', 'cSolidObj',
           'eBridgeResponseDesignRating_Rating_MinRebar_Min_Of_Abs_1_2Mcr_And_Abs_1_33Mu_For_Neg',
           'eUnits_kN_cm_C', 'eBridgeResponsePart_Web',
           'eLoadPatternType_LockedInForces',
           'eMatTypeConcrete_EN_C60_NormalWeight', 'cDCoACI318_19',
           'eLength_NotApplicable', 'cBDRS_BS5400_SICompCnstNS',
           'cBDRS_IRC2011_ConcSlabShr',
           'eBridgeResponseStress_S11_Longitudinal_Top_ULeft_Envelope',
           'cBASConcSolid', 'eBridgeCodeInterims_Interim_2013',
           'cBDRS_CSAS606_SICompCnstr', 'cDCoTS_500_2000_R2018',
           'eDeckType_Unfilled', 'eUnits_Ton_mm_C',
           'eBridgeObjectUserPointType_General', 'StartService',
           'cBDRS_IRC2010_SteelICompConstructibility',
           'eBridgeResponsePart_All_Webs',
           'eBridgeResponseDesignRating_Design_Tendon_Stress_Controlling_DC_Ratio',
           'eLoadPatternType_Impact', 'cDStAISC360_05_IBC2006',
           'eMatTypeRebar_ASTM_A615Gr60', 'eLoadPatternType_Rooflive',
           'cBASConcBox2Result', 'cBS_SteelGirderU',
           'eBridgeResponseDesignRating_Design_Fatigue_Bot_Flange_Lateral_Bending_Stress_Range',
           'eLength_micron', 'cBDRS_EUROCODE_SteelUCompServiceRebar',
           'cAutoSeismic', 'cBDRS_AA_L_07_SICompServ',
           'eBridgeResponseDesignRating_Design_Strength_DC_Ratio_Negative_Moment',
           'eMatTypeConcrete_FC4000_NormalWeight',
           'eLoadPatternType_EuroLm4', 'cBridgeCrossDiaphragm',
           'cBDRS_EUROCODE_SICmpCnstr',
           'eMatTypeConcrete_EN_C35_NormalWeight', 'eForce_lb',
           'cEditFrame', 'cBDRS_AA_L_07_SUCompConstNS',
           'eLinkPropType_Gap', 'cDStBS5950_2000',
           'eBridgeResponseDesignRating_S11_Longitudinal_Beam_Top_Right',
           'cBDRS_AA_L_07_SUCompServRt',
           'cBDRS_CANCSA_S6_06_SteelUCompStrength',
           'eFrameDesignOrientation_Null',
           'eLinkPropType_DamperLinearExponential',
           'eLoadPatternType_Centrifugal', 'cBDRS_BS5400_PCCompFlex',
           'eShellType_PlateThick_DO_NOT_USE',
           'eItemTypeElm_GroupElm', 'eMatTypeSteel',
           'cBDRS_CANCSAS606_CBox2Shr',
           'eMatTypeConcrete_FC5000_LightWeight',
           'eBridgeResponseDesignRating_S11_Longitudinal_Beam_Bot_Envelope',
           'eLoadPatternType_SnowHighAltitude',
           'eBridgeResponseStress_S11_Longitudinal_Top_URight_Center',
           'cDCoACI318_14', 'cBDRS_BS5400_SICompStr',
           'eBridgeResponseDisplDOF_Longitudinal_Rotation',
           'eBridgeResponseDesignRating_Rating_Strength_Live_load_Capacity_Factor_F_Moment_M3',
           'eLoadPatternType_PatternLive',
           'cBDRS_EUROCODE_SteelUCompConstructibility',
           'eBridgeResponseStress_S11_Longitudinal_Top_Envelope',
           'eUnits_Ton_m_C', 'cBDRS_RussianSNiP_PCCompShear',
           'cModifierArea', 'cBDRS_EUROCODE_ConcSolidFlex',
           'eBridgeResponseDesignRating_S11_Longitudinal_Slab_Top_Left',
           'eMatTypeSteel_ASTM_A913Gr50',
           'eBridgeResponseDesignRating_S11_Longitudinal_Beam_Bot_Left',
           'cBDRS_EUROCODE_SteelUCompService', 'eItemType_Objects',
           'cDCoMexican_RCDF_2017', 'cBDRS_AA_L_07_SICompFatig',
           'cBDRS_CANCSAS606_CBoxStr',
           'eMatTypeConcrete_FC4000_LightWeight',
           'eFramePropType_PCCGirderI',
           'eBridgeResponseStress_S11_Longitudinal_Top_ULeft_Right',
           'cBD_AASHTO_STD_2002', 'cBD_JTG_D62_2004',
           'eTemplateType_VerticalTruss', 'eConstraintType_Equal',
           'cBDRS_EUROCODE_ConcSlabCrack', 'eFramePropType_Joist',
           'eBridgeResponseDesignRating_Design_Shear_Required_Extra_Longit_Rebar_Area_Beam',
           'eUnits_kip_in_F', 'eMatTypeConcrete_EN_C20_NormalWeight',
           'cTendonObj', 'cBDRS_IRC2011_CBoxShr',
           'cBDRS_EUROCODE_CBoxCrack',
           'eBridgeObjectFoundationPart_Pile',
           'cBDRS_EUROCODE_PCCompShr', 'eLinkPropType_Isolator3',
           'cBDRS_AA_L_07_CSlabShear', 'eLoadPatternType_Shrinkage',
           'eFramePropType_ConcretePipe', 'eSlabType_Waffle',
           'eFramePropType_Cold_2L', 'cDStAISC360_16',
           'eFramePropType_SteelPlate',
           'eBridgeResponseDesignRating_Design_Strength_DC_Ratio_FlexureShearInteract_Neg',
           'cBDRS_AA_L_07_PCCFlexRt', 'cBDRS_EUROCODE_ConcSlabStr',
           'eTemplateType_EccentricFrame', 'cDCoNZS_3101_2006',
           'eLoadPatternType_MoveFatigue',
           'cCaseStaticLinearMultistep',
           'eDesignActionType_LongTermComposite',
           'eBridgeResponseStress_S11_Longitudinal_Bot_Right',
           'eBridgeResponseStress_S11_Longitudinal_Top_Bot_Left',
           'eWallPierRebarLayerType_Diagonal_Each',
           'eConstraintType_Weld',
           'eBridgeResponseDesignRating_Design_Fatigue_Top_Flange_Tensile_Stress_Range_Without_FLB',
           'cFrameObj', 'eWallSpandrelRebarLayerType',
           'cBDRS_IRC2011_ConcTBeamFlex',
           'cBDRS_IRC2011_ConcTBeamStr', 'cDAlAA_2015',
           'eObjType_Area', 'cBDRS_AA_L_07_CTBeamMinBarRt',
           'eMatTypeConcrete_FC3000_LightWeight',
           'cBDRS_CANCSAS606_CBoxShr', 'eUnits',
           'eBridgeResponseDesignRating_Rating_MinRebar_Min_Of_Abs_1_2Mcr_And_Abs_1_33Mu_For_Pos',
           'eBridgeResponseStress_S11_Longitudinal_Bot_Left',
           'cDesignConcreteSlab',
           'eBridgeResponseStress_S11_Longitudinal_Top_URight_Envelope',
           'eMatTypeConcrete_EN_C90_NormalWeight',
           'eMatTypeRebar_Indian_HYSD500', 'eForce',
           'eMatTypeSteel_ASTM_A572Gr50', 'eItemTypeElm_SelectionElm',
           'eFramePropType_BuiltupIHybrid', 'cCoordSys',
           'eWallSpandrelRebarLayerType_Horizontal_Distributed_Eachface',
           'eBridgeObjectBentPart_CapBeam',
           'eBridgeResponseDesignRating_Design_Shear_Rebar_Area_PerL',
           'eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Center',
           'eObjType',
           'eBridgeResponseDesignRating_Rating_Strength_Live_load_Capacity_Factor_F_Shear_V2',
           'cDAlAA_ASD_2000', 'cPattern', 'cDConcSlabACI318_19',
           'eFrameDesignOrientation_Other',
           'cCasePowerSpectralDensity', 'eDesignActionType',
           'cBDRS_EUROCODE_ConTBeamCrack', 'eDiaphragmOption',
           'eBridgeResponseDesignRating_Design_Strength_DC_Ratio_Net_Section_Fracture_Neg',
           'eMatTypeConcrete_Chinese_C30_NormalWeight',
           'cDStAustralian_AS4100_98', 'eFramePropType_Cold_L',
           'eMatTypeConcrete_Indian_M55_NormalWeight',
           'cBDRS_AA_L_07_CBox2Shear', 'eLength',
           'eLoadPatternType_SuperDead',
           'eBridgeResponseDesignRating_S11_Longitudinal_Bot_Right_Corner',
           'eObjType_Solid', 'eLoadPatternType_SeaState',
           'eFrameDesignOrientation_Column', 'cDStAPI_RP2A_WSD2000',
           'eLinkPropType_MultilinearPlastic',
           'cBDRS_AA_L_07_CBoxServiceRt', 'eBridgeSegmentType',
           'cBDRS_AA_L_07_CBoxPrin', 'cBDRS_CANCSAS606_CBox2Flex',
           'cPropRebar', 'cDCoACI318_08_IBC2009',
           'cBDRS_AA_L_07_PCCShearRt', 'eFramePropType_FilledTube',
           'eWallSpandrelRebarLayerType_Diagonal_Each',
           'eItemType_SelectedObjects', 'cCaseModalHistoryLinear',
           'cBDRS_IRC2011_CBox2Flex',
           'eBridgeResponseStress_S11_Longitudinal_Bot_Envelope',
           'Helper', 'eFrameDesignOrientation_Brace',
           'eLoadPatternType_Friction', 'eLoadPatternType_EuroLm3',
           'eBridgeResponseDesignRating_Rating_Service_Flexure_Rating',
           'cBDRS_IRC2010_SteelUCompConstructibilityNonStgd',
           'eBridgeResponseDesignRating_Design_Principal_Stress_Web_Top',
           'eLoadCaseType_LinearHistory', 'eLoadPatternType_Permit',
           'cReleaseFrame', 'cBASConcSolidResult',
           'eBridgeResponsePart_Beam', 'cDStAISC360_10',
           'eBridgeResponseStress_S11_Longitudinal_Top_URight_Right',
           'cDCdAISI_LRFD96', 'eUnits_kgf_m_C',
           'eMatTypeConcrete_Indian_M35_NormalWeight',
           'eLoadPatternType_Wave', 'cBridge', 'cBCD_Solid',
           'cLinkObj', 'eBridgeTendonCategory_General',
           'cBDRS_EUROCODE_ConcSolidCrack', 'cBDRS_CAN_CSA_S6_06',
           'eMatTypeSteel_Chinese_Q235',
           'eFramePropType_BucklingRestrainedBrace',
           'eCNameType_LoadCombo',
           'eBridgeResponseDesignRating_S11_Longitudinal_Bot_Left_Corner',
           'cDesignSteel', 'eWallPropType_AutoSelectList',
           'eBridgeResponsePart_Girder', 'eTemplateType_SpaceTruss',
           'cGridSys', 'cGenDispl',
           'cBDRS_CANCSA_S6_06_SteelUCompStrengthRating',
           'eForce_kgf', 'eBridgeResponseDesignRating',
           'eWallPierRebarLayerType_Confinement_EndZoneI',
           'eShellType_PlateThin_DO_NOT_USE',
           'eLinkPropType_Isolator4', 'cCaseBuckling',
           'cBDRS_EUROCODE_SICompUlt', 'cBDRM_AllCodes',
           'eReturnCode_UnspecifiedError',
           'eLoadPatternType_HorizontalEarthPressure',
           'cDStAISC_LRFD93', 'cDCoKCI_1999', 'eConstraintAxis',
           'cBDRS_CJ_D62_04_CBoxFlex', 'eWallPropType_Specified',
           'eBridgeResponseDesignRating_S11_Longitudinal_Girder_Bot_Left',
           'eMatTypeConcrete_Indian_M25_NormalWeight',
           'eMatTypeRebar_ASTM_A706',
           'eWallPierRebarLayerType_Confinement_EndZoneJ',
           'eBridgeResponseDesignRating_Rating_Shear_Factored_Shear_Resistance',
           'eLoadPatternType_Braking', 'cBASConcSlabResult',
           'eForce_kip', 'eTemplateType_Barrel',
           'eMatTypeRebar_Indian_HYSD550', 'eTemperature_F',
           'eMatTypeSteel_ASTM_A36', 'eLoadPatternType_DownDrag',
           'eMatTypeConcrete_EN_C70_NormalWeight',
           'eBridgeResponseDesignRating_Rating_Service',
           'eBridgeResponseDesignRating_S11_Longitudinal_Bot_Left',
           'cDCoIndian_IS_456_2000', 'cBDRS_EUROCODE_CBox2Str',
           'eLoadPatternType_DeadManufacture',
           'eBridgeResponseDesignRating_Design_Principal_Stress_Neutral_Axis',
           'cBD_RussianSNiP',
           'eBridgeResponseDesignRating_Design_Shear_Required_Extra_Longit_Rebar_Area_Slab',
           'cAnalysisResults',
           'eMatTypeConcrete_Indian_M15_NormalWeight',
           'eMatTypeConcrete_Indian_M50_NormalWeight',
           'cBDRS_RussianSNiP_CBoxFlexure',
           'eBridgeResponseDesignRating_S11_Longitudinal_Girder_Bot_Right',
           'cBDRS_CANCSAS606_PCCompShrRating',
           'cBDRS_AA_L_07_CTBeamShearRt', 'eLoadPatternType_Wind',
           'eLoadPatternType_Ice', 'eLoadPatternType_EuroLm1Freq',
           'eConstraintType_Beam', 'eBridgeObjectBentPart',
           'eUnits_lb_in_F', 'eLinkPropType_Isolator2', 'cEditPoint',
           'eBridgeResponseDesignRating_Rating_Flexure_Factored_Moment_Resistance',
           'cBD_BS5400', 'eWallPropType', 'eFramePropType_Box',
           'cBDRS_AA_L_07_CSlabServiceRt', 'eLoadCaseType_MovingLoad',
           'eBridgeResponseDesignRating_Design_Strength_DC_Ratio_Shear',
           'cBDRS_EUROCODE_PCCompStr', 'eWallPierRebarLayerType',
           'eFramePropType_EncasedCircle', 'eCNameType_LoadCase',
           'cLoadPatterns', 'eLoadCaseType_LinearDynamic',
           'cDConcSlabACI318_14', 'cBDRS_IRC2011_ConcSlabStr',
           'eMatType_Concrete',
           'eBridgeResponseDesignRating_Design_Principal_Stress_Envelope',
           'cBDRS_AA_L_07_CTBeamStress', 'cBDRS_AA_L_07_PCCompFlex',
           'eBridgeResponseStress_S11_Longitudinal_Top_Bot_Right',
           'eBridgeObjectUserPointType', 'cEditSolid',
           'eWallSpandrelRebarLayerType_Horizontal_Top_Total',
           'cBDRS_EUROCODE_ConTBeamFlex', 'eDesignActionType_Other',
           'cBDRS_IRC2011_CBoxFlex', 'cBDRS_AA_L_07_SICompConstr',
           'eHingeLocationType', 'eForce_N', 'eLoadPatternType_Live',
           'cBDRS_RussianSNiP_PCCompStress', 'eBridgeResponsePart',
           'eMatType_Rebar', 'eBridgeObjectBentPart_Bearing',
           'cAnalysisResultsSetup', 'cConstraint',
           'eBridgeResponseStress_S11_Lateral_Bending_Top',
           'cBDRS_CSAS606_SICompStrRating',
           'eConstraintType_Diaphragm',
           'eLoadPatternType_WaterloadPressure', 'cDiaphragm',
           'cBASSteelIComp', 'eBridgeResponsePart_Slab',
           'eBridgeResponseDesignRating_Rating_Shear_Factored_Shear_Resistance_UVr',
           'eMatTypeTendon_ASTM_A416Gr270', 'eTemplateType_Beam',
           'eBridgeResponseDesignRating_Design_Shear_Required_Extra_Longit_Rebar_Area_For_Torsion',
           'eBridgeResponseDesignRating_S11_Longitudinal_Beam_Top_Left',
           'cCaseHyperStatic', 'eMatTypeConcrete_EN_C12_NormalWeight',
           'cCaseModalHistoryNonlinear',
           'eLoadPatternType_VesselCollision', 'eTemplateType_Floor',
           'cBDRS_AA_L_07_CBox2MinBarRt',
           'cBDRS_AA_L_07_PCCServiceRt',
           'eLoadPatternType_VehicleCollision',
           'eLoadCaseType_PowerSpectralDensity',
           'eBridgeResponseDesignRating_S11_Longitudinal_Bot_Right',
           'eBridgeResponseDesignRating_Rating_Flexure_Factored_Moment_Resistance_UMr',
           'eFramePropType_Cold_Hat',
           'eBridgeResponseStress_S11_Lateral_Bending_Bot',
           'cPropLineSpring', 'eMatTypeConcrete_EN_C25_NormalWeight',
           'eFramePropType_BuiltupUHybrid', 'eConstraintType_Plate',
           'cSpandrelLabel', 'cTower', 'cBASPrecastCompResult',
           'cBDRS_RussianSNiP_CBox2Shear', 'cPropPointSpring',
           'eTemplateType_Advanced', 'cDStSP16_13330_2011',
           'eBridgeResponseDisplLoc_Slab_Center',
           'cBDRS_BS5400_SICompCnstr', 'cBDRS_EUROCODE_ConTBeamShr',
           'eFramePropType_BuiltupICoverplate',
           'eBridgeResponseForce_Shear_Horizontal_V3',
           'eBridgeResponseDisplDOF_Avg_Longitudinal_Rotation',
           'cBDRS_AA_S_02_CBoxStress', 'cCaseStaticNonlinearStaged',
           'cFunctionTH', 'eMatCoupledType',
           'eMatTypeSteel_ASTM_A500GrB_Fy42', 'eFramePropType',
           'eBridgeResponseDesignRating_S11_Longitudinal_Girder_Bot_Envelope',
           'cBDRS_AA_L_07_CSlabFlex', 'eUnits_kgf_cm_C',
           'cBDRS_CANCSAS606_PCCompStr',
           'eBridgeResponseDesignRating_S11_Longitudinal_Top_Left',
           'eLoadPatternType', 'eBridgeSegmentConstructionMethod',
           'eMatTypeConcrete_EN_C80_NormalWeight',
           'cBDRS_AA_L_07_CSlabStress',
           'eBridgeResponseDesignRating_Design_Shear_Longit_Rebar_Area',
           'eObjType_Point',
           'eBridgeResponseDesignRating_Rating_MinRebar_Flexure_Rating',
           'eMatTypeConcrete_EN_C16_NormalWeight',
           'eBridgeResponseForce_Torsion_T', 'cBDRS_IRC2011',
           'eTemperature_C', 'cBDRS_IRC2011_PCCompShr',
           'cBDRS_CANCSA_S6_06_SteelUCompConstructibilityNonStgd',
           'cBDRS_IRC2010_SteelICompStrength',
           'eMatTypeSteel_EN100252_S450', 'eDeckType',
           'cBDRS_AA_L_07_PCCompStress', 'eUnits_kN_m_C',
           'cBDRS_AA_L_07_CTBeamShear', 'eLength_inch',
           'eTemperature', 'eMatTypeRebar_Chinese_HRB400',
           'cBDRS_IRC2010_SteelICompRebar', 'eFramePropType_Pipe',
           'cBDRS_AA_L_07_CBox2FlexRt',
           'eBridgeResponsePart_All_Slabs',
           'eAreaDesignOrientation_Ramp_DO_NOT_USE',
           'eBridgeTendonCategory_BottomSpan',
           'eFramePropType_Cold_2C', 'eSlabType_Ribbed',
           'eBridgeResponseStress', 'eBridgeCodeInterims_NoInterims',
           'cDStAISC_ASD89', 'eMatTypeAluminum_SubType_5052_H34',
           'eMatTypeSteel_ASTM_A53GrB', 'cBDRS_AA_L_07_CBoxShear',
           'eMatTypeColdFormed_ASTM_A653SQGr33',
           'eBridgeResponseDesignRating_Design_Shear_Longit_Torsional_Rebar_Area_PerL',
           'eBridgeObjectFoundationPart_Footing',
           'eMatTypeSteel_EN100252_S235',
           'eMatTypeRebar_ASTM_A615Gr40',
           'eBridgeResponsePart_Entire_Section_Plus_All_Girders',
           'eBridgeResponseDisplDOF_Vertical_Displacement',
           'cPropMaterialTD', 'cPierLabel', 'eBridgeCodeInterims',
           'eBridgeObjectFoundationPart', 'cLoadCases',
           'eAreaDesignOrientation_Other',
           'cBDRS_CANCSAS606_CBox2FlexRating', 'cBASConcTBeam',
           'cBridgeDesignRequestSuper', 'cBDRS_CANCSAS606_PCCompFlex',
           'eBridgeResponseForce_Axial_Force_P',
           'eFramePropType_Variable',
           'eBridgeResponseDesignRating_Design_Shear_Longit_Rebar_Area_Slab',
           'cAutoWindBridge', 'cBDRS_AA_L_07_SICompServRt',
           'eFramePropType_ConcreteCross',
           'eBridgeObjectFoundationPart_PileCap',
           'eFramePropType_SteelRod',
           'eBridgeResponseDesignRating_Rating_Flexure',
           'cMassSource', 'eFramePropType_T', 'eUnits_N_mm_C',
           'cBDRS_EUROCODE_PCCompCrack', 'eItemType',
           'eBridgeResponseForce_Shear_Vertical_V2',
           'eBridgeSegmentType_Segment', 'cBASSteelUComp',
           'eLoadPatternType_Notional', 'cDStEurocode_3_2005',
           'cDCdAISI_16', 'eMatTypeConcrete_Chinese_C20_NormalWeight',
           'cLineElm', 'eLinkPropType_MultilinearElastic',
           'eLoadCaseType_LinearStatic', 'cBASConcTBeamResult',
           'eBridgeResponseDisplLoc_Web_Bottom',
           'cDCoHong_Kong_CP_2013', 'eLoadCaseType_NonlinearStatic',
           'eBridgeTendonCategory', 'eLinkPropType_Hook',
           'eLoadPatternType_ReduceLive', 'cBridgeTendon',
           'eBridgeSegmentConstructionMethod_CastInPlace',
           'cBDRS_RussianSNiP_CBox2Stress',
           'eBridgeObjectFoundationPart_FoundationSpring',
           'eDeckType_Filled', 'cDStNorsok_N0042013',
           'eBridgeResponseStress_S11_Longitudinal_Top_Center',
           'eFramePropType_Channel', 'eLoadPatternType_StreamFlow',
           'cBDRS_IRC2010_SteelICompConstructibilityNonStgd',
           'cBridgeSection',
           'eBridgeResponseDesignRating_Design_Shear_Longit_Rebar_Area_Bot_Flange',
           'eTemplateType_Shells', 'cBDRS_CJ_D62_04_CBoxCrkWth',
           'eBridgeResponseDesignRating_S11_Longitudinal_Beam_Bot_Center',
           'eDiaphragmOption_FromShellObject',
           'cBDRS_IRC2010_SteelICompService',
           'eBridgeResponsePart_All_Beams', 'cBDRS_RussianSNiP',
           'cBridgeLayoutLine', 'eUnits_kip_ft_F',
           'cBDRS_CANCSAS606_CBox2ShrRating', 'cOAPI',
           'cBDRS_CSAS606_SICompStr', 'cNamedDisplay',
           'eLoadCaseType_NonlinearStaticMultiStep',
           'eBridgeObjectBentPart_Column', 'cCombo',
           'eBridgeResponseDesignRating_Design_Shear_Controlling_Torsion_DC_Ratio',
           'cBDRS_CANCSAS606_CBox2Str', 'cBDRS_BS5400_PCCompShr',
           'eForce_kN',
           'eBridgeResponseStress_S11_Longitudinal_Top_URight_Left',
           'eTemplateType_StorageStructures', 'cBASConcBox',
           'e3DFrameType_OpenFrame', 'cFile',
           'eMatTypeRebar_ASTM_A615Gr75', 'cDStASCE_10_97',
           'cPropTendon', 'eBridgeResponseDisplDOF', 'eItemTypeElm',
           'eUnits_N_m_C', 'cFunctionSS', 'cFunctionPSD',
           'eMatTypeSteel_ASTM_A500GrB_Fy46',
           'eBridgeSegmentConstructionMethod_Precast',
           'eMatTypeConcrete_FC5000_NormalWeight', 'cDCoAASHTO_07',
           'cBDRS_CANCSAS606_CBoxFlexRating', 'eReturnCode',
           'eBridgeResponseDisplLoc_Right_Web_Bottom',
           'eBridgeResponseStress_S11_Longitudinal_Top_Right',
           'eMatTypeConcrete_EN_C40_NormalWeight',
           'eLoadPatternType_LiveLoadSurcharge',
           'eBridgeResponseDisplDOF_Longitudinal_Displacement',
           'eLength_mm', 'cBDRS_AA_L_07_SICompStrRt',
           'eBridgeResponseDisplLoc', 'eLength_m',
           'e2DFrameType_EccentricBraced', 'cCaseSteadyState',
           'cOptions', 'eBridgeCodeInterims_Interim_2015',
           'cBDRS_AA_L_07_SUCompConstr', 'cDCoChinese_2002',
           'eForce_tonf',
           'eMatCoupledType_ModifiedDarwinPecknoldConcrete',
           'cCaseStaticLinear',
           'eBridgeResponseDisplDOF_Transverse_Displacement',
           'eLoadPatternType_DeadWater', 'cDCoAS_3600_09',
           'eBridgeResponseDesignRating_Design_Shear_Longit_Rebar_Area_Beam',
           'cAnalyze', 'cBridgeDesignRequestMember',
           'eLoadPatternType_Move', 'cDesignCompositeBeam',
           'eConstraintAxis_Y', 'cCaseMovingLoad',
           'eLoadPatternType_Snow',
           'eLoadPatternType_EarthHydrostatic', 'cBridgeConcretePour',
           'eBridgeResponseDesignRating_Rating_Strength_Flexure_Rating',
           'eBridgeResponseDesignRating_Design_Shear_Required_Extra_Longit_Rebar_Area',
           'cBDRS_EUROCODE_CBox2Flex',
           'eBridgeResponseDesignRating_S11_Longitudinal_Slab_Top_Right',
           'eLoadPatternType_TemperatureGradient', 'eSlabType_Drop',
           'eMatTypeSteel_EN100252_S355',
           'eBridgeCodeInterims_Interim_2012',
           'cBDRS_CJ_D62_04_CBoxShear',
           'eSuperObjectClass_SuperObject',
           'cBDRS_CANCSA_S6_06_SteelUCompService', 'eFramePropType_I',
           'eLoadPatternType_Hyperstatic', 'e3DFrameType',
           'eBridgeResponseDesignRating_Design_Crack_Top_Bot_Crack_Widths',
           'eTemplateType_PortalFrame', 'cScheduler',
           'eBridgeResponseStress_S11_Longitudinal_Bot_Beam_Left',
           'eMatType_Steel', 'eLoadCaseType_ExternalResults',
           'eMatTypeConcrete_EN_C50_NormalWeight',
           'eDesignActionType_Staged', 'cBDRS_AA_L_07_PCCompShear',
           'eLoadPatternType_PedestrianLL',
           'eLoadPatternType_EuroLm1Char',
           'cBDRS_CJ_D62_04_CBoxCrkPrin', 'cBDRS_AA_L_07_CTBeamFlex',
           'eFramePropType_Cold_Z', 'cSelect', 'cDCoAS_3600_2018',
           'cBDRS_IRC2011_CBoxStr',
           'eBridgeResponseDesignRating_Design_Shear_Required_Extra_Longit_Rebar_Area_Bot_Slab',
           'eMatTypeTendon', 'cBDRS_IRC2010_SteelUCompRebar',
           'eTemplateType_Truss3D', 'cBDRS_CSAS606_SICompCnstNS',
           'cBDRS_AA_L_07_CBoxTendon', 'cBDRS_AA_L_07_SUCompServ',
           'cBDRS_IRC2011_PCCompStr',
           'eBridgeResponseDesignRating_S11_Longitudinal_Top_Right',
           'eSuperObjectClass_BridgeFoundation',
           'eTemplateType_SpaceFrame', 'cPropFrameSDShape',
           'eBridgeResponseDesignRating_Design_Shear_Required_Extra_Shear_Rebar_Area_PerL',
           'eMatTypeRebar_Indian_Mild250',
           'cBDRS_CJ_D62_04_CBoxStress',
           'eMatTypeConcrete_Indian_M20_NormalWeight',
           'eMatTypeConcrete_FC6000_LightWeight',
           'eTemplateType_PipesAndPlates',
           'e3DFrameType_PerimeterFrame', 'cBDRS_EUROCODE_PCCompFlex',
           'cDStAPI_RP2A_WSD2014', 'eLoadPatternType_Quake',
           'cBDRS_EUROCODE_SICmpCnstNS', 'eFramePropType_Angle',
           'cBDRS_EUROCODE_CBoxFlex', 'eBridgeObjectType_General',
           'eBridgeResponseForce_Moment_About_Horizontal_Axis_M3',
           'eLoadPatternType_Prestress',
           'eLoadCaseType_StagedConstruction', 'eMatCoupledType_None',
           'cDetailing', 'eMatType_ColdFormed',
           'eBridgeResponseStress_S11_Longitudinal_Top_Beam_Center',
           'cBridgeAdvancedSuper', 'eDiaphragmOption_Disconnect',
           'cBDRS_BS5400', 'cSapModel', 'cBDRS_CSAS606_SICompServ',
           'eLinkPropType_Isolator1', 'eLoadPatternType_Dead',
           'eMatTypeTendon_ASTM_A416Gr250', 'cDesignAluminum',
           'eBridgeTendonCategory_Cantilever',
           'cBridgeDesignCallBack',
           'eMatTypeConcrete_EN_C30_NormalWeight',
           'eTemplateType_SolidModels', 'cDStChinese_2002',
           'cCaseModalEigen', 'eFramePropType_ConcreteBox',
           'eBridgeSegmentType_PierTable', 'eFramePropType_Bridge',
           'cDesignStrip', 'eFramePropType_General',
           'eMatTypeSteel_Indian_Fe345', 'cHelper', 'cSolidElm',
           'eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Beam_Right',
           'eMatTypeAluminum', 'cBCD_Beam',
           'eBridgeResponseDesignRating_Design_Strength_Total_Nominal_Shear_Force_6_10_10_4_2',
           'eSuperObjectClass_Foundation', 'eMatType_NoDesign',
           'cBDRS_AA_L_07_CBoxMinBarRt',
           'eBridgeResponseDesignRating_Design_Flexure_Moment_About_Horizontal_Axis_M3',
           'eBridgeResponseDesignRating_Design_Crack_Top_Crack_Width',
           'eItemTypeElm_ObjectElm', 'cBDRS_EUROCODE',
           'cBD_CAN_CSA_S6_06', 'cBDRS_AA_L_07_SICompConstNS',
           'cBS_SteelGirderI', 'cBDRS_BS5400_PCCompStr',
           'eConstraintType_Body',
           'eHingeLocationType_OffsetFromIEnd',
           'eLoadPatternType_MoveFatiguePermit',
           'cBDRS_BS5400_SICompServ', 'eFramePropType_Concrete_L',
           'eReturnCode_NoError', 'cBDRS_AA_S_02_CBoxPrin',
           'eBridgeObjectUserPointType_SegmentalTendon',
           'cBDRS_EUROCODE_SteelUCompUltimate',
           'cCaseDirectHistoryLinear', 'eReturnCode_NotImplemented',
           'eTemplateType', 'cBDRS_AA_L_07_SICompStr',
           'eTemplateType_UndergoundConcrete', 'eUnits_kgf_mm_C',
           'eBridgeResponsePart_Entire_Bridge_Section',
           'eBridgeSegmentType_Closure', 'eSlabType_Mat',
           'cBDRS_EUROCODE_ConcSolidShr', 'eTemplateType_Bridge',
           'eWallPierRebarLayerType_Vertical_Distributed_EndZoneJ_Total',
           'cPropArea', 'eMatTypeConcrete_EN_C55_NormalWeight',
           'eMatTypeRebar_Indian_HYSD415',
           'eMatTypeConcrete_FC6000_NormalWeight',
           'eBridgeObjectType', 'cBDRS_CJ_D62_04_CBoxCrkStr',
           'eForce_NotApplicable', 'eLoadCaseType_ResponseSpectrum',
           'eBridgeResponseStress_S11_Longitudinal_Top_Bot_Center',
           'cPropLink', 'eLength_ft', 'cBASSteelICompResult',
           'eLoadCaseType_Modal', 'cBDRS_AA_L_07_SINCompServRt',
           'eBridgeObjectType_Segmental',
           'eLoadPatternType_DeadWearing',
           'eBridgeResponseDesignRating_S11_Longitudinal_Beam_Top_Center',
           'eTemplateType_BracedFrame',
           'eMatTypeColdFormed_ASTM_A653SQGr50', 'cBCD_Brace',
           'eBridgeResponseDisplLoc_Right_Web_Top',
           'eBridgeResponseDesignRating_Rating_Shear_Live_load_Capacity_Factor_F',
           'eTemplateType_Grid', 'cCaseStaticNonlinear',
           'eFramePropType_Auto', 'cBDRS_IRC2011_ConcTBeamShr',
           'cBDRS_RussianSNiP_CBoxShear', 'cDCoCSA_A23_3_04',
           'cDCoTS_500_2000', 'eLoadPatternType_MoveDeflection',
           'eMatCoupledType_VonMisesPlasticity',
           'cBDRS_CJ_D62_04_CBoxPrin', 'cCaseResponseSpectrum',
           'cGenRefLine', 'cBDRS_EUROCODE_ConcSolidStr',
           'eBridgeCodeAASHTO', 'cBDRS_AA_L_07_CBox2Stress',
           'eBridgeCodeAASHTO_AASHTO_LRFD_2017',
           'eBridgeResponseStress_S11_Lateral_Bending_Top_ULeft',
           'cBDRS_EUROCODE_SICompServ', 'eLoadCaseType_SteadyState',
           'eBridgeResponseDisplLoc_Web_Top', 'eObjType_Frame',
           'cBDRS_CANCSAS606_PCCompShr',
           'eWallPierRebarLayerType_Horizontal_Distributed_MiddleZone_Eachface',
           'cBDRS_AA_L_07_CBoxFlexRt',
           'eBridgeResponseDesignRating_Design_Shear_Controlling_Shear_DC_Ratio',
           'eBridgeResponseDesignRating_Design_Principal_Stress_Beam_Web_Bot',
           'eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Beam_Center',
           'cBASPrecastComp', 'cBDRS_EUROCODE_CBox2Shr',
           'eLoadPatternType_WindOnLiveLoad',
           'eBridgeResponseDesignRating_S11_Longitudinal_Slab_Top_Envelope',
           'eMatType_Masonry', 'cStory', 'cPlaneElm',
           'eMatTypeConcrete_FC3000_NormalWeight',
           'eLoadCaseType_Buckling', 'cDStChinese_2010',
           'cAutoSeastate', 'eUnits_kN_mm_C',
           'cBDRS_AA_L_07_SUCompStr', 'cBD_EUROCODE',
           'eConstraintType_Line', 'eMatTypeSteel_EN100252_S275',
           'eShellType', 'e3DFrameType_FlatPlate', 'eLength_cm',
           'eBridgeResponseDesignRating_S11_Longitudinal_Top_Envelope',
           'cBridgeModeler',
           'eWallSpandrelRebarLayerType_Horizontal_Bottom_Total',
           'cCaseStaticNonlinearMultistep',
           'eBridgeResponseDesignRating_Design_Fatigue_Bot_Flange_Tensile_Stress_Range_Without_FLB',
           'eLoadPatternType_PassiveEarthPressure',
           'cDesignColdFormed', 'eMatTypeSteel_Chinese_Q355',
           'cBDRS_EUROCODE_SICompSrvRb',
           'eBridgeResponseForce_Moment_About_Vertical_Axis_M2',
           'cBDRS_IRC2011_CBox2Str', 'eShellType_Membrane',
           'eMatTypeRebar_Chinese_HRB335', 'cPointElm',
           'eBridgeResponseStress_S11_Longitudinal_Top_Left',
           'eItemTypeElm_Element', 'eLoadCaseType_NonlinearDynamic',
           'cPluginCallback', 'cBDRS_AA_L_07_CBox2ServiceRt',
           'eBridgeResponseStress_S11_Longitudinal_Bot_Center',
           'eTemplateType_PerimeterFrame',
           'eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Envelope',
           'cBD_AASHTO_LRFD_2007', 'cDCdAISI_ASD96',
           'eMatTypeSteel_Indian_Fe250', 'cBridgeDesign',
           'eBridgeResponseDesignRating_Design_Strength_DC_Ratio_Net_Section_Fracture_Pos',
           'eBridgeResponseDesignRating_Design_Shear_Demand_Concrete_Shear_Capacity_Ratio',
           'eLinkPropType_DamperBilinear', 'cBridgeGroup',
           'cDStIndian_IS_800_2007', 'eLoadPatternType_EuroLm2',
           'cModifierFrame', 'cBDRS_EUROCODE_ConcSlabFlex',
           'eLinkPropType_PlasticWen',
           'eBridgeResponseDisplLoc_Left_Web_Bottom', 'cEditGeneral',
           'e2DFrameType_ConcentricBraced',
           'eReturnCode_NotApplicable', 'eAreaDesignOrientation',
           'eTemperature_NotApplicable',
           'eBridgeCodeAASHTO_AASHTO_LRFD_2007',
           'cCaseExternalResults', 'e3DFrameType_BeamSlab',
           'eMatTypeRebar_Chinese_HPB235',
           'eLoadCaseType_LinearStaticMultiStep',
           'eFrameDesignOrientation', 'cBDRS_AA_L_07_PCCompPrincipal',
           'eLoadPatternType_Creep',
           'eMatTypeConcrete_EN_C45_NormalWeight', 'cCaseModalRitz',
           'eUnits_lb_ft_F', 'cDStSP16_13330_2017', 'eSlabType',
           'cBDRS_AA_L_07_CBoxFlex', 'eSlabType_Stiff_DO_NOT_USE',
           'eLinkPropType_Linear',
           'eBridgeResponseDesignRating_S11_Longitudinal_Beam_Bot_Right',
           'eConstraintAxis_AutoAxis', 'cSchedulerCallBack',
           'cAutoWind',
           'eBridgeResponseStress_S11_Longitudinal_Bot_Beam_Right',
           'cBASSteelUCompResult', 'cBDRS_EUROCODE_CBoxShr',
           'eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Left',
           'cBASConcBox2', 'eFrameDesignOrientation_Beam',
           'eTemplateType_Dome',
           'eLoadPatternType_PedestrianLLReduced',
           'eLoadPatternType_Settlement', 'cDCoSingapore_CP_65_99',
           'eAreaDesignOrientation_Wall', 'cDStItalianNTC2018S',
           'cBDRS_EUROCODE_CBoxStr', 'cDesignShearWall',
           'eBridgeResponseDesignRating_Design_Strength_DC_Ratio_Positive_Moment',
           'cDesignConcrete', 'e2DFrameType',
           'eFramePropType_ConcreteTee',
           'cBDRS_IRC2010_SteelUCompStrength', 'cDStItalianNTC2008S',
           'eLoadCaseType', 'eFramePropType_Rectangular',
           'eBridgeResponseDesignRating_S11_Longitudinal_Beam_Top_Envelope',
           'eMatType_Tendon',
           'eWallSpandrelRebarLayerType_Vertical_Ties_Distributed',
           'cBDRS_CANCSA_S6_06_SteelUCompConstructibility',
           'eDeckType_SolidSlab', 'cDatabaseTables',
           'eLoadCaseType_HyperStatic', 'eItemType_Group',
           'eBridgeResponseStress_S11_Lateral_Bending_Top_URight',
           'eTemplateType_Frame3D', 'cView',
           'eFramePropType_DbChannel', 'cEditArea',
           'eConstraintAxis_X',
           'eBridgeResponseDesignRating_Design_Principal_Stress_Beam_Web_Top',
           'eLoadPatternType_Other',
           'cBDRS_IRC2010_SteelUCompService',
           'eBridgeResponseDesignRating_Design_Shear_Longit_Rebar_Area_Bot_Slab',
           'cDesignResults', 'cBDRS_IRC2011_ConcSlabFlex',
           'cBDRS_RussianSNiP_CBox2Flexure',
           'eBridgeResponseDisplLoc_Left_Web',
           'eTemplateType_ShearWall', 'cBDRS_AA_S_02_CBoxShear',
           'cDStNewZealand_NZS3404_97',
           'eWallPierRebarLayerType_Vertical_Distributed_MiddleZone_Eachface',
           'eSuperObjectClass_None', 'eUnits_Ton_cm_C',
           'eLinkPropType', 'eLoadPatternType_Bouyancy',
           'cBDRS_IRC2011_PCCompFlex', 'cDCoSP63133302011',
           'cDesignForces', 'eDesignActionType_NonComposite',
           'eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Right',
           'eTemplateType_Clear',
           'eBridgeResponseDesignRating_Design_Principal_Stress_Web_Bot',
           'eMatTypeColdFormed', 'cModifierCable',
           'eBridgeResponseDesignRating_Design_Shear_Torsion_Rebar_Area_PerL',
           'eFramePropType_SD',
           'eBridgeResponseDesignRating_S11_Longitudinal_Slab_Top_Center',
           'eBridgeResponseDisplLoc_Left_Web_Top',
           'eSlabType_Footing', 'cSectionCut',
           'cBDRS_AA_L_07_CBoxStress', 'cPropFrame',
           'eFramePropType_DblAngle',
           'eHingeLocationType_RelativeDistance']
from comtypes import _check_version; _check_version('', 1618633621.605817)
