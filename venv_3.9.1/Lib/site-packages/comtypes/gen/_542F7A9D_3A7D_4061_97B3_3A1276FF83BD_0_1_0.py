# -*- coding: mbcs -*-
typelib_path = 'C:\\Program Files\\Computers and Structures\\ETABS 19\\ETABSv1.tlb'
_lcid = 0 # change this if required
from ctypes import *
import comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0
from comtypes import GUID
from comtypes import BSTR
from ctypes.wintypes import VARIANT_BOOL
from ctypes import HRESULT
from comtypes import helpstring
from comtypes import COMMETHOD
from comtypes import dispid
from comtypes.automation import _midlSAFEARRAY
from comtypes import CoClass
import comtypes.gen._BED7F4EA_1A96_11D2_8F08_00A0C9A6186D_0_2_4



# values for enumeration 'eLength'
eLength_NotApplicable = 0
eLength_inch = 1
eLength_ft = 2
eLength_micron = 3
eLength_mm = 4
eLength_cm = 5
eLength_m = 6
eLength = c_int # enum
class cDStSP16_13330_2011(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{B41E2718-ABB7-465F-97C8-952B2C44202B}')
    _idlflags_ = ['dual', 'oleautomation']

# values for enumeration 'eItemType'
eItemType_Objects = 0
eItemType_Group = 1
eItemType_SelectedObjects = 2
eItemType = c_int # enum
cDStSP16_13330_2011._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDStSP16_13330_2011 implementation
##class cDStSP16_13330_2011_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##


# values for enumeration 'eForce'
eForce_NotApplicable = 0
eForce_lb = 1
eForce_kip = 2
eForce_N = 3
eForce_kN = 4
eForce_kgf = 5
eForce_tonf = 6
eForce = c_int # enum

# values for enumeration 'eSlabType'
eSlabType_Slab = 0
eSlabType_Drop = 1
eSlabType_Stiff_DO_NOT_USE = 2
eSlabType_Ribbed = 3
eSlabType_Waffle = 4
eSlabType_Mat = 5
eSlabType_Footing = 6
eSlabType = c_int # enum
class cDCoBS8110_97(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{6E93DE30-10B6-45A8-8B82-129688D8F80E}')
    _idlflags_ = ['dual', 'oleautomation']
cDCoBS8110_97._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDCoBS8110_97 implementation
##class cDCoBS8110_97_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cDCoACI318_19(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{CD4542C2-D246-469A-8514-1AC4C1811911}')
    _idlflags_ = ['dual', 'oleautomation']
cDCoACI318_19._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDCoACI318_19 implementation
##class cDCoACI318_19_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cLoadPatterns(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{0FA969B9-7001-4341-9213-151778D79221}')
    _idlflags_ = ['dual', 'oleautomation']

# values for enumeration 'eLoadPatternType'
eLoadPatternType_Dead = 1
eLoadPatternType_SuperDead = 2
eLoadPatternType_Live = 3
eLoadPatternType_ReduceLive = 4
eLoadPatternType_Quake = 5
eLoadPatternType_Wind = 6
eLoadPatternType_Snow = 7
eLoadPatternType_Other = 8
eLoadPatternType_Move = 9
eLoadPatternType_Temperature = 10
eLoadPatternType_Rooflive = 11
eLoadPatternType_Notional = 12
eLoadPatternType_PatternLive = 13
eLoadPatternType_Wave = 14
eLoadPatternType_Braking = 15
eLoadPatternType_Centrifugal = 16
eLoadPatternType_Friction = 17
eLoadPatternType_Ice = 18
eLoadPatternType_WindOnLiveLoad = 19
eLoadPatternType_HorizontalEarthPressure = 20
eLoadPatternType_VerticalEarthPressure = 21
eLoadPatternType_EarthSurcharge = 22
eLoadPatternType_DownDrag = 23
eLoadPatternType_VehicleCollision = 24
eLoadPatternType_VesselCollision = 25
eLoadPatternType_TemperatureGradient = 26
eLoadPatternType_Settlement = 27
eLoadPatternType_Shrinkage = 28
eLoadPatternType_Creep = 29
eLoadPatternType_WaterloadPressure = 30
eLoadPatternType_LiveLoadSurcharge = 31
eLoadPatternType_LockedInForces = 32
eLoadPatternType_PedestrianLL = 33
eLoadPatternType_Prestress = 34
eLoadPatternType_Hyperstatic = 35
eLoadPatternType_Bouyancy = 36
eLoadPatternType_StreamFlow = 37
eLoadPatternType_Impact = 38
eLoadPatternType_Construction = 39
eLoadPatternType_DeadWearing = 40
eLoadPatternType_DeadWater = 41
eLoadPatternType_DeadManufacture = 42
eLoadPatternType_EarthHydrostatic = 43
eLoadPatternType_PassiveEarthPressure = 44
eLoadPatternType_ActiveEarthPressure = 45
eLoadPatternType_PedestrianLLReduced = 46
eLoadPatternType_SnowHighAltitude = 47
eLoadPatternType_EuroLm1Char = 48
eLoadPatternType_EuroLm1Freq = 49
eLoadPatternType_EuroLm2 = 50
eLoadPatternType_EuroLm3 = 51
eLoadPatternType_EuroLm4 = 52
eLoadPatternType = c_int # enum
class cAutoSeismic(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{362839C9-6EE2-45D5-8088-E5FF3888CCA6}')
    _idlflags_ = ['dual', 'oleautomation']
class cAutoWind(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{EC6BB373-D00E-4C90-B13C-4C16EF7DBB90}')
    _idlflags_ = ['dual', 'oleautomation']
cLoadPatterns._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'Add',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eLoadPatternType, 'MyType' ),
              ( ['in', 'optional'], c_double, 'SelfWTMultiplier', 0.0 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'AddAnalysisCase', True ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'AutoSeismic',
              ( ['out', 'retval'], POINTER(POINTER(cAutoSeismic)), 'pRetVal' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'AutoWind',
              ( ['out', 'retval'], POINTER(POINTER(cAutoWind)), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetAutoSeismicCode',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'CodeName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetAutoWindCode',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'CodeName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetLoadType',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(eLoadPatternType), 'MyType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetSelfWTMultiplier',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'SelfWTMultiplier' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'SetLoadType',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eLoadPatternType, 'MyType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'SetSelfWTMultiplier',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'SelfWTMultiplier' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cLoadPatterns implementation
##class cLoadPatterns_Impl(object):
##    def Add(self, Name, MyType, SelfWTMultiplier, AddAnalysisCase):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def AutoSeismic(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def AutoWind(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetAutoSeismicCode(self, Name):
##        '-no docstring-'
##        #return CodeName, pRetVal
##
##    def GetAutoWindCode(self, Name):
##        '-no docstring-'
##        #return CodeName, pRetVal
##
##    def GetLoadType(self, Name):
##        '-no docstring-'
##        #return MyType, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetSelfWTMultiplier(self, Name):
##        '-no docstring-'
##        #return SelfWTMultiplier, pRetVal
##
##    def SetLoadType(self, Name, MyType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSelfWTMultiplier(self, Name, SelfWTMultiplier):
##        '-no docstring-'
##        #return pRetVal
##

class cDCoHong_Kong_CP_2013(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{64D41225-489D-42FF-A1F3-6FBDFEF9D6FE}')
    _idlflags_ = ['dual', 'oleautomation']
cDCoHong_Kong_CP_2013._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDCoHong_Kong_CP_2013 implementation
##class cDCoHong_Kong_CP_2013_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cDCoAS_3600_2018(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{C5E654CE-23B1-465B-9AEB-58D574DF4225}')
    _idlflags_ = ['dual', 'oleautomation']
cDCoAS_3600_2018._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDCoAS_3600_2018 implementation
##class cDCoAS_3600_2018_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##


# values for enumeration 'eMatTypeConcrete'
eMatTypeConcrete_FC3000_NormalWeight = 1
eMatTypeConcrete_FC4000_NormalWeight = 2
eMatTypeConcrete_FC5000_NormalWeight = 3
eMatTypeConcrete_FC6000_NormalWeight = 4
eMatTypeConcrete_FC3000_LightWeight = 5
eMatTypeConcrete_FC4000_LightWeight = 6
eMatTypeConcrete_FC5000_LightWeight = 7
eMatTypeConcrete_FC6000_LightWeight = 8
eMatTypeConcrete_Chinese_C20_NormalWeight = 9
eMatTypeConcrete_Chinese_C30_NormalWeight = 10
eMatTypeConcrete_Chinese_C40_NormalWeight = 11
eMatTypeConcrete_Indian_M15_NormalWeight = 12
eMatTypeConcrete_Indian_M20_NormalWeight = 13
eMatTypeConcrete_Indian_M25_NormalWeight = 14
eMatTypeConcrete_Indian_M30_NormalWeight = 15
eMatTypeConcrete_Indian_M35_NormalWeight = 16
eMatTypeConcrete_Indian_M40_NormalWeight = 17
eMatTypeConcrete_Indian_M45_NormalWeight = 18
eMatTypeConcrete_Indian_M50_NormalWeight = 19
eMatTypeConcrete_Indian_M55_NormalWeight = 20
eMatTypeConcrete_Indian_M60_NormalWeight = 21
eMatTypeConcrete_EN_C12_NormalWeight = 22
eMatTypeConcrete_EN_C16_NormalWeight = 23
eMatTypeConcrete_EN_C20_NormalWeight = 24
eMatTypeConcrete_EN_C25_NormalWeight = 25
eMatTypeConcrete_EN_C30_NormalWeight = 26
eMatTypeConcrete_EN_C35_NormalWeight = 27
eMatTypeConcrete_EN_C40_NormalWeight = 28
eMatTypeConcrete_EN_C45_NormalWeight = 29
eMatTypeConcrete_EN_C50_NormalWeight = 30
eMatTypeConcrete_EN_C55_NormalWeight = 31
eMatTypeConcrete_EN_C60_NormalWeight = 32
eMatTypeConcrete_EN_C70_NormalWeight = 33
eMatTypeConcrete_EN_C80_NormalWeight = 34
eMatTypeConcrete_EN_C90_NormalWeight = 35
eMatTypeConcrete = c_int # enum

# values for enumeration 'eShellType'
eShellType_ShellThin = 1
eShellType_ShellThick = 2
eShellType_Membrane = 3
eShellType_PlateThin_DO_NOT_USE = 4
eShellType_PlateThick_DO_NOT_USE = 5
eShellType_Layered = 6
eShellType = c_int # enum
class cTendonObj(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{294BBF0B-8AC2-4593-80D5-BBF8C9E0E165}')
    _idlflags_ = ['dual', 'oleautomation']
cTendonObj._methods_ = [
    COMMETHOD([dispid(3)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'GetProperty',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'GetSelected',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Selected' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(23)], HRESULT, 'GetTendonGeometry',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(36)], HRESULT, 'SetSelected',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'Selected' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(46)], HRESULT, 'GetGroupAssign',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberGroups' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Groups' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(26)], HRESULT, 'SetGroupAssign',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'GroupName' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Remove', False ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(39)], HRESULT, 'GetNameListOnStory',
              ( ['in'], BSTR, 'StoryName' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(47)], HRESULT, 'GetLoadForceStress_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TendonName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPatFinal' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPatTransfer' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'JackFrom' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LoadValue' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LossSpecification' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(48)], HRESULT, 'GetLossesDetailed',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TendonName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CurvatureCoeff' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WobbleCoeff' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LossAnchorage' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LossShortening' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LossCreep' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LossShrinkage' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LossSteelRelax' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(49)], HRESULT, 'GetLossesFixed',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TendonName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StressingFixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LongTermFixed' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(50)], HRESULT, 'GetLossesPercent',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TendonName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StressingPercent' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LongTermPercent' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(51)], HRESULT, 'GetNumberStrands',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TendonName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberStrands' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(52)], HRESULT, 'GetDatumOffset',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TendonName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DatumOffset' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(53)], HRESULT, 'GetDrawingPoint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TendonName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'DrawingPointID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GZ' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cTendonObj implementation
##class cTendonObj_Impl(object):
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetProperty(self, Name):
##        '-no docstring-'
##        #return PropName, pRetVal
##
##    def GetSelected(self, Name):
##        '-no docstring-'
##        #return Selected, pRetVal
##
##    def GetTendonGeometry(self, Name, CSys):
##        '-no docstring-'
##        #return NumberPoints, X, Y, Z, pRetVal
##
##    def SetSelected(self, Name, Selected, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetGroupAssign(self, Name):
##        '-no docstring-'
##        #return NumberGroups, Groups, pRetVal
##
##    def SetGroupAssign(self, Name, GroupName, Remove, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetNameListOnStory(self, StoryName):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetLoadForceStress_1(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, TendonName, LoadPatFinal, LoadPatTransfer, JackFrom, LoadType, LoadValue, LossSpecification, pRetVal
##
##    def GetLossesDetailed(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, TendonName, CurvatureCoeff, WobbleCoeff, LossAnchorage, LossShortening, LossCreep, LossShrinkage, LossSteelRelax, pRetVal
##
##    def GetLossesFixed(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, TendonName, StressingFixed, LongTermFixed, pRetVal
##
##    def GetLossesPercent(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, TendonName, StressingPercent, LongTermPercent, pRetVal
##
##    def GetNumberStrands(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, TendonName, NumberStrands, pRetVal
##
##    def GetDatumOffset(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, TendonName, DatumOffset, pRetVal
##
##    def GetDrawingPoint(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, TendonName, DrawingPointID, GX, GY, GZ, pRetVal
##

class cPropLineSpring(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{D2FEF8A2-57AA-46CF-B287-F45EB0832B3A}')
    _idlflags_ = ['dual', 'oleautomation']
cPropLineSpring._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetLineSpringProp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'U1' ),
              ( ['in', 'out'], POINTER(c_double), 'U2' ),
              ( ['in', 'out'], POINTER(c_double), 'U3' ),
              ( ['in', 'out'], POINTER(c_double), 'R1' ),
              ( ['in', 'out'], POINTER(c_int), 'NonlinearOption2' ),
              ( ['in', 'out'], POINTER(c_int), 'NonlinearOption3' ),
              ( ['in', 'out'], POINTER(c_int), 'color' ),
              ( ['in', 'out'], POINTER(BSTR), 'notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'iGUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'SetLineSpringProp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'U1' ),
              ( ['in'], c_double, 'U2' ),
              ( ['in'], c_double, 'U3' ),
              ( ['in'], c_double, 'R1' ),
              ( ['in'], c_int, 'NonlinearOption2' ),
              ( ['in'], c_int, 'NonlinearOption3' ),
              ( ['in', 'optional'], c_int, 'color', 0 ),
              ( ['in', 'optional'], BSTR, 'notes', '' ),
              ( ['in', 'optional'], BSTR, 'iGUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cPropLineSpring implementation
##class cPropLineSpring_Impl(object):
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetLineSpringProp(self, Name):
##        '-no docstring-'
##        #return U1, U2, U3, R1, NonlinearOption2, NonlinearOption3, color, notes, iGUID, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def SetLineSpringProp(self, Name, U1, U2, U3, R1, NonlinearOption2, NonlinearOption3, color, notes, iGUID):
##        '-no docstring-'
##        #return pRetVal
##

class cDStAISC_LRFD93(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{38DD519B-AC4A-4DC8-B170-B8F58DC34B6E}')
    _idlflags_ = ['dual', 'oleautomation']
cDStAISC_LRFD93._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDStAISC_LRFD93 implementation
##class cDStAISC_LRFD93_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cView(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{BF177229-2909-4894-937D-6491208E027C}')
    _idlflags_ = ['dual', 'oleautomation']
cView._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'RefreshView',
              ( ['in', 'optional'], c_int, 'Window', 0 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Zoom', True ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'RefreshWindow',
              ( ['in', 'optional'], c_int, 'Window', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cView implementation
##class cView_Impl(object):
##    def RefreshView(self, Window, Zoom):
##        '-no docstring-'
##        #return pRetVal
##
##    def RefreshWindow(self, Window):
##        '-no docstring-'
##        #return pRetVal
##

class cPointElm(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{6B5B5603-D340-44D5-96A4-4B9028F673F3}')
    _idlflags_ = ['dual', 'oleautomation']

# values for enumeration 'eItemTypeElm'
eItemTypeElm_ObjectElm = 0
eItemTypeElm_Element = 1
eItemTypeElm_GroupElm = 2
eItemTypeElm_SelectionElm = 3
eItemTypeElm = c_int # enum
cPointElm._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'CountConstraint',
              ( ['in', 'out'], POINTER(c_int), 'Count' ),
              ( ['in', 'optional'], BSTR, 'Name', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'CountLoadDispl',
              ( ['in', 'out'], POINTER(c_int), 'Count' ),
              ( ['in', 'optional'], BSTR, 'Name', '' ),
              ( ['in', 'optional'], BSTR, 'LoadPat', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'CountLoadForce',
              ( ['in', 'out'], POINTER(c_int), 'Count' ),
              ( ['in', 'optional'], BSTR, 'Name', '' ),
              ( ['in', 'optional'], BSTR, 'LoadPat', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'CountRestraint',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'CountSpring',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetConnectivity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ObjectType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PointNumber' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetConstraint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ConstraintName' ),
              ( ['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetCoordCartesian',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'X' ),
              ( ['in', 'out'], POINTER(c_double), 'Y' ),
              ( ['in', 'out'], POINTER(c_double), 'Z' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetLoadDispl',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LcStep' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3' ),
              ( ['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetLoadForce',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LcStep' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetLocalAxes',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'A' ),
              ( ['in', 'out'], POINTER(c_double), 'B' ),
              ( ['in', 'out'], POINTER(c_double), 'C' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'GetObj',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'Obj' ),
              ( ['in', 'out'], POINTER(c_int), 'ObjType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'GetPatternValue',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'PatternName' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'GetRestraint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'GetSpring',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'GetSpringCoupled',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'GetTransformationMatrix',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'IsSpringCoupled',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IsCoupled' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cPointElm implementation
##class cPointElm_Impl(object):
##    def Count(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def CountConstraint(self, Name):
##        '-no docstring-'
##        #return Count, pRetVal
##
##    def CountLoadDispl(self, Name, LoadPat):
##        '-no docstring-'
##        #return Count, pRetVal
##
##    def CountLoadForce(self, Name, LoadPat):
##        '-no docstring-'
##        #return Count, pRetVal
##
##    def CountRestraint(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def CountSpring(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetConnectivity(self, Name):
##        '-no docstring-'
##        #return NumberItems, ObjectType, ObjectName, PointNumber, pRetVal
##
##    def GetConstraint(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberItems, PointName, ConstraintName, pRetVal
##
##    def GetCoordCartesian(self, Name, CSys):
##        '-no docstring-'
##        #return X, Y, Z, pRetVal
##
##    def GetLoadDispl(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberItems, PointName, LoadPat, LcStep, CSys, U1, U2, U3, R1, R2, R3, pRetVal
##
##    def GetLoadForce(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberItems, PointName, LoadPat, LcStep, CSys, F1, F2, F3, M1, M2, M3, pRetVal
##
##    def GetLocalAxes(self, Name):
##        '-no docstring-'
##        #return A, B, C, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetObj(self, Name):
##        '-no docstring-'
##        #return Obj, ObjType, pRetVal
##
##    def GetPatternValue(self, Name, PatternName):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetRestraint(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetSpring(self, Name):
##        '-no docstring-'
##        #return K, pRetVal
##
##    def GetSpringCoupled(self, Name):
##        '-no docstring-'
##        #return K, pRetVal
##
##    def GetTransformationMatrix(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def IsSpringCoupled(self, Name):
##        '-no docstring-'
##        #return IsCoupled, pRetVal
##

class cDesignCompositeBeam(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{B80FC69C-D3B1-4B01-9E15-CF7D14DF8A38}')
    _idlflags_ = ['dual', 'oleautomation']
cDesignCompositeBeam._methods_ = [
    COMMETHOD([dispid(6)], HRESULT, 'DeleteResults',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetCode',
              ( ['in', 'out'], POINTER(BSTR), 'CodeName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetComboDeflection',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetComboStrength',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetDesignSection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetGroup',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(28)], HRESULT, 'GetResultsAvailable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'GetSummaryResults',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'DesignSect' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BeamFy' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StudDia' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StudLayout' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'BeamShored' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BeamCamber' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PassFail' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ReacLeft' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ReacRt' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MMaxNeg' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MMaxPos' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PCC' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'OverallRatio' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StudRatio' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StrPMRat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ConstPMRat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StrShrRat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ConShrRat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PCDLDfRat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SDLDfRat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LLDfRat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TotCamDfRat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FreqRat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MDampRat' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'GetTargetDispl',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Point' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Displ' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Active' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'GetTargetPeriod',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(BSTR), 'ModalCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Mode' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Period' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Active' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'ResetOverwrites',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'SetAutoSelectNull',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'SetCode',
              ( ['in'], BSTR, 'CodeName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'SetComboDeflection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'Selected' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'SetComboStrength',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'Selected' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'SetDesignSection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'PropName' ),
              ( ['in'], VARIANT_BOOL, 'LastAnalysis' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'SetGroup',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'Selected' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(23)], HRESULT, 'SetTargetDispl',
              ( ['in'], c_int, 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Point' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Displ' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Active', True ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(24)], HRESULT, 'SetTargetPeriod',
              ( ['in'], c_int, 'NumberItems' ),
              ( ['in'], BSTR, 'ModalCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Mode' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Period' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Active', True ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(25)], HRESULT, 'StartDesign',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(26)], HRESULT, 'VerifyPassed',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(c_int), 'N1' ),
              ( ['in', 'out'], POINTER(c_int), 'N2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(27)], HRESULT, 'VerifySections',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDesignCompositeBeam implementation
##class cDesignCompositeBeam_Impl(object):
##    def DeleteResults(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetCode(self):
##        '-no docstring-'
##        #return CodeName, pRetVal
##
##    def GetComboDeflection(self):
##        '-no docstring-'
##        #return NumberItems, MyName, pRetVal
##
##    def GetComboStrength(self):
##        '-no docstring-'
##        #return NumberItems, MyName, pRetVal
##
##    def GetDesignSection(self, Name):
##        '-no docstring-'
##        #return PropName, pRetVal
##
##    def GetGroup(self):
##        '-no docstring-'
##        #return NumberItems, MyName, pRetVal
##
##    def GetResultsAvailable(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetSummaryResults(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, DesignSect, BeamFy, StudDia, StudLayout, BeamShored, BeamCamber, PassFail, ReacLeft, ReacRt, MMaxNeg, MMaxPos, PCC, OverallRatio, StudRatio, StrPMRat, ConstPMRat, StrShrRat, ConShrRat, PCDLDfRat, SDLDfRat, LLDfRat, TotCamDfRat, FreqRat, MDampRat, pRetVal
##
##    def GetTargetDispl(self):
##        '-no docstring-'
##        #return NumberItems, LoadCase, Point, Displ, Active, pRetVal
##
##    def GetTargetPeriod(self):
##        '-no docstring-'
##        #return NumberItems, ModalCase, Mode, Period, Active, pRetVal
##
##    def ResetOverwrites(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetAutoSelectNull(self, Name, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCode(self, CodeName):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetComboDeflection(self, Name, Selected):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetComboStrength(self, Name, Selected):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDesignSection(self, Name, PropName, LastAnalysis, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetGroup(self, Name, Selected):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetTargetDispl(self, NumberItems, Active):
##        '-no docstring-'
##        #return LoadCase, Point, Displ, pRetVal
##
##    def SetTargetPeriod(self, NumberItems, ModalCase, Active):
##        '-no docstring-'
##        #return Mode, Period, pRetVal
##
##    def StartDesign(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def VerifyPassed(self):
##        '-no docstring-'
##        #return NumberItems, N1, N2, MyName, pRetVal
##
##    def VerifySections(self):
##        '-no docstring-'
##        #return NumberItems, MyName, pRetVal
##


# values for enumeration 'eBridgeResponseForce'
eBridgeResponseForce_Axial_Force_P = 1
eBridgeResponseForce_Shear_Vertical_V2 = 2
eBridgeResponseForce_Shear_Horizontal_V3 = 3
eBridgeResponseForce_Torsion_T = 4
eBridgeResponseForce_Moment_About_Vertical_Axis_M2 = 5
eBridgeResponseForce_Moment_About_Horizontal_Axis_M3 = 6
eBridgeResponseForce = c_int # enum

# values for enumeration 'eBridgeObjectFoundationPart'
eBridgeObjectFoundationPart_Footing = 1
eBridgeObjectFoundationPart_PileCap = 2
eBridgeObjectFoundationPart_Pile = 3
eBridgeObjectFoundationPart_FoundationSpring = 4
eBridgeObjectFoundationPart = c_int # enum
class cDStCanadian_S16_14(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{F91A6E37-1A06-41C3-9138-59E3E007B4AD}')
    _idlflags_ = ['dual', 'oleautomation']
cDStCanadian_S16_14._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDStCanadian_S16_14 implementation
##class cDStCanadian_S16_14_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cFunction(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{36B7C3DB-1A91-41ED-B443-1A102383B731}')
    _idlflags_ = ['dual', 'oleautomation']
class cFunctionRS(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{F4EA1F46-B9C3-4D4B-AD95-C951D919A26E}')
    _idlflags_ = ['dual', 'oleautomation']
class cFunctionTH(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{618C5AD5-5E03-4972-9262-380EC3FECB87}')
    _idlflags_ = ['dual', 'oleautomation']
cFunction._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'ConvertToUser',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'Count',
              ( ['in', 'optional'], c_int, 'FuncType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'FuncRS',
              ( ['out', 'retval'], POINTER(POINTER(cFunctionRS)), 'pRetVal' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'FuncTH',
              ( ['out', 'retval'], POINTER(POINTER(cFunctionTH)), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'optional'], c_int, 'FuncType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetTypeOAPI',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'FuncType' ),
              ( ['in', 'out'], POINTER(c_int), 'AddType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetValues',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MyTime' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cFunction implementation
##class cFunction_Impl(object):
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def ConvertToUser(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self, FuncType):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def FuncRS(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def FuncTH(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetNameList(self, FuncType):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetTypeOAPI(self, Name):
##        '-no docstring-'
##        #return FuncType, AddType, pRetVal
##
##    def GetValues(self, Name):
##        '-no docstring-'
##        #return NumberItems, MyTime, Value, pRetVal
##

class cDStChinese_2010(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{D81D4698-C66B-40CD-88FF-6534970DED6D}')
    _idlflags_ = ['dual', 'oleautomation']
cDStChinese_2010._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDStChinese_2010 implementation
##class cDStChinese_2010_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##


# values for enumeration 'eTemperature'
eTemperature_NotApplicable = 0
eTemperature_F = 1
eTemperature_C = 2
eTemperature = c_int # enum
class cPierLabel(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{694BE161-F785-4F24-8520-9F3890F781E1}')
    _idlflags_ = ['dual', 'oleautomation']
cPierLabel._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetPier',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetSectionProperties',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberStories' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StoryName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AxisAngle' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumAreaObjs' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumLineObjs' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WidthBot' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ThicknessBot' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WidthTop' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ThicknessTop' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MatProp' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CGBotX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CGBotY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CGBotZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CGTopX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CGTopY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CGTopZ' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'SetPier',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cPierLabel implementation
##class cPierLabel_Impl(object):
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetPier(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetSectionProperties(self, Name):
##        '-no docstring-'
##        #return NumberStories, StoryName, AxisAngle, NumAreaObjs, NumLineObjs, WidthBot, ThicknessBot, WidthTop, ThicknessTop, MatProp, CGBotX, CGBotY, CGBotZ, CGTopX, CGTopY, CGTopZ, pRetVal
##
##    def SetPier(self, Name):
##        '-no docstring-'
##        #return pRetVal
##


# values for enumeration 'eMatType'
eMatType_Steel = 1
eMatType_Concrete = 2
eMatType_NoDesign = 3
eMatType_Aluminum = 4
eMatType_ColdFormed = 5
eMatType_Rebar = 6
eMatType_Tendon = 7
eMatType_Masonry = 8
eMatType = c_int # enum
class cSpandrelLabel(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{C16857E5-ED00-43FA-BE26-8BED766E77AD}')
    _idlflags_ = ['dual', 'oleautomation']
cSpandrelLabel._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetSpandrel',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IsMultiStory' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'IsMultiStory' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'SetSpandrel',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'IsMultiStory' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetSectionProperties',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberStories' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StoryName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumAreaObj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumLineObj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Length' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DepthLeft' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ThickLeft' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DepthRight' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ThickRight' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MatProp' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CGLeftX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CGLeftY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CGLeftZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CGRightX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CGRightY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CGRightZ' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cSpandrelLabel implementation
##class cSpandrelLabel_Impl(object):
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetSpandrel(self, Name):
##        '-no docstring-'
##        #return IsMultiStory, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, IsMultiStory, pRetVal
##
##    def SetSpandrel(self, Name, IsMultiStory):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetSectionProperties(self, Name):
##        '-no docstring-'
##        #return NumberStories, StoryName, NumAreaObj, NumLineObj, Length, DepthLeft, ThickLeft, DepthRight, ThickRight, MatProp, CGLeftX, CGLeftY, CGLeftZ, CGRightX, CGRightY, CGRightZ, pRetVal
##

class cPluginCallback(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{496FB743-26AF-47C5-A713-C1B5CA85106C}')
    _idlflags_ = ['dual', 'oleautomation']
cPluginCallback._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'ErrorFlag',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Finish',
              ( ['in'], c_int, 'iVal' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'Finished',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for cPluginCallback implementation
##class cPluginCallback_Impl(object):
##    @property
##    def ErrorFlag(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def Finish(self, iVal):
##        '-no docstring-'
##        #return 
##
##    @property
##    def Finished(self):
##        '-no docstring-'
##        #return pRetVal
##

class cGridSys(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{8CE65D2B-F765-4206-8A1F-CA40AFE31049}')
    _idlflags_ = ['dual', 'oleautomation']
cGridSys._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetGridSys',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'X' ),
              ( ['in', 'out'], POINTER(c_double), 'Y' ),
              ( ['in', 'out'], POINTER(c_double), 'RZ' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetTransformationMatrix',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'SetGridSys',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'X' ),
              ( ['in'], c_double, 'Y' ),
              ( ['in'], c_double, 'RZ' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetGridSys_2',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Xo' ),
              ( ['in', 'out'], POINTER(c_double), 'Yo' ),
              ( ['in', 'out'], POINTER(c_double), 'RZ' ),
              ( ['in', 'out'], POINTER(BSTR), 'GridSysType' ),
              ( ['in', 'out'], POINTER(c_int), 'NumXLines' ),
              ( ['in', 'out'], POINTER(c_int), 'NumYLines' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GridLineIDX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GridLineIDY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'OrdinateX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'OrdinateY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'VisibleX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'VisibleY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BubbleLocX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BubbleLocY' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetGridSysType',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'GridSysType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetNameTypeList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GridSysName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GridSysType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetGridSysCartesian',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Xo' ),
              ( ['in', 'out'], POINTER(c_double), 'Yo' ),
              ( ['in', 'out'], POINTER(c_double), 'RZ' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'StoryRangeIsDefault' ),
              ( ['in', 'out'], POINTER(BSTR), 'TopStory' ),
              ( ['in', 'out'], POINTER(BSTR), 'BottomStory' ),
              ( ['in', 'out'], POINTER(c_double), 'BubbleSize' ),
              ( ['in', 'out'], POINTER(c_int), 'GridColor' ),
              ( ['in', 'out'], POINTER(c_int), 'NumXLines' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GridLineIDX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'OrdinateX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'VisibleX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BubbleLocX' ),
              ( ['in', 'out'], POINTER(c_int), 'NumYLines' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GridLineIDY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'OrdinateY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'VisibleY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BubbleLocY' ),
              ( ['in', 'out'], POINTER(c_int), 'NumGenLines' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GridLineIDGen' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GenOrdX1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GenOrdY1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GenOrdX2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GenOrdY2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'VisibleGen' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BubbleLocGen' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetGridSysCylindrical',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Xo' ),
              ( ['in', 'out'], POINTER(c_double), 'Yo' ),
              ( ['in', 'out'], POINTER(c_double), 'RZ' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'StoryRangeIsDefault' ),
              ( ['in', 'out'], POINTER(BSTR), 'TopStory' ),
              ( ['in', 'out'], POINTER(BSTR), 'BottomStory' ),
              ( ['in', 'out'], POINTER(c_double), 'BubbleSize' ),
              ( ['in', 'out'], POINTER(c_int), 'GridColor' ),
              ( ['in', 'out'], POINTER(c_int), 'NumRLines' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GridLineIDR' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'OrdinateR' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'VisibleR' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BubbleLocR' ),
              ( ['in', 'out'], POINTER(c_int), 'NumTLines' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GridLineIDT' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'OrdinateT' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'VisibleT' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BubbleLocT' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cGridSys implementation
##class cGridSys_Impl(object):
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetGridSys(self, Name):
##        '-no docstring-'
##        #return X, Y, RZ, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetTransformationMatrix(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetGridSys(self, Name, X, Y, RZ):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetGridSys_2(self, Name):
##        '-no docstring-'
##        #return Xo, Yo, RZ, GridSysType, NumXLines, NumYLines, GridLineIDX, GridLineIDY, OrdinateX, OrdinateY, VisibleX, VisibleY, BubbleLocX, BubbleLocY, pRetVal
##
##    def GetGridSysType(self, Name):
##        '-no docstring-'
##        #return GridSysType, pRetVal
##
##    def GetNameTypeList(self):
##        '-no docstring-'
##        #return NumberNames, GridSysName, GridSysType, pRetVal
##
##    def GetGridSysCartesian(self, Name):
##        '-no docstring-'
##        #return Xo, Yo, RZ, StoryRangeIsDefault, TopStory, BottomStory, BubbleSize, GridColor, NumXLines, GridLineIDX, OrdinateX, VisibleX, BubbleLocX, NumYLines, GridLineIDY, OrdinateY, VisibleY, BubbleLocY, NumGenLines, GridLineIDGen, GenOrdX1, GenOrdY1, GenOrdX2, GenOrdY2, VisibleGen, BubbleLocGen, pRetVal
##
##    def GetGridSysCylindrical(self, Name):
##        '-no docstring-'
##        #return Xo, Yo, RZ, StoryRangeIsDefault, TopStory, BottomStory, BubbleSize, GridColor, NumRLines, GridLineIDR, OrdinateR, VisibleR, BubbleLocR, NumTLines, GridLineIDT, OrdinateT, VisibleT, BubbleLocT, pRetVal
##


# values for enumeration 'eBridgeObjectBentPart'
eBridgeObjectBentPart_CapBeam = 1
eBridgeObjectBentPart_Column = 2
eBridgeObjectBentPart_Bearing = 3
eBridgeObjectBentPart_Wall = 4
eBridgeObjectBentPart = c_int # enum

# values for enumeration 'eMatTypeSteel'
eMatTypeSteel_ASTM_A36 = 1
eMatTypeSteel_ASTM_A53GrB = 2
eMatTypeSteel_ASTM_A500GrB_Fy42 = 3
eMatTypeSteel_ASTM_A500GrB_Fy46 = 4
eMatTypeSteel_ASTM_A572Gr50 = 5
eMatTypeSteel_ASTM_A913Gr50 = 6
eMatTypeSteel_ASTM_A992_Fy50 = 7
eMatTypeSteel_Chinese_Q235 = 8
eMatTypeSteel_Chinese_Q355 = 9
eMatTypeSteel_Indian_Fe250 = 10
eMatTypeSteel_Indian_Fe345 = 11
eMatTypeSteel_EN100252_S235 = 12
eMatTypeSteel_EN100252_S275 = 13
eMatTypeSteel_EN100252_S355 = 14
eMatTypeSteel_EN100252_S450 = 15
eMatTypeSteel = c_int # enum
class cDCoTS_500_2000(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{A2CE64AE-31FD-4550-B4FF-A1CA1B4F4F5B}')
    _idlflags_ = ['dual', 'oleautomation']
cDCoTS_500_2000._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDCoTS_500_2000 implementation
##class cDCoTS_500_2000_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cDesignForces(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{F7469045-DA52-414A-B543-FD34EE6EC54F}')
    _idlflags_ = ['dual', 'oleautomation']
cDesignForces._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'BeamDesignForces',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ComboName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Station' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'P' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'BraceDesignForces',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ComboName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Station' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'P' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'ColumnDesignForces',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ComboName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Station' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'P' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'PierDesignForces',
              ( ['in'], BSTR, 'InputPierLabel' ),
              ( ['in'], BSTR, 'InputStoryName' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Story' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PierLabel' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ComboName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Location' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'P' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'SpandrelDesignForces',
              ( ['in'], BSTR, 'InputSpandrelLabel' ),
              ( ['in'], BSTR, 'InputStoryName' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Story' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SpandrelLabel' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ComboName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Location' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'P' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDesignForces implementation
##class cDesignForces_Impl(object):
##    def BeamDesignForces(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberResults, FrameName, ComboName, Station, P, V2, V3, T, M2, M3, pRetVal
##
##    def BraceDesignForces(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberResults, FrameName, ComboName, Station, P, V2, V3, T, M2, M3, pRetVal
##
##    def ColumnDesignForces(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberResults, FrameName, ComboName, Station, P, V2, V3, T, M2, M3, pRetVal
##
##    def PierDesignForces(self, InputPierLabel, InputStoryName):
##        '-no docstring-'
##        #return NumberResults, Story, PierLabel, ComboName, Location, P, V2, V3, T, M2, M3, pRetVal
##
##    def SpandrelDesignForces(self, InputSpandrelLabel, InputStoryName):
##        '-no docstring-'
##        #return NumberResults, Story, SpandrelLabel, ComboName, Location, P, V2, V3, T, M2, M3, pRetVal
##


# values for enumeration 'eBridgeResponsePart'
eBridgeResponsePart_Entire_Bridge_Section = 1
eBridgeResponsePart_Girder = 2
eBridgeResponsePart_Beam = 3
eBridgeResponsePart_Web = 4
eBridgeResponsePart_Slab = 5
eBridgeResponsePart_All_Girders = 6
eBridgeResponsePart_All_Beams = 7
eBridgeResponsePart_All_Webs = 8
eBridgeResponsePart_All_Slabs = 9
eBridgeResponsePart_Entire_Section_Plus_All_Girders = 10
eBridgeResponsePart = c_int # enum

# values for enumeration 'eBridgeResponseDesignRating'
eBridgeResponseDesignRating_S11_Longitudinal_Top_Left = 0
eBridgeResponseDesignRating_S11_Longitudinal_Top_Center = 1
eBridgeResponseDesignRating_S11_Longitudinal_Top_Right = 2
eBridgeResponseDesignRating_S11_Longitudinal_Top_Envelope = 3
eBridgeResponseDesignRating_S11_Longitudinal_Slab_Top_Left = 4
eBridgeResponseDesignRating_S11_Longitudinal_Slab_Top_Center = 5
eBridgeResponseDesignRating_S11_Longitudinal_Slab_Top_Beam_Center = 6
eBridgeResponseDesignRating_S11_Longitudinal_Slab_Top_Right = 7
eBridgeResponseDesignRating_S11_Longitudinal_Slab_Top_Envelope = 8
eBridgeResponseDesignRating_S11_Longitudinal_Beam_Top_Left = 9
eBridgeResponseDesignRating_S11_Longitudinal_Beam_Top_Center = 10
eBridgeResponseDesignRating_S11_Longitudinal_Beam_Top_Right = 11
eBridgeResponseDesignRating_S11_Longitudinal_Beam_Top_Envelope = 12
eBridgeResponseDesignRating_S11_Longitudinal_Bot_Left = 13
eBridgeResponseDesignRating_S11_Longitudinal_Bot_Left_Corner = 14
eBridgeResponseDesignRating_S11_Longitudinal_Bot_Center = 15
eBridgeResponseDesignRating_S11_Longitudinal_Bot_Right = 16
eBridgeResponseDesignRating_S11_Longitudinal_Bot_Right_Corner = 17
eBridgeResponseDesignRating_S11_Longitudinal_Bot_Envelope = 18
eBridgeResponseDesignRating_S11_Longitudinal_Girder_Bot_Left = 19
eBridgeResponseDesignRating_S11_Longitudinal_Girder_Bot_Right = 20
eBridgeResponseDesignRating_S11_Longitudinal_Girder_Bot_Envelope = 21
eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Left = 22
eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Beam_Left = 23
eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Beam_Center = 24
eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Beam_Right = 25
eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Center = 26
eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Right = 27
eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Envelope = 28
eBridgeResponseDesignRating_S11_Longitudinal_Beam_Bot_Left = 29
eBridgeResponseDesignRating_S11_Longitudinal_Beam_Bot_Center = 39
eBridgeResponseDesignRating_S11_Longitudinal_Beam_Bot_Right = 31
eBridgeResponseDesignRating_S11_Longitudinal_Beam_Bot_Envelope = 32
eBridgeResponseDesignRating_Design_Shear_Demand_Concrete_Shear_Capacity_Ratio = 33
eBridgeResponseDesignRating_Design_Shear_Controlling_Shear_DC_Ratio = 34
eBridgeResponseDesignRating_Design_Shear_Controlling_Torsion_DC_Ratio = 35
eBridgeResponseDesignRating_Design_Shear_Required_Extra_Shear_Rebar_Area_PerL = 36
eBridgeResponseDesignRating_Design_Shear_Required_Extra_Longit_Rebar_Area = 37
eBridgeResponseDesignRating_Design_Shear_Required_Extra_Longit_Rebar_Area_For_Torsion = 38
eBridgeResponseDesignRating_Design_Shear_Required_Extra_Longit_Rebar_Area_Bot_Slab = 39
eBridgeResponseDesignRating_Design_Shear_Required_Extra_Longit_Rebar_Area_Top_Slab = 40
eBridgeResponseDesignRating_Design_Shear_Required_Extra_Longit_Rebar_Area_Slab = 41
eBridgeResponseDesignRating_Design_Shear_Required_Extra_Longit_Rebar_Area_Beam = 42
eBridgeResponseDesignRating_Design_Shear_Controlling_DC_Ratio = 43
eBridgeResponseDesignRating_Design_Shear_Rebar_Area_PerL = 44
eBridgeResponseDesignRating_Design_Shear_Longit_Rebar_Area = 45
eBridgeResponseDesignRating_Design_Shear_Longit_Rebar_Area_Bot_Slab = 46
eBridgeResponseDesignRating_Design_Shear_Longit_Rebar_Area_Top_Slab = 47
eBridgeResponseDesignRating_Design_Shear_Longit_Rebar_Area_Bot_Flange = 48
eBridgeResponseDesignRating_Design_Shear_Longit_Rebar_Area_Slab = 49
eBridgeResponseDesignRating_Design_Shear_Longit_Rebar_Area_Beam = 50
eBridgeResponseDesignRating_Design_Shear_Longit_Torsional_Rebar_Area_PerL = 51
eBridgeResponseDesignRating_Design_Shear_Torsion_Rebar_Area_PerL = 52
eBridgeResponseDesignRating_Design_Shear_Torsion_Plus_Shear_Rebar_Area_PerL = 53
eBridgeResponseDesignRating_Design_Crack_Top_Crack_Width = 54
eBridgeResponseDesignRating_Design_Crack_Bot_Crack_Width = 55
eBridgeResponseDesignRating_Design_Crack_Top_Bot_Crack_Widths = 56
eBridgeResponseDesignRating_Design_Principal_Stress_Envelope = 57
eBridgeResponseDesignRating_Design_Principal_Stress_Web_Top = 58
eBridgeResponseDesignRating_Design_Principal_Stress_Web_Bot = 59
eBridgeResponseDesignRating_Design_Principal_Stress_Beam_Web_Top = 60
eBridgeResponseDesignRating_Design_Principal_Stress_Beam_Web_Bot = 61
eBridgeResponseDesignRating_Design_Principal_Stress_Neutral_Axis = 62
eBridgeResponseDesignRating_Design_Tendon_Stress_Controlling_DC_Ratio = 63
eBridgeResponseDesignRating_Design_Flexure_Moment_About_Horizontal_Axis_M3 = 64
eBridgeResponseDesignRating_Design_Strength_DC_Ratio_Positive_Moment = 65
eBridgeResponseDesignRating_Design_Strength_DC_Ratio_Negative_Moment = 66
eBridgeResponseDesignRating_Design_Strength_DC_Ratio_Shear = 67
eBridgeResponseDesignRating_Design_Strength_DC_Ratio_Net_Section_Fracture_Pos = 68
eBridgeResponseDesignRating_Design_Strength_DC_Ratio_Net_Section_Fracture_Neg = 69
eBridgeResponseDesignRating_Design_Strength_DC_Ratio_FlexureShearInteract_Pos = 70
eBridgeResponseDesignRating_Design_Strength_DC_Ratio_FlexureShearInteract_Neg = 71
eBridgeResponseDesignRating_Design_Strength_Total_Nominal_Shear_Force_6_10_10_4_2 = 72
eBridgeResponseDesignRating_Design_Fatigue_Top_Flange_Tensile_Stress_Range_Without_FLB = 73
eBridgeResponseDesignRating_Design_Fatigue_Bot_Flange_Tensile_Stress_Range_Without_FLB = 74
eBridgeResponseDesignRating_Design_Fatigue_Bot_Flange_Lateral_Bending_Stress_Range = 75
eBridgeResponseDesignRating_Design_Fatigue_DC_Ratio_Web_Shear = 76
eBridgeResponseDesignRating_Rating_Shear = 77
eBridgeResponseDesignRating_Rating_Shear_Factored_Shear_Resistance = 78
eBridgeResponseDesignRating_Rating_Shear_Factored_Shear_Resistance_UVr = 79
eBridgeResponseDesignRating_Rating_Shear_Live_load_Capacity_Factor_F = 80
eBridgeResponseDesignRating_Rating_Flexure = 81
eBridgeResponseDesignRating_Rating_Flexure_Factored_Moment_Resistance = 82
eBridgeResponseDesignRating_Rating_Flexure_Factored_Moment_Resistance_UMr = 83
eBridgeResponseDesignRating_Rating_Flexure_Live_load_Capacity_Factor_F = 84
eBridgeResponseDesignRating_Rating_Strength_Shear_Rating = 85
eBridgeResponseDesignRating_Rating_Strength_Flexure_Rating = 86
eBridgeResponseDesignRating_Rating_Strength_Live_load_Capacity_Factor_F_Moment_M3 = 87
eBridgeResponseDesignRating_Rating_Strength_Live_load_Capacity_Factor_F_Shear_V2 = 88
eBridgeResponseDesignRating_Rating_Service_Flexure_Rating = 89
eBridgeResponseDesignRating_Rating_MinRebar_Min_Of_Abs_1_2Mcr_And_Abs_1_33Mu_For_Pos = 90
eBridgeResponseDesignRating_Rating_MinRebar_Min_Of_Abs_1_2Mcr_And_Abs_1_33Mu_For_Neg = 91
eBridgeResponseDesignRating_Rating_MinRebar_Flexure_Rating = 92
eBridgeResponseDesignRating_Rating_Service = 93
eBridgeResponseDesignRating = c_int # enum

# values for enumeration 'eConstraintAxis'
eConstraintAxis_X = 1
eConstraintAxis_Y = 2
eConstraintAxis_Z = 3
eConstraintAxis_AutoAxis = 4
eConstraintAxis = c_int # enum
class cAnalyze(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{90E7C3E4-5D56-40A2-BA97-3979CFF08ADC}')
    _idlflags_ = ['dual', 'oleautomation']
cAnalyze._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'CreateAnalysisModel',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'DeleteResults',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'All', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetActiveDOF',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetCaseStatus',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CaseName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Status' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetRunCaseFlag',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CaseName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Run' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetSolverOption',
              ( ['in', 'out'], POINTER(c_int), 'SolverType' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Force32BitSolver' ),
              ( ['in', 'out'], POINTER(BSTR), 'StiffCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetSolverOption_1',
              ( ['in', 'out'], POINTER(c_int), 'SolverType' ),
              ( ['in', 'out'], POINTER(c_int), 'SolverProcessType' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Force32BitSolver' ),
              ( ['in', 'out'], POINTER(BSTR), 'StiffCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'ModifyUndeformedGeometry',
              ( ['in'], BSTR, 'CaseName' ),
              ( ['in'], c_double, 'SF' ),
              ( ['in', 'optional'], c_int, 'Stage', -1 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Original', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'RunAnalysis',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'SetActiveDOF',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'SetRunCaseFlag',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'Run' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'All', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'SetSolverOption',
              ( ['in'], c_int, 'SolverType' ),
              ( ['in'], VARIANT_BOOL, 'Force32BitSolver' ),
              ( ['in', 'optional'], BSTR, 'StiffCase', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'SetSolverOption_1',
              ( ['in'], c_int, 'SolverType' ),
              ( ['in'], c_int, 'SolverProcessType' ),
              ( ['in'], VARIANT_BOOL, 'Force32BitSolver' ),
              ( ['in', 'optional'], BSTR, 'StiffCase', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'ModifyUndeformedGeometryModeShape',
              ( ['in'], BSTR, 'CaseName' ),
              ( ['in'], c_int, 'Mode' ),
              ( ['in'], c_double, 'MaxDispl' ),
              ( ['in'], c_int, 'Direction' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Original', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'GetSolverOption_2',
              ( ['in', 'out'], POINTER(c_int), 'SolverType' ),
              ( ['in', 'out'], POINTER(c_int), 'SolverProcessType' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberParallelRuns' ),
              ( ['in', 'out'], POINTER(BSTR), 'StiffCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'SetSolverOption_2',
              ( ['in'], c_int, 'SolverType' ),
              ( ['in'], c_int, 'SolverProcessType' ),
              ( ['in'], c_int, 'NumberParallelRuns' ),
              ( ['in', 'optional'], BSTR, 'StiffCase', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'MergeAnalysisResults',
              ( ['in'], BSTR, 'SourceFileName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'GetSolverOption_3',
              ( ['in', 'out'], POINTER(c_int), 'SolverType' ),
              ( ['in', 'out'], POINTER(c_int), 'SolverProcessType' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberParallelRuns' ),
              ( ['in', 'out'], POINTER(c_int), 'ResponseFileSizeMaxMB' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberAnalysisThreads' ),
              ( ['in', 'out'], POINTER(BSTR), 'StiffCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'SetSolverOption_3',
              ( ['in'], c_int, 'SolverType' ),
              ( ['in'], c_int, 'SolverProcessType' ),
              ( ['in'], c_int, 'NumberParallelRuns' ),
              ( ['in'], c_int, 'ResponseFileSizeMaxMB' ),
              ( ['in'], c_int, 'NumberAnalysisThreads' ),
              ( ['in', 'optional'], BSTR, 'StiffCase', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'GetDesignResponseOption',
              ( ['in', 'out'], POINTER(c_int), 'NumberDesignThreads' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResponseRecoveryThreads' ),
              ( ['in', 'out'], POINTER(c_int), 'UseMemoryMappedFilesForResponseRecovery' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ModelDifferencesOKWhenMergingResults' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'SetDesignResponseOption',
              ( ['in'], c_int, 'NumberDesignThreads' ),
              ( ['in'], c_int, 'NumberResponseRecoveryThreads' ),
              ( ['in'], c_int, 'UseMemoryMappedFilesForResponseRecovery' ),
              ( ['in'], VARIANT_BOOL, 'ModelDifferencesOKWhenMergingResults' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cAnalyze implementation
##class cAnalyze_Impl(object):
##    def CreateAnalysisModel(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteResults(self, Name, All):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetActiveDOF(self):
##        '-no docstring-'
##        #return DOF, pRetVal
##
##    def GetCaseStatus(self):
##        '-no docstring-'
##        #return NumberItems, CaseName, Status, pRetVal
##
##    def GetRunCaseFlag(self):
##        '-no docstring-'
##        #return NumberItems, CaseName, Run, pRetVal
##
##    def GetSolverOption(self):
##        '-no docstring-'
##        #return SolverType, Force32BitSolver, StiffCase, pRetVal
##
##    def GetSolverOption_1(self):
##        '-no docstring-'
##        #return SolverType, SolverProcessType, Force32BitSolver, StiffCase, pRetVal
##
##    def ModifyUndeformedGeometry(self, CaseName, SF, Stage, Original):
##        '-no docstring-'
##        #return pRetVal
##
##    def RunAnalysis(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetActiveDOF(self):
##        '-no docstring-'
##        #return DOF, pRetVal
##
##    def SetRunCaseFlag(self, Name, Run, All):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSolverOption(self, SolverType, Force32BitSolver, StiffCase):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSolverOption_1(self, SolverType, SolverProcessType, Force32BitSolver, StiffCase):
##        '-no docstring-'
##        #return pRetVal
##
##    def ModifyUndeformedGeometryModeShape(self, CaseName, Mode, MaxDispl, Direction, Original):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetSolverOption_2(self):
##        '-no docstring-'
##        #return SolverType, SolverProcessType, NumberParallelRuns, StiffCase, pRetVal
##
##    def SetSolverOption_2(self, SolverType, SolverProcessType, NumberParallelRuns, StiffCase):
##        '-no docstring-'
##        #return pRetVal
##
##    def MergeAnalysisResults(self, SourceFileName):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetSolverOption_3(self):
##        '-no docstring-'
##        #return SolverType, SolverProcessType, NumberParallelRuns, ResponseFileSizeMaxMB, NumberAnalysisThreads, StiffCase, pRetVal
##
##    def SetSolverOption_3(self, SolverType, SolverProcessType, NumberParallelRuns, ResponseFileSizeMaxMB, NumberAnalysisThreads, StiffCase):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetDesignResponseOption(self):
##        '-no docstring-'
##        #return NumberDesignThreads, NumberResponseRecoveryThreads, UseMemoryMappedFilesForResponseRecovery, ModelDifferencesOKWhenMergingResults, pRetVal
##
##    def SetDesignResponseOption(self, NumberDesignThreads, NumberResponseRecoveryThreads, UseMemoryMappedFilesForResponseRecovery, ModelDifferencesOKWhenMergingResults):
##        '-no docstring-'
##        #return pRetVal
##

class cDCoItalianNTC2008C(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{1308D2A3-7656-4E06-A610-F1A93282B5CC}')
    _idlflags_ = ['dual', 'oleautomation']
cDCoItalianNTC2008C._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDCoItalianNTC2008C implementation
##class cDCoItalianNTC2008C_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##


# values for enumeration 'eObjType'
eObjType_Point = 1
eObjType_Frame = 2
eObjType_Area = 3
eObjType_Solid = 6
eObjType = c_int # enum
class cPropAreaSpring(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{47BCE5BE-8DE6-4171-B593-2E562EDB7B45}')
    _idlflags_ = ['dual', 'oleautomation']
cPropAreaSpring._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetAreaSpringProp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'U1' ),
              ( ['in', 'out'], POINTER(c_double), 'U2' ),
              ( ['in', 'out'], POINTER(c_double), 'U3' ),
              ( ['in', 'out'], POINTER(c_int), 'NonlinearOption3' ),
              ( ['in', 'out'], POINTER(c_int), 'SpringOption' ),
              ( ['in', 'out'], POINTER(BSTR), 'SoilProfile' ),
              ( ['in', 'out'], POINTER(c_double), 'EndLengthRatio' ),
              ( ['in', 'out'], POINTER(c_double), 'Period' ),
              ( ['in', 'out'], POINTER(c_int), 'color' ),
              ( ['in', 'out'], POINTER(BSTR), 'notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'iGUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'SetAreaSpringProp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'U1' ),
              ( ['in'], c_double, 'U2' ),
              ( ['in'], c_double, 'U3' ),
              ( ['in'], c_int, 'NonlinearOption3' ),
              ( ['in', 'optional'], c_int, 'SpringOption', 1 ),
              ( ['in', 'optional'], BSTR, 'SoilProfile', '' ),
              ( ['in', 'optional'], c_double, 'EndLengthRatio', 0.0 ),
              ( ['in', 'optional'], c_double, 'Period', 0.0 ),
              ( ['in', 'optional'], c_int, 'color', 0 ),
              ( ['in', 'optional'], BSTR, 'notes', '' ),
              ( ['in', 'optional'], BSTR, 'iGUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cPropAreaSpring implementation
##class cPropAreaSpring_Impl(object):
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetAreaSpringProp(self, Name):
##        '-no docstring-'
##        #return U1, U2, U3, NonlinearOption3, SpringOption, SoilProfile, EndLengthRatio, Period, color, notes, iGUID, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def SetAreaSpringProp(self, Name, U1, U2, U3, NonlinearOption3, SpringOption, SoilProfile, EndLengthRatio, Period, color, notes, iGUID):
##        '-no docstring-'
##        #return pRetVal
##


# values for enumeration 'eBridgeObjectType'
eBridgeObjectType_General = 0
eBridgeObjectType_Segmental = 1
eBridgeObjectType = c_int # enum
class StartService(CoClass):
    _reg_clsid_ = GUID('{11A3BBC3-F4B4-3C43-9C93-90CA3006F80B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{542F7A9D-3A7D-4061-97B3-3A1276FF83BD}', 1, 0)
class _StartService(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{C9D2950B-7584-3924-B9C5-C454EDB95613}')
    _idlflags_ = ['hidden', 'dual', 'oleautomation']
StartService._com_interfaces_ = [_StartService, comtypes.gen._BED7F4EA_1A96_11D2_8F08_00A0C9A6186D_0_2_4._Object]

class cDCoChinese_2010(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{8B3B4B91-3406-44D3-93AB-29F9EC824E66}')
    _idlflags_ = ['dual', 'oleautomation']
cDCoChinese_2010._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDCoChinese_2010 implementation
##class cDCoChinese_2010_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cCaseHyperStatic(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{9759BDDE-079E-4331-9ECA-FCC294DCD09F}')
    _idlflags_ = ['dual', 'oleautomation']
cCaseHyperStatic._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetBaseCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'HyperStaticCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'SetBaseCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'HyperStaticCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cCaseHyperStatic implementation
##class cCaseHyperStatic_Impl(object):
##    def GetBaseCase(self, Name):
##        '-no docstring-'
##        #return HyperStaticCase, pRetVal
##
##    def SetBaseCase(self, Name, HyperStaticCase):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCase(self, Name):
##        '-no docstring-'
##        #return pRetVal
##

_StartService._methods_ = [
]
################################################################
## code template for _StartService implementation
##class _StartService_Impl(object):

class cOAPI(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{BDD8C3BA-07EA-4475-9E48-7C1B7EAFB8AF}')
    _idlflags_ = ['dual', 'oleautomation']
class cSapModel(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{F0DB2843-BBD6-4482-B859-00FBE390077F}')
    _idlflags_ = ['dual', 'oleautomation']
cOAPI._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'ApplicationExit',
              ( ['in'], VARIANT_BOOL, 'FileSave' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'SapModel',
              ( ['out', 'retval'], POINTER(POINTER(cSapModel)), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetOAPIVersionNumber',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'Hide',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'Unhide',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'Visible',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'SetAsActiveObject',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'UnsetAsActiveObject',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'ApplicationStart',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cOAPI implementation
##class cOAPI_Impl(object):
##    def ApplicationExit(self, FileSave):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SapModel(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetOAPIVersionNumber(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def Hide(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def Unhide(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def Visible(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetAsActiveObject(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def UnsetAsActiveObject(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def ApplicationStart(self):
##        '-no docstring-'
##        #return pRetVal
##

class cDStSP16_13330_2017(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{48C48622-BADA-4E06-BB96-58FAAE32EB93}')
    _idlflags_ = ['dual', 'oleautomation']
cDStSP16_13330_2017._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDStSP16_13330_2017 implementation
##class cDStSP16_13330_2017_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##


# values for enumeration 'eWallSpandrelRebarLayerType'
eWallSpandrelRebarLayerType_Horizontal_Top_Total = 1
eWallSpandrelRebarLayerType_Horizontal_Bottom_Total = 2
eWallSpandrelRebarLayerType_Horizontal_Distributed_Eachface = 3
eWallSpandrelRebarLayerType_Vertical_Ties_Distributed = 4
eWallSpandrelRebarLayerType_Diagonal_Each = 5
eWallSpandrelRebarLayerType = c_int # enum
class cDStAustralian_AS4100_98(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{46883FE3-67F0-4286-A119-913FA272BA9F}')
    _idlflags_ = ['dual', 'oleautomation']
cDStAustralian_AS4100_98._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDStAustralian_AS4100_98 implementation
##class cDStAustralian_AS4100_98_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cTower(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{B81C2252-779B-4228-B5F4-F979434BB692}')
    _idlflags_ = ['dual', 'oleautomation']
cTower._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'AddCopyOfTower',
              ( ['in'], BSTR, 'TowerName' ),
              ( ['in'], BSTR, 'NewTowerName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'AddNewTower',
              ( ['in'], BSTR, 'TowerName' ),
              ( ['in'], c_int, 'NumberStories' ),
              ( ['in'], c_double, 'TypicalStoryHeight' ),
              ( ['in'], c_double, 'BotttomStoryHeight' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'AllowMultipleTowers',
              ( ['in'], VARIANT_BOOL, 'AllowMultTowers' ),
              ( ['in', 'optional'], BSTR, 'RetainedTower', '' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Combine', True ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'DeleteTower',
              ( ['in'], BSTR, 'TowerName' ),
              ( ['in'], VARIANT_BOOL, 'Associate' ),
              ( ['in', 'optional'], BSTR, 'AssocWithTower', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetActiveTower',
              ( ['in', 'out'], POINTER(BSTR), 'TowerName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'RenameTower',
              ( ['in'], BSTR, 'TowerName' ),
              ( ['in'], BSTR, 'NewTowerName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'SetActiveTower',
              ( ['in'], BSTR, 'TowerName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cTower implementation
##class cTower_Impl(object):
##    def AddCopyOfTower(self, TowerName, NewTowerName):
##        '-no docstring-'
##        #return pRetVal
##
##    def AddNewTower(self, TowerName, NumberStories, TypicalStoryHeight, BotttomStoryHeight):
##        '-no docstring-'
##        #return pRetVal
##
##    def AllowMultipleTowers(self, AllowMultTowers, RetainedTower, Combine):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteTower(self, TowerName, Associate, AssocWithTower):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetActiveTower(self):
##        '-no docstring-'
##        #return TowerName, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def RenameTower(self, TowerName, NewTowerName):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetActiveTower(self, TowerName):
##        '-no docstring-'
##        #return pRetVal
##

class cDCoMexican_RCDF_2017(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{3A09968A-4E3D-4602-B870-FF5D320E00F8}')
    _idlflags_ = ['dual', 'oleautomation']
cDCoMexican_RCDF_2017._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDCoMexican_RCDF_2017 implementation
##class cDCoMexican_RCDF_2017_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cCombo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{A7358245-1148-4351-BBEA-B8C46781D7DD}')
    _idlflags_ = ['dual', 'oleautomation']

# values for enumeration 'eCNameType'
eCNameType_LoadCase = 0
eCNameType_LoadCombo = 1
eCNameType = c_int # enum
cCombo._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'Add',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ComboType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'AddDesignDefaultCombos',
              ( ['in'], VARIANT_BOOL, 'DesignSteel' ),
              ( ['in'], VARIANT_BOOL, 'DesignConcrete' ),
              ( ['in'], VARIANT_BOOL, 'DesignAluminum' ),
              ( ['in'], VARIANT_BOOL, 'DesignColdFormed' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'DeleteCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eCNameType, 'CNameType' ),
              ( ['in'], BSTR, 'CName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetCaseList',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(eCNameType)), 'CNameType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'SetCaseList',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(eCNameType), 'CNameType' ),
              ( ['in'], BSTR, 'CName' ),
              ( ['in'], c_double, 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'GetTypeOAPI',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'ComboType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'GetCaseList_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(eCNameType)), 'CNameType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ModeNumber' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'SetCaseList_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(eCNameType), 'CNameType' ),
              ( ['in'], BSTR, 'CName' ),
              ( ['in'], c_int, 'ModeNumber' ),
              ( ['in'], c_double, 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetTypeCombo',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'ComboType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cCombo implementation
##class cCombo_Impl(object):
##    def Add(self, Name, ComboType):
##        '-no docstring-'
##        #return pRetVal
##
##    def AddDesignDefaultCombos(self, DesignSteel, DesignConcrete, DesignAluminum, DesignColdFormed):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteCase(self, Name, CNameType, CName):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetCaseList(self, Name):
##        '-no docstring-'
##        #return NumberItems, CNameType, CName, SF, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def SetCaseList(self, Name, CName, SF):
##        '-no docstring-'
##        #return CNameType, pRetVal
##
##    def GetTypeOAPI(self, Name):
##        '-no docstring-'
##        #return ComboType, pRetVal
##
##    def GetCaseList_1(self, Name):
##        '-no docstring-'
##        #return NumberItems, CNameType, CName, ModeNumber, SF, pRetVal
##
##    def SetCaseList_1(self, Name, CName, ModeNumber, SF):
##        '-no docstring-'
##        #return CNameType, pRetVal
##
##    def GetTypeCombo(self, Name):
##        '-no docstring-'
##        #return ComboType, pRetVal
##

class cCaseBuckling(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{D67F622B-DEA3-4618-AAD2-994BD3460F7D}')
    _idlflags_ = ['dual', 'oleautomation']
cCaseBuckling._methods_ = [
]
################################################################
## code template for cCaseBuckling implementation
##class cCaseBuckling_Impl(object):

class cDStEurocode_3_2005(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{DBFA67A5-BCEB-4D70-9896-87600CEBA41F}')
    _idlflags_ = ['dual', 'oleautomation']
cDStEurocode_3_2005._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDStEurocode_3_2005 implementation
##class cDStEurocode_3_2005_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cDStChinese_2018(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{A09A57CB-E3D1-4966-BAF4-365F2C2598A8}')
    _idlflags_ = ['dual', 'oleautomation']
cDStChinese_2018._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDStChinese_2018 implementation
##class cDStChinese_2018_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cAnalysisResults(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{7603BF75-2A18-421B-8660-8B4D2695C4AC}')
    _idlflags_ = ['dual', 'oleautomation']
class cAnalysisResultsSetup(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{751DB83E-CF85-4179-B172-D8EFDCE7B056}')
    _idlflags_ = ['dual', 'oleautomation']
cAnalysisResults._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'AreaForceShell',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointElm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F11' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F22' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F12' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FMax' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FMin' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FAngle' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FVM' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M11' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M22' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M12' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MMax' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MMin' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MAngle' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V13' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V23' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VMax' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VAngle' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'AreaJointForceShell',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointElm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'AreaStressShell',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointElm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S11Top' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S22Top' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S12Top' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SMaxTop' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SMinTop' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SAngleTop' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SVMTop' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S11Bot' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S22Bot' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S12Bot' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SMaxBot' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SMinBot' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SAngleBot' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SVMBot' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S13Avg' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S23Avg' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SMaxAvg' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SAngleAvg' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'AreaStressShellLayered',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Layer' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'IntPtNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'IntPtLoc' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointElm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S11' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S22' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S12' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SMax' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SMin' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SAngle' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SVM' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S13Avg' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S23Avg' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SMaxAvg' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SAngleAvg' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'AssembledJointMass',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointElm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'BaseReact',
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ParamMy' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MZ' ),
              ( ['in', 'out'], POINTER(c_double), 'GX' ),
              ( ['in', 'out'], POINTER(c_double), 'GY' ),
              ( ['in', 'out'], POINTER(c_double), 'GZ' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'BaseReactWithCentroid',
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ParamMy' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MZ' ),
              ( ['in', 'out'], POINTER(c_double), 'GX' ),
              ( ['in', 'out'], POINTER(c_double), 'GY' ),
              ( ['in', 'out'], POINTER(c_double), 'GZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'XCentroidForFX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'YCentroidForFX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ZCentroidForFX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'XCentroidForFY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'YCentroidForFY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ZCentroidForFY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'XCentroidForFZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'YCentroidForFZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ZCentroidForFZ' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'BucklingFactor',
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Factor' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'FrameForce',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ObjSta' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ElmSta' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'P' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'FrameJointForce',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointElm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GeneralizedDispl',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GD' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'DType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'JointAcc',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'JointAccAbs',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'JointDispl',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'JointDisplAbs',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'JointReact',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'JointVel',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'JointVelAbs',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'LinkDeformation',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'LinkForce',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointElm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'P' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'LinkJointForce',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointElm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'ModalLoadParticipationRatios',
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ItemType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Item' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Stat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dyn' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(23)], HRESULT, 'ModalParticipatingMassRatios',
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Period' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'UX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'UY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'UZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SumUX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SumUY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SumUZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SumRX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SumRY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SumRZ' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(24)], HRESULT, 'ModalParticipationFactors',
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Period' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'UX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'UY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'UZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ModalMass' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ModalStiff' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(25)], HRESULT, 'ModalPeriod',
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Period' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Frequency' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CircFreq' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EigenValue' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(26)], HRESULT, 'ModeShape',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(27)], HRESULT, 'PanelZoneDeformation',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(28)], HRESULT, 'PanelZoneForce',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointElm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'P' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(29)], HRESULT, 'SectionCutAnalysis',
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SCut' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(30)], HRESULT, 'SectionCutDesign',
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SCut' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'P' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(31), 'propget'], HRESULT, 'Setup',
              ( ['out', 'retval'], POINTER(POINTER(cAnalysisResultsSetup)), 'pRetVal' )),
    COMMETHOD([dispid(52)], HRESULT, 'AreaStrainShell',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointElm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'e11top' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'e22top' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'g12top' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'emaxtop' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'emintop' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'eangletop' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'evmtop' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'e11bot' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'e22bot' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'g12bot' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'emaxbot' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'eminbot' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'eanglebot' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'evmbot' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'g13avg' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'g23avg' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'gmaxavg' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'gangleavg' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(53)], HRESULT, 'AreaStrainShellLayered',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eItemTypeElm, 'ItemTypeElm' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Layer' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'IntPtNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'IntPtLoc' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointElm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'E11' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'E22' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'G12' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EMax' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EMin' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EAngle' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EVM' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'g13avg' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'g23avg' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'gmaxavg' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'gangleavg' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(44)], HRESULT, 'PierForce',
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StoryName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PierName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Location' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'P' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(45)], HRESULT, 'SpandrelForce',
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StoryName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SpandrelName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Location' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'P' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(47)], HRESULT, 'JointDrifts',
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Story' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Label' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DisplacementX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DisplacementY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DriftX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DriftY' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(48)], HRESULT, 'StoryDrifts',
              ( ['in', 'out'], POINTER(c_int), 'NumberResults' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Story' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Direction' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Drift' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Label' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cAnalysisResults implementation
##class cAnalysisResults_Impl(object):
##    def AreaForceShell(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Obj, Elm, PointElm, LoadCase, StepType, StepNum, F11, F22, F12, FMax, FMin, FAngle, FVM, M11, M22, M12, MMax, MMin, MAngle, V13, V23, VMax, VAngle, pRetVal
##
##    def AreaJointForceShell(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Obj, Elm, PointElm, LoadCase, StepType, StepNum, F1, F2, F3, M1, M2, M3, pRetVal
##
##    def AreaStressShell(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Obj, Elm, PointElm, LoadCase, StepType, StepNum, S11Top, S22Top, S12Top, SMaxTop, SMinTop, SAngleTop, SVMTop, S11Bot, S22Bot, S12Bot, SMaxBot, SMinBot, SAngleBot, SVMBot, S13Avg, S23Avg, SMaxAvg, SAngleAvg, pRetVal
##
##    def AreaStressShellLayered(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Obj, Elm, Layer, IntPtNum, IntPtLoc, PointElm, LoadCase, StepType, StepNum, S11, S22, S12, SMax, SMin, SAngle, SVM, S13Avg, S23Avg, SMaxAvg, SAngleAvg, pRetVal
##
##    def AssembledJointMass(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, PointElm, U1, U2, U3, R1, R2, R3, pRetVal
##
##    def BaseReact(self):
##        '-no docstring-'
##        #return NumberResults, LoadCase, StepType, StepNum, FX, FY, FZ, MX, ParamMy, MZ, GX, GY, GZ, pRetVal
##
##    def BaseReactWithCentroid(self):
##        '-no docstring-'
##        #return NumberResults, LoadCase, StepType, StepNum, FX, FY, FZ, MX, ParamMy, MZ, GX, GY, GZ, XCentroidForFX, YCentroidForFX, ZCentroidForFX, XCentroidForFY, YCentroidForFY, ZCentroidForFY, XCentroidForFZ, YCentroidForFZ, ZCentroidForFZ, pRetVal
##
##    def BucklingFactor(self):
##        '-no docstring-'
##        #return NumberResults, LoadCase, StepType, StepNum, Factor, pRetVal
##
##    def FrameForce(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Obj, ObjSta, Elm, ElmSta, LoadCase, StepType, StepNum, P, V2, V3, T, M2, M3, pRetVal
##
##    def FrameJointForce(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Obj, Elm, PointElm, LoadCase, StepType, StepNum, F1, F2, F3, M1, M2, M3, pRetVal
##
##    def GeneralizedDispl(self, Name):
##        '-no docstring-'
##        #return NumberResults, GD, LoadCase, StepType, StepNum, DType, Value, pRetVal
##
##    def JointAcc(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Obj, Elm, LoadCase, StepType, StepNum, U1, U2, U3, R1, R2, R3, pRetVal
##
##    def JointAccAbs(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Obj, Elm, LoadCase, StepType, StepNum, U1, U2, U3, R1, R2, R3, pRetVal
##
##    def JointDispl(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Obj, Elm, LoadCase, StepType, StepNum, U1, U2, U3, R1, R2, R3, pRetVal
##
##    def JointDisplAbs(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Obj, Elm, LoadCase, StepType, StepNum, U1, U2, U3, R1, R2, R3, pRetVal
##
##    def JointReact(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Obj, Elm, LoadCase, StepType, StepNum, F1, F2, F3, M1, M2, M3, pRetVal
##
##    def JointVel(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Obj, Elm, LoadCase, StepType, StepNum, U1, U2, U3, R1, R2, R3, pRetVal
##
##    def JointVelAbs(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Obj, Elm, LoadCase, StepType, StepNum, U1, U2, U3, R1, R2, R3, pRetVal
##
##    def LinkDeformation(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Obj, Elm, LoadCase, StepType, StepNum, U1, U2, U3, R1, R2, R3, pRetVal
##
##    def LinkForce(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Obj, Elm, PointElm, LoadCase, StepType, StepNum, P, V2, V3, T, M2, M3, pRetVal
##
##    def LinkJointForce(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Obj, Elm, PointElm, LoadCase, StepType, StepNum, F1, F2, F3, M1, M2, M3, pRetVal
##
##    def ModalLoadParticipationRatios(self):
##        '-no docstring-'
##        #return NumberResults, LoadCase, ItemType, Item, Stat, Dyn, pRetVal
##
##    def ModalParticipatingMassRatios(self):
##        '-no docstring-'
##        #return NumberResults, LoadCase, StepType, StepNum, Period, UX, UY, UZ, SumUX, SumUY, SumUZ, RX, RY, RZ, SumRX, SumRY, SumRZ, pRetVal
##
##    def ModalParticipationFactors(self):
##        '-no docstring-'
##        #return NumberResults, LoadCase, StepType, StepNum, Period, UX, UY, UZ, RX, RY, RZ, ModalMass, ModalStiff, pRetVal
##
##    def ModalPeriod(self):
##        '-no docstring-'
##        #return NumberResults, LoadCase, StepType, StepNum, Period, Frequency, CircFreq, EigenValue, pRetVal
##
##    def ModeShape(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Obj, Elm, LoadCase, StepType, StepNum, U1, U2, U3, R1, R2, R3, pRetVal
##
##    def PanelZoneDeformation(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Elm, LoadCase, StepType, StepNum, U1, U2, U3, R1, R2, R3, pRetVal
##
##    def PanelZoneForce(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Elm, PointElm, LoadCase, StepType, StepNum, P, V2, V3, T, M2, M3, pRetVal
##
##    def SectionCutAnalysis(self):
##        '-no docstring-'
##        #return NumberResults, SCut, LoadCase, StepType, StepNum, F1, F2, F3, M1, M2, M3, pRetVal
##
##    def SectionCutDesign(self):
##        '-no docstring-'
##        #return NumberResults, SCut, LoadCase, StepType, StepNum, P, V2, V3, T, M2, M3, pRetVal
##
##    @property
##    def Setup(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def AreaStrainShell(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Obj, Elm, PointElm, LoadCase, StepType, StepNum, e11top, e22top, g12top, emaxtop, emintop, eangletop, evmtop, e11bot, e22bot, g12bot, emaxbot, eminbot, eanglebot, evmbot, g13avg, g23avg, gmaxavg, gangleavg, pRetVal
##
##    def AreaStrainShellLayered(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberResults, Obj, Elm, Layer, IntPtNum, IntPtLoc, PointElm, LoadCase, StepType, StepNum, E11, E22, G12, EMax, EMin, EAngle, EVM, g13avg, g23avg, gmaxavg, gangleavg, pRetVal
##
##    def PierForce(self):
##        '-no docstring-'
##        #return NumberResults, StoryName, PierName, LoadCase, Location, P, V2, V3, T, M2, M3, pRetVal
##
##    def SpandrelForce(self):
##        '-no docstring-'
##        #return NumberResults, StoryName, SpandrelName, LoadCase, Location, P, V2, V3, T, M2, M3, pRetVal
##
##    def JointDrifts(self):
##        '-no docstring-'
##        #return NumberResults, Story, Label, Name, LoadCase, StepType, StepNum, DisplacementX, DisplacementY, DriftX, DriftY, pRetVal
##
##    def StoryDrifts(self):
##        '-no docstring-'
##        #return NumberResults, Story, LoadCase, StepType, StepNum, Direction, Drift, Label, X, Y, Z, pRetVal
##

class cAreaElm(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{DF6D6666-2994-4BE3-99BD-8852EF105329}')
    _idlflags_ = ['dual', 'oleautomation']
class cAreaObj(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{ED2DB520-52D4-4B27-8838-A5E9C271F8C3}')
    _idlflags_ = ['dual', 'oleautomation']
class cConstraint(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{99156786-2A94-4CAD-819F-E91D1635D96B}')
    _idlflags_ = ['dual', 'oleautomation']
class cDesignConcrete(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{3E3E4806-BB37-4D78-99A0-20436F21A0A8}')
    _idlflags_ = ['dual', 'oleautomation']
class cDesignSteel(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{A7A9681C-52C4-46EA-9E6E-8C33047E5F40}')
    _idlflags_ = ['dual', 'oleautomation']
class cEditArea(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{F7A0F69D-DFDD-41F6-AF32-76C5B8A826B6}')
    _idlflags_ = ['dual', 'oleautomation']
class cEditFrame(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{E1EBB47D-1B93-4B93-A010-26604126D7A8}')
    _idlflags_ = ['dual', 'oleautomation']
class cEditGeneral(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{09861929-E810-487A-9228-51B378FD3CDF}')
    _idlflags_ = ['dual', 'oleautomation']
class cEditPoint(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{6A5C2FED-ECF4-4F61-8139-F2B472516310}')
    _idlflags_ = ['dual', 'oleautomation']
class cFile(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{5684E943-33CC-4D03-8AFE-8BBEFC56D4C9}')
    _idlflags_ = ['dual', 'oleautomation']
class cFrameObj(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{F87E3A66-8381-4202-897F-46683A8477D4}')
    _idlflags_ = ['dual', 'oleautomation']
class cGenDispl(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{8A69B84B-5E5B-4F2C-BFA9-B7A558A9D310}')
    _idlflags_ = ['dual', 'oleautomation']

# values for enumeration 'eUnits'
eUnits_lb_in_F = 1
eUnits_lb_ft_F = 2
eUnits_kip_in_F = 3
eUnits_kip_ft_F = 4
eUnits_kN_mm_C = 5
eUnits_kN_m_C = 6
eUnits_kgf_mm_C = 7
eUnits_kgf_m_C = 8
eUnits_N_mm_C = 9
eUnits_N_m_C = 10
eUnits_Ton_mm_C = 11
eUnits_Ton_m_C = 12
eUnits_kN_cm_C = 13
eUnits_kgf_cm_C = 14
eUnits_N_cm_C = 15
eUnits_Ton_cm_C = 16
eUnits = c_int # enum
class cGroup(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{F6CFA75C-835A-4E25-8F72-A60227D4A975}')
    _idlflags_ = ['dual', 'oleautomation']
class cLineElm(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{4DC0241A-E192-47C3-8D65-70EAA4E3E2F5}')
    _idlflags_ = ['dual', 'oleautomation']
class cLinkElm(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{8DF99C3E-D5DD-4A5A-84EC-53B7FDEFB0CE}')
    _idlflags_ = ['dual', 'oleautomation']
class cLinkObj(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{A28B3E57-3C5E-4E9E-8C57-E3BDF928A8D1}')
    _idlflags_ = ['dual', 'oleautomation']
class cLoadCases(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{2C074D0A-041A-4A19-A068-0F947DE89054}')
    _idlflags_ = ['dual', 'oleautomation']
class cOptions(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{F1600512-D795-4A2F-98C3-2D1615542153}')
    _idlflags_ = ['dual', 'oleautomation']
class cPattern(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{974A9F01-AA67-402C-B95D-EC3892AB317C}')
    _idlflags_ = ['dual', 'oleautomation']
class cPointObj(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{6674645D-E89A-459F-A446-8DB204577C60}')
    _idlflags_ = ['dual', 'oleautomation']
class cPropArea(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{D5999846-BC7A-4F31-9D16-526F5D5A6945}')
    _idlflags_ = ['dual', 'oleautomation']
class cPropFrame(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{88AAFE1E-4F8C-43EE-B0BD-3CD28E64D7F8}')
    _idlflags_ = ['dual', 'oleautomation']
class cPropLink(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{CE5498CB-F332-4978-B0A4-443D30778BA6}')
    _idlflags_ = ['dual', 'oleautomation']
class cPropMaterial(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{47EC79C1-AE4A-4684-BF82-2CD5DC817341}')
    _idlflags_ = ['dual', 'oleautomation']
class cPropRebar(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{75B06D0E-A03B-4E17-98D5-02D0C5F90638}')
    _idlflags_ = ['dual', 'oleautomation']
class cPropTendon(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{6C67F913-98C9-4236-ACE6-941D6B6571F6}')
    _idlflags_ = ['dual', 'oleautomation']
class cSelect(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{73239643-902C-4AC2-ADDB-6CC919997EB0}')
    _idlflags_ = ['dual', 'oleautomation']
class cDesignResults(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{965FB3A1-8ABF-4B3A-9518-5EFA25681606}')
    _idlflags_ = ['dual', 'oleautomation']
class cStory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{5FAFC96F-2286-4C5C-A576-B40AA0727125}')
    _idlflags_ = ['dual', 'oleautomation']
class cDiaphragm(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{0597C1A0-A026-4DD7-92E0-833257F52803}')
    _idlflags_ = ['dual', 'oleautomation']
class cDetailing(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{95AF59DE-08D7-4338-A42C-5CF22C36EADB}')
    _idlflags_ = ['dual', 'oleautomation']
class cPropPointSpring(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{3E4A7586-D43F-4CE5-8BE3-4273393FC542}')
    _idlflags_ = ['dual', 'oleautomation']
class cDesignConcreteSlab(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{AD093A50-7FFD-42F8-B1DD-22FAA817917D}')
    _idlflags_ = ['dual', 'oleautomation']
class cDesignShearWall(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{F1C53BF1-0357-4DAB-BB1B-EA1749ED14D2}')
    _idlflags_ = ['dual', 'oleautomation']
class cDatabaseTables(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{336B5859-2CF7-4C67-8A7B-41217E4E2C4A}')
    _idlflags_ = ['dual', 'oleautomation']
cSapModel._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Analyze',
              ( ['out', 'retval'], POINTER(POINTER(cAnalyze)), 'pRetVal' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'AreaElm',
              ( ['out', 'retval'], POINTER(POINTER(cAreaElm)), 'pRetVal' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'AreaObj',
              ( ['out', 'retval'], POINTER(POINTER(cAreaObj)), 'pRetVal' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'ConstraintDef',
              ( ['out', 'retval'], POINTER(POINTER(cConstraint)), 'pRetVal' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'DesignConcrete',
              ( ['out', 'retval'], POINTER(POINTER(cDesignConcrete)), 'pRetVal' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'DesignSteel',
              ( ['out', 'retval'], POINTER(POINTER(cDesignSteel)), 'pRetVal' )),
    COMMETHOD([dispid(9), 'propget'], HRESULT, 'EditArea',
              ( ['out', 'retval'], POINTER(POINTER(cEditArea)), 'pRetVal' )),
    COMMETHOD([dispid(10), 'propget'], HRESULT, 'EditFrame',
              ( ['out', 'retval'], POINTER(POINTER(cEditFrame)), 'pRetVal' )),
    COMMETHOD([dispid(11), 'propget'], HRESULT, 'EditGeneral',
              ( ['out', 'retval'], POINTER(POINTER(cEditGeneral)), 'pRetVal' )),
    COMMETHOD([dispid(12), 'propget'], HRESULT, 'EditPoint',
              ( ['out', 'retval'], POINTER(POINTER(cEditPoint)), 'pRetVal' )),
    COMMETHOD([dispid(13), 'propget'], HRESULT, 'File',
              ( ['out', 'retval'], POINTER(POINTER(cFile)), 'pRetVal' )),
    COMMETHOD([dispid(14), 'propget'], HRESULT, 'FrameObj',
              ( ['out', 'retval'], POINTER(POINTER(cFrameObj)), 'pRetVal' )),
    COMMETHOD([dispid(15), 'propget'], HRESULT, 'Func',
              ( ['out', 'retval'], POINTER(POINTER(cFunction)), 'pRetVal' )),
    COMMETHOD([dispid(16), 'propget'], HRESULT, 'GDispl',
              ( ['out', 'retval'], POINTER(POINTER(cGenDispl)), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'GetDatabaseUnits',
              ( ['out', 'retval'], POINTER(eUnits), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'GetMergeTol',
              ( ['in', 'out'], POINTER(c_double), 'MergeTol' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'GetModelFilename',
              ( ['in', 'optional'], VARIANT_BOOL, 'IncludePath', True ),
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'GetModelFilepath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'GetModelIsLocked',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'GetPresentCoordSystem',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(23)], HRESULT, 'GetPresentUnits',
              ( ['out', 'retval'], POINTER(eUnits), 'pRetVal' )),
    COMMETHOD([dispid(98)], HRESULT, 'GetProgramInfo',
              ( ['in', 'out'], POINTER(BSTR), 'ProgramName' ),
              ( ['in', 'out'], POINTER(BSTR), 'ProgramVersion' ),
              ( ['in', 'out'], POINTER(BSTR), 'ProgramLevel' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(24)], HRESULT, 'GetProjectInfo',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Item' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Data' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(26)], HRESULT, 'GetVersion',
              ( ['in', 'out'], POINTER(BSTR), 'Version' ),
              ( ['in', 'out'], POINTER(c_double), 'MyVersionNumber' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(27), 'propget'], HRESULT, 'GroupDef',
              ( ['out', 'retval'], POINTER(POINTER(cGroup)), 'pRetVal' )),
    COMMETHOD([dispid(28)], HRESULT, 'InitializeNewModel',
              ( ['in', 'optional'], eUnits, 'Units', 3 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(29), 'propget'], HRESULT, 'LineElm',
              ( ['out', 'retval'], POINTER(POINTER(cLineElm)), 'pRetVal' )),
    COMMETHOD([dispid(30), 'propget'], HRESULT, 'LinkElm',
              ( ['out', 'retval'], POINTER(POINTER(cLinkElm)), 'pRetVal' )),
    COMMETHOD([dispid(31), 'propget'], HRESULT, 'LinkObj',
              ( ['out', 'retval'], POINTER(POINTER(cLinkObj)), 'pRetVal' )),
    COMMETHOD([dispid(32), 'propget'], HRESULT, 'LoadCases',
              ( ['out', 'retval'], POINTER(POINTER(cLoadCases)), 'pRetVal' )),
    COMMETHOD([dispid(33), 'propget'], HRESULT, 'LoadPatterns',
              ( ['out', 'retval'], POINTER(POINTER(cLoadPatterns)), 'pRetVal' )),
    COMMETHOD([dispid(34), 'propget'], HRESULT, 'Options',
              ( ['out', 'retval'], POINTER(POINTER(cOptions)), 'pRetVal' )),
    COMMETHOD([dispid(35), 'propget'], HRESULT, 'PatternDef',
              ( ['out', 'retval'], POINTER(POINTER(cPattern)), 'pRetVal' )),
    COMMETHOD([dispid(36), 'propget'], HRESULT, 'PointElm',
              ( ['out', 'retval'], POINTER(POINTER(cPointElm)), 'pRetVal' )),
    COMMETHOD([dispid(37), 'propget'], HRESULT, 'PointObj',
              ( ['out', 'retval'], POINTER(POINTER(cPointObj)), 'pRetVal' )),
    COMMETHOD([dispid(38), 'propget'], HRESULT, 'PropArea',
              ( ['out', 'retval'], POINTER(POINTER(cPropArea)), 'pRetVal' )),
    COMMETHOD([dispid(39), 'propget'], HRESULT, 'PropFrame',
              ( ['out', 'retval'], POINTER(POINTER(cPropFrame)), 'pRetVal' )),
    COMMETHOD([dispid(40), 'propget'], HRESULT, 'PropLink',
              ( ['out', 'retval'], POINTER(POINTER(cPropLink)), 'pRetVal' )),
    COMMETHOD([dispid(41), 'propget'], HRESULT, 'PropMaterial',
              ( ['out', 'retval'], POINTER(POINTER(cPropMaterial)), 'pRetVal' )),
    COMMETHOD([dispid(42), 'propget'], HRESULT, 'PropRebar',
              ( ['out', 'retval'], POINTER(POINTER(cPropRebar)), 'pRetVal' )),
    COMMETHOD([dispid(43), 'propget'], HRESULT, 'PropTendon',
              ( ['out', 'retval'], POINTER(POINTER(cPropTendon)), 'pRetVal' )),
    COMMETHOD([dispid(44), 'propget'], HRESULT, 'RespCombo',
              ( ['out', 'retval'], POINTER(POINTER(cCombo)), 'pRetVal' )),
    COMMETHOD([dispid(45), 'propget'], HRESULT, 'Results',
              ( ['out', 'retval'], POINTER(POINTER(cAnalysisResults)), 'pRetVal' )),
    COMMETHOD([dispid(46), 'propget'], HRESULT, 'SelectObj',
              ( ['out', 'retval'], POINTER(POINTER(cSelect)), 'pRetVal' )),
    COMMETHOD([dispid(47)], HRESULT, 'SetMergeTol',
              ( ['in'], c_double, 'MergeTol' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(48)], HRESULT, 'SetModelIsLocked',
              ( ['in'], VARIANT_BOOL, 'Lockit' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(50)], HRESULT, 'SetPresentUnits',
              ( ['in'], eUnits, 'Units' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(51)], HRESULT, 'SetProjectInfo',
              ( ['in'], BSTR, 'Item' ),
              ( ['in'], BSTR, 'Data' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(53), 'propget'], HRESULT, 'TendonObj',
              ( ['out', 'retval'], POINTER(POINTER(cTendonObj)), 'pRetVal' )),
    COMMETHOD([dispid(54), 'propget'], HRESULT, 'View',
              ( ['out', 'retval'], POINTER(POINTER(cView)), 'pRetVal' )),
    COMMETHOD([dispid(97), 'propget'], HRESULT, 'DesignResults',
              ( ['out', 'retval'], POINTER(POINTER(cDesignResults)), 'pRetVal' )),
    COMMETHOD([dispid(8), 'propget'], HRESULT, 'DesignCompositeBeam',
              ( ['out', 'retval'], POINTER(POINTER(cDesignCompositeBeam)), 'pRetVal' )),
    COMMETHOD([dispid(55), 'propget'], HRESULT, 'GridSys',
              ( ['out', 'retval'], POINTER(POINTER(cGridSys)), 'pRetVal' )),
    COMMETHOD([dispid(56), 'propget'], HRESULT, 'Story',
              ( ['out', 'retval'], POINTER(POINTER(cStory)), 'pRetVal' )),
    COMMETHOD([dispid(57), 'propget'], HRESULT, 'Tower',
              ( ['out', 'retval'], POINTER(POINTER(cTower)), 'pRetVal' )),
    COMMETHOD([dispid(58)], HRESULT, 'GetDatabaseUnits_2',
              ( ['in', 'out'], POINTER(eForce), 'forceUnits' ),
              ( ['in', 'out'], POINTER(eLength), 'lengthUnits' ),
              ( ['in', 'out'], POINTER(eTemperature), 'temperatureUnits' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(59)], HRESULT, 'GetPresentUnits_2',
              ( ['in', 'out'], POINTER(eForce), 'forceUnits' ),
              ( ['in', 'out'], POINTER(eLength), 'lengthUnits' ),
              ( ['in', 'out'], POINTER(eTemperature), 'temperatureUnits' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(60)], HRESULT, 'SetPresentUnits_2',
              ( ['in'], eForce, 'forceUnits' ),
              ( ['in'], eLength, 'lengthUnits' ),
              ( ['in'], eTemperature, 'temperatureUnits' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(61), 'propget'], HRESULT, 'Diaphragm',
              ( ['out', 'retval'], POINTER(POINTER(cDiaphragm)), 'pRetVal' )),
    COMMETHOD([dispid(62)], HRESULT, 'TreeIsUpdateSuspended',
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IsSuspended' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(63)], HRESULT, 'TreeResumeUpdateData',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(64)], HRESULT, 'TreeSuspendUpdateData',
              ( ['in'], VARIANT_BOOL, 'updateAtResume' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(88), 'propget'], HRESULT, 'PierLabel',
              ( ['out', 'retval'], POINTER(POINTER(cPierLabel)), 'pRetVal' )),
    COMMETHOD([dispid(89), 'propget'], HRESULT, 'SpandrelLabel',
              ( ['out', 'retval'], POINTER(POINTER(cSpandrelLabel)), 'pRetVal' )),
    COMMETHOD([dispid(90), 'propget'], HRESULT, 'Detailing',
              ( ['out', 'retval'], POINTER(POINTER(cDetailing)), 'pRetVal' )),
    COMMETHOD([dispid(92), 'propget'], HRESULT, 'PropPointSpring',
              ( ['out', 'retval'], POINTER(POINTER(cPropPointSpring)), 'pRetVal' )),
    COMMETHOD([dispid(93), 'propget'], HRESULT, 'PropLineSpring',
              ( ['out', 'retval'], POINTER(POINTER(cPropLineSpring)), 'pRetVal' )),
    COMMETHOD([dispid(94), 'propget'], HRESULT, 'PropAreaSpring',
              ( ['out', 'retval'], POINTER(POINTER(cPropAreaSpring)), 'pRetVal' )),
    COMMETHOD([dispid(95), 'propget'], HRESULT, 'DesignConcreteSlab',
              ( ['out', 'retval'], POINTER(POINTER(cDesignConcreteSlab)), 'pRetVal' )),
    COMMETHOD([dispid(96), 'propget'], HRESULT, 'DesignShearWall',
              ( ['out', 'retval'], POINTER(POINTER(cDesignShearWall)), 'pRetVal' )),
    COMMETHOD([dispid(99), 'propget'], HRESULT, 'DatabaseTables',
              ( ['out', 'retval'], POINTER(POINTER(cDatabaseTables)), 'pRetVal' )),
]
################################################################
## code template for cSapModel implementation
##class cSapModel_Impl(object):
##    @property
##    def Analyze(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def AreaElm(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def AreaObj(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ConstraintDef(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def DesignConcrete(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def DesignSteel(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def EditArea(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def EditFrame(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def EditGeneral(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def EditPoint(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def File(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def FrameObj(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Func(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def GDispl(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetDatabaseUnits(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetMergeTol(self):
##        '-no docstring-'
##        #return MergeTol, pRetVal
##
##    def GetModelFilename(self, IncludePath):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetModelFilepath(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetModelIsLocked(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetPresentCoordSystem(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetPresentUnits(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetProgramInfo(self):
##        '-no docstring-'
##        #return ProgramName, ProgramVersion, ProgramLevel, pRetVal
##
##    def GetProjectInfo(self):
##        '-no docstring-'
##        #return NumberItems, Item, Data, pRetVal
##
##    def GetVersion(self):
##        '-no docstring-'
##        #return Version, MyVersionNumber, pRetVal
##
##    @property
##    def GroupDef(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def InitializeNewModel(self, Units):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def LineElm(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def LinkElm(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def LinkObj(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def LoadCases(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def LoadPatterns(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Options(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PatternDef(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PointElm(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PointObj(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PropArea(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PropFrame(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PropLink(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PropMaterial(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PropRebar(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PropTendon(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def RespCombo(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Results(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SelectObj(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetMergeTol(self, MergeTol):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetModelIsLocked(self, Lockit):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPresentUnits(self, Units):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetProjectInfo(self, Item, Data):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def TendonObj(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def View(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def DesignResults(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def DesignCompositeBeam(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def GridSys(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Story(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Tower(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetDatabaseUnits_2(self):
##        '-no docstring-'
##        #return forceUnits, lengthUnits, temperatureUnits, pRetVal
##
##    def GetPresentUnits_2(self):
##        '-no docstring-'
##        #return forceUnits, lengthUnits, temperatureUnits, pRetVal
##
##    def SetPresentUnits_2(self, forceUnits, lengthUnits, temperatureUnits):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Diaphragm(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def TreeIsUpdateSuspended(self):
##        '-no docstring-'
##        #return IsSuspended, pRetVal
##
##    def TreeResumeUpdateData(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def TreeSuspendUpdateData(self, updateAtResume):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PierLabel(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SpandrelLabel(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Detailing(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PropPointSpring(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PropLineSpring(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def PropAreaSpring(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def DesignConcreteSlab(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def DesignShearWall(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def DatabaseTables(self):
##        '-no docstring-'
##        #return pRetVal
##

class cDCoACI318_14(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{C6A092AD-F6FC-4AD5-9862-F7B481C44B18}')
    _idlflags_ = ['dual', 'oleautomation']
cDCoACI318_14._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDCoACI318_14 implementation
##class cDCoACI318_14_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cDStAISC360_05_IBC2006(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{57576186-4629-4066-A5E3-AAFB8551B6A8}')
    _idlflags_ = ['dual', 'oleautomation']
class cDStCanadian_S16_09(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{7169A078-37CB-4021-A6CD-9923EB723A64}')
    _idlflags_ = ['dual', 'oleautomation']
class cDStBS5950_2000(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{6A4E5155-9478-4F7E-87AB-B91A78341597}')
    _idlflags_ = ['dual', 'oleautomation']
class cDStIndian_IS_800_2007(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{655C6EA8-969D-4876-8AB0-28737CADE5A4}')
    _idlflags_ = ['dual', 'oleautomation']
class cDStNewZealand_NZS3404_97(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{DD1295A2-2C57-4719-A27A-BDCC95BD0674}')
    _idlflags_ = ['dual', 'oleautomation']
class cDStItalianNTC2008S(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{E94BEE54-8675-4605-B382-E7AA0DC62C50}')
    _idlflags_ = ['dual', 'oleautomation']
class cDStItalianNTC2018S(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{C6E5510D-451E-4FA9-9044-335A7CD9A3D6}')
    _idlflags_ = ['dual', 'oleautomation']
cDesignSteel._methods_ = [
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'AISC360_05_IBC2006',
              ( ['out', 'retval'], POINTER(POINTER(cDStAISC360_05_IBC2006)), 'pRetVal' )),
    COMMETHOD([dispid(13), 'propget'], HRESULT, 'Canadian_S16_09',
              ( ['out', 'retval'], POINTER(POINTER(cDStCanadian_S16_09)), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'DeleteResults',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19), 'propget'], HRESULT, 'Eurocode_3_2005',
              ( ['out', 'retval'], POINTER(POINTER(cDStEurocode_3_2005)), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'GetCode',
              ( ['in', 'out'], POINTER(BSTR), 'CodeName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'GetComboDeflection',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'GetComboStrength',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(23)], HRESULT, 'GetDesignSection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(24)], HRESULT, 'GetGroup',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(65)], HRESULT, 'GetResultsAvailable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(25)], HRESULT, 'GetSummaryResults',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ratio' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'RatioType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Location' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ComboName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ErrorSummary' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'WarningSummary' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(26)], HRESULT, 'GetTargetDispl',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Point' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Displ' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Active' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(27)], HRESULT, 'GetTargetPeriod',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(BSTR), 'ModalCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Mode' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Period' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Active' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(33)], HRESULT, 'ResetOverwrites',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(34)], HRESULT, 'SetAutoSelectNull',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(35)], HRESULT, 'SetCode',
              ( ['in'], BSTR, 'CodeName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(36)], HRESULT, 'SetComboDeflection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'Selected' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(37)], HRESULT, 'SetComboStrength',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'Selected' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(38)], HRESULT, 'SetDesignSection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'PropName' ),
              ( ['in'], VARIANT_BOOL, 'LastAnalysis' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(39)], HRESULT, 'SetGroup',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'Selected' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(40)], HRESULT, 'SetTargetDispl',
              ( ['in'], c_int, 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Point' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Displ' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Active', True ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(41)], HRESULT, 'SetTargetPeriod',
              ( ['in'], c_int, 'NumberItems' ),
              ( ['in'], BSTR, 'ModalCase' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Mode' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Period' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Active', True ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(42)], HRESULT, 'StartDesign',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(45)], HRESULT, 'VerifyPassed',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(c_int), 'N1' ),
              ( ['in', 'out'], POINTER(c_int), 'N2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(46)], HRESULT, 'VerifySections',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(68), 'propget'], HRESULT, 'SP16_13330_2011',
              ( ['out', 'retval'], POINTER(POINTER(cDStSP16_13330_2011)), 'pRetVal' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'AISC_LRFD93',
              ( ['out', 'retval'], POINTER(POINTER(cDStAISC_LRFD93)), 'pRetVal' )),
    COMMETHOD([dispid(9), 'propget'], HRESULT, 'Australian_AS4100_98',
              ( ['out', 'retval'], POINTER(POINTER(cDStAustralian_AS4100_98)), 'pRetVal' )),
    COMMETHOD([dispid(10), 'propget'], HRESULT, 'BS5950_2000',
              ( ['out', 'retval'], POINTER(POINTER(cDStBS5950_2000)), 'pRetVal' )),
    COMMETHOD([dispid(15), 'propget'], HRESULT, 'Chinese_2010',
              ( ['out', 'retval'], POINTER(POINTER(cDStChinese_2010)), 'pRetVal' )),
    COMMETHOD([dispid(70), 'propget'], HRESULT, 'Chinese_2018',
              ( ['out', 'retval'], POINTER(POINTER(cDStChinese_2018)), 'pRetVal' )),
    COMMETHOD([dispid(29), 'propget'], HRESULT, 'Indian_IS_800_2007',
              ( ['out', 'retval'], POINTER(POINTER(cDStIndian_IS_800_2007)), 'pRetVal' )),
    COMMETHOD([dispid(31), 'propget'], HRESULT, 'NewZealand_NZS3404_97',
              ( ['out', 'retval'], POINTER(POINTER(cDStNewZealand_NZS3404_97)), 'pRetVal' )),
    COMMETHOD([dispid(60), 'propget'], HRESULT, 'Italian_NTC_2008',
              ( ['out', 'retval'], POINTER(POINTER(cDStItalianNTC2008S)), 'pRetVal' )),
    COMMETHOD([dispid(69), 'propget'], HRESULT, 'Italian_NTC_2018',
              ( ['out', 'retval'], POINTER(POINTER(cDStItalianNTC2018S)), 'pRetVal' )),
    COMMETHOD([dispid(47)], HRESULT, 'GetSummaryResults_2',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'DesignSect' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Status' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PMMCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PMMRatio' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PRatio' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MMajRatio' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MMinRatio' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'VMajCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VMajRatio' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'VMinCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VMinRatio' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDesignSteel implementation
##class cDesignSteel_Impl(object):
##    @property
##    def AISC360_05_IBC2006(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Canadian_S16_09(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteResults(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Eurocode_3_2005(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetCode(self):
##        '-no docstring-'
##        #return CodeName, pRetVal
##
##    def GetComboDeflection(self):
##        '-no docstring-'
##        #return NumberItems, MyName, pRetVal
##
##    def GetComboStrength(self):
##        '-no docstring-'
##        #return NumberItems, MyName, pRetVal
##
##    def GetDesignSection(self, Name):
##        '-no docstring-'
##        #return PropName, pRetVal
##
##    def GetGroup(self):
##        '-no docstring-'
##        #return NumberItems, MyName, pRetVal
##
##    def GetResultsAvailable(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetSummaryResults(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, FrameName, Ratio, RatioType, Location, ComboName, ErrorSummary, WarningSummary, pRetVal
##
##    def GetTargetDispl(self):
##        '-no docstring-'
##        #return NumberItems, LoadCase, Point, Displ, Active, pRetVal
##
##    def GetTargetPeriod(self):
##        '-no docstring-'
##        #return NumberItems, ModalCase, Mode, Period, Active, pRetVal
##
##    def ResetOverwrites(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetAutoSelectNull(self, Name, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCode(self, CodeName):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetComboDeflection(self, Name, Selected):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetComboStrength(self, Name, Selected):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDesignSection(self, Name, PropName, LastAnalysis, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetGroup(self, Name, Selected):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetTargetDispl(self, NumberItems, Active):
##        '-no docstring-'
##        #return LoadCase, Point, Displ, pRetVal
##
##    def SetTargetPeriod(self, NumberItems, ModalCase, Active):
##        '-no docstring-'
##        #return Mode, Period, pRetVal
##
##    def StartDesign(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def VerifyPassed(self):
##        '-no docstring-'
##        #return NumberItems, N1, N2, MyName, pRetVal
##
##    def VerifySections(self):
##        '-no docstring-'
##        #return NumberItems, MyName, pRetVal
##
##    @property
##    def SP16_13330_2011(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def AISC_LRFD93(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Australian_AS4100_98(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def BS5950_2000(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Chinese_2010(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Chinese_2018(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Indian_IS_800_2007(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def NewZealand_NZS3404_97(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Italian_NTC_2008(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Italian_NTC_2018(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetSummaryResults_2(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, FrameType, DesignSect, Status, PMMCombo, PMMRatio, PRatio, MMajRatio, MMinRatio, VMajCombo, VMajRatio, VMinCombo, VMinRatio, pRetVal
##

class cDStAISC360_10(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{AB1800E1-011E-4212-A139-EA8232B04549}')
    _idlflags_ = ['dual', 'oleautomation']
cDStAISC360_10._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDStAISC360_10 implementation
##class cDStAISC360_10_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##


# values for enumeration 'eBridgeResponseStress'
eBridgeResponseStress_S11_Longitudinal_Top_Left = 0
eBridgeResponseStress_S11_Longitudinal_Top_Center = 1
eBridgeResponseStress_S11_Longitudinal_Top_Right = 2
eBridgeResponseStress_S11_Longitudinal_Top_Beam_Center = 3
eBridgeResponseStress_S11_Longitudinal_Top_Envelope = 4
eBridgeResponseStress_S11_Longitudinal_Top_ULeft_Left = 5
eBridgeResponseStress_S11_Longitudinal_Top_ULeft_Center = 6
eBridgeResponseStress_S11_Longitudinal_Top_ULeft_Right = 7
eBridgeResponseStress_S11_Longitudinal_Top_ULeft_Envelope = 8
eBridgeResponseStress_S11_Longitudinal_Top_URight_Left = 9
eBridgeResponseStress_S11_Longitudinal_Top_URight_Center = 10
eBridgeResponseStress_S11_Longitudinal_Top_URight_Right = 11
eBridgeResponseStress_S11_Longitudinal_Top_URight_Envelope = 12
eBridgeResponseStress_S11_Longitudinal_Bot_Left = 13
eBridgeResponseStress_S11_Longitudinal_Bot_Center = 14
eBridgeResponseStress_S11_Longitudinal_Bot_Right = 15
eBridgeResponseStress_S11_Longitudinal_Bot_Beam_Left = 16
eBridgeResponseStress_S11_Longitudinal_Bot_Beam_Right = 17
eBridgeResponseStress_S11_Longitudinal_Bot_Envelope = 18
eBridgeResponseStress_S11_Longitudinal_Top_Bot_Left = 19
eBridgeResponseStress_S11_Longitudinal_Top_Bot_Center = 20
eBridgeResponseStress_S11_Longitudinal_Top_Bot_Right = 21
eBridgeResponseStress_S11_Lateral_Bending_Top = 22
eBridgeResponseStress_S11_Lateral_Bending_Top_ULeft = 23
eBridgeResponseStress_S11_Lateral_Bending_Top_URight = 24
eBridgeResponseStress_S11_Lateral_Bending_Bot = 25
eBridgeResponseStress = c_int # enum

# values for enumeration 'eFrameDesignOrientation'
eFrameDesignOrientation_Column = 1
eFrameDesignOrientation_Beam = 2
eFrameDesignOrientation_Brace = 3
eFrameDesignOrientation_Null = 4
eFrameDesignOrientation_Other = 5
eFrameDesignOrientation = c_int # enum
class cDCoACI318_08_IBC2009(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{48E6C50B-130D-4C1A-847F-EA185307A618}')
    _idlflags_ = ['dual', 'oleautomation']
class cDCoEurocode_2_2004(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{82D4214F-47CC-41E1-9C85-D4F2A50EB262}')
    _idlflags_ = ['dual', 'oleautomation']
class cDCoSP63133302011(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{CD1D9D18-26E7-4D7D-A69E-0F701A405596}')
    _idlflags_ = ['dual', 'oleautomation']
class cDCoAS_3600_09(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{A3D43E54-824D-4538-A28A-B5385B0F51CF}')
    _idlflags_ = ['dual', 'oleautomation']
class cDCoIndian_IS_456_2000(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{35968AB4-E1F9-41BA-8C9C-26CABC55DCE4}')
    _idlflags_ = ['dual', 'oleautomation']
class cDCoTS_500_2000_R2018(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{4FA29D29-960D-4B15-B115-4DA33A4F4716}')
    _idlflags_ = ['dual', 'oleautomation']
cDesignConcrete._methods_ = [
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'ACI318_08_IBC2009',
              ( ['out', 'retval'], POINTER(POINTER(cDCoACI318_08_IBC2009)), 'pRetVal' )),
    COMMETHOD([dispid(16), 'propget'], HRESULT, 'Eurocode_2_2004',
              ( ['out', 'retval'], POINTER(POINTER(cDCoEurocode_2_2004)), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'GetCode',
              ( ['in', 'out'], POINTER(BSTR), 'CodeName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'GetDesignSection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(48)], HRESULT, 'GetResultsAvailable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'GetSummaryResultsBeam',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Location' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TopCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TopArea' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BotCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BotArea' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'VMajorCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VMajorArea' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TLCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TLArea' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TTCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TTArea' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ErrorSummary' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'WarningSummary' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'GetSummaryResultsColumn',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyOption' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Location' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PMMCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PMMArea' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PMMRatio' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'VMajorCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AVMajor' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'VMinorCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AVMinor' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ErrorSummary' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'WarningSummary' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'GetSummaryResultsJoint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LCJSRatioMajor' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'JSRatioMajor' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LCJSRatioMinor' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'JSRatioMinor' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LCBCCRatioMajor' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BCCRatioMajor' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LCBCCRatioMinor' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BCCRatioMinor' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ErrorSummary' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'WarningSummary' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(30)], HRESULT, 'SetCode',
              ( ['in'], BSTR, 'CodeName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(32)], HRESULT, 'SetDesignSection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'PropName' ),
              ( ['in'], VARIANT_BOOL, 'LastAnalysis' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(34)], HRESULT, 'StartDesign',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(51), 'propget'], HRESULT, 'SP63_13330_2012',
              ( ['out', 'retval'], POINTER(POINTER(cDCoSP63133302011)), 'pRetVal' )),
    COMMETHOD([dispid(7), 'propget'], HRESULT, 'AS_3600_09',
              ( ['out', 'retval'], POINTER(POINTER(cDCoAS_3600_09)), 'pRetVal' )),
    COMMETHOD([dispid(9), 'propget'], HRESULT, 'BS8110_97',
              ( ['out', 'retval'], POINTER(POINTER(cDCoBS8110_97)), 'pRetVal' )),
    COMMETHOD([dispid(11), 'propget'], HRESULT, 'Chinese_2010',
              ( ['out', 'retval'], POINTER(POINTER(cDCoChinese_2010)), 'pRetVal' )),
    COMMETHOD([dispid(24), 'propget'], HRESULT, 'Indian_IS_456_2000',
              ( ['out', 'retval'], POINTER(POINTER(cDCoIndian_IS_456_2000)), 'pRetVal' )),
    COMMETHOD([dispid(49)], HRESULT, 'GetRebarPrefsBeam',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(50)], HRESULT, 'GetRebarPrefsColumn',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(52), 'propget'], HRESULT, 'ACI318_14',
              ( ['out', 'retval'], POINTER(POINTER(cDCoACI318_14)), 'pRetVal' )),
    COMMETHOD([dispid(53)], HRESULT, 'GetSummaryResultsBeam_2',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Location' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TopCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TopArea' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TopAreaReq' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TopAreaMin' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TopAreaProvided' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BotCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BotArea' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BotAreaReq' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BotAreaMin' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BotAreaProvided' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'VMajorCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VMajorArea' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VmajorAreaReq' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VmajorAreaMin' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VmajorAreaProvided' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TLCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TLArea' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TTCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TTArea' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ErrorSummary' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'WarningSummary' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(54), 'propget'], HRESULT, 'ACI318_19',
              ( ['out', 'retval'], POINTER(POINTER(cDCoACI318_19)), 'pRetVal' )),
    COMMETHOD([dispid(55), 'propget'], HRESULT, 'AS_3600_2018',
              ( ['out', 'retval'], POINTER(POINTER(cDCoAS_3600_2018)), 'pRetVal' )),
    COMMETHOD([dispid(56), 'propget'], HRESULT, 'Mexican_RCDF_2017',
              ( ['out', 'retval'], POINTER(POINTER(cDCoMexican_RCDF_2017)), 'pRetVal' )),
    COMMETHOD([dispid(57), 'propget'], HRESULT, 'TS_500_2000_R2018',
              ( ['out', 'retval'], POINTER(POINTER(cDCoTS_500_2000_R2018)), 'pRetVal' )),
    COMMETHOD([dispid(58)], HRESULT, 'GetSeismicFramingType',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'FramingType' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDesignConcrete implementation
##class cDesignConcrete_Impl(object):
##    @property
##    def ACI318_08_IBC2009(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Eurocode_2_2004(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetCode(self):
##        '-no docstring-'
##        #return CodeName, pRetVal
##
##    def GetDesignSection(self, Name):
##        '-no docstring-'
##        #return PropName, pRetVal
##
##    def GetResultsAvailable(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetSummaryResultsBeam(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, FrameName, Location, TopCombo, TopArea, BotCombo, BotArea, VMajorCombo, VMajorArea, TLCombo, TLArea, TTCombo, TTArea, ErrorSummary, WarningSummary, pRetVal
##
##    def GetSummaryResultsColumn(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, FrameName, MyOption, Location, PMMCombo, PMMArea, PMMRatio, VMajorCombo, AVMajor, VMinorCombo, AVMinor, ErrorSummary, WarningSummary, pRetVal
##
##    def GetSummaryResultsJoint(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, FrameName, LCJSRatioMajor, JSRatioMajor, LCJSRatioMinor, JSRatioMinor, LCBCCRatioMajor, BCCRatioMajor, LCBCCRatioMinor, BCCRatioMinor, ErrorSummary, WarningSummary, pRetVal
##
##    def SetCode(self, CodeName):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDesignSection(self, Name, PropName, LastAnalysis, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def StartDesign(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SP63_13330_2012(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def AS_3600_09(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def BS8110_97(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Chinese_2010(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Indian_IS_456_2000(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetRebarPrefsBeam(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetRebarPrefsColumn(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    @property
##    def ACI318_14(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetSummaryResultsBeam_2(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, FrameName, Location, TopCombo, TopArea, TopAreaReq, TopAreaMin, TopAreaProvided, BotCombo, BotArea, BotAreaReq, BotAreaMin, BotAreaProvided, VMajorCombo, VMajorArea, VmajorAreaReq, VmajorAreaMin, VmajorAreaProvided, TLCombo, TLArea, TTCombo, TTArea, ErrorSummary, WarningSummary, pRetVal
##
##    @property
##    def ACI318_19(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def AS_3600_2018(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def Mexican_RCDF_2017(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def TS_500_2000_R2018(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetSeismicFramingType(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, FrameName, FramingType, pRetVal
##


# values for enumeration 'eMatTypeTendon'
eMatTypeTendon_ASTM_A416Gr250 = 1
eMatTypeTendon_ASTM_A416Gr270 = 2
eMatTypeTendon = c_int # enum
class Helper(CoClass):
    _reg_clsid_ = GUID('{FB5D97C6-0EEB-42A9-B3B9-3BC2FD19E04F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{542F7A9D-3A7D-4061-97B3-3A1276FF83BD}', 1, 0)
class cHelper(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{0E971131-D37C-4F86-AC29-EED9447FDD16}')
    _idlflags_ = ['dual', 'oleautomation']
Helper._com_interfaces_ = [cHelper, comtypes.gen._BED7F4EA_1A96_11D2_8F08_00A0C9A6186D_0_2_4._Object]

cDiaphragm._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetDiaphragm',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SemiRigid' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'SetDiaphragm',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'SemiRigid' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDiaphragm implementation
##class cDiaphragm_Impl(object):
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetDiaphragm(self, Name):
##        '-no docstring-'
##        #return SemiRigid, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def SetDiaphragm(self, Name, SemiRigid):
##        '-no docstring-'
##        #return pRetVal
##

class cDCoMexican_RCDF_2004(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{202F4644-A7B2-44FC-B519-073A55592EAC}')
    _idlflags_ = ['dual', 'oleautomation']
cDCoMexican_RCDF_2004._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDCoMexican_RCDF_2004 implementation
##class cDCoMexican_RCDF_2004_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cGenRefLine(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{EE65DABE-CD3C-4028-9C2A-2C1A224EE264}')
    _idlflags_ = ['dual', 'oleautomation']
cGenRefLine._methods_ = [
]
################################################################
## code template for cGenRefLine implementation
##class cGenRefLine_Impl(object):


# values for enumeration 'eTemplateType'
eTemplateType_Grid = 0
eTemplateType_Clear = 1
eTemplateType_Beam = 2
eTemplateType_SlopedTruss = 3
eTemplateType_VerticalTruss = 4
eTemplateType_SpaceTruss = 5
eTemplateType_PortalFrame = 6
eTemplateType_BracedFrame = 7
eTemplateType_EccentricFrame = 8
eTemplateType_PerimeterFrame = 9
eTemplateType_SpaceFrame = 10
eTemplateType_Bridge = 11
eTemplateType_Barrel = 12
eTemplateType_Cylinder = 13
eTemplateType_Dome = 14
eTemplateType_ShearWall = 15
eTemplateType_Floor = 16
eTemplateType_Advanced = 17
eTemplateType_UndergoundConcrete = 18
eTemplateType_Truss2D = 19
eTemplateType_Truss3D = 20
eTemplateType_Frame2D = 21
eTemplateType_Frame3D = 22
eTemplateType_BridgeWizard = 23
eTemplateType_PipesAndPlates = 24
eTemplateType_Shells = 25
eTemplateType_SolidModels = 26
eTemplateType_StorageStructures = 27
eTemplateType_Staircases = 28
eTemplateType_CableBridges = 29
eTemplateType = c_int # enum
cDCoEurocode_2_2004._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDCoEurocode_2_2004 implementation
##class cDCoEurocode_2_2004_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cCaseDirectHistoryLinear(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{B1EC6F45-F1E3-4489-A9B5-5BAA3F6FF957}')
    _idlflags_ = ['dual', 'oleautomation']
cCaseDirectHistoryLinear._methods_ = [
    COMMETHOD([dispid(3)], HRESULT, 'GetLoads',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Func' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Tf' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'At' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ang' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cCaseDirectHistoryLinear implementation
##class cCaseDirectHistoryLinear_Impl(object):
##    def GetLoads(self, Name):
##        '-no docstring-'
##        #return NumberLoads, LoadType, LoadName, Func, SF, Tf, At, CSys, Ang, pRetVal
##

cDCoIndian_IS_456_2000._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDCoIndian_IS_456_2000 implementation
##class cDCoIndian_IS_456_2000_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##


# values for enumeration 'eBridgeResponseDisplDOF'
eBridgeResponseDisplDOF_Vertical_Displacement = 0
eBridgeResponseDisplDOF_Transverse_Displacement = 1
eBridgeResponseDisplDOF_Longitudinal_Displacement = 2
eBridgeResponseDisplDOF_Longitudinal_Rotation = 3
eBridgeResponseDisplDOF_Avg_Longitudinal_Rotation = 4
eBridgeResponseDisplDOF = c_int # enum
cConstraint._methods_ = [
    COMMETHOD([dispid(3)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetDiaphragm',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(eConstraintAxis), 'Axis' ),
              ( ['in', 'out'], POINTER(BSTR), 'CSys' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'SetDiaphragm',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eConstraintAxis, 'Axis', 4 ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cConstraint implementation
##class cConstraint_Impl(object):
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetDiaphragm(self, Name):
##        '-no docstring-'
##        #return Axis, CSys, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def SetDiaphragm(self, Name, Axis, CSys):
##        '-no docstring-'
##        #return pRetVal
##

cGroup._methods_ = [
    COMMETHOD([dispid(3)], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetAssignments',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ObjectType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetGroup',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'color' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForSelection' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForSectionCutDefinition' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForSteelDesign' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForConcreteDesign' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForAluminumDesign' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForColdFormedDesign' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForStaticNLActiveStage' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForBridgeResponseOutput' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForAutoSeismicOutput' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForAutoWindOutput' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForMassAndWeight' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'SetGroup',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], c_int, 'color', -1 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForSelection', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForSectionCutDefinition', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForSteelDesign', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForConcreteDesign', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForAluminumDesign', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForColdFormedDesign', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForStaticNLActiveStage', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForBridgeResponseOutput', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForAutoSeismicOutput', False ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForAutoWindOutput', False ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForMassAndWeight', True ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetGroup_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'color' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForSelection' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForSectionCutDefinition' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForSteelDesign' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForConcreteDesign' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForAluminumDesign' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForStaticNLActiveStage' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForAutoSeismicOutput' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForAutoWindOutput' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForMassAndWeight' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForSteelJoistDesign' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForWallDesign' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForBasePlateDesign' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForConnectionDesign' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'SetGroup_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], c_int, 'color', -1 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForSelection', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForSectionCutDefinition', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForSteelDesign', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForConcreteDesign', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForAluminumDesign', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForStaticNLActiveStage', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForAutoSeismicOutput', False ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForAutoWindOutput', False ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForMassAndWeight', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForSteelJoistDesign', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForWallDesign', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForBasePlateDesign', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'SpecifiedForConnectionDesign', True ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cGroup implementation
##class cGroup_Impl(object):
##    def Count(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetAssignments(self, Name):
##        '-no docstring-'
##        #return NumberItems, ObjectType, ObjectName, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetGroup(self, Name):
##        '-no docstring-'
##        #return color, SpecifiedForSelection, SpecifiedForSectionCutDefinition, SpecifiedForSteelDesign, SpecifiedForConcreteDesign, SpecifiedForAluminumDesign, SpecifiedForColdFormedDesign, SpecifiedForStaticNLActiveStage, SpecifiedForBridgeResponseOutput, SpecifiedForAutoSeismicOutput, SpecifiedForAutoWindOutput, SpecifiedForMassAndWeight, pRetVal
##
##    def SetGroup(self, Name, color, SpecifiedForSelection, SpecifiedForSectionCutDefinition, SpecifiedForSteelDesign, SpecifiedForConcreteDesign, SpecifiedForAluminumDesign, SpecifiedForColdFormedDesign, SpecifiedForStaticNLActiveStage, SpecifiedForBridgeResponseOutput, SpecifiedForAutoSeismicOutput, SpecifiedForAutoWindOutput, SpecifiedForMassAndWeight):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetGroup_1(self, Name):
##        '-no docstring-'
##        #return color, SpecifiedForSelection, SpecifiedForSectionCutDefinition, SpecifiedForSteelDesign, SpecifiedForConcreteDesign, SpecifiedForAluminumDesign, SpecifiedForStaticNLActiveStage, SpecifiedForAutoSeismicOutput, SpecifiedForAutoWindOutput, SpecifiedForMassAndWeight, SpecifiedForSteelJoistDesign, SpecifiedForWallDesign, SpecifiedForBasePlateDesign, SpecifiedForConnectionDesign, pRetVal
##
##    def SetGroup_1(self, Name, color, SpecifiedForSelection, SpecifiedForSectionCutDefinition, SpecifiedForSteelDesign, SpecifiedForConcreteDesign, SpecifiedForAluminumDesign, SpecifiedForStaticNLActiveStage, SpecifiedForAutoSeismicOutput, SpecifiedForAutoWindOutput, SpecifiedForMassAndWeight, SpecifiedForSteelJoistDesign, SpecifiedForWallDesign, SpecifiedForBasePlateDesign, SpecifiedForConnectionDesign):
##        '-no docstring-'
##        #return pRetVal
##

cDCoACI318_08_IBC2009._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDCoACI318_08_IBC2009 implementation
##class cDCoACI318_08_IBC2009_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##


# values for enumeration 'eLoadCaseType'
eLoadCaseType_LinearStatic = 1
eLoadCaseType_NonlinearStatic = 2
eLoadCaseType_Modal = 3
eLoadCaseType_ResponseSpectrum = 4
eLoadCaseType_LinearHistory = 5
eLoadCaseType_NonlinearHistory = 6
eLoadCaseType_LinearDynamic = 7
eLoadCaseType_NonlinearDynamic = 8
eLoadCaseType_MovingLoad = 9
eLoadCaseType_Buckling = 10
eLoadCaseType_SteadyState = 11
eLoadCaseType_PowerSpectralDensity = 12
eLoadCaseType_LinearStaticMultiStep = 13
eLoadCaseType_HyperStatic = 14
eLoadCaseType = c_int # enum
class cNamedDisplay(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{ABCC81D2-5F58-422D-92DF-6A8C587B9606}')
    _idlflags_ = ['dual', 'oleautomation']
cNamedDisplay._methods_ = [
]
################################################################
## code template for cNamedDisplay implementation
##class cNamedDisplay_Impl(object):

cDStBS5950_2000._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDStBS5950_2000 implementation
##class cDStBS5950_2000_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cDCoTS_500_2000_R2018._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDCoTS_500_2000_R2018 implementation
##class cDCoTS_500_2000_R2018_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##


# values for enumeration 'eWallPropType'
eWallPropType_Specified = 1
eWallPropType_AutoSelectList = 2
eWallPropType = c_int # enum
class cCaseModalEigen(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{99CEBB74-FD82-404B-9B24-8679EE4BF5C2}')
    _idlflags_ = ['dual', 'oleautomation']
cCaseModalEigen._methods_ = [
    COMMETHOD([dispid(5)], HRESULT, 'SetCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cCaseModalEigen implementation
##class cCaseModalEigen_Impl(object):
##    def SetCase(self, Name):
##        '-no docstring-'
##        #return pRetVal
##

cDStIndian_IS_800_2007._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDStIndian_IS_800_2007 implementation
##class cDStIndian_IS_800_2007_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cDStAISC_ASD89(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{A3F32989-4B8E-4199-862D-DD2FA235C381}')
    _idlflags_ = ['dual', 'oleautomation']
cDStAISC_ASD89._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDStAISC_ASD89 implementation
##class cDStAISC_ASD89_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cNamedSet(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{D0CE6FBB-5A4F-4DBB-A51D-039B106285E0}')
    _idlflags_ = ['dual', 'oleautomation']
cNamedSet._methods_ = [
]
################################################################
## code template for cNamedSet implementation
##class cNamedSet_Impl(object):


# values for enumeration 'eBridgeResponseDisplLoc'
eBridgeResponseDisplLoc_Web_Top = 0
eBridgeResponseDisplLoc_Web_Bottom = 1
eBridgeResponseDisplLoc_Web = 2
eBridgeResponseDisplLoc_Left_Web_Top = 3
eBridgeResponseDisplLoc_Left_Web_Bottom = 4
eBridgeResponseDisplLoc_Left_Web = 5
eBridgeResponseDisplLoc_Right_Web_Top = 6
eBridgeResponseDisplLoc_Right_Web_Bottom = 7
eBridgeResponseDisplLoc_Right_Web = 8
eBridgeResponseDisplLoc_Slab_Center = 9
eBridgeResponseDisplLoc = c_int # enum

# values for enumeration 'eAreaDesignOrientation'
eAreaDesignOrientation_Wall = 1
eAreaDesignOrientation_Floor = 2
eAreaDesignOrientation_Ramp_DO_NOT_USE = 3
eAreaDesignOrientation_Null = 4
eAreaDesignOrientation_Other = 5
eAreaDesignOrientation = c_int # enum

# values for enumeration 'eWallPierRebarLayerType'
eWallPierRebarLayerType_Vertical_Distributed_MiddleZone_Eachface = 1
eWallPierRebarLayerType_Horizontal_Distributed_MiddleZone_Eachface = 2
eWallPierRebarLayerType_Vertical_Distributed_EndZoneI_Total = 3
eWallPierRebarLayerType_Vertical_Distributed_EndZoneJ_Total = 4
eWallPierRebarLayerType_Confinement_EndZoneI = 5
eWallPierRebarLayerType_Confinement_EndZoneJ = 6
eWallPierRebarLayerType_Diagonal_Each = 7
eWallPierRebarLayerType = c_int # enum
cAreaObj._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'AddByCoord',
              ( ['in'], c_int, 'NumberPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z' ),
              ( ['in', 'out'], POINTER(BSTR), 'Name' ),
              ( ['in', 'optional'], BSTR, 'PropName', 'Default' ),
              ( ['in', 'optional'], BSTR, 'UserName', '' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'AddByPoint',
              ( ['in'], c_int, 'NumberPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Point' ),
              ( ['in', 'out'], POINTER(BSTR), 'Name' ),
              ( ['in', 'optional'], BSTR, 'PropName', 'Default' ),
              ( ['in', 'optional'], BSTR, 'UserName', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'DeleteLoadTemperature',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'DeleteLoadUniform',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'DeleteLoadUniformToFrame',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'DeleteLoadWindPressure',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'DeleteMass',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'DeleteModifiers',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'DeleteSpring',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'GetEdgeConstraint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ConstraintExists' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'GetElm',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NElm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'GetGUID',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'GetLoadTemperature',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'GetLoadUniform',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Dir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'GetLoadUniformToFrame',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Dir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'DistType' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'GetLoadWindPressure',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Cp' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'GetLocalAxes',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Ang' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Advanced' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(23)], HRESULT, 'GetMass',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'MassOverL2' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(24)], HRESULT, 'GetMaterialOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(25)], HRESULT, 'GetModifiers',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(26)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(56)], HRESULT, 'GetOpening',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IsOpening' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(28)], HRESULT, 'GetPoints',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Point' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(29)], HRESULT, 'GetProperty',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(30)], HRESULT, 'GetSelected',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Selected' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(31)], HRESULT, 'GetSelectedEdge',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberEdges' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Selected' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(34)], HRESULT, 'GetTransformationMatrix',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'IsGlobal', True ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(36)], HRESULT, 'SetEdgeConstraint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'ConstraintExists' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(37)], HRESULT, 'SetGroupAssign',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'GroupName' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Remove', False ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(38)], HRESULT, 'SetGUID',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(39)], HRESULT, 'SetLoadTemperature',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in'], c_int, 'MyType' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], BSTR, 'PatternName', '' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', True ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(40)], HRESULT, 'SetLoadUniform',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in'], c_int, 'Dir' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', True ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(41)], HRESULT, 'SetLoadUniformToFrame',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in'], c_int, 'Dir' ),
              ( ['in'], c_int, 'DistType' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', True ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(42)], HRESULT, 'SetLoadWindPressure',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in'], c_int, 'MyType' ),
              ( ['in'], c_double, 'Cp' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(43)], HRESULT, 'SetLocalAxes',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'Ang' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(45)], HRESULT, 'SetMass',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'MassOverL2' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', False ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(46)], HRESULT, 'SetMaterialOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'PropName' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(47)], HRESULT, 'SetModifiers',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(57)], HRESULT, 'SetOpening',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'IsOpening' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(49)], HRESULT, 'SetProperty',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'PropName' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(50)], HRESULT, 'SetSelected',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'Selected' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(51)], HRESULT, 'SetSelectedEdge',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'EdgeNum' ),
              ( ['in'], VARIANT_BOOL, 'Selected' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(89)], HRESULT, 'GetGroupAssign',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberGroups' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Groups' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(54)], HRESULT, 'GetDesignOrientation',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(eAreaDesignOrientation), 'DesignOrientation' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(55)], HRESULT, 'GetNameListOnStory',
              ( ['in'], BSTR, 'StoryName' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(58)], HRESULT, 'GetDiaphragm',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'DiaphragmName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(59)], HRESULT, 'SetDiaphragm',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'DiaphragmName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(77)], HRESULT, 'GetLabelNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyLabel' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyStory' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(78)], HRESULT, 'GetLabelFromName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'Label' ),
              ( ['in', 'out'], POINTER(BSTR), 'Story' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(79)], HRESULT, 'GetNameFromLabel',
              ( ['in'], BSTR, 'Label' ),
              ( ['in'], BSTR, 'Story' ),
              ( ['in', 'out'], POINTER(BSTR), 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(80)], HRESULT, 'GetRebarDataPier',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberRebarLayers' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LayerID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(eWallPierRebarLayerType)), 'LayerType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ClearCover' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BarSizeName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BarArea' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BarSpacing' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Confined' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndZoneLength' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndZoneThickness' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndZoneOffset' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(81)], HRESULT, 'GetRebarDataSpandrel',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberRebarLayers' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LayerID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(eWallSpandrelRebarLayerType)), 'LayerType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ClearCover' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'BarSizeIndex' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BarArea' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BarSpacing' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Confined' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(82)], HRESULT, 'GetAllAreas',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(eAreaDesignOrientation)), 'DesignOrientation' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberBoundaryPts' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PointDelimiter' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PointX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PointY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PointZ' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(83)], HRESULT, 'GetPier',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'PierName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(84)], HRESULT, 'SetPier',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'PierName' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(85)], HRESULT, 'GetSpandrel',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'SpandrelName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(86)], HRESULT, 'SetSpandrel',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'SpandrelName' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(87)], HRESULT, 'GetSpringAssignment',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'SpringProp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(88)], HRESULT, 'SetSpringAssignment',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'SpringProp' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(90)], HRESULT, 'GetOffsets3',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offsets' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(91)], HRESULT, 'GetCurvedEdges',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumEdges' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'CurveType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Tension' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GZ' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cAreaObj implementation
##class cAreaObj_Impl(object):
##    def AddByCoord(self, NumberPoints, PropName, UserName, CSys):
##        '-no docstring-'
##        #return X, Y, Z, Name, pRetVal
##
##    def AddByPoint(self, NumberPoints, PropName, UserName):
##        '-no docstring-'
##        #return Point, Name, pRetVal
##
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteLoadTemperature(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteLoadUniform(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteLoadUniformToFrame(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteLoadWindPressure(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteMass(self, Name, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteModifiers(self, Name, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteSpring(self, Name, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetEdgeConstraint(self, Name):
##        '-no docstring-'
##        #return ConstraintExists, pRetVal
##
##    def GetElm(self, Name):
##        '-no docstring-'
##        #return NElm, Elm, pRetVal
##
##    def GetGUID(self, Name):
##        '-no docstring-'
##        #return GUID, pRetVal
##
##    def GetLoadTemperature(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, AreaName, LoadPat, MyType, Value, PatternName, pRetVal
##
##    def GetLoadUniform(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, AreaName, LoadPat, CSys, Dir, Value, pRetVal
##
##    def GetLoadUniformToFrame(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, AreaName, LoadPat, CSys, Dir, Value, DistType, pRetVal
##
##    def GetLoadWindPressure(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, AreaName, LoadPat, MyType, Cp, pRetVal
##
##    def GetLocalAxes(self, Name):
##        '-no docstring-'
##        #return Ang, Advanced, pRetVal
##
##    def GetMass(self, Name):
##        '-no docstring-'
##        #return MassOverL2, pRetVal
##
##    def GetMaterialOverwrite(self, Name):
##        '-no docstring-'
##        #return PropName, pRetVal
##
##    def GetModifiers(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetOpening(self, Name):
##        '-no docstring-'
##        #return IsOpening, pRetVal
##
##    def GetPoints(self, Name):
##        '-no docstring-'
##        #return NumberPoints, Point, pRetVal
##
##    def GetProperty(self, Name):
##        '-no docstring-'
##        #return PropName, pRetVal
##
##    def GetSelected(self, Name):
##        '-no docstring-'
##        #return Selected, pRetVal
##
##    def GetSelectedEdge(self, Name):
##        '-no docstring-'
##        #return NumberEdges, Selected, pRetVal
##
##    def GetTransformationMatrix(self, Name, IsGlobal):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetEdgeConstraint(self, Name, ConstraintExists, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetGroupAssign(self, Name, GroupName, Remove, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetGUID(self, Name, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoadTemperature(self, Name, LoadPat, MyType, Value, PatternName, Replace, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoadUniform(self, Name, LoadPat, Value, Dir, Replace, CSys, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoadUniformToFrame(self, Name, LoadPat, Value, Dir, DistType, Replace, CSys, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoadWindPressure(self, Name, LoadPat, MyType, Cp, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLocalAxes(self, Name, Ang, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetMass(self, Name, MassOverL2, Replace, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetMaterialOverwrite(self, Name, PropName, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetModifiers(self, Name, ItemType):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOpening(self, Name, IsOpening, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetProperty(self, Name, PropName, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSelected(self, Name, Selected, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSelectedEdge(self, Name, EdgeNum, Selected):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetGroupAssign(self, Name):
##        '-no docstring-'
##        #return NumberGroups, Groups, pRetVal
##
##    def GetDesignOrientation(self, Name):
##        '-no docstring-'
##        #return DesignOrientation, pRetVal
##
##    def GetNameListOnStory(self, StoryName):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetDiaphragm(self, Name):
##        '-no docstring-'
##        #return DiaphragmName, pRetVal
##
##    def SetDiaphragm(self, Name, DiaphragmName):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetLabelNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, MyLabel, MyStory, pRetVal
##
##    def GetLabelFromName(self, Name):
##        '-no docstring-'
##        #return Label, Story, pRetVal
##
##    def GetNameFromLabel(self, Label, Story):
##        '-no docstring-'
##        #return Name, pRetVal
##
##    def GetRebarDataPier(self, Name):
##        '-no docstring-'
##        #return NumberRebarLayers, LayerID, LayerType, ClearCover, BarSizeName, BarArea, BarSpacing, NumberBars, Confined, EndZoneLength, EndZoneThickness, EndZoneOffset, pRetVal
##
##    def GetRebarDataSpandrel(self, Name):
##        '-no docstring-'
##        #return NumberRebarLayers, LayerID, LayerType, ClearCover, BarSizeIndex, BarArea, BarSpacing, NumberBars, Confined, pRetVal
##
##    def GetAllAreas(self):
##        '-no docstring-'
##        #return NumberNames, MyName, DesignOrientation, NumberBoundaryPts, PointDelimiter, PointNames, PointX, PointY, PointZ, pRetVal
##
##    def GetPier(self, Name):
##        '-no docstring-'
##        #return PierName, pRetVal
##
##    def SetPier(self, Name, PierName, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetSpandrel(self, Name):
##        '-no docstring-'
##        #return SpandrelName, pRetVal
##
##    def SetSpandrel(self, Name, SpandrelName, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetSpringAssignment(self, Name):
##        '-no docstring-'
##        #return SpringProp, pRetVal
##
##    def SetSpringAssignment(self, Name, SpringProp, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetOffsets3(self, Name):
##        '-no docstring-'
##        #return NumberPoints, Offsets, pRetVal
##
##    def GetCurvedEdges(self, Name):
##        '-no docstring-'
##        #return NumEdges, CurveType, Tension, NumPoints, GX, GY, GZ, pRetVal
##

class cAutoWindBridge(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{70CD0E19-584F-458D-AE92-824F10019CA7}')
    _idlflags_ = ['dual', 'oleautomation']
cAutoWindBridge._methods_ = [
]
################################################################
## code template for cAutoWindBridge implementation
##class cAutoWindBridge_Impl(object):


# values for enumeration 'eMatTypeRebar'
eMatTypeRebar_ASTM_A615Gr40 = 1
eMatTypeRebar_ASTM_A615Gr60 = 2
eMatTypeRebar_ASTM_A615Gr75 = 3
eMatTypeRebar_ASTM_A706 = 4
eMatTypeRebar_Chinese_HPB235 = 5
eMatTypeRebar_Chinese_HRB335 = 6
eMatTypeRebar_Chinese_HRB400 = 7
eMatTypeRebar_Indian_Mild250 = 8
eMatTypeRebar_Indian_HYSD415 = 9
eMatTypeRebar_Indian_HYSD500 = 10
eMatTypeRebar_Indian_HYSD550 = 11
eMatTypeRebar = c_int # enum
class cDConcSlabACI318_14(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{C04392A3-99D1-4D05-8DD3-C0284E266F00}')
    _idlflags_ = ['dual', 'oleautomation']
class cDesignStrip(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{B8CBFE5B-F426-4D0A-AEBF-F3A8E222849C}')
    _idlflags_ = ['dual', 'oleautomation']
cDesignConcreteSlab._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'ACI318_14',
              ( ['out', 'retval'], POINTER(POINTER(cDConcSlabACI318_14)), 'pRetVal' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'DesignStrip',
              ( ['out', 'retval'], POINTER(POINTER(cDesignStrip)), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetFlexureAndShear',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StoryName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'DesignStripName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Station' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ConcWidth' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FTopCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FTopMoment' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FTopArea' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FTopAMin' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FBotCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FBotMoment' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FBotArea' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FBotAMin' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AxialForce' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'VCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VForce' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VArea' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Status' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GlobalX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GlobalY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Layer' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetSummaryResultsFlexureAndShear',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StoryName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'DesignStripName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SpanID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Location' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FTopCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FTopMoment' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FTopArea' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FBotCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FBotMoment' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FBotArea' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'VCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VForce' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VArea' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Status' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Layer' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetSummaryResultsSpanDefinition',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StoryName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'DesignStripName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SpanID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SpanLength' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartDist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndDist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GlobalX1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GlobalY1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GlobalX2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GlobalY2' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDesignConcreteSlab implementation
##class cDesignConcreteSlab_Impl(object):
##    @property
##    def ACI318_14(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def DesignStrip(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetFlexureAndShear(self):
##        '-no docstring-'
##        #return StoryName, DesignStripName, Station, ConcWidth, FTopCombo, FTopMoment, FTopArea, FTopAMin, FBotCombo, FBotMoment, FBotArea, FBotAMin, AxialForce, VCombo, VForce, VArea, Status, GlobalX, GlobalY, Layer, pRetVal
##
##    def GetSummaryResultsFlexureAndShear(self):
##        '-no docstring-'
##        #return StoryName, DesignStripName, SpanID, Location, FTopCombo, FTopMoment, FTopArea, FBotCombo, FBotMoment, FBotArea, VCombo, VForce, VArea, Status, Layer, pRetVal
##
##    def GetSummaryResultsSpanDefinition(self):
##        '-no docstring-'
##        #return StoryName, DesignStripName, SpanID, SpanLength, StartDist, EndDist, GlobalX1, GlobalY1, GlobalX2, GlobalY2, pRetVal
##

class cDCoNZS_3101_2006(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{A09EF0A6-D1CB-4329-9BBA-8778D7078794}')
    _idlflags_ = ['dual', 'oleautomation']
cDCoNZS_3101_2006._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDCoNZS_3101_2006 implementation
##class cDCoNZS_3101_2006_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cGenDispl._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'Add',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'MyType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'CountPoint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'Count' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'DeletePoint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'PointName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetPoint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetTypeOAPI',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'MyType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'SetPoint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'PointName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'SetType',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'MyType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'SetTypeOAPI',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'MyType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetTypeGenDispl',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'MyType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cGenDispl implementation
##class cGenDispl_Impl(object):
##    def Add(self, Name, MyType):
##        '-no docstring-'
##        #return pRetVal
##
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def CountPoint(self, Name):
##        '-no docstring-'
##        #return Count, pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeletePoint(self, Name, PointName):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetPoint(self, Name):
##        '-no docstring-'
##        #return NumberItems, PointName, U1, U2, U3, R1, R2, R3, pRetVal
##
##    def GetTypeOAPI(self, Name):
##        '-no docstring-'
##        #return MyType, pRetVal
##
##    def SetPoint(self, Name, PointName):
##        '-no docstring-'
##        #return SF, pRetVal
##
##    def SetType(self, Name, MyType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetTypeOAPI(self, Name, MyType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetTypeGenDispl(self, Name):
##        '-no docstring-'
##        #return MyType, pRetVal
##


# values for enumeration 'eDeckType'
eDeckType_Filled = 1
eDeckType_Unfilled = 2
eDeckType_SolidSlab = 3
eDeckType = c_int # enum
class cDCoACI318_11(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{176897EF-CFAF-470B-A676-074F3D2F8FD2}')
    _idlflags_ = ['dual', 'oleautomation']
cDCoACI318_11._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDCoACI318_11 implementation
##class cDCoACI318_11_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

class cCaseResponseSpectrum(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{CDAAD35B-4090-4499-AA8B-615AF5AA2B0D}')
    _idlflags_ = ['dual', 'oleautomation']
cCaseResponseSpectrum._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetDampConstant',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Damp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetDampInterpolated',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'DampType' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Time' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Damp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetDampOverrides',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Mode' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Damp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetDampProportional',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'DampType' ),
              ( ['in', 'out'], POINTER(c_double), 'DampA' ),
              ( ['in', 'out'], POINTER(c_double), 'DampB' ),
              ( ['in', 'out'], POINTER(c_double), 'DampF1' ),
              ( ['in', 'out'], POINTER(c_double), 'DampF2' ),
              ( ['in', 'out'], POINTER(c_double), 'DampD1' ),
              ( ['in', 'out'], POINTER(c_double), 'DampD2' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetDampType',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'DampType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetDiaphragmEccentricityOverride',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'Num' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Diaph' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Eccen' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetDirComb',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'MyType' ),
              ( ['in', 'out'], POINTER(c_double), 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetEccentricity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Eccen' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetLoads',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Func' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ang' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetModalCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'ModalCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetModalComb',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'MyType' ),
              ( ['in', 'out'], POINTER(c_double), 'F1' ),
              ( ['in', 'out'], POINTER(c_double), 'F2' ),
              ( ['in', 'out'], POINTER(c_double), 'Td' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetModalComb_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'MyType' ),
              ( ['in', 'out'], POINTER(c_double), 'F1' ),
              ( ['in', 'out'], POINTER(c_double), 'F2' ),
              ( ['in', 'out'], POINTER(c_int), 'PeriodicRigidCombType' ),
              ( ['in', 'out'], POINTER(c_double), 'Td' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'SetCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'SetEccentricity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'Eccen' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'SetLoads',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Func' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ang' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'SetModalCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'ModalCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cCaseResponseSpectrum implementation
##class cCaseResponseSpectrum_Impl(object):
##    def GetDampConstant(self, Name):
##        '-no docstring-'
##        #return Damp, pRetVal
##
##    def GetDampInterpolated(self, Name):
##        '-no docstring-'
##        #return DampType, NumberItems, Time, Damp, pRetVal
##
##    def GetDampOverrides(self, Name):
##        '-no docstring-'
##        #return NumberItems, Mode, Damp, pRetVal
##
##    def GetDampProportional(self, Name):
##        '-no docstring-'
##        #return DampType, DampA, DampB, DampF1, DampF2, DampD1, DampD2, pRetVal
##
##    def GetDampType(self, Name):
##        '-no docstring-'
##        #return DampType, pRetVal
##
##    def GetDiaphragmEccentricityOverride(self, Name):
##        '-no docstring-'
##        #return Num, Diaph, Eccen, pRetVal
##
##    def GetDirComb(self, Name):
##        '-no docstring-'
##        #return MyType, SF, pRetVal
##
##    def GetEccentricity(self, Name):
##        '-no docstring-'
##        #return Eccen, pRetVal
##
##    def GetLoads(self, Name):
##        '-no docstring-'
##        #return NumberLoads, LoadName, Func, SF, CSys, Ang, pRetVal
##
##    def GetModalCase(self, Name):
##        '-no docstring-'
##        #return ModalCase, pRetVal
##
##    def GetModalComb(self, Name):
##        '-no docstring-'
##        #return MyType, F1, F2, Td, pRetVal
##
##    def GetModalComb_1(self, Name):
##        '-no docstring-'
##        #return MyType, F1, F2, PeriodicRigidCombType, Td, pRetVal
##
##    def SetCase(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetEccentricity(self, Name, Eccen):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoads(self, Name, NumberLoads):
##        '-no docstring-'
##        #return LoadName, Func, SF, CSys, Ang, pRetVal
##
##    def SetModalCase(self, Name, ModalCase):
##        '-no docstring-'
##        #return pRetVal
##

class cPropFrameSDShape(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{38FD28C3-B05B-43F0-A314-5D06D22688C7}')
    _idlflags_ = ['dual', 'oleautomation']
cPropFrameSDShape._methods_ = [
    COMMETHOD([dispid(2)], HRESULT, 'GetAngle',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'ShapeName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['in', 'out'], POINTER(c_int), 'color' ),
              ( ['in', 'out'], POINTER(c_double), 'XCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'YCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'H' ),
              ( ['in', 'out'], POINTER(c_double), 'Bf' ),
              ( ['in', 'out'], POINTER(c_double), 'Tf' ),
              ( ['in', 'out'], POINTER(c_double), 'Tw' ),
              ( ['in', 'out'], POINTER(c_double), 'Rotation' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetISection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'ShapeName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['in', 'out'], POINTER(c_int), 'color' ),
              ( ['in', 'out'], POINTER(c_double), 'XCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'YCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'H' ),
              ( ['in', 'out'], POINTER(c_double), 'Bf' ),
              ( ['in', 'out'], POINTER(c_double), 'Tf' ),
              ( ['in', 'out'], POINTER(c_double), 'Tw' ),
              ( ['in', 'out'], POINTER(c_double), 'Bfb' ),
              ( ['in', 'out'], POINTER(c_double), 'Tfb' ),
              ( ['in', 'out'], POINTER(c_double), 'Rotation' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetReinfCircle',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'ShapeName' ),
              ( ['in', 'out'], POINTER(c_double), 'XCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'YCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'Diameter' ),
              ( ['in', 'out'], POINTER(c_int), 'NumBars' ),
              ( ['in', 'out'], POINTER(c_double), 'Rotation' ),
              ( ['in', 'out'], POINTER(BSTR), 'RebarSize' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatRebar' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetReinfCorner',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'ShapeName' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PointNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'RebarSize' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetReinfEdge',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'ShapeName' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'EdgeNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'RebarSize' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Spacing' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Cover' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'GetReinfLine',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'ShapeName' ),
              ( ['in', 'out'], POINTER(c_double), 'X1' ),
              ( ['in', 'out'], POINTER(c_double), 'Y1' ),
              ( ['in', 'out'], POINTER(c_double), 'X2' ),
              ( ['in', 'out'], POINTER(c_double), 'Y2' ),
              ( ['in', 'out'], POINTER(c_double), 'Spacing' ),
              ( ['in', 'out'], POINTER(BSTR), 'RebarSize' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'EndBars' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatRebar' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'GetReinfRectangular',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'ShapeName' ),
              ( ['in', 'out'], POINTER(c_double), 'XCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'YCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'H' ),
              ( ['in', 'out'], POINTER(c_double), 'W' ),
              ( ['in', 'out'], POINTER(c_double), 'Rotation' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatRebar' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'GetReinfSingle',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'ShapeName' ),
              ( ['in', 'out'], POINTER(c_double), 'XCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'YCenter' ),
              ( ['in', 'out'], POINTER(BSTR), 'RebarSize' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatRebar' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'GetSolidCircle',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'ShapeName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(BSTR), 'SSOverwrite' ),
              ( ['in', 'out'], POINTER(c_int), 'color' ),
              ( ['in', 'out'], POINTER(c_double), 'XCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'YCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'Diameter' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Reinf' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberBars' ),
              ( ['in', 'out'], POINTER(c_double), 'Rotation' ),
              ( ['in', 'out'], POINTER(c_double), 'Cover' ),
              ( ['in', 'out'], POINTER(BSTR), 'RebarSize' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatRebar' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'GetSolidRect',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'ShapeName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(BSTR), 'SSOverwrite' ),
              ( ['in', 'out'], POINTER(c_int), 'color' ),
              ( ['in', 'out'], POINTER(c_double), 'XCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'YCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'H' ),
              ( ['in', 'out'], POINTER(c_double), 'W' ),
              ( ['in', 'out'], POINTER(c_double), 'Rotation' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Reinf' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatRebar' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'GetTee',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'ShapeName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['in', 'out'], POINTER(c_int), 'color' ),
              ( ['in', 'out'], POINTER(c_double), 'XCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'YCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'H' ),
              ( ['in', 'out'], POINTER(c_double), 'Bf' ),
              ( ['in', 'out'], POINTER(c_double), 'Tf' ),
              ( ['in', 'out'], POINTER(c_double), 'Tw' ),
              ( ['in', 'out'], POINTER(c_double), 'Rotation' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(42)], HRESULT, 'GetConcreteL',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'ShapeName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['in', 'out'], POINTER(c_int), 'color' ),
              ( ['in', 'out'], POINTER(c_double), 'XCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'YCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'H' ),
              ( ['in', 'out'], POINTER(c_double), 'Bf' ),
              ( ['in', 'out'], POINTER(c_double), 'Tf' ),
              ( ['in', 'out'], POINTER(c_double), 'Tw' ),
              ( ['in', 'out'], POINTER(c_double), 'Rotation' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'MirrorAbout2' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'MirrorAbout3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(43)], HRESULT, 'GetConcreteTee',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'ShapeName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['in', 'out'], POINTER(c_int), 'color' ),
              ( ['in', 'out'], POINTER(c_double), 'XCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'YCenter' ),
              ( ['in', 'out'], POINTER(c_double), 'H' ),
              ( ['in', 'out'], POINTER(c_double), 'Bf' ),
              ( ['in', 'out'], POINTER(c_double), 'Tf' ),
              ( ['in', 'out'], POINTER(c_double), 'Tw' ),
              ( ['in', 'out'], POINTER(c_double), 'Rotation' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'MirrorAbout3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cPropFrameSDShape implementation
##class cPropFrameSDShape_Impl(object):
##    def GetAngle(self, Name, ShapeName):
##        '-no docstring-'
##        #return MatProp, PropName, color, XCenter, YCenter, H, Bf, Tf, Tw, Rotation, pRetVal
##
##    def GetISection(self, Name, ShapeName):
##        '-no docstring-'
##        #return MatProp, PropName, color, XCenter, YCenter, H, Bf, Tf, Tw, Bfb, Tfb, Rotation, pRetVal
##
##    def GetReinfCircle(self, Name, ShapeName):
##        '-no docstring-'
##        #return XCenter, YCenter, Diameter, NumBars, Rotation, RebarSize, MatRebar, pRetVal
##
##    def GetReinfCorner(self, Name, ShapeName):
##        '-no docstring-'
##        #return NumberItems, PointNum, RebarSize, pRetVal
##
##    def GetReinfEdge(self, Name, ShapeName):
##        '-no docstring-'
##        #return NumberItems, EdgeNum, RebarSize, Spacing, Cover, pRetVal
##
##    def GetReinfLine(self, Name, ShapeName):
##        '-no docstring-'
##        #return X1, Y1, X2, Y2, Spacing, RebarSize, EndBars, MatRebar, pRetVal
##
##    def GetReinfRectangular(self, Name, ShapeName):
##        '-no docstring-'
##        #return XCenter, YCenter, H, W, Rotation, MatRebar, pRetVal
##
##    def GetReinfSingle(self, Name, ShapeName):
##        '-no docstring-'
##        #return XCenter, YCenter, RebarSize, MatRebar, pRetVal
##
##    def GetSolidCircle(self, Name, ShapeName):
##        '-no docstring-'
##        #return MatProp, SSOverwrite, color, XCenter, YCenter, Diameter, Reinf, NumberBars, Rotation, Cover, RebarSize, MatRebar, pRetVal
##
##    def GetSolidRect(self, Name, ShapeName):
##        '-no docstring-'
##        #return MatProp, SSOverwrite, color, XCenter, YCenter, H, W, Rotation, Reinf, MatRebar, pRetVal
##
##    def GetTee(self, Name, ShapeName):
##        '-no docstring-'
##        #return MatProp, PropName, color, XCenter, YCenter, H, Bf, Tf, Tw, Rotation, pRetVal
##
##    def GetConcreteL(self, Name, ShapeName):
##        '-no docstring-'
##        #return MatProp, PropName, color, XCenter, YCenter, H, Bf, Tf, Tw, Rotation, MirrorAbout2, MirrorAbout3, pRetVal
##
##    def GetConcreteTee(self, Name, ShapeName):
##        '-no docstring-'
##        #return MatProp, PropName, color, XCenter, YCenter, H, Bf, Tf, Tw, Rotation, MirrorAbout3, pRetVal
##


# values for enumeration 'eBridgeObjectUserPointType'
eBridgeObjectUserPointType_General = 0
eBridgeObjectUserPointType_SegmentalTendon = 1
eBridgeObjectUserPointType = c_int # enum

# values for enumeration 'eHingeLocationType'
eHingeLocationType_RelativeDistance = 1
eHingeLocationType_OffsetFromIEnd = 2
eHingeLocationType_OffsetFromJEnd = 3
eHingeLocationType = c_int # enum
cDatabaseTables._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'ApplyEditedTables',
              ( ['in'], VARIANT_BOOL, 'FillImportLog' ),
              ( ['in', 'out'], POINTER(c_int), 'NumFatalErrors' ),
              ( ['in', 'out'], POINTER(c_int), 'NumErrorMsgs' ),
              ( ['in', 'out'], POINTER(c_int), 'NumWarnMsgs' ),
              ( ['in', 'out'], POINTER(c_int), 'NumInfoMsgs' ),
              ( ['in', 'out'], POINTER(BSTR), 'ImportLog' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'CancelTableEditing',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetAllFieldsInTable',
              ( ['in'], BSTR, 'TableKey' ),
              ( ['in', 'out'], POINTER(c_int), 'TableVersion' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberFields' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FieldKey' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FieldName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Description' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'UnitsString' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'IsImportable' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetAllTables',
              ( ['in', 'out'], POINTER(c_int), 'NumberTables' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TableKey' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TableName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ImportType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'IsEmpty' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetAvailableTables',
              ( ['in', 'out'], POINTER(c_int), 'NumberTables' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TableKey' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TableName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ImportType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetLoadCasesSelectedForDisplay',
              ( ['in', 'out'], POINTER(c_int), 'NumberSelectedLoadCases' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCaseList' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetLoadCombinationsSelectedForDisplay',
              ( ['in', 'out'], POINTER(c_int), 'NumberSelectedLoadCombinations' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCombinationList' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetLoadPatternsSelectedForDisplay',
              ( ['in', 'out'], POINTER(c_int), 'NumberSelectedLoadPatterns' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPatternList' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetOutputOptionsForDisplay',
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IsUserBaseReactionLocation' ),
              ( ['in', 'out'], POINTER(c_double), 'UserBaseReactionX' ),
              ( ['in', 'out'], POINTER(c_double), 'UserBaseReactionY' ),
              ( ['in', 'out'], POINTER(c_double), 'UserBaseReactionZ' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IsAllModes' ),
              ( ['in', 'out'], POINTER(c_int), 'StartMode' ),
              ( ['in', 'out'], POINTER(c_int), 'EndMode' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IsAllBucklingModes' ),
              ( ['in', 'out'], POINTER(c_int), 'StartBucklingMode' ),
              ( ['in', 'out'], POINTER(c_int), 'EndBucklingMode' ),
              ( ['in', 'out'], POINTER(c_int), 'MultistepStatic' ),
              ( ['in', 'out'], POINTER(c_int), 'NonlinearStatic' ),
              ( ['in', 'out'], POINTER(c_int), 'ModalHistory' ),
              ( ['in', 'out'], POINTER(c_int), 'DirectHistory' ),
              ( ['in', 'out'], POINTER(c_int), 'Combo' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetTableForDisplayArray',
              ( ['in'], BSTR, 'TableKey' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FieldKeyList' ),
              ( ['in'], BSTR, 'GroupName' ),
              ( ['in', 'out'], POINTER(c_int), 'TableVersion' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FieldsKeysIncluded' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberRecords' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TableData' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetTableForDisplayCSVFile',
              ( ['in'], BSTR, 'TableKey' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FieldKeyList' ),
              ( ['in'], BSTR, 'GroupName' ),
              ( ['in', 'out'], POINTER(c_int), 'TableVersion' ),
              ( ['in'], BSTR, 'csvFilePath' ),
              ( ['in', 'optional'], BSTR, 'sepChar', ',' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetTableForDisplayCSVString',
              ( ['in'], BSTR, 'TableKey' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FieldKeyList' ),
              ( ['in'], BSTR, 'GroupName' ),
              ( ['in', 'out'], POINTER(c_int), 'TableVersion' ),
              ( ['in', 'out'], POINTER(BSTR), 'csvString' ),
              ( ['in', 'optional'], BSTR, 'sepChar', ',' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'GetTableForDisplayXMLString',
              ( ['in'], BSTR, 'TableKey' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FieldKeyList' ),
              ( ['in'], BSTR, 'GroupName' ),
              ( ['in'], VARIANT_BOOL, 'IncludeSchema' ),
              ( ['in', 'out'], POINTER(c_int), 'TableVersion' ),
              ( ['in', 'out'], POINTER(BSTR), 'XMLTableData' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'GetTableForEditingArray',
              ( ['in'], BSTR, 'TableKey' ),
              ( ['in'], BSTR, 'GroupName' ),
              ( ['in', 'out'], POINTER(c_int), 'TableVersion' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FieldsKeysIncluded' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberRecords' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TableData' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'GetTableForEditingCSVFile',
              ( ['in'], BSTR, 'TableKey' ),
              ( ['in'], BSTR, 'GroupName' ),
              ( ['in', 'out'], POINTER(c_int), 'TableVersion' ),
              ( ['in'], BSTR, 'csvFilePath' ),
              ( ['in', 'optional'], BSTR, 'sepChar', ',' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'GetTableForEditingCSVString',
              ( ['in'], BSTR, 'TableKey' ),
              ( ['in'], BSTR, 'GroupName' ),
              ( ['in', 'out'], POINTER(c_int), 'TableVersion' ),
              ( ['in', 'out'], POINTER(BSTR), 'csvString' ),
              ( ['in', 'optional'], BSTR, 'sepChar', ',' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'SetLoadCasesSelectedForDisplay',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCaseList' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'SetLoadCombinationsSelectedForDisplay',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCombinationList' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'SetLoadPatternsSelectedForDisplay',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPatternList' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'SetOutputOptionsForDisplay',
              ( ['in'], VARIANT_BOOL, 'IsUserBaseReactionLocation' ),
              ( ['in'], c_double, 'UserBaseReactionX' ),
              ( ['in'], c_double, 'UserBaseReactionY' ),
              ( ['in'], c_double, 'UserBaseReactionZ' ),
              ( ['in'], VARIANT_BOOL, 'IsAllModes' ),
              ( ['in'], c_int, 'StartMode' ),
              ( ['in'], c_int, 'EndMode' ),
              ( ['in'], VARIANT_BOOL, 'IsAllBucklingModes' ),
              ( ['in'], c_int, 'StartBucklingMode' ),
              ( ['in'], c_int, 'EndBucklingMode' ),
              ( ['in'], c_int, 'MultistepStatic' ),
              ( ['in'], c_int, 'NonlinearStatic' ),
              ( ['in'], c_int, 'ModalHistory' ),
              ( ['in'], c_int, 'DirectHistory' ),
              ( ['in'], c_int, 'Combo' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'SetTableForEditingArray',
              ( ['in'], BSTR, 'TableKey' ),
              ( ['in', 'out'], POINTER(c_int), 'TableVersion' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FieldsKeysIncluded' ),
              ( ['in'], c_int, 'NumberRecords' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TableData' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'SetTableForEditingCSVFile',
              ( ['in'], BSTR, 'TableKey' ),
              ( ['in', 'out'], POINTER(c_int), 'TableVersion' ),
              ( ['in'], BSTR, 'csvFilePath' ),
              ( ['in', 'optional'], BSTR, 'sepChar', ',' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(23)], HRESULT, 'SetTableForEditingCSVString',
              ( ['in'], BSTR, 'TableKey' ),
              ( ['in', 'out'], POINTER(c_int), 'TableVersion' ),
              ( ['in', 'out'], POINTER(BSTR), 'csvString' ),
              ( ['in', 'optional'], BSTR, 'sepChar', ',' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(24)], HRESULT, 'ShowTablesInExcel',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TableKeyList' ),
              ( ['in'], c_int, 'WindowHandle' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDatabaseTables implementation
##class cDatabaseTables_Impl(object):
##    def ApplyEditedTables(self, FillImportLog):
##        '-no docstring-'
##        #return NumFatalErrors, NumErrorMsgs, NumWarnMsgs, NumInfoMsgs, ImportLog, pRetVal
##
##    def CancelTableEditing(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetAllFieldsInTable(self, TableKey):
##        '-no docstring-'
##        #return TableVersion, NumberFields, FieldKey, FieldName, Description, UnitsString, IsImportable, pRetVal
##
##    def GetAllTables(self):
##        '-no docstring-'
##        #return NumberTables, TableKey, TableName, ImportType, IsEmpty, pRetVal
##
##    def GetAvailableTables(self):
##        '-no docstring-'
##        #return NumberTables, TableKey, TableName, ImportType, pRetVal
##
##    def GetLoadCasesSelectedForDisplay(self):
##        '-no docstring-'
##        #return NumberSelectedLoadCases, LoadCaseList, pRetVal
##
##    def GetLoadCombinationsSelectedForDisplay(self):
##        '-no docstring-'
##        #return NumberSelectedLoadCombinations, LoadCombinationList, pRetVal
##
##    def GetLoadPatternsSelectedForDisplay(self):
##        '-no docstring-'
##        #return NumberSelectedLoadPatterns, LoadPatternList, pRetVal
##
##    def GetOutputOptionsForDisplay(self):
##        '-no docstring-'
##        #return IsUserBaseReactionLocation, UserBaseReactionX, UserBaseReactionY, UserBaseReactionZ, IsAllModes, StartMode, EndMode, IsAllBucklingModes, StartBucklingMode, EndBucklingMode, MultistepStatic, NonlinearStatic, ModalHistory, DirectHistory, Combo, pRetVal
##
##    def GetTableForDisplayArray(self, TableKey, GroupName):
##        '-no docstring-'
##        #return FieldKeyList, TableVersion, FieldsKeysIncluded, NumberRecords, TableData, pRetVal
##
##    def GetTableForDisplayCSVFile(self, TableKey, GroupName, csvFilePath, sepChar):
##        '-no docstring-'
##        #return FieldKeyList, TableVersion, pRetVal
##
##    def GetTableForDisplayCSVString(self, TableKey, GroupName, sepChar):
##        '-no docstring-'
##        #return FieldKeyList, TableVersion, csvString, pRetVal
##
##    def GetTableForDisplayXMLString(self, TableKey, GroupName, IncludeSchema):
##        '-no docstring-'
##        #return FieldKeyList, TableVersion, XMLTableData, pRetVal
##
##    def GetTableForEditingArray(self, TableKey, GroupName):
##        '-no docstring-'
##        #return TableVersion, FieldsKeysIncluded, NumberRecords, TableData, pRetVal
##
##    def GetTableForEditingCSVFile(self, TableKey, GroupName, csvFilePath, sepChar):
##        '-no docstring-'
##        #return TableVersion, pRetVal
##
##    def GetTableForEditingCSVString(self, TableKey, GroupName, sepChar):
##        '-no docstring-'
##        #return TableVersion, csvString, pRetVal
##
##    def SetLoadCasesSelectedForDisplay(self):
##        '-no docstring-'
##        #return LoadCaseList, pRetVal
##
##    def SetLoadCombinationsSelectedForDisplay(self):
##        '-no docstring-'
##        #return LoadCombinationList, pRetVal
##
##    def SetLoadPatternsSelectedForDisplay(self):
##        '-no docstring-'
##        #return LoadPatternList, pRetVal
##
##    def SetOutputOptionsForDisplay(self, IsUserBaseReactionLocation, UserBaseReactionX, UserBaseReactionY, UserBaseReactionZ, IsAllModes, StartMode, EndMode, IsAllBucklingModes, StartBucklingMode, EndBucklingMode, MultistepStatic, NonlinearStatic, ModalHistory, DirectHistory, Combo):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetTableForEditingArray(self, TableKey, NumberRecords):
##        '-no docstring-'
##        #return TableVersion, FieldsKeysIncluded, TableData, pRetVal
##
##    def SetTableForEditingCSVFile(self, TableKey, csvFilePath, sepChar):
##        '-no docstring-'
##        #return TableVersion, pRetVal
##
##    def SetTableForEditingCSVString(self, TableKey, sepChar):
##        '-no docstring-'
##        #return TableVersion, csvString, pRetVal
##
##    def ShowTablesInExcel(self, WindowHandle):
##        '-no docstring-'
##        #return TableKeyList, pRetVal
##

cHelper._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'CreateObject',
              ( ['in'], BSTR, 'fullPath' ),
              ( ['out', 'retval'], POINTER(POINTER(cOAPI)), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetObject',
              ( ['in'], BSTR, 'typeName' ),
              ( ['out', 'retval'], POINTER(POINTER(cOAPI)), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'CreateObjectProgID',
              ( ['in'], BSTR, 'progID' ),
              ( ['out', 'retval'], POINTER(POINTER(cOAPI)), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetOAPIVersionNumber',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'CreateObjectHost',
              ( ['in'], BSTR, 'hostName' ),
              ( ['in'], BSTR, 'fullPath' ),
              ( ['out', 'retval'], POINTER(POINTER(cOAPI)), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'CreateObjectHostPort',
              ( ['in'], BSTR, 'hostName' ),
              ( ['in'], c_int, 'portNumber' ),
              ( ['in'], BSTR, 'fullPath' ),
              ( ['out', 'retval'], POINTER(POINTER(cOAPI)), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'CreateObjectProgIDHost',
              ( ['in'], BSTR, 'hostName' ),
              ( ['in'], BSTR, 'progID' ),
              ( ['out', 'retval'], POINTER(POINTER(cOAPI)), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'CreateObjectProgIDHostPort',
              ( ['in'], BSTR, 'hostName' ),
              ( ['in'], c_int, 'portNumber' ),
              ( ['in'], BSTR, 'progID' ),
              ( ['out', 'retval'], POINTER(POINTER(cOAPI)), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetObjectHost',
              ( ['in'], BSTR, 'hostName' ),
              ( ['in'], BSTR, 'progID' ),
              ( ['out', 'retval'], POINTER(POINTER(cOAPI)), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetObjectHostPort',
              ( ['in'], BSTR, 'hostName' ),
              ( ['in'], c_int, 'portNumber' ),
              ( ['in'], BSTR, 'progID' ),
              ( ['out', 'retval'], POINTER(POINTER(cOAPI)), 'pRetVal' )),
]
################################################################
## code template for cHelper implementation
##class cHelper_Impl(object):
##    def CreateObject(self, fullPath):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetObject(self, typeName):
##        '-no docstring-'
##        #return pRetVal
##
##    def CreateObjectProgID(self, progID):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetOAPIVersionNumber(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def CreateObjectHost(self, hostName, fullPath):
##        '-no docstring-'
##        #return pRetVal
##
##    def CreateObjectHostPort(self, hostName, portNumber, fullPath):
##        '-no docstring-'
##        #return pRetVal
##
##    def CreateObjectProgIDHost(self, hostName, progID):
##        '-no docstring-'
##        #return pRetVal
##
##    def CreateObjectProgIDHostPort(self, hostName, portNumber, progID):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetObjectHost(self, hostName, progID):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetObjectHostPort(self, hostName, portNumber, progID):
##        '-no docstring-'
##        #return pRetVal
##

class cCaseModalRitz(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{BC3315E4-2774-497E-97B0-E5861D0CEE16}')
    _idlflags_ = ['dual', 'oleautomation']
cCaseModalRitz._methods_ = [
]
################################################################
## code template for cCaseModalRitz implementation
##class cCaseModalRitz_Impl(object):

cLinkObj._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'AddByCoord',
              ( ['in'], c_double, 'XI' ),
              ( ['in'], c_double, 'YI' ),
              ( ['in'], c_double, 'ZI' ),
              ( ['in'], c_double, 'XJ' ),
              ( ['in'], c_double, 'YJ' ),
              ( ['in'], c_double, 'ZJ' ),
              ( ['in', 'out'], POINTER(BSTR), 'Name' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'IsSingleJoint', False ),
              ( ['in', 'optional'], BSTR, 'PropName', 'Default' ),
              ( ['in', 'optional'], BSTR, 'UserName', '' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'AddByPoint',
              ( ['in'], BSTR, 'Point1' ),
              ( ['in'], BSTR, 'Point2' ),
              ( ['in', 'out'], POINTER(BSTR), 'Name' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'IsSingleJoint', False ),
              ( ['in', 'optional'], BSTR, 'PropName', 'Default' ),
              ( ['in', 'optional'], BSTR, 'UserName', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetElm',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'Elm' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetGUID',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetLocalAxes',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Ang' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Advanced' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetLocalAxesAdvanced',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Active' ),
              ( ['in', 'out'], POINTER(c_int), 'AxVectOpt' ),
              ( ['in', 'out'], POINTER(BSTR), 'AxCSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'AxDir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AxPt' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AxVect' ),
              ( ['in', 'out'], POINTER(c_int), 'Plane2' ),
              ( ['in', 'out'], POINTER(c_int), 'PlVectOpt' ),
              ( ['in', 'out'], POINTER(BSTR), 'PlCSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PlDir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PlPt' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PlVect' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetPoints',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'Point1' ),
              ( ['in', 'out'], POINTER(BSTR), 'Point2' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetProperty',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'GetSelected',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Selected' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'GetTransformationMatrix',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'IsGlobal', True ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'SetGroupAssign',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'GroupName' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Remove', False ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'SetGUID',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'SetLocalAxes',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'Ang' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'SetLocalAxesAdvanced',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'Active' ),
              ( ['in'], c_int, 'AxVectOpt' ),
              ( ['in'], BSTR, 'AxCSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'AxDir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AxPt' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AxVect' ),
              ( ['in'], c_int, 'Plane2' ),
              ( ['in'], c_int, 'PlVectOpt' ),
              ( ['in'], BSTR, 'PlCSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PlDir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PlPt' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PlVect' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'SetProperty',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'PropName' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'SetSelected',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'Selected' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(33)], HRESULT, 'GetGroupAssign',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberGroups' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Groups' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'GetNameListOnStory',
              ( ['in'], BSTR, 'StoryName' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cLinkObj implementation
##class cLinkObj_Impl(object):
##    def AddByCoord(self, XI, YI, ZI, XJ, YJ, ZJ, IsSingleJoint, PropName, UserName, CSys):
##        '-no docstring-'
##        #return Name, pRetVal
##
##    def AddByPoint(self, Point1, Point2, IsSingleJoint, PropName, UserName):
##        '-no docstring-'
##        #return Name, pRetVal
##
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetElm(self, Name):
##        '-no docstring-'
##        #return Elm, pRetVal
##
##    def GetGUID(self, Name):
##        '-no docstring-'
##        #return GUID, pRetVal
##
##    def GetLocalAxes(self, Name):
##        '-no docstring-'
##        #return Ang, Advanced, pRetVal
##
##    def GetLocalAxesAdvanced(self, Name):
##        '-no docstring-'
##        #return Active, AxVectOpt, AxCSys, AxDir, AxPt, AxVect, Plane2, PlVectOpt, PlCSys, PlDir, PlPt, PlVect, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetPoints(self, Name):
##        '-no docstring-'
##        #return Point1, Point2, pRetVal
##
##    def GetProperty(self, Name):
##        '-no docstring-'
##        #return PropName, pRetVal
##
##    def GetSelected(self, Name):
##        '-no docstring-'
##        #return Selected, pRetVal
##
##    def GetTransformationMatrix(self, Name, IsGlobal):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetGroupAssign(self, Name, GroupName, Remove, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetGUID(self, Name, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLocalAxes(self, Name, Ang, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLocalAxesAdvanced(self, Name, Active, AxVectOpt, AxCSys, Plane2, PlVectOpt, PlCSys, ItemType):
##        '-no docstring-'
##        #return AxDir, AxPt, AxVect, PlDir, PlPt, PlVect, pRetVal
##
##    def SetProperty(self, Name, PropName, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSelected(self, Name, Selected, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetGroupAssign(self, Name):
##        '-no docstring-'
##        #return NumberGroups, Groups, pRetVal
##
##    def GetNameListOnStory(self, StoryName):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##

cOptions._methods_ = [
]
################################################################
## code template for cOptions implementation
##class cOptions_Impl(object):

class cCaseDirectHistoryNonlinear(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{961A9E5B-B81E-4B18-92F2-B42593550890}')
    _idlflags_ = ['dual', 'oleautomation']
cCaseDirectHistoryNonlinear._methods_ = [
    COMMETHOD([dispid(4)], HRESULT, 'GetLoads',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Func' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Tf' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'At' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ang' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cCaseDirectHistoryNonlinear implementation
##class cCaseDirectHistoryNonlinear_Impl(object):
##    def GetLoads(self, Name):
##        '-no docstring-'
##        #return NumberLoads, LoadType, LoadName, Func, SF, Tf, At, CSys, Ang, pRetVal
##


# values for enumeration 'eBridgeTendonCategory'
eBridgeTendonCategory_General = 0
eBridgeTendonCategory_Cantilever = 1
eBridgeTendonCategory_BottomSpan = 2
eBridgeTendonCategory_TopSpan = 3
eBridgeTendonCategory_Continuity = 4
eBridgeTendonCategory = c_int # enum
class cCaseModalHistoryLinear(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{89D6DA7F-45B2-4C28-81E8-77DB817FDB9C}')
    _idlflags_ = ['dual', 'oleautomation']
class cCaseModalHistoryNonlinear(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{81FFBED7-4CF9-44B0-BEDE-38195E5C6B52}')
    _idlflags_ = ['dual', 'oleautomation']
class cCaseStaticLinear(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{AE73755E-671C-4FB1-8778-4191654F5CDE}')
    _idlflags_ = ['dual', 'oleautomation']
class cCaseStaticNonlinear(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{ADAB597E-EC5A-43C6-9910-1C70912766F6}')
    _idlflags_ = ['dual', 'oleautomation']
class cCaseStaticNonlinearStaged(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{2CB60D1D-AF61-4E6C-9859-F19C58DF4901}')
    _idlflags_ = ['dual', 'oleautomation']
cLoadCases._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'Buckling',
              ( ['out', 'retval'], POINTER(POINTER(cCaseBuckling)), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'Count',
              ( ['in', 'optional'], eLoadCaseType, 'CaseType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'DirHistLinear',
              ( ['out', 'retval'], POINTER(POINTER(cCaseDirectHistoryLinear)), 'pRetVal' )),
    COMMETHOD([dispid(6), 'propget'], HRESULT, 'DirHistNonlinear',
              ( ['out', 'retval'], POINTER(POINTER(cCaseDirectHistoryNonlinear)), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'optional'], eLoadCaseType, 'CaseType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(27)], HRESULT, 'GetTypeOAPI_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(eLoadCaseType), 'CaseType' ),
              ( ['in', 'out'], POINTER(c_int), 'SubType' ),
              ( ['in', 'out'], POINTER(eLoadPatternType), 'DesignType' ),
              ( ['in', 'out'], POINTER(c_int), 'DesignTypeOption' ),
              ( ['in', 'out'], POINTER(c_int), 'Auto' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10), 'propget'], HRESULT, 'HyperStatic',
              ( ['out', 'retval'], POINTER(POINTER(cCaseHyperStatic)), 'pRetVal' )),
    COMMETHOD([dispid(11), 'propget'], HRESULT, 'ModalEigen',
              ( ['out', 'retval'], POINTER(POINTER(cCaseModalEigen)), 'pRetVal' )),
    COMMETHOD([dispid(12), 'propget'], HRESULT, 'ModalRitz',
              ( ['out', 'retval'], POINTER(POINTER(cCaseModalRitz)), 'pRetVal' )),
    COMMETHOD([dispid(13), 'propget'], HRESULT, 'ModHistLinear',
              ( ['out', 'retval'], POINTER(POINTER(cCaseModalHistoryLinear)), 'pRetVal' )),
    COMMETHOD([dispid(14), 'propget'], HRESULT, 'ModHistNonlinear',
              ( ['out', 'retval'], POINTER(POINTER(cCaseModalHistoryNonlinear)), 'pRetVal' )),
    COMMETHOD([dispid(15), 'propget'], HRESULT, 'ResponseSpectrum',
              ( ['out', 'retval'], POINTER(POINTER(cCaseResponseSpectrum)), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'SetDesignType',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'DesignTypeOption' ),
              ( ['in', 'optional'], eLoadPatternType, 'DesignType', 1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18), 'propget'], HRESULT, 'StaticLinear',
              ( ['out', 'retval'], POINTER(POINTER(cCaseStaticLinear)), 'pRetVal' )),
    COMMETHOD([dispid(19), 'propget'], HRESULT, 'StaticNonlinear',
              ( ['out', 'retval'], POINTER(POINTER(cCaseStaticNonlinear)), 'pRetVal' )),
    COMMETHOD([dispid(20), 'propget'], HRESULT, 'StaticNonlinearStaged',
              ( ['out', 'retval'], POINTER(POINTER(cCaseStaticNonlinearStaged)), 'pRetVal' )),
    COMMETHOD([dispid(26)], HRESULT, 'GetTypeOAPI',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(eLoadCaseType), 'CaseType' ),
              ( ['in', 'out'], POINTER(c_int), 'SubType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cLoadCases implementation
##class cLoadCases_Impl(object):
##    @property
##    def Buckling(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self, CaseType):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def DirHistLinear(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def DirHistNonlinear(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetNameList(self, CaseType):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetTypeOAPI_1(self, Name):
##        '-no docstring-'
##        #return CaseType, SubType, DesignType, DesignTypeOption, Auto, pRetVal
##
##    @property
##    def HyperStatic(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ModalEigen(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ModalRitz(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ModHistLinear(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ModHistNonlinear(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def ResponseSpectrum(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDesignType(self, Name, DesignTypeOption, DesignType):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def StaticLinear(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def StaticNonlinear(self):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def StaticNonlinearStaged(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetTypeOAPI(self, Name):
##        '-no docstring-'
##        #return CaseType, SubType, pRetVal
##

cCaseStaticLinear._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetInitialCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'InitialCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetLoads',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetInitialCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'InitialCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'SetLoads',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cCaseStaticLinear implementation
##class cCaseStaticLinear_Impl(object):
##    def GetInitialCase(self, Name):
##        '-no docstring-'
##        #return InitialCase, pRetVal
##
##    def GetLoads(self, Name):
##        '-no docstring-'
##        #return NumberLoads, LoadType, LoadName, SF, pRetVal
##
##    def SetCase(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetInitialCase(self, Name, InitialCase):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoads(self, Name, NumberLoads):
##        '-no docstring-'
##        #return LoadType, LoadName, SF, pRetVal
##


# values for enumeration 'eBridgeSegmentConstructionMethod'
eBridgeSegmentConstructionMethod_Precast = 0
eBridgeSegmentConstructionMethod_CastInPlace = 1
eBridgeSegmentConstructionMethod = c_int # enum
cDStNewZealand_NZS3404_97._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDStNewZealand_NZS3404_97 implementation
##class cDStNewZealand_NZS3404_97_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##


# values for enumeration 'eBridgeSegmentType'
eBridgeSegmentType_Rigid = 0
eBridgeSegmentType_PierTable = 1
eBridgeSegmentType_Segment = 2
eBridgeSegmentType_Closure = 3
eBridgeSegmentType = c_int # enum

# values for enumeration 'eDiaphragmOption'
eDiaphragmOption_Disconnect = 1
eDiaphragmOption_FromShellObject = 2
eDiaphragmOption_DefinedDiaphragm = 3
eDiaphragmOption = c_int # enum

# values for enumeration 'eLinkPropType'
eLinkPropType_Linear = 1
eLinkPropType_Damper = 2
eLinkPropType_Gap = 3
eLinkPropType_Hook = 4
eLinkPropType_PlasticWen = 5
eLinkPropType_Isolator1 = 6
eLinkPropType_Isolator2 = 7
eLinkPropType_MultilinearElastic = 8
eLinkPropType_MultilinearPlastic = 9
eLinkPropType_Isolator3 = 10
eLinkPropType = c_int # enum
cPropLink._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Count',
              ( ['in', 'optional'], eLinkPropType, 'PropType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetDamper',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'C' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CExp' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ2' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ3' ),
              ( ['in', 'out'], POINTER(BSTR), 'notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetFrictionIsolator',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Slow' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Fast' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Rate' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Radius' ),
              ( ['in', 'out'], POINTER(c_double), 'Damping' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ2' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ3' ),
              ( ['in', 'out'], POINTER(BSTR), 'notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetGap',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dis' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ2' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ3' ),
              ( ['in', 'out'], POINTER(BSTR), 'notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetHook',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dis' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ2' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ3' ),
              ( ['in', 'out'], POINTER(BSTR), 'notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetLinear',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ2' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ3' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'KeCoupled' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'CeCoupled' ),
              ( ['in', 'out'], POINTER(BSTR), 'notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetMultiLinearElastic',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ2' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ3' ),
              ( ['in', 'out'], POINTER(BSTR), 'notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetMultiLinearPlastic',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ2' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ3' ),
              ( ['in', 'out'], POINTER(BSTR), 'notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetMultiLinearPoints',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'DOF' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'D' ),
              ( ['in', 'out'], POINTER(c_int), 'MyType' ),
              ( ['in', 'out'], POINTER(c_double), 'A1' ),
              ( ['in', 'out'], POINTER(c_double), 'A2' ),
              ( ['in', 'out'], POINTER(c_double), 'B1' ),
              ( ['in', 'out'], POINTER(c_double), 'B2' ),
              ( ['in', 'out'], POINTER(c_double), 'Eta' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'optional'], eLinkPropType, 'PropType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'GetPDelta',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'GetPlasticWen',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Yield' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ratio' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Exp' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ2' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ3' ),
              ( ['in', 'out'], POINTER(BSTR), 'notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'GetRubberIsolator',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Yield' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ratio' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ2' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ3' ),
              ( ['in', 'out'], POINTER(BSTR), 'notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'GetSpringData',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'DefinedForThisLength' ),
              ( ['in', 'out'], POINTER(c_double), 'DefinedForThisArea' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'GetTCFrictionIsolator',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Slow' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Fast' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Rate' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Radius' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SlowT' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FastT' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RateT' ),
              ( ['in', 'out'], POINTER(c_double), 'Kt' ),
              ( ['in', 'out'], POINTER(c_double), 'Dis' ),
              ( ['in', 'out'], POINTER(c_double), 'Dist' ),
              ( ['in', 'out'], POINTER(c_double), 'Damping' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ2' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ3' ),
              ( ['in', 'out'], POINTER(BSTR), 'notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'GetTypeOAPI',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(eLinkPropType), 'PropType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'GetWeightAndMass',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'W' ),
              ( ['in', 'out'], POINTER(c_double), 'M' ),
              ( ['in', 'out'], POINTER(c_double), 'R1' ),
              ( ['in', 'out'], POINTER(c_double), 'R2' ),
              ( ['in', 'out'], POINTER(c_double), 'R3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'SetDamper',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'C' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CExp' ),
              ( ['in'], c_double, 'DJ2' ),
              ( ['in'], c_double, 'DJ3' ),
              ( ['in', 'optional'], BSTR, 'notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'SetFrictionIsolator',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Slow' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Fast' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Rate' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Radius' ),
              ( ['in'], c_double, 'Damping' ),
              ( ['in'], c_double, 'DJ2' ),
              ( ['in'], c_double, 'DJ3' ),
              ( ['in', 'optional'], BSTR, 'notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'SetGap',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dis' ),
              ( ['in'], c_double, 'DJ2' ),
              ( ['in'], c_double, 'DJ3' ),
              ( ['in', 'optional'], BSTR, 'notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(23)], HRESULT, 'SetHook',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dis' ),
              ( ['in'], c_double, 'DJ2' ),
              ( ['in'], c_double, 'DJ3' ),
              ( ['in', 'optional'], BSTR, 'notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(24)], HRESULT, 'SetLinear',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in'], c_double, 'DJ2' ),
              ( ['in'], c_double, 'DJ3' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'KeCoupled', False ),
              ( ['in', 'optional'], VARIANT_BOOL, 'CeCoupled', False ),
              ( ['in', 'optional'], BSTR, 'notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(25)], HRESULT, 'SetMultiLinearElastic',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in'], c_double, 'DJ2' ),
              ( ['in'], c_double, 'DJ3' ),
              ( ['in', 'optional'], BSTR, 'notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(26)], HRESULT, 'SetMultiLinearPlastic',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in'], c_double, 'DJ2' ),
              ( ['in'], c_double, 'DJ3' ),
              ( ['in', 'optional'], BSTR, 'notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(27)], HRESULT, 'SetMultiLinearPoints',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'DOF' ),
              ( ['in'], c_int, 'NumberPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'D' ),
              ( ['in', 'optional'], c_int, 'MyType', 1 ),
              ( ['in', 'optional'], c_double, 'A1', 0.0 ),
              ( ['in', 'optional'], c_double, 'A2', 0.0 ),
              ( ['in', 'optional'], c_double, 'B1', 0.0 ),
              ( ['in', 'optional'], c_double, 'B2', 0.0 ),
              ( ['in', 'optional'], c_double, 'Eta', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(28)], HRESULT, 'SetPDelta',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(29)], HRESULT, 'SetPlasticWen',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Yield' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ratio' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Exp' ),
              ( ['in'], c_double, 'DJ2' ),
              ( ['in'], c_double, 'DJ3' ),
              ( ['in', 'optional'], BSTR, 'notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(30)], HRESULT, 'SetRubberIsolator',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Yield' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ratio' ),
              ( ['in'], c_double, 'DJ2' ),
              ( ['in'], c_double, 'DJ3' ),
              ( ['in', 'optional'], BSTR, 'notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(31)], HRESULT, 'SetSpringData',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'DefinedForThisLength' ),
              ( ['in'], c_double, 'DefinedForThisArea' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(32)], HRESULT, 'SetTCFrictionIsolator',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Slow' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Fast' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Rate' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Radius' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SlowT' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FastT' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RateT' ),
              ( ['in'], c_double, 'Kt' ),
              ( ['in'], c_double, 'Dis' ),
              ( ['in'], c_double, 'Dist' ),
              ( ['in'], c_double, 'Damping' ),
              ( ['in'], c_double, 'DJ2' ),
              ( ['in'], c_double, 'DJ3' ),
              ( ['in', 'optional'], BSTR, 'notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(33)], HRESULT, 'SetWeightAndMass',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'W' ),
              ( ['in'], c_double, 'M' ),
              ( ['in'], c_double, 'R1' ),
              ( ['in'], c_double, 'R2' ),
              ( ['in'], c_double, 'R3' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(34)], HRESULT, 'GetDamperBilinear',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'C' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ForceLimit' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ2' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ3' ),
              ( ['in', 'out'], POINTER(BSTR), 'notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(35)], HRESULT, 'GetDamperFrictionSpring',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'u0' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'us' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Direction' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ2' ),
              ( ['in', 'out'], POINTER(c_double), 'DJ3' ),
              ( ['in', 'out'], POINTER(BSTR), 'notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(38)], HRESULT, 'SetDamperBilinear',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'C' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ForceLimit' ),
              ( ['in'], c_double, 'DJ2' ),
              ( ['in'], c_double, 'DJ3' ),
              ( ['in', 'optional'], BSTR, 'notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(39)], HRESULT, 'SetDamperFrictionSpring',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'u0' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'us' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Direction' ),
              ( ['in'], c_double, 'DJ2' ),
              ( ['in'], c_double, 'DJ3' ),
              ( ['in', 'optional'], BSTR, 'notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(42)], HRESULT, 'GetAcceptanceCriteria',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'AcceptanceType' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Symmetric' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Active' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'IOPos' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LSPos' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CPPos' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'IONeg' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LSNeg' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CPNeg' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(43)], HRESULT, 'SetAcceptanceCriteria',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'AcceptanceType' ),
              ( ['in'], VARIANT_BOOL, 'Symmetric' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Active' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'IOPos' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LSPos' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CPPos' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'IONeg' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LSNeg' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CPNeg' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cPropLink implementation
##class cPropLink_Impl(object):
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self, PropType):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetDamper(self, Name):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, K, C, CExp, DJ2, DJ3, notes, GUID, pRetVal
##
##    def GetFrictionIsolator(self, Name):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, K, Slow, Fast, Rate, Radius, Damping, DJ2, DJ3, notes, GUID, pRetVal
##
##    def GetGap(self, Name):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, K, Dis, DJ2, DJ3, notes, GUID, pRetVal
##
##    def GetHook(self, Name):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, K, Dis, DJ2, DJ3, notes, GUID, pRetVal
##
##    def GetLinear(self, Name):
##        '-no docstring-'
##        #return DOF, Fixed, Ke, Ce, DJ2, DJ3, KeCoupled, CeCoupled, notes, GUID, pRetVal
##
##    def GetMultiLinearElastic(self, Name):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, DJ2, DJ3, notes, GUID, pRetVal
##
##    def GetMultiLinearPlastic(self, Name):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, DJ2, DJ3, notes, GUID, pRetVal
##
##    def GetMultiLinearPoints(self, Name, DOF):
##        '-no docstring-'
##        #return NumberPoints, F, D, MyType, A1, A2, B1, B2, Eta, pRetVal
##
##    def GetNameList(self, PropType):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetPDelta(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetPlasticWen(self, Name):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, K, Yield, Ratio, Exp, DJ2, DJ3, notes, GUID, pRetVal
##
##    def GetRubberIsolator(self, Name):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, K, Yield, Ratio, DJ2, DJ3, notes, GUID, pRetVal
##
##    def GetSpringData(self, Name):
##        '-no docstring-'
##        #return DefinedForThisLength, DefinedForThisArea, pRetVal
##
##    def GetTCFrictionIsolator(self, Name):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, K, Slow, Fast, Rate, Radius, SlowT, FastT, RateT, Kt, Dis, Dist, Damping, DJ2, DJ3, notes, GUID, pRetVal
##
##    def GetTypeOAPI(self, Name):
##        '-no docstring-'
##        #return PropType, pRetVal
##
##    def GetWeightAndMass(self, Name):
##        '-no docstring-'
##        #return W, M, R1, R2, R3, pRetVal
##
##    def SetDamper(self, Name, DJ2, DJ3, notes, GUID):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, K, C, CExp, pRetVal
##
##    def SetFrictionIsolator(self, Name, Damping, DJ2, DJ3, notes, GUID):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, K, Slow, Fast, Rate, Radius, pRetVal
##
##    def SetGap(self, Name, DJ2, DJ3, notes, GUID):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, K, Dis, pRetVal
##
##    def SetHook(self, Name, DJ2, DJ3, notes, GUID):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, K, Dis, pRetVal
##
##    def SetLinear(self, Name, DJ2, DJ3, KeCoupled, CeCoupled, notes, GUID):
##        '-no docstring-'
##        #return DOF, Fixed, Ke, Ce, pRetVal
##
##    def SetMultiLinearElastic(self, Name, DJ2, DJ3, notes, GUID):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, pRetVal
##
##    def SetMultiLinearPlastic(self, Name, DJ2, DJ3, notes, GUID):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, pRetVal
##
##    def SetMultiLinearPoints(self, Name, DOF, NumberPoints, MyType, A1, A2, B1, B2, Eta):
##        '-no docstring-'
##        #return F, D, pRetVal
##
##    def SetPDelta(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetPlasticWen(self, Name, DJ2, DJ3, notes, GUID):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, K, Yield, Ratio, Exp, pRetVal
##
##    def SetRubberIsolator(self, Name, DJ2, DJ3, notes, GUID):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, K, Yield, Ratio, pRetVal
##
##    def SetSpringData(self, Name, DefinedForThisLength, DefinedForThisArea):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetTCFrictionIsolator(self, Name, Kt, Dis, Dist, Damping, DJ2, DJ3, notes, GUID):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, K, Slow, Fast, Rate, Radius, SlowT, FastT, RateT, pRetVal
##
##    def SetWeightAndMass(self, Name, W, M, R1, R2, R3):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetDamperBilinear(self, Name):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, K, C, CY, ForceLimit, DJ2, DJ3, notes, GUID, pRetVal
##
##    def GetDamperFrictionSpring(self, Name):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, K, K1, K2, u0, us, Direction, DJ2, DJ3, notes, GUID, pRetVal
##
##    def SetDamperBilinear(self, Name, DJ2, DJ3, notes, GUID):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, K, C, CY, ForceLimit, pRetVal
##
##    def SetDamperFrictionSpring(self, Name, DJ2, DJ3, notes, GUID):
##        '-no docstring-'
##        #return DOF, Fixed, Nonlinear, Ke, Ce, K, K1, K2, u0, us, Direction, pRetVal
##
##    def GetAcceptanceCriteria(self, Name):
##        '-no docstring-'
##        #return AcceptanceType, Symmetric, Active, IOPos, LSPos, CPPos, IONeg, LSNeg, CPNeg, pRetVal
##
##    def SetAcceptanceCriteria(self, Name, AcceptanceType, Symmetric):
##        '-no docstring-'
##        #return Active, IOPos, LSPos, CPPos, IONeg, LSNeg, CPNeg, pRetVal
##

cLinkElm._methods_ = [
]
################################################################
## code template for cLinkElm implementation
##class cLinkElm_Impl(object):

cCaseModalHistoryLinear._methods_ = [
    COMMETHOD([dispid(6)], HRESULT, 'GetLoads',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Func' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Tf' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'At' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ang' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'SetCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'SetLoads',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Func' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Tf' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'At' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ang' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cCaseModalHistoryLinear implementation
##class cCaseModalHistoryLinear_Impl(object):
##    def GetLoads(self, Name):
##        '-no docstring-'
##        #return NumberLoads, LoadType, LoadName, Func, SF, Tf, At, CSys, Ang, pRetVal
##
##    def SetCase(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoads(self, Name, NumberLoads):
##        '-no docstring-'
##        #return LoadType, LoadName, Func, SF, Tf, At, CSys, Ang, pRetVal
##


# values for enumeration 'eDesignActionType'
eDesignActionType_NonComposite = 1
eDesignActionType_ShortTermComposite = 2
eDesignActionType_LongTermComposite = 3
eDesignActionType_Staged = 4
eDesignActionType_Other = 5
eDesignActionType = c_int # enum
class Library(object):
    'ETABS Application Programming Interface (API) v1'
    name = 'ETABSv1'
    _reg_typelib_ = ('{542F7A9D-3A7D-4061-97B3-3A1276FF83BD}', 1, 0)

cDetailing._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'ClearDetailing',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetDetailedBeamLines',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BeamLineIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetDetailedBeamLineData',
              ( ['in'], BSTR, 'BeamLineID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectUniqueNames' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberSpans' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SpanLength' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumLongBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LongBarDiameter' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LongBarNotation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LongBarStartDist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LongBarStartBend' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LongBarEndBend' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LongBarLength' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LongBarNumLayers' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumTieBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumTieVertLegs' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TieBarDiameter' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TieBarNotation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TieBarStartDist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TieBarSpacing' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'TieBarType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'GetDetailedBeamLineData_1',
              ( ['in'], BSTR, 'BeamLineID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectUniqueNames' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberSpans' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SpanLength' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumLongBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LongBarGUID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LongBarDiameter' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LongBarNotation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LongBarStartDist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LongBarStartBend' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LongBarEndBend' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LongBarLength' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LongBarNumLayers' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumTieBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumTieVertLegs' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TieBarGUID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TieBarDiameter' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TieBarNotation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TieBarStartDist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TieBarSpacing' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'TieBarType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetDetailedColumnStacks',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ColumnStackIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetDetailedColumnStackData',
              ( ['in'], BSTR, 'ColumnStackID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectUniqueNames' ),
              ( ['in', 'out'], POINTER(c_int), 'NumLongBarSets' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumLongBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LongBarDiameter' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LongBarNotation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LongBarStartDist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LongBarStartBend' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LongBarEndBend' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LongBarLength' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LongBarNumLayers' ),
              ( ['in', 'out'], POINTER(c_int), 'NumTieZones' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TieBarZones' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumTieBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumTieVertLegs' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TieBarDiameter' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TieBarNotation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TieBarStartDist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TieBarSpacing' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'TieBarType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'GetDetailedColumnStackData_1',
              ( ['in'], BSTR, 'ColumnStackID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectUniqueNames' ),
              ( ['in', 'out'], POINTER(c_int), 'NumLongBarSets' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumLongBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LongBarGUID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LongBarDiameter' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LongBarNotation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LongBarStartDist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LongBarStartBend' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LongBarEndBend' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LongBarLength' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LongBarNumLayers' ),
              ( ['in', 'out'], POINTER(c_int), 'NumTieZones' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TieBarZones' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumTieBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumTieHorLegs' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumTieVertLegs' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TieBarGUID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TieBarDiameter' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TieBarNotation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TieBarStartDist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TieBarSpacing' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'TieBarType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetDetailedSlabs',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Names' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SlabElevations' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GUIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetDetailedSlabBotBarData',
              ( ['in'], BSTR, 'SlabName' ),
              ( ['in', 'out'], POINTER(c_int), 'NumData' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Names' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BarDiameter' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BarNotation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BarMaterial' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WidthLeft' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WidthRight' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'OffsetFromTop' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'OffsetFromBot' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'StartBarBend' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'EndBarBend' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GUIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'GetDetailedSlabBotBarData_1',
              ( ['in'], BSTR, 'SlabName' ),
              ( ['in', 'out'], POINTER(c_int), 'NumData' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Names' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BarDiameter' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BarNotation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BarMaterial' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WidthLeft' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WidthRight' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'OffsetFromTop' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'OffsetFromBot' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'StartBarBend' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'EndBarBend' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GUIDs' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StripNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SpanNos' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetDetailedSlabTopBarData',
              ( ['in'], BSTR, 'SlabName' ),
              ( ['in', 'out'], POINTER(c_int), 'NumData' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Names' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BarDiameter' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BarNotation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BarMaterial' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WidthLeft' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WidthRight' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'OffsetFromTop' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'OffsetFromBot' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'StartBarBend' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'EndBarBend' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GUIDs' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'GetDetailedSlabTopBarData_1',
              ( ['in'], BSTR, 'SlabName' ),
              ( ['in', 'out'], POINTER(c_int), 'NumData' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Names' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BarDiameter' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BarNotation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BarMaterial' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WidthLeft' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WidthRight' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'OffsetFromTop' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'OffsetFromBot' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'StartBarBend' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'EndBarBend' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GUIDs' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StripNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SpanNos' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'GetDetailingAvailable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetSimilarBeamLines',
              ( ['in'], BSTR, 'BeamLineID' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberSimilarBeams' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberUniqueObjects' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectUniqueNames' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetSimilarColumnStacks',
              ( ['in'], BSTR, 'ColumnStackID' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberSimilarColumns' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberUniqueObjects' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectUniqueNames' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetSimilarSlabs',
              ( ['in'], BSTR, 'SlabName' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberSimilarSlabs' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Names' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'StartDetailing',
              ( ['in'], VARIANT_BOOL, 'OverwriteExisting' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'GetBeamLongRebarData',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberRebarSets' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BarSizeName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BarArea' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Location' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ClearCover' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartCoord1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BarLength' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BendingAngleStart' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BendingAngleEnd' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'RebarSetGUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'GetBeamTieRebarData',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberRebarSets' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BarSizeName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BarArea' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'NumberLegs' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Location' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ClearCover' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartCoord1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Spacing' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Lengths' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'RebarSetGUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'GetColumnLongRebarData',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberRebarSets' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BarSizeName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BarArea' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberCBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberR3Bars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberR2Bars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Location' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ClearCover' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'RebarSetGUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'GetColumnTieRebarData',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberRebarSets' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BarSizeName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BarArea' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Pattern' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ConfineType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberLegs2Dir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumberLegs3Dir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Location' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ClearCover' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartCoord1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Spacing' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Heights' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'RebarSetGUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(43)], HRESULT, 'GetDetailedBeamLineGuidData',
              ( ['in'], BSTR, 'BeamLineID' ),
              ( ['in'], BSTR, 'SimilarFirstBeamUniqueID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LongitudinalABars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LongitudinalBBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LongitudinalCBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LongitudinalDBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LongitudinalEBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LongitudinalFBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LongitudinalGBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LongitudinalHBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ZoneATies' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ZoneBTies' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ZoneCTies' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(44)], HRESULT, 'GetDetailedColumnStackGuidData',
              ( ['in'], BSTR, 'ColumnStackID' ),
              ( ['in'], BSTR, 'SimilarFirstColumnUniqueID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LongitudinalBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TiesA' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TiesB' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TiesC' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(45)], HRESULT, 'GetDetailedColumnStackData_2',
              ( ['in'], BSTR, 'ColumnStackID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectUniqueNames' ),
              ( ['in', 'out'], POINTER(c_int), 'NumLongBarSets' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumLongBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumLongR2Bars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumLongR3Bars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LongBarGUID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LongBarDiameter' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LongBarNotation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LongBarStartDist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LongBarStartBend' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LongBarEndBend' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LongBarLength' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LongBarNumLayers' ),
              ( ['in', 'out'], POINTER(c_int), 'NumTieZones' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TieBarZone' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumTieBars' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumTieR2Legs' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumTieR3Legs' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TieBarGUID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TieBarDiameter' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TieBarNotation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TieBarStartDist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TieBarSpacing' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'TieBarType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'GetNumberDetailedSlabs',
              ( ['in', 'out'], POINTER(c_int), 'NumberDetailingOutput' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(23)], HRESULT, 'GetDetailedSlab_OneDetailingOutputInfo',
              ( ['in'], c_int, 'DetailingOutputIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'Guid_ETABS' ),
              ( ['in', 'out'], POINTER(BSTR), 'Floor' ),
              ( ['in', 'out'], POINTER(BSTR), 'StoryNameETABS' ),
              ( ['in', 'out'], POINTER(c_double), 'LevelZ' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberStrips' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(24)], HRESULT, 'GetOneDetailedSlab_OneDetailingOutput_StripInfo',
              ( ['in'], c_int, 'DetailingOutputIndex' ),
              ( ['in'], c_int, 'StripIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'LayerName' ),
              ( ['in', 'out'], POINTER(BSTR), 'StripType' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberRegions' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(46)], HRESULT, 'GetOneDetailedSlab_OneDetailingOutput_StripGUID',
              ( ['in'], c_int, 'DetailingOutputIndex' ),
              ( ['in'], c_int, 'StripIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'Guid_ETABS' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(25)], HRESULT, 'GetOneDetailedSlab_OneDetailingOutput_OneStrip_OneDetailingRegionInfo',
              ( ['in'], c_int, 'DetailingOutputIndex' ),
              ( ['in'], c_int, 'StripIndex' ),
              ( ['in'], c_int, 'DetailingRegionIndex' ),
              ( ['in', 'out'], POINTER(c_double), 'X1' ),
              ( ['in', 'out'], POINTER(c_double), 'Y1' ),
              ( ['in', 'out'], POINTER(c_double), 'X2' ),
              ( ['in', 'out'], POINTER(c_double), 'Y2' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberTopBars' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberBottomBars' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(26)], HRESULT, 'GetOneDetailedSlab_OneDetailingOutput_OneStrip_OneDetailingRegion_OneTopRebarInfo',
              ( ['in'], c_int, 'DetailingOutputIndex' ),
              ( ['in'], c_int, 'StripIndex' ),
              ( ['in'], c_int, 'DetailingRegionIndex' ),
              ( ['in'], c_int, 'TopRebarIndex' ),
              ( ['in', 'out'], POINTER(c_double), 'X1' ),
              ( ['in', 'out'], POINTER(c_double), 'Y1' ),
              ( ['in', 'out'], POINTER(c_double), 'X2' ),
              ( ['in', 'out'], POINTER(c_double), 'Y2' ),
              ( ['in', 'out'], POINTER(c_double), 'WidthRight' ),
              ( ['in', 'out'], POINTER(c_double), 'WidthLeft' ),
              ( ['in', 'out'], POINTER(c_double), 'Z' ),
              ( ['in', 'out'], POINTER(c_double), 'ReqAst' ),
              ( ['in', 'out'], POINTER(c_double), 'ProvAst' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(27)], HRESULT, 'GetOneDetailedSlab_OneDetailingOutput_OneStrip_OneDetailingRegion_OneBottomRebarInfo',
              ( ['in'], c_int, 'DetailingOutputIndex' ),
              ( ['in'], c_int, 'StripIndex' ),
              ( ['in'], c_int, 'DetailingRegionIndex' ),
              ( ['in'], c_int, 'BottomRebarIndex' ),
              ( ['in', 'out'], POINTER(c_double), 'X1' ),
              ( ['in', 'out'], POINTER(c_double), 'Y1' ),
              ( ['in', 'out'], POINTER(c_double), 'X2' ),
              ( ['in', 'out'], POINTER(c_double), 'Y2' ),
              ( ['in', 'out'], POINTER(c_double), 'WidthRight' ),
              ( ['in', 'out'], POINTER(c_double), 'WidthLeft' ),
              ( ['in', 'out'], POINTER(c_double), 'Z' ),
              ( ['in', 'out'], POINTER(c_double), 'ReqAst' ),
              ( ['in', 'out'], POINTER(c_double), 'ProvAst' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(28)], HRESULT, 'GetOneDetailedSlab_OneDetailingOutput_OneStrip_OneDetailingRegion_OneTopRebar_Bar1Info',
              ( ['in'], c_int, 'DetailingOutputIndex' ),
              ( ['in'], c_int, 'StripIndex' ),
              ( ['in'], c_int, 'DetailingRegionIndex' ),
              ( ['in'], c_int, 'TopRebarIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['in', 'out'], POINTER(BSTR), 'PlaceCode' ),
              ( ['in', 'out'], POINTER(c_double), 'Dia' ),
              ( ['in', 'out'], POINTER(BSTR), 'Size' ),
              ( ['in', 'out'], POINTER(c_int), 'Number' ),
              ( ['in', 'out'], POINTER(c_double), 'StartDist' ),
              ( ['in', 'out'], POINTER(c_double), 'EndDist' ),
              ( ['in', 'out'], POINTER(c_int), 'StartBend' ),
              ( ['in', 'out'], POINTER(c_int), 'EndBend' ),
              ( ['in', 'out'], POINTER(BSTR), 'Material' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(29)], HRESULT, 'GetOneDetailedSlab_OneDetailingOutput_OneStrip_OneDetailingRegion_OneTopRebar_Bar2Info',
              ( ['in'], c_int, 'DetailingOutputIndex' ),
              ( ['in'], c_int, 'StripIndex' ),
              ( ['in'], c_int, 'DetailingRegionIndex' ),
              ( ['in'], c_int, 'TopRebarIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['in', 'out'], POINTER(BSTR), 'PlaceCode' ),
              ( ['in', 'out'], POINTER(c_double), 'Dia' ),
              ( ['in', 'out'], POINTER(BSTR), 'Size' ),
              ( ['in', 'out'], POINTER(c_int), 'Number' ),
              ( ['in', 'out'], POINTER(c_double), 'StartDist' ),
              ( ['in', 'out'], POINTER(c_double), 'EndDist' ),
              ( ['in', 'out'], POINTER(c_int), 'StartBend' ),
              ( ['in', 'out'], POINTER(c_int), 'EndBend' ),
              ( ['in', 'out'], POINTER(BSTR), 'Material' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(30)], HRESULT, 'GetOneDetailedSlab_OneDetailingOutput_OneStrip_OneDetailingRegion_OneBottomRebar_Bar1Info',
              ( ['in'], c_int, 'DetailingOutputIndex' ),
              ( ['in'], c_int, 'StripIndex' ),
              ( ['in'], c_int, 'DetailingRegionIndex' ),
              ( ['in'], c_int, 'BottomRebarIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['in', 'out'], POINTER(BSTR), 'PlaceCode' ),
              ( ['in', 'out'], POINTER(c_double), 'Dia' ),
              ( ['in', 'out'], POINTER(BSTR), 'Size' ),
              ( ['in', 'out'], POINTER(c_int), 'Number' ),
              ( ['in', 'out'], POINTER(c_double), 'StartDist' ),
              ( ['in', 'out'], POINTER(c_double), 'EndDist' ),
              ( ['in', 'out'], POINTER(c_int), 'StartBend' ),
              ( ['in', 'out'], POINTER(c_int), 'EndBend' ),
              ( ['in', 'out'], POINTER(BSTR), 'Material' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(31)], HRESULT, 'GetOneDetailedSlab_OneDetailingOutput_OneStrip_OneDetailingRegion_OneBottomRebar_Bar2Info',
              ( ['in'], c_int, 'DetailingOutputIndex' ),
              ( ['in'], c_int, 'StripIndex' ),
              ( ['in'], c_int, 'DetailingRegionIndex' ),
              ( ['in'], c_int, 'BottomRebarIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['in', 'out'], POINTER(BSTR), 'PlaceCode' ),
              ( ['in', 'out'], POINTER(c_double), 'Dia' ),
              ( ['in', 'out'], POINTER(BSTR), 'Size' ),
              ( ['in', 'out'], POINTER(c_int), 'Number' ),
              ( ['in', 'out'], POINTER(c_double), 'StartDist' ),
              ( ['in', 'out'], POINTER(c_double), 'EndDist' ),
              ( ['in', 'out'], POINTER(c_int), 'StartBend' ),
              ( ['in', 'out'], POINTER(c_int), 'EndBend' ),
              ( ['in', 'out'], POINTER(BSTR), 'Material' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(32)], HRESULT, 'GetNumberDetailedWallStacks',
              ( ['in', 'out'], POINTER(c_int), 'NumberWallStacks' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(33)], HRESULT, 'GetDetailed_OneWallStack',
              ( ['in'], c_int, 'WallStackIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['in', 'out'], POINTER(c_int), 'TowerID' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberPiers' ),
              ( ['in', 'out'], POINTER(c_int), 'NUmberSpandrels' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(34)], HRESULT, 'GetDetailedWall_OneWallStack_OnePierOutputInfo',
              ( ['in'], c_int, 'WallStackIndex' ),
              ( ['in'], c_int, 'PierIndex' ),
              ( ['in', 'out'], POINTER(c_int), 'StoryID' ),
              ( ['in', 'out'], POINTER(BSTR), 'ETABSStoryName' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberDesignLegs' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(35)], HRESULT, 'GetDetailedWall_OneWallStack_OnePier_OneDesignLegOutputInfo',
              ( ['in'], c_int, 'WallStackIndex' ),
              ( ['in'], c_int, 'PierIndex' ),
              ( ['in'], c_int, 'DesignLegIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['in', 'out'], POINTER(BSTR), 'PierLabel' ),
              ( ['in', 'out'], POINTER(c_double), 'X1' ),
              ( ['in', 'out'], POINTER(c_double), 'Y1' ),
              ( ['in', 'out'], POINTER(c_double), 'z1' ),
              ( ['in', 'out'], POINTER(c_double), 'X2' ),
              ( ['in', 'out'], POINTER(c_double), 'Y2' ),
              ( ['in', 'out'], POINTER(c_double), 'z2' ),
              ( ['in', 'out'], POINTER(c_double), 'ZLevel' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberVerticalBars' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberHorizontalBars' ),
              ( ['in', 'out'], POINTER(c_int), 'TotalAreaObjects' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaObjectNames' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(36)], HRESULT, 'GetDetailedWall_OneWallStack_OnePier_OneDesignLeg_OneVerticalBarInfo',
              ( ['in'], c_int, 'WallStackIndex' ),
              ( ['in'], c_int, 'PierIndex' ),
              ( ['in'], c_int, 'DesignLegIndex' ),
              ( ['in'], c_int, 'VerticalBarIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['in', 'out'], POINTER(c_double), 'BarSizeFirst_Dia' ),
              ( ['in', 'out'], POINTER(c_double), 'BarSizeFirst_Area' ),
              ( ['in', 'out'], POINTER(c_double), 'BarSizeFirst_Fy' ),
              ( ['in', 'out'], POINTER(BSTR), 'BarSizeFirst_Notation' ),
              ( ['in', 'out'], POINTER(c_double), 'BarSizeLast_Dia' ),
              ( ['in', 'out'], POINTER(c_double), 'BarSizeLast_Area' ),
              ( ['in', 'out'], POINTER(c_double), 'BarSizeLast_Fy' ),
              ( ['in', 'out'], POINTER(BSTR), 'BarSizeLast_Notation' ),
              ( ['in', 'out'], POINTER(c_double), 'BarSizeOthers_Dia' ),
              ( ['in', 'out'], POINTER(c_double), 'BarSizeOthers_Area' ),
              ( ['in', 'out'], POINTER(c_double), 'BarSizeOthers_Fy' ),
              ( ['in', 'out'], POINTER(BSTR), 'BarSizeOthers_Notation' ),
              ( ['in', 'out'], POINTER(c_int), 'Number' ),
              ( ['in', 'out'], POINTER(c_double), 'StartX' ),
              ( ['in', 'out'], POINTER(c_double), 'StartY' ),
              ( ['in', 'out'], POINTER(c_double), 'EndX' ),
              ( ['in', 'out'], POINTER(c_double), 'EndY' ),
              ( ['in', 'out'], POINTER(c_int), 'StartBarBend' ),
              ( ['in', 'out'], POINTER(c_int), 'EndBarBend' ),
              ( ['in', 'out'], POINTER(c_double), 'OffsetZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BarLength' ),
              ( ['in', 'out'], POINTER(c_int), 'LocationCode' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(37)], HRESULT, 'GetDetailedWall_OneWallStack_OnePier_OneDesignLeg_OneTieBarInfo',
              ( ['in'], c_int, 'WallStackIndex' ),
              ( ['in'], c_int, 'PierIndex' ),
              ( ['in'], c_int, 'DesignLegIndex' ),
              ( ['in'], c_int, 'TieBarIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['in', 'out'], POINTER(c_double), 'BarSize_Dia' ),
              ( ['in', 'out'], POINTER(c_double), 'BarSize_Area' ),
              ( ['in', 'out'], POINTER(c_double), 'BarSize_Fy' ),
              ( ['in', 'out'], POINTER(BSTR), 'BarSize_Notation' ),
              ( ['in', 'out'], POINTER(c_double), 'Spacing' ),
              ( ['in', 'out'], POINTER(c_double), 'StartZ' ),
              ( ['in', 'out'], POINTER(c_double), 'EndZ' ),
              ( ['in', 'out'], POINTER(c_int), 'TieShape' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberOfTiePlines' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(38)], HRESULT, 'GetDetailedWall_OneWallStack_OnePier_OneDesignLeg_OneTieBar_OneTiePlineInfo',
              ( ['in'], c_int, 'WallStackIndex' ),
              ( ['in'], c_int, 'PierIndex' ),
              ( ['in'], c_int, 'DesignLegIndex' ),
              ( ['in'], c_int, 'TieBarIndex' ),
              ( ['in'], c_int, 'TiePLineIndex' ),
              ( ['in', 'out'], POINTER(c_double), 'Dia' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberPoints' ),
              ( ['in', 'out'], POINTER(c_double), 'ZoneLength' ),
              ( ['in', 'out'], POINTER(c_int), 'LocationCode' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(39)], HRESULT, 'GetDetailedWall_OnePier_OneDesignLeg_OneTieBar_OneTiePline_OnePoint',
              ( ['in'], c_int, 'WallStackIndex' ),
              ( ['in'], c_int, 'PierIndex' ),
              ( ['in'], c_int, 'DesignLegIndex' ),
              ( ['in'], c_int, 'TieBarIndex' ),
              ( ['in'], c_int, 'TiePLineIndex' ),
              ( ['in'], c_int, 'TPLinePointIndex' ),
              ( ['in', 'out'], POINTER(c_double), 'X' ),
              ( ['in', 'out'], POINTER(c_double), 'Y' ),
              ( ['in', 'out'], POINTER(c_double), 'Z' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(40)], HRESULT, 'GetDetailedWall_OneWallStack_OneSpandrelOutputInfo',
              ( ['in'], c_int, 'WallStackIndex' ),
              ( ['in'], c_int, 'SpandrelIndex' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['in', 'out'], POINTER(BSTR), 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Height' ),
              ( ['in', 'out'], POINTER(c_double), 'Width' ),
              ( ['in', 'out'], POINTER(c_double), 'Thickness' ),
              ( ['in', 'out'], POINTER(c_double), 'CoverLongBar' ),
              ( ['in', 'out'], POINTER(c_double), 'CoverStirrups' ),
              ( ['in', 'out'], POINTER(c_double), 'X1' ),
              ( ['in', 'out'], POINTER(c_double), 'Y1' ),
              ( ['in', 'out'], POINTER(c_double), 'z1' ),
              ( ['in', 'out'], POINTER(c_double), 'X2' ),
              ( ['in', 'out'], POINTER(c_double), 'Y2' ),
              ( ['in', 'out'], POINTER(c_double), 'z2' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberLongBars' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberStirrups' ),
              ( ['in', 'out'], POINTER(c_int), 'TotalAreaObjects' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaObjectNames' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(41)], HRESULT, 'GetDetailedWall_OneWallStack_OneSpandrel_OneLongBarInfo',
              ( ['in'], c_int, 'WallStackIndex' ),
              ( ['in'], c_int, 'SpandrelIndex' ),
              ( ['in'], c_int, 'LongBarIndex' ),
              ( ['in', 'out'], POINTER(c_double), 'BarSize_Dia' ),
              ( ['in', 'out'], POINTER(c_double), 'BarSize_Area' ),
              ( ['in', 'out'], POINTER(c_double), 'BarSize_Fy' ),
              ( ['in', 'out'], POINTER(BSTR), 'BarSize_Notation' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z' ),
              ( ['in', 'out'], POINTER(c_int), 'StartType' ),
              ( ['in', 'out'], POINTER(c_int), 'EndType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(42)], HRESULT, 'GetDetailedWall_OneWallStack_OneSpandrel_OneStirrupsInfo',
              ( ['in'], c_int, 'WallStackIndex' ),
              ( ['in'], c_int, 'SpandrelIndex' ),
              ( ['in'], c_int, 'StirrupsIndex' ),
              ( ['in', 'out'], POINTER(c_double), 'BarSize_Dia' ),
              ( ['in', 'out'], POINTER(c_double), 'BarSize_Area' ),
              ( ['in', 'out'], POINTER(c_double), 'BarSize_Fy' ),
              ( ['in', 'out'], POINTER(BSTR), 'BarSize_Notation' ),
              ( ['in', 'out'], POINTER(c_double), 'X1' ),
              ( ['in', 'out'], POINTER(c_double), 'X2' ),
              ( ['in', 'out'], POINTER(c_double), 'Spacing' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberLegs' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDetailing implementation
##class cDetailing_Impl(object):
##    def ClearDetailing(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetDetailedBeamLines(self):
##        '-no docstring-'
##        #return NumberItems, BeamLineIDs, pRetVal
##
##    def GetDetailedBeamLineData(self, BeamLineID):
##        '-no docstring-'
##        #return ObjectUniqueNames, NumberSpans, SpanLength, NumLongBars, LongBarDiameter, LongBarNotation, LongBarStartDist, LongBarStartBend, LongBarEndBend, LongBarLength, LongBarNumLayers, NumTieBars, NumTieVertLegs, TieBarDiameter, TieBarNotation, TieBarStartDist, TieBarSpacing, TieBarType, pRetVal
##
##    def GetDetailedBeamLineData_1(self, BeamLineID):
##        '-no docstring-'
##        #return ObjectUniqueNames, NumberSpans, SpanLength, NumLongBars, LongBarGUID, LongBarDiameter, LongBarNotation, LongBarStartDist, LongBarStartBend, LongBarEndBend, LongBarLength, LongBarNumLayers, NumTieBars, NumTieVertLegs, TieBarGUID, TieBarDiameter, TieBarNotation, TieBarStartDist, TieBarSpacing, TieBarType, pRetVal
##
##    def GetDetailedColumnStacks(self):
##        '-no docstring-'
##        #return NumberItems, ColumnStackIDs, pRetVal
##
##    def GetDetailedColumnStackData(self, ColumnStackID):
##        '-no docstring-'
##        #return ObjectUniqueNames, NumLongBarSets, NumLongBars, LongBarDiameter, LongBarNotation, LongBarStartDist, LongBarStartBend, LongBarEndBend, LongBarLength, LongBarNumLayers, NumTieZones, TieBarZones, NumTieBars, NumTieVertLegs, TieBarDiameter, TieBarNotation, TieBarStartDist, TieBarSpacing, TieBarType, pRetVal
##
##    def GetDetailedColumnStackData_1(self, ColumnStackID):
##        '-no docstring-'
##        #return ObjectUniqueNames, NumLongBarSets, NumLongBars, LongBarGUID, LongBarDiameter, LongBarNotation, LongBarStartDist, LongBarStartBend, LongBarEndBend, LongBarLength, LongBarNumLayers, NumTieZones, TieBarZones, NumTieBars, NumTieHorLegs, NumTieVertLegs, TieBarGUID, TieBarDiameter, TieBarNotation, TieBarStartDist, TieBarSpacing, TieBarType, pRetVal
##
##    def GetDetailedSlabs(self):
##        '-no docstring-'
##        #return NumberItems, Names, SlabElevations, GUIDs, pRetVal
##
##    def GetDetailedSlabBotBarData(self, SlabName):
##        '-no docstring-'
##        #return NumData, Names, NumBars, BarDiameter, BarNotation, BarMaterial, StartX, StartY, StartZ, EndX, EndY, EndZ, WidthLeft, WidthRight, OffsetFromTop, OffsetFromBot, StartBarBend, EndBarBend, GUIDs, pRetVal
##
##    def GetDetailedSlabBotBarData_1(self, SlabName):
##        '-no docstring-'
##        #return NumData, Names, NumBars, BarDiameter, BarNotation, BarMaterial, StartX, StartY, StartZ, EndX, EndY, EndZ, WidthLeft, WidthRight, OffsetFromTop, OffsetFromBot, StartBarBend, EndBarBend, GUIDs, StripNames, SpanNos, pRetVal
##
##    def GetDetailedSlabTopBarData(self, SlabName):
##        '-no docstring-'
##        #return NumData, Names, NumBars, BarDiameter, BarNotation, BarMaterial, StartX, StartY, StartZ, EndX, EndY, EndZ, WidthLeft, WidthRight, OffsetFromTop, OffsetFromBot, StartBarBend, EndBarBend, GUIDs, pRetVal
##
##    def GetDetailedSlabTopBarData_1(self, SlabName):
##        '-no docstring-'
##        #return NumData, Names, NumBars, BarDiameter, BarNotation, BarMaterial, StartX, StartY, StartZ, EndX, EndY, EndZ, WidthLeft, WidthRight, OffsetFromTop, OffsetFromBot, StartBarBend, EndBarBend, GUIDs, StripNames, SpanNos, pRetVal
##
##    def GetDetailingAvailable(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetSimilarBeamLines(self, BeamLineID):
##        '-no docstring-'
##        #return NumberSimilarBeams, NumberUniqueObjects, ObjectUniqueNames, pRetVal
##
##    def GetSimilarColumnStacks(self, ColumnStackID):
##        '-no docstring-'
##        #return NumberSimilarColumns, NumberUniqueObjects, ObjectUniqueNames, pRetVal
##
##    def GetSimilarSlabs(self, SlabName):
##        '-no docstring-'
##        #return NumberSimilarSlabs, Names, pRetVal
##
##    def StartDetailing(self, OverwriteExisting):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetBeamLongRebarData(self, Name):
##        '-no docstring-'
##        #return NumberRebarSets, BarSizeName, BarArea, NumberBars, Location, ClearCover, StartCoord1, BarLength, BendingAngleStart, BendingAngleEnd, RebarSetGUID, pRetVal
##
##    def GetBeamTieRebarData(self, Name):
##        '-no docstring-'
##        #return NumberRebarSets, BarSizeName, BarArea, NumberLegs, Location, ClearCover, StartCoord1, Spacing, Lengths, RebarSetGUID, pRetVal
##
##    def GetColumnLongRebarData(self, Name):
##        '-no docstring-'
##        #return NumberRebarSets, BarSizeName, BarArea, NumberCBars, NumberR3Bars, NumberR2Bars, Location, ClearCover, RebarSetGUID, pRetVal
##
##    def GetColumnTieRebarData(self, Name):
##        '-no docstring-'
##        #return NumberRebarSets, BarSizeName, BarArea, Pattern, ConfineType, NumberLegs2Dir, NumberLegs3Dir, Location, ClearCover, StartCoord1, Spacing, Heights, RebarSetGUID, pRetVal
##
##    def GetDetailedBeamLineGuidData(self, BeamLineID, SimilarFirstBeamUniqueID):
##        '-no docstring-'
##        #return LongitudinalABars, LongitudinalBBars, LongitudinalCBars, LongitudinalDBars, LongitudinalEBars, LongitudinalFBars, LongitudinalGBars, LongitudinalHBars, ZoneATies, ZoneBTies, ZoneCTies, pRetVal
##
##    def GetDetailedColumnStackGuidData(self, ColumnStackID, SimilarFirstColumnUniqueID):
##        '-no docstring-'
##        #return LongitudinalBars, TiesA, TiesB, TiesC, pRetVal
##
##    def GetDetailedColumnStackData_2(self, ColumnStackID):
##        '-no docstring-'
##        #return ObjectUniqueNames, NumLongBarSets, NumLongBars, NumLongR2Bars, NumLongR3Bars, LongBarGUID, LongBarDiameter, LongBarNotation, LongBarStartDist, LongBarStartBend, LongBarEndBend, LongBarLength, LongBarNumLayers, NumTieZones, TieBarZone, NumTieBars, NumTieR2Legs, NumTieR3Legs, TieBarGUID, TieBarDiameter, TieBarNotation, TieBarStartDist, TieBarSpacing, TieBarType, pRetVal
##
##    def GetNumberDetailedSlabs(self):
##        '-no docstring-'
##        #return NumberDetailingOutput, pRetVal
##
##    def GetDetailedSlab_OneDetailingOutputInfo(self, DetailingOutputIndex):
##        '-no docstring-'
##        #return Guid_ETABS, Floor, StoryNameETABS, LevelZ, NumberStrips, pRetVal
##
##    def GetOneDetailedSlab_OneDetailingOutput_StripInfo(self, DetailingOutputIndex, StripIndex):
##        '-no docstring-'
##        #return Name, LayerName, StripType, NumberRegions, pRetVal
##
##    def GetOneDetailedSlab_OneDetailingOutput_StripGUID(self, DetailingOutputIndex, StripIndex):
##        '-no docstring-'
##        #return Guid_ETABS, pRetVal
##
##    def GetOneDetailedSlab_OneDetailingOutput_OneStrip_OneDetailingRegionInfo(self, DetailingOutputIndex, StripIndex, DetailingRegionIndex):
##        '-no docstring-'
##        #return X1, Y1, X2, Y2, NumberTopBars, NumberBottomBars, pRetVal
##
##    def GetOneDetailedSlab_OneDetailingOutput_OneStrip_OneDetailingRegion_OneTopRebarInfo(self, DetailingOutputIndex, StripIndex, DetailingRegionIndex, TopRebarIndex):
##        '-no docstring-'
##        #return X1, Y1, X2, Y2, WidthRight, WidthLeft, Z, ReqAst, ProvAst, pRetVal
##
##    def GetOneDetailedSlab_OneDetailingOutput_OneStrip_OneDetailingRegion_OneBottomRebarInfo(self, DetailingOutputIndex, StripIndex, DetailingRegionIndex, BottomRebarIndex):
##        '-no docstring-'
##        #return X1, Y1, X2, Y2, WidthRight, WidthLeft, Z, ReqAst, ProvAst, pRetVal
##
##    def GetOneDetailedSlab_OneDetailingOutput_OneStrip_OneDetailingRegion_OneTopRebar_Bar1Info(self, DetailingOutputIndex, StripIndex, DetailingRegionIndex, TopRebarIndex):
##        '-no docstring-'
##        #return GUID, PlaceCode, Dia, Size, Number, StartDist, EndDist, StartBend, EndBend, Material, pRetVal
##
##    def GetOneDetailedSlab_OneDetailingOutput_OneStrip_OneDetailingRegion_OneTopRebar_Bar2Info(self, DetailingOutputIndex, StripIndex, DetailingRegionIndex, TopRebarIndex):
##        '-no docstring-'
##        #return GUID, PlaceCode, Dia, Size, Number, StartDist, EndDist, StartBend, EndBend, Material, pRetVal
##
##    def GetOneDetailedSlab_OneDetailingOutput_OneStrip_OneDetailingRegion_OneBottomRebar_Bar1Info(self, DetailingOutputIndex, StripIndex, DetailingRegionIndex, BottomRebarIndex):
##        '-no docstring-'
##        #return GUID, PlaceCode, Dia, Size, Number, StartDist, EndDist, StartBend, EndBend, Material, pRetVal
##
##    def GetOneDetailedSlab_OneDetailingOutput_OneStrip_OneDetailingRegion_OneBottomRebar_Bar2Info(self, DetailingOutputIndex, StripIndex, DetailingRegionIndex, BottomRebarIndex):
##        '-no docstring-'
##        #return GUID, PlaceCode, Dia, Size, Number, StartDist, EndDist, StartBend, EndBend, Material, pRetVal
##
##    def GetNumberDetailedWallStacks(self):
##        '-no docstring-'
##        #return NumberWallStacks, pRetVal
##
##    def GetDetailed_OneWallStack(self, WallStackIndex):
##        '-no docstring-'
##        #return GUID, TowerID, NumberPiers, NUmberSpandrels, pRetVal
##
##    def GetDetailedWall_OneWallStack_OnePierOutputInfo(self, WallStackIndex, PierIndex):
##        '-no docstring-'
##        #return StoryID, ETABSStoryName, NumberDesignLegs, pRetVal
##
##    def GetDetailedWall_OneWallStack_OnePier_OneDesignLegOutputInfo(self, WallStackIndex, PierIndex, DesignLegIndex):
##        '-no docstring-'
##        #return GUID, PierLabel, X1, Y1, z1, X2, Y2, z2, ZLevel, NumberVerticalBars, NumberHorizontalBars, TotalAreaObjects, AreaObjectNames, pRetVal
##
##    def GetDetailedWall_OneWallStack_OnePier_OneDesignLeg_OneVerticalBarInfo(self, WallStackIndex, PierIndex, DesignLegIndex, VerticalBarIndex):
##        '-no docstring-'
##        #return GUID, BarSizeFirst_Dia, BarSizeFirst_Area, BarSizeFirst_Fy, BarSizeFirst_Notation, BarSizeLast_Dia, BarSizeLast_Area, BarSizeLast_Fy, BarSizeLast_Notation, BarSizeOthers_Dia, BarSizeOthers_Area, BarSizeOthers_Fy, BarSizeOthers_Notation, Number, StartX, StartY, EndX, EndY, StartBarBend, EndBarBend, OffsetZ, BarLength, LocationCode, pRetVal
##
##    def GetDetailedWall_OneWallStack_OnePier_OneDesignLeg_OneTieBarInfo(self, WallStackIndex, PierIndex, DesignLegIndex, TieBarIndex):
##        '-no docstring-'
##        #return GUID, BarSize_Dia, BarSize_Area, BarSize_Fy, BarSize_Notation, Spacing, StartZ, EndZ, TieShape, NumberOfTiePlines, pRetVal
##
##    def GetDetailedWall_OneWallStack_OnePier_OneDesignLeg_OneTieBar_OneTiePlineInfo(self, WallStackIndex, PierIndex, DesignLegIndex, TieBarIndex, TiePLineIndex):
##        '-no docstring-'
##        #return Dia, NumberPoints, ZoneLength, LocationCode, pRetVal
##
##    def GetDetailedWall_OnePier_OneDesignLeg_OneTieBar_OneTiePline_OnePoint(self, WallStackIndex, PierIndex, DesignLegIndex, TieBarIndex, TiePLineIndex, TPLinePointIndex):
##        '-no docstring-'
##        #return X, Y, Z, pRetVal
##
##    def GetDetailedWall_OneWallStack_OneSpandrelOutputInfo(self, WallStackIndex, SpandrelIndex):
##        '-no docstring-'
##        #return GUID, Name, Height, Width, Thickness, CoverLongBar, CoverStirrups, X1, Y1, z1, X2, Y2, z2, NumberLongBars, NumberStirrups, TotalAreaObjects, AreaObjectNames, pRetVal
##
##    def GetDetailedWall_OneWallStack_OneSpandrel_OneLongBarInfo(self, WallStackIndex, SpandrelIndex, LongBarIndex):
##        '-no docstring-'
##        #return BarSize_Dia, BarSize_Area, BarSize_Fy, BarSize_Notation, NumberPoints, X, Y, Z, StartType, EndType, pRetVal
##
##    def GetDetailedWall_OneWallStack_OneSpandrel_OneStirrupsInfo(self, WallStackIndex, SpandrelIndex, StirrupsIndex):
##        '-no docstring-'
##        #return BarSize_Dia, BarSize_Area, BarSize_Fy, BarSize_Notation, X1, X2, Spacing, NumberLegs, pRetVal
##

class cPropMaterialTD(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{61DA0018-41BF-4D20-977E-83EBE8E5AD21}')
    _idlflags_ = ['dual', 'oleautomation']
cPropMaterialTD._methods_ = [
]
################################################################
## code template for cPropMaterialTD implementation
##class cPropMaterialTD_Impl(object):


# values for enumeration 'eMatCoupledType'
eMatCoupledType_None = 1
eMatCoupledType_VonMisesPlasticity = 2
eMatCoupledType_ModifiedDarwinPecknoldConcrete = 3
eMatCoupledType = c_int # enum
cCaseModalHistoryNonlinear._methods_ = [
    COMMETHOD([dispid(7)], HRESULT, 'GetLoads',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Func' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Tf' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'At' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ang' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cCaseModalHistoryNonlinear implementation
##class cCaseModalHistoryNonlinear_Impl(object):
##    def GetLoads(self, Name):
##        '-no docstring-'
##        #return NumberLoads, LoadType, LoadName, Func, SF, Tf, At, CSys, Ang, pRetVal
##


# values for enumeration 'eMatTypeAluminum'
eMatTypeAluminum_SubType_6061_T6 = 1
eMatTypeAluminum_SubType_6063_T6 = 2
eMatTypeAluminum_SubType_5052_H34 = 3
eMatTypeAluminum = c_int # enum
cEditGeneral._methods_ = [
    COMMETHOD([dispid(5)], HRESULT, 'Move',
              ( ['in'], c_double, 'DX' ),
              ( ['in'], c_double, 'DY' ),
              ( ['in'], c_double, 'DZ' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cEditGeneral implementation
##class cEditGeneral_Impl(object):
##    def Move(self, DX, DY, DZ):
##        '-no docstring-'
##        #return pRetVal
##

cSelect._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'All',
              ( ['in', 'optional'], VARIANT_BOOL, 'Deselect', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'ClearSelection',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetSelected',
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ObjectType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'Group',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Deselect', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'InvertSelection',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'PreviousSelection',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cSelect implementation
##class cSelect_Impl(object):
##    def All(self, Deselect):
##        '-no docstring-'
##        #return pRetVal
##
##    def ClearSelection(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetSelected(self):
##        '-no docstring-'
##        #return NumberItems, ObjectType, ObjectName, pRetVal
##
##    def Group(self, Name, Deselect):
##        '-no docstring-'
##        #return pRetVal
##
##    def InvertSelection(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def PreviousSelection(self):
##        '-no docstring-'
##        #return pRetVal
##

cPointObj._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'AddCartesian',
              ( ['in'], c_double, 'X' ),
              ( ['in'], c_double, 'Y' ),
              ( ['in'], c_double, 'Z' ),
              ( ['in', 'out'], POINTER(BSTR), 'Name' ),
              ( ['in', 'optional'], BSTR, 'UserName', '' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'MergeOff', False ),
              ( ['in', 'optional'], c_int, 'MergeNumber', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'CountLoadDispl',
              ( ['in', 'out'], POINTER(c_int), 'Count' ),
              ( ['in', 'optional'], BSTR, 'Name', '' ),
              ( ['in', 'optional'], BSTR, 'LoadPat', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'CountLoadForce',
              ( ['in', 'out'], POINTER(c_int), 'Count' ),
              ( ['in', 'optional'], BSTR, 'Name', '' ),
              ( ['in', 'optional'], BSTR, 'LoadPat', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'CountPanelZone',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'CountRestraint',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'CountSpring',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'DeleteLoadDispl',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'DeleteLoadForce',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'DeleteMass',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'DeletePanelZone',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'DeleteRestraint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'DeleteSpecialPoint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'DeleteSpring',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'GetCommonTo',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'CommonTo' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'GetConnectivity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ObjectType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PointNumber' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'GetCoordCartesian',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'X' ),
              ( ['in', 'out'], POINTER(c_double), 'Y' ),
              ( ['in', 'out'], POINTER(c_double), 'Z' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(23)], HRESULT, 'GetCoordCylindrical',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'R' ),
              ( ['in', 'out'], POINTER(c_double), 'Theta' ),
              ( ['in', 'out'], POINTER(c_double), 'Z' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(24)], HRESULT, 'GetCoordSpherical',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'R' ),
              ( ['in', 'out'], POINTER(c_double), 'A' ),
              ( ['in', 'out'], POINTER(c_double), 'B' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(25)], HRESULT, 'GetElm',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'Elm' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(26)], HRESULT, 'GetGUID',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(27)], HRESULT, 'GetLoadDispl',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LcStep' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(28)], HRESULT, 'GetLoadForce',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LcStep' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(29)], HRESULT, 'GetLocalAxes',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'A' ),
              ( ['in', 'out'], POINTER(c_double), 'B' ),
              ( ['in', 'out'], POINTER(c_double), 'C' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Advanced' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(31)], HRESULT, 'GetMass',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(32)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(33)], HRESULT, 'GetPanelZone',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'PropType' ),
              ( ['in', 'out'], POINTER(c_double), 'Thickness' ),
              ( ['in', 'out'], POINTER(c_double), 'K1' ),
              ( ['in', 'out'], POINTER(c_double), 'K2' ),
              ( ['in', 'out'], POINTER(BSTR), 'LinkProp' ),
              ( ['in', 'out'], POINTER(c_int), 'Connectivity' ),
              ( ['in', 'out'], POINTER(c_int), 'LocalAxisFrom' ),
              ( ['in', 'out'], POINTER(c_double), 'LocalAxisAngle' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(35)], HRESULT, 'GetRestraint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(36)], HRESULT, 'GetSelected',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Selected' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(37)], HRESULT, 'GetSpecialPoint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpecialPoint' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(38)], HRESULT, 'GetSpring',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(39)], HRESULT, 'GetSpringCoupled',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(40)], HRESULT, 'GetTransformationMatrix',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'IsGlobal', True ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(41)], HRESULT, 'IsSpringCoupled',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IsCoupled' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(43)], HRESULT, 'SetGroupAssign',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'GroupName' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Remove', False ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(44)], HRESULT, 'SetGUID',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(45)], HRESULT, 'SetLoadDispl',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', False ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Local' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(46)], HRESULT, 'SetLoadForce',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', False ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(49)], HRESULT, 'SetMass',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'IsLocalCSys', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(50)], HRESULT, 'SetMassByVolume',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'IsLocalCSys', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(51)], HRESULT, 'SetMassByWeight',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'IsLocalCSys', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(52)], HRESULT, 'SetPanelZone',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'PropType' ),
              ( ['in'], c_double, 'Thickness' ),
              ( ['in'], c_double, 'K1' ),
              ( ['in'], c_double, 'K2' ),
              ( ['in'], BSTR, 'LinkProp' ),
              ( ['in'], c_int, 'Connectivity' ),
              ( ['in'], c_int, 'LocalAxisFrom' ),
              ( ['in'], c_double, 'LocalAxisAngle' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(55)], HRESULT, 'SetRestraint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(56)], HRESULT, 'SetSelected',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'Selected' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(57)], HRESULT, 'SetSpecialPoint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'SpecialPoint' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(58)], HRESULT, 'SetSpring',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'IsLocalCSys', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(59)], HRESULT, 'SetSpringCoupled',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'IsLocalCSys', False ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(76)], HRESULT, 'GetGroupAssign',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberGroups' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Groups' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(60)], HRESULT, 'GetNameListOnStory',
              ( ['in'], BSTR, 'StoryName' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(61)], HRESULT, 'GetDiaphragm',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(eDiaphragmOption), 'DiaphragmOption' ),
              ( ['in', 'out'], POINTER(BSTR), 'DiaphragmName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(62)], HRESULT, 'SetDiaphragm',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eDiaphragmOption, 'DiaphragmOption' ),
              ( ['in', 'optional'], BSTR, 'DiaphragmName', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(67)], HRESULT, 'GetLabelNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyLabel' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyStory' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(68)], HRESULT, 'GetLabelFromName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'Label' ),
              ( ['in', 'out'], POINTER(BSTR), 'Story' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(69)], HRESULT, 'GetNameFromLabel',
              ( ['in'], BSTR, 'Label' ),
              ( ['in'], BSTR, 'Story' ),
              ( ['in', 'out'], POINTER(BSTR), 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(73)], HRESULT, 'GetAllPoints',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(74)], HRESULT, 'GetSpringAssignment',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'SpringProp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(75)], HRESULT, 'SetSpringAssignment',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'SpringProp' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cPointObj implementation
##class cPointObj_Impl(object):
##    def AddCartesian(self, X, Y, Z, UserName, CSys, MergeOff, MergeNumber):
##        '-no docstring-'
##        #return Name, pRetVal
##
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def CountLoadDispl(self, Name, LoadPat):
##        '-no docstring-'
##        #return Count, pRetVal
##
##    def CountLoadForce(self, Name, LoadPat):
##        '-no docstring-'
##        #return Count, pRetVal
##
##    def CountPanelZone(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def CountRestraint(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def CountSpring(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteLoadDispl(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteLoadForce(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteMass(self, Name, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeletePanelZone(self, Name, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteRestraint(self, Name, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteSpecialPoint(self, Name, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteSpring(self, Name, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetCommonTo(self, Name):
##        '-no docstring-'
##        #return CommonTo, pRetVal
##
##    def GetConnectivity(self, Name):
##        '-no docstring-'
##        #return NumberItems, ObjectType, ObjectName, PointNumber, pRetVal
##
##    def GetCoordCartesian(self, Name, CSys):
##        '-no docstring-'
##        #return X, Y, Z, pRetVal
##
##    def GetCoordCylindrical(self, Name, CSys):
##        '-no docstring-'
##        #return R, Theta, Z, pRetVal
##
##    def GetCoordSpherical(self, Name, CSys):
##        '-no docstring-'
##        #return R, A, B, pRetVal
##
##    def GetElm(self, Name):
##        '-no docstring-'
##        #return Elm, pRetVal
##
##    def GetGUID(self, Name):
##        '-no docstring-'
##        #return GUID, pRetVal
##
##    def GetLoadDispl(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, PointName, LoadPat, LcStep, CSys, U1, U2, U3, R1, R2, R3, pRetVal
##
##    def GetLoadForce(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, PointName, LoadPat, LcStep, CSys, F1, F2, F3, M1, M2, M3, pRetVal
##
##    def GetLocalAxes(self, Name):
##        '-no docstring-'
##        #return A, B, C, Advanced, pRetVal
##
##    def GetMass(self, Name):
##        '-no docstring-'
##        #return M, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetPanelZone(self, Name):
##        '-no docstring-'
##        #return PropType, Thickness, K1, K2, LinkProp, Connectivity, LocalAxisFrom, LocalAxisAngle, pRetVal
##
##    def GetRestraint(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetSelected(self, Name):
##        '-no docstring-'
##        #return Selected, pRetVal
##
##    def GetSpecialPoint(self, Name):
##        '-no docstring-'
##        #return SpecialPoint, pRetVal
##
##    def GetSpring(self, Name):
##        '-no docstring-'
##        #return K, pRetVal
##
##    def GetSpringCoupled(self, Name):
##        '-no docstring-'
##        #return K, pRetVal
##
##    def GetTransformationMatrix(self, Name, IsGlobal):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def IsSpringCoupled(self, Name):
##        '-no docstring-'
##        #return IsCoupled, pRetVal
##
##    def SetGroupAssign(self, Name, GroupName, Remove, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetGUID(self, Name, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoadDispl(self, Name, LoadPat, Replace, CSys, ItemType):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetLoadForce(self, Name, LoadPat, Replace, CSys, ItemType):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetMass(self, Name, ItemType, IsLocalCSys, Replace):
##        '-no docstring-'
##        #return M, pRetVal
##
##    def SetMassByVolume(self, Name, MatProp, ItemType, IsLocalCSys, Replace):
##        '-no docstring-'
##        #return M, pRetVal
##
##    def SetMassByWeight(self, Name, ItemType, IsLocalCSys, Replace):
##        '-no docstring-'
##        #return M, pRetVal
##
##    def SetPanelZone(self, Name, PropType, Thickness, K1, K2, LinkProp, Connectivity, LocalAxisFrom, LocalAxisAngle, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetRestraint(self, Name, ItemType):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetSelected(self, Name, Selected, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSpecialPoint(self, Name, SpecialPoint, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSpring(self, Name, ItemType, IsLocalCSys, Replace):
##        '-no docstring-'
##        #return K, pRetVal
##
##    def SetSpringCoupled(self, Name, ItemType, IsLocalCSys, Replace):
##        '-no docstring-'
##        #return K, pRetVal
##
##    def GetGroupAssign(self, Name):
##        '-no docstring-'
##        #return NumberGroups, Groups, pRetVal
##
##    def GetNameListOnStory(self, StoryName):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetDiaphragm(self, Name):
##        '-no docstring-'
##        #return DiaphragmOption, DiaphragmName, pRetVal
##
##    def SetDiaphragm(self, Name, DiaphragmOption, DiaphragmName):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetLabelNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, MyLabel, MyStory, pRetVal
##
##    def GetLabelFromName(self, Name):
##        '-no docstring-'
##        #return Label, Story, pRetVal
##
##    def GetNameFromLabel(self, Label, Story):
##        '-no docstring-'
##        #return Name, pRetVal
##
##    def GetAllPoints(self, CSys):
##        '-no docstring-'
##        #return NumberNames, MyName, X, Y, Z, pRetVal
##
##    def GetSpringAssignment(self, Name):
##        '-no docstring-'
##        #return SpringProp, pRetVal
##
##    def SetSpringAssignment(self, Name, SpringProp, ItemType):
##        '-no docstring-'
##        #return pRetVal
##


# values for enumeration 'eReturnCode'
eReturnCode_NotApplicable = -100
eReturnCode_NotImplemented = -99
eReturnCode_NoError = 0
eReturnCode_UnspecifiedError = 1
eReturnCode = c_int # enum
cPropArea._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Count',
              ( ['in', 'optional'], c_int, 'PropType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetModifiers',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'optional'], c_int, 'PropType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetShellDesign',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_int), 'SteelLayoutOption' ),
              ( ['in', 'out'], POINTER(c_double), 'DesignCoverTopDir1' ),
              ( ['in', 'out'], POINTER(c_double), 'DesignCoverTopDir2' ),
              ( ['in', 'out'], POINTER(c_double), 'DesignCoverBotDir1' ),
              ( ['in', 'out'], POINTER(c_double), 'DesignCoverBotDir2' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetShellLayer',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberLayers' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LayerName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Thickness' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MatProp' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MatAng' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumIntegrationPts' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetShellLayer_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberLayers' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LayerName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Thickness' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumIntegrationPts' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MatProp' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MatAng' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'S11Type' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'S22Type' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'S12Type' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(42)], HRESULT, 'GetShellLayer_2',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberLayers' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LayerName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Thickness' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumIntegrationPts' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MatProp' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MatAng' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MatBehavior' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'S11Type' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'S22Type' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'S12Type' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetTypeOAPI',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'PropType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'SetModifiers',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'SetShellDesign',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_int, 'SteelLayoutOption' ),
              ( ['in'], c_double, 'DesignCoverTopDir1' ),
              ( ['in'], c_double, 'DesignCoverTopDir2' ),
              ( ['in'], c_double, 'DesignCoverBotDir1' ),
              ( ['in'], c_double, 'DesignCoverBotDir2' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'SetShellLayer',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberLayers' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LayerName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Thickness' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MatProp' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MatAng' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumIntegrationPts' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'SetShellLayer_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberLayers' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LayerName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Thickness' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumIntegrationPts' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MatProp' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MatAng' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'S11Type' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'S22Type' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'S12Type' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(43)], HRESULT, 'SetShellLayer_2',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberLayers' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LayerName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Thickness' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumIntegrationPts' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MatProp' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MatAng' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MatBehavior' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'S11Type' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'S22Type' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'S12Type' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'GetDeck',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(eDeckType), 'DeckType' ),
              ( ['in', 'out'], POINTER(eShellType), 'ShellType' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'Thickness' ),
              ( ['in', 'out'], POINTER(c_int), 'color' ),
              ( ['in', 'out'], POINTER(BSTR), 'notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'GetDeckFilled',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'SlabDepth' ),
              ( ['in', 'out'], POINTER(c_double), 'RibDepth' ),
              ( ['in', 'out'], POINTER(c_double), 'RibWidthTop' ),
              ( ['in', 'out'], POINTER(c_double), 'RibWidthBot' ),
              ( ['in', 'out'], POINTER(c_double), 'RibSpacing' ),
              ( ['in', 'out'], POINTER(c_double), 'ShearThickness' ),
              ( ['in', 'out'], POINTER(c_double), 'UnitWeight' ),
              ( ['in', 'out'], POINTER(c_double), 'ShearStudDia' ),
              ( ['in', 'out'], POINTER(c_double), 'ShearStudHt' ),
              ( ['in', 'out'], POINTER(c_double), 'ShearStudFu' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'GetDeckSolidSlab',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'SlabDepth' ),
              ( ['in', 'out'], POINTER(c_double), 'ShearStudDia' ),
              ( ['in', 'out'], POINTER(c_double), 'ShearStudHt' ),
              ( ['in', 'out'], POINTER(c_double), 'ShearStudFu' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'GetDeckUnfilled',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'RibDepth' ),
              ( ['in', 'out'], POINTER(c_double), 'RibWidthTop' ),
              ( ['in', 'out'], POINTER(c_double), 'RibWidthBot' ),
              ( ['in', 'out'], POINTER(c_double), 'RibSpacing' ),
              ( ['in', 'out'], POINTER(c_double), 'ShearThickness' ),
              ( ['in', 'out'], POINTER(c_double), 'UnitWeight' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'GetSlab',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(eSlabType), 'SlabType' ),
              ( ['in', 'out'], POINTER(eShellType), 'ShellType' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'Thickness' ),
              ( ['in', 'out'], POINTER(c_int), 'color' ),
              ( ['in', 'out'], POINTER(BSTR), 'notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(23)], HRESULT, 'GetSlabRibbed',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'OverallDepth' ),
              ( ['in', 'out'], POINTER(c_double), 'SlabThickness' ),
              ( ['in', 'out'], POINTER(c_double), 'StemWidthTop' ),
              ( ['in', 'out'], POINTER(c_double), 'StemWidthBot' ),
              ( ['in', 'out'], POINTER(c_double), 'RibSpacing' ),
              ( ['in', 'out'], POINTER(c_int), 'RibsParallelTo' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(24)], HRESULT, 'GetSlabWaffle',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'OverallDepth' ),
              ( ['in', 'out'], POINTER(c_double), 'SlabThickness' ),
              ( ['in', 'out'], POINTER(c_double), 'StemWidthTop' ),
              ( ['in', 'out'], POINTER(c_double), 'StemWidthBot' ),
              ( ['in', 'out'], POINTER(c_double), 'RibSpacingDir1' ),
              ( ['in', 'out'], POINTER(c_double), 'RibSpacingDir2' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(25)], HRESULT, 'GetWall',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(eWallPropType), 'WallPropType' ),
              ( ['in', 'out'], POINTER(eShellType), 'ShellType' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'Thickness' ),
              ( ['in', 'out'], POINTER(c_int), 'color' ),
              ( ['in', 'out'], POINTER(BSTR), 'notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(26)], HRESULT, 'GetWallAutoSelectList',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AutoSelectList' ),
              ( ['in', 'out'], POINTER(BSTR), 'StartingProperty' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(27)], HRESULT, 'SetDeck',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eDeckType, 'DeckType' ),
              ( ['in'], eShellType, 'ShellType' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'Thickness' ),
              ( ['in', 'optional'], c_int, 'color', -1 ),
              ( ['in', 'optional'], BSTR, 'notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(28)], HRESULT, 'SetDeckFilled',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'SlabDepth' ),
              ( ['in'], c_double, 'RibDepth' ),
              ( ['in'], c_double, 'RibWidthTop' ),
              ( ['in'], c_double, 'RibWidthBot' ),
              ( ['in'], c_double, 'RibSpacing' ),
              ( ['in'], c_double, 'ShearThickness' ),
              ( ['in'], c_double, 'UnitWeight' ),
              ( ['in'], c_double, 'ShearStudDia' ),
              ( ['in'], c_double, 'ShearStudHt' ),
              ( ['in'], c_double, 'ShearStudFu' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(29)], HRESULT, 'SetDeckSolidSlab',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'SlabDepth' ),
              ( ['in'], c_double, 'ShearStudDia' ),
              ( ['in'], c_double, 'ShearStudHt' ),
              ( ['in'], c_double, 'ShearStudFu' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(30)], HRESULT, 'SetDeckUnfilled',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'RibDepth' ),
              ( ['in'], c_double, 'RibWidthTop' ),
              ( ['in'], c_double, 'RibWidthBot' ),
              ( ['in'], c_double, 'RibSpacing' ),
              ( ['in'], c_double, 'ShearThickness' ),
              ( ['in'], c_double, 'UnitWeight' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(31)], HRESULT, 'SetSlab',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eSlabType, 'SlabType' ),
              ( ['in'], eShellType, 'ShellType' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'Thickness' ),
              ( ['in', 'optional'], c_int, 'color', -1 ),
              ( ['in', 'optional'], BSTR, 'notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(32)], HRESULT, 'SetSlabRibbed',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'OverallDepth' ),
              ( ['in'], c_double, 'SlabThickness' ),
              ( ['in'], c_double, 'StemWidthTop' ),
              ( ['in'], c_double, 'StemWidthBot' ),
              ( ['in'], c_double, 'RibSpacing' ),
              ( ['in'], c_int, 'RibsParallelTo' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(33)], HRESULT, 'SetSlabWaffle',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'OverallDepth' ),
              ( ['in'], c_double, 'SlabThickness' ),
              ( ['in'], c_double, 'StemWidthTop' ),
              ( ['in'], c_double, 'StemWidthBot' ),
              ( ['in'], c_double, 'RibSpacingDir1' ),
              ( ['in'], c_double, 'RibSpacingDir2' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(34)], HRESULT, 'SetWall',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eWallPropType, 'WallPropType' ),
              ( ['in'], eShellType, 'ShellType' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'Thickness' ),
              ( ['in', 'optional'], c_int, 'color', -1 ),
              ( ['in', 'optional'], BSTR, 'notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(35)], HRESULT, 'SetWallAutoSelectList',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], _midlSAFEARRAY(BSTR), 'AutoSelectList' ),
              ( ['in', 'optional'], BSTR, 'StartingProperty', 'Median' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cPropArea implementation
##class cPropArea_Impl(object):
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self, PropType):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetModifiers(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetNameList(self, PropType):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetShellDesign(self, Name):
##        '-no docstring-'
##        #return MatProp, SteelLayoutOption, DesignCoverTopDir1, DesignCoverTopDir2, DesignCoverBotDir1, DesignCoverBotDir2, pRetVal
##
##    def GetShellLayer(self, Name):
##        '-no docstring-'
##        #return NumberLayers, LayerName, Dist, Thickness, MatProp, Nonlinear, MatAng, NumIntegrationPts, pRetVal
##
##    def GetShellLayer_1(self, Name):
##        '-no docstring-'
##        #return NumberLayers, LayerName, Dist, Thickness, MyType, NumIntegrationPts, MatProp, MatAng, S11Type, S22Type, S12Type, pRetVal
##
##    def GetShellLayer_2(self, Name):
##        '-no docstring-'
##        #return NumberLayers, LayerName, Dist, Thickness, MyType, NumIntegrationPts, MatProp, MatAng, MatBehavior, S11Type, S22Type, S12Type, pRetVal
##
##    def GetTypeOAPI(self, Name):
##        '-no docstring-'
##        #return PropType, pRetVal
##
##    def SetModifiers(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetShellDesign(self, Name, MatProp, SteelLayoutOption, DesignCoverTopDir1, DesignCoverTopDir2, DesignCoverBotDir1, DesignCoverBotDir2):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetShellLayer(self, Name, NumberLayers):
##        '-no docstring-'
##        #return LayerName, Dist, Thickness, MatProp, Nonlinear, MatAng, NumIntegrationPts, pRetVal
##
##    def SetShellLayer_1(self, Name):
##        '-no docstring-'
##        #return NumberLayers, LayerName, Dist, Thickness, MyType, NumIntegrationPts, MatProp, MatAng, S11Type, S22Type, S12Type, pRetVal
##
##    def SetShellLayer_2(self, Name):
##        '-no docstring-'
##        #return NumberLayers, LayerName, Dist, Thickness, MyType, NumIntegrationPts, MatProp, MatAng, MatBehavior, S11Type, S22Type, S12Type, pRetVal
##
##    def GetDeck(self, Name):
##        '-no docstring-'
##        #return DeckType, ShellType, MatProp, Thickness, color, notes, GUID, pRetVal
##
##    def GetDeckFilled(self, Name):
##        '-no docstring-'
##        #return SlabDepth, RibDepth, RibWidthTop, RibWidthBot, RibSpacing, ShearThickness, UnitWeight, ShearStudDia, ShearStudHt, ShearStudFu, pRetVal
##
##    def GetDeckSolidSlab(self, Name):
##        '-no docstring-'
##        #return SlabDepth, ShearStudDia, ShearStudHt, ShearStudFu, pRetVal
##
##    def GetDeckUnfilled(self, Name):
##        '-no docstring-'
##        #return RibDepth, RibWidthTop, RibWidthBot, RibSpacing, ShearThickness, UnitWeight, pRetVal
##
##    def GetSlab(self, Name):
##        '-no docstring-'
##        #return SlabType, ShellType, MatProp, Thickness, color, notes, GUID, pRetVal
##
##    def GetSlabRibbed(self, Name):
##        '-no docstring-'
##        #return OverallDepth, SlabThickness, StemWidthTop, StemWidthBot, RibSpacing, RibsParallelTo, pRetVal
##
##    def GetSlabWaffle(self, Name):
##        '-no docstring-'
##        #return OverallDepth, SlabThickness, StemWidthTop, StemWidthBot, RibSpacingDir1, RibSpacingDir2, pRetVal
##
##    def GetWall(self, Name):
##        '-no docstring-'
##        #return WallPropType, ShellType, MatProp, Thickness, color, notes, GUID, pRetVal
##
##    def GetWallAutoSelectList(self, Name):
##        '-no docstring-'
##        #return AutoSelectList, StartingProperty, pRetVal
##
##    def SetDeck(self, Name, DeckType, ShellType, MatProp, Thickness, color, notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDeckFilled(self, Name, SlabDepth, RibDepth, RibWidthTop, RibWidthBot, RibSpacing, ShearThickness, UnitWeight, ShearStudDia, ShearStudHt, ShearStudFu):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDeckSolidSlab(self, Name, SlabDepth, ShearStudDia, ShearStudHt, ShearStudFu):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDeckUnfilled(self, Name, RibDepth, RibWidthTop, RibWidthBot, RibSpacing, ShearThickness, UnitWeight):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSlab(self, Name, SlabType, ShellType, MatProp, Thickness, color, notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSlabRibbed(self, Name, OverallDepth, SlabThickness, StemWidthTop, StemWidthBot, RibSpacing, RibsParallelTo):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSlabWaffle(self, Name, OverallDepth, SlabThickness, StemWidthTop, StemWidthBot, RibSpacingDir1, RibSpacingDir2):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetWall(self, Name, WallPropType, ShellType, MatProp, Thickness, color, notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetWallAutoSelectList(self, Name, AutoSelectList, StartingProperty):
##        '-no docstring-'
##        #return pRetVal
##

cPropTendon._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetProp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_int), 'ModelingOption' ),
              ( ['in', 'out'], POINTER(c_double), 'Area' ),
              ( ['in', 'out'], POINTER(c_int), 'color' ),
              ( ['in', 'out'], POINTER(BSTR), 'notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'SetProp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_int, 'ModelingOption' ),
              ( ['in'], c_double, 'Area' ),
              ( ['in', 'optional'], c_int, 'color', -1 ),
              ( ['in', 'optional'], BSTR, 'notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cPropTendon implementation
##class cPropTendon_Impl(object):
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetProp(self, Name):
##        '-no docstring-'
##        #return MatProp, ModelingOption, Area, color, notes, GUID, pRetVal
##
##    def SetProp(self, Name, MatProp, ModelingOption, Area, color, notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##

cAnalysisResultsSetup._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'DeselectAllCasesAndCombosForOutput',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetCaseSelectedForOutput',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Selected' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetComboSelectedForOutput',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Selected' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetOptionBaseReactLoc',
              ( ['in', 'out'], POINTER(c_double), 'GX' ),
              ( ['in', 'out'], POINTER(c_double), 'GY' ),
              ( ['in', 'out'], POINTER(c_double), 'GZ' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetOptionBucklingMode',
              ( ['in', 'out'], POINTER(c_int), 'BuckModeStart' ),
              ( ['in', 'out'], POINTER(c_int), 'BuckModeEnd' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'BuckModeAll' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetOptionDirectHist',
              ( ['in', 'out'], POINTER(c_int), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetOptionModalHist',
              ( ['in', 'out'], POINTER(c_int), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetOptionModeShape',
              ( ['in', 'out'], POINTER(c_int), 'ModeShapeStart' ),
              ( ['in', 'out'], POINTER(c_int), 'ModeShapeEnd' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ModeShapesAll' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetOptionMultiStepStatic',
              ( ['in', 'out'], POINTER(c_int), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetOptionMultiValuedCombo',
              ( ['in', 'out'], POINTER(c_int), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetOptionNLStatic',
              ( ['in', 'out'], POINTER(c_int), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'SetCaseSelectedForOutput',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Selected', True ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'SetComboSelectedForOutput',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Selected', True ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'SetOptionBaseReactLoc',
              ( ['in'], c_double, 'GX' ),
              ( ['in'], c_double, 'GY' ),
              ( ['in'], c_double, 'GZ' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'SetOptionBucklingMode',
              ( ['in'], c_int, 'BuckModeStart' ),
              ( ['in'], c_int, 'BuckModeEnd' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'BuckModeAll', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'SetOptionDirectHist',
              ( ['in'], c_int, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'SetOptionModalHist',
              ( ['in'], c_int, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'SetOptionModeShape',
              ( ['in'], c_int, 'ModeShapeStart' ),
              ( ['in'], c_int, 'ModeShapeEnd' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'ModeShapesAll', False ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'SetOptionMultiStepStatic',
              ( ['in'], c_int, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'SetOptionMultiValuedCombo',
              ( ['in'], c_int, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'SetOptionNLStatic',
              ( ['in'], c_int, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cAnalysisResultsSetup implementation
##class cAnalysisResultsSetup_Impl(object):
##    def DeselectAllCasesAndCombosForOutput(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetCaseSelectedForOutput(self, Name):
##        '-no docstring-'
##        #return Selected, pRetVal
##
##    def GetComboSelectedForOutput(self, Name):
##        '-no docstring-'
##        #return Selected, pRetVal
##
##    def GetOptionBaseReactLoc(self):
##        '-no docstring-'
##        #return GX, GY, GZ, pRetVal
##
##    def GetOptionBucklingMode(self):
##        '-no docstring-'
##        #return BuckModeStart, BuckModeEnd, BuckModeAll, pRetVal
##
##    def GetOptionDirectHist(self):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetOptionModalHist(self):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetOptionModeShape(self):
##        '-no docstring-'
##        #return ModeShapeStart, ModeShapeEnd, ModeShapesAll, pRetVal
##
##    def GetOptionMultiStepStatic(self):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetOptionMultiValuedCombo(self):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetOptionNLStatic(self):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetCaseSelectedForOutput(self, Name, Selected):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetComboSelectedForOutput(self, Name, Selected):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetOptionBaseReactLoc(self, GX, GY, GZ):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetOptionBucklingMode(self, BuckModeStart, BuckModeEnd, BuckModeAll):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetOptionDirectHist(self, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetOptionModalHist(self, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetOptionModeShape(self, ModeShapeStart, ModeShapeEnd, ModeShapesAll):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetOptionMultiStepStatic(self, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetOptionMultiValuedCombo(self, Value):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetOptionNLStatic(self, Value):
##        '-no docstring-'
##        #return pRetVal
##

cFunctionRS._methods_ = [
    COMMETHOD([dispid(57)], HRESULT, 'GetNTC2008',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'ParamsOption' ),
              ( ['in', 'out'], POINTER(c_double), 'Latitude' ),
              ( ['in', 'out'], POINTER(c_double), 'Longitude' ),
              ( ['in', 'out'], POINTER(c_int), 'Island' ),
              ( ['in', 'out'], POINTER(c_int), 'LimitState' ),
              ( ['in', 'out'], POINTER(c_int), 'UsageClass' ),
              ( ['in', 'out'], POINTER(c_double), 'NomLife' ),
              ( ['in', 'out'], POINTER(c_double), 'PeakAccel' ),
              ( ['in', 'out'], POINTER(c_double), 'F0' ),
              ( ['in', 'out'], POINTER(c_double), 'Tcs' ),
              ( ['in', 'out'], POINTER(c_int), 'SpecType' ),
              ( ['in', 'out'], POINTER(c_int), 'SoilType' ),
              ( ['in', 'out'], POINTER(c_int), 'Topography' ),
              ( ['in', 'out'], POINTER(c_double), 'hRatio' ),
              ( ['in', 'out'], POINTER(c_double), 'Damping' ),
              ( ['in', 'out'], POINTER(c_double), 'q' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(58)], HRESULT, 'SetNTC2008',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ParamsOption' ),
              ( ['in'], c_double, 'Latitude' ),
              ( ['in'], c_double, 'Longitude' ),
              ( ['in'], c_int, 'Island' ),
              ( ['in'], c_int, 'LimitState' ),
              ( ['in'], c_int, 'UsageClass' ),
              ( ['in'], c_double, 'NomLife' ),
              ( ['in'], c_double, 'PeakAccel' ),
              ( ['in'], c_double, 'F0' ),
              ( ['in'], c_double, 'Tcs' ),
              ( ['in'], c_int, 'SpecType' ),
              ( ['in'], c_int, 'SoilType' ),
              ( ['in'], c_int, 'Topography' ),
              ( ['in'], c_double, 'hRatio' ),
              ( ['in'], c_double, 'Damping' ),
              ( ['in'], c_double, 'q' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cFunctionRS implementation
##class cFunctionRS_Impl(object):
##    def GetNTC2008(self, Name):
##        '-no docstring-'
##        #return ParamsOption, Latitude, Longitude, Island, LimitState, UsageClass, NomLife, PeakAccel, F0, Tcs, SpecType, SoilType, Topography, hRatio, Damping, q, pRetVal
##
##    def SetNTC2008(self, Name, ParamsOption, Latitude, Longitude, Island, LimitState, UsageClass, NomLife, PeakAccel, F0, Tcs, SpecType, SoilType, Topography, hRatio, Damping, q):
##        '-no docstring-'
##        #return pRetVal
##

cEditPoint._methods_ = [
]
################################################################
## code template for cEditPoint implementation
##class cEditPoint_Impl(object):

cEditArea._methods_ = [
]
################################################################
## code template for cEditArea implementation
##class cEditArea_Impl(object):

cFunctionTH._methods_ = [
]
################################################################
## code template for cFunctionTH implementation
##class cFunctionTH_Impl(object):


# values for enumeration 'eMatTypeColdFormed'
eMatTypeColdFormed_ASTM_A653SQGr33 = 1
eMatTypeColdFormed_ASTM_A653SQGr50 = 2
eMatTypeColdFormed = c_int # enum
cCaseStaticNonlinear._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetGeometricNonlinearity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NLGeomType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetHingeUnloading',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'UnloadType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetInitialCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'InitialCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetLoadApplication',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'LoadControl' ),
              ( ['in', 'out'], POINTER(c_int), 'DispType' ),
              ( ['in', 'out'], POINTER(c_double), 'Displ' ),
              ( ['in', 'out'], POINTER(c_int), 'Monitor' ),
              ( ['in', 'out'], POINTER(c_int), 'DOF' ),
              ( ['in', 'out'], POINTER(BSTR), 'PointName' ),
              ( ['in', 'out'], POINTER(BSTR), 'GDispl' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetLoads',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetModalCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'ModalCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetResultsSaved',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SaveMultipleSteps' ),
              ( ['in', 'out'], POINTER(c_int), 'MinSavedStates' ),
              ( ['in', 'out'], POINTER(c_int), 'MaxSavedStates' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'PositiveOnly' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetSolControlParameters',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'MaxTotalSteps' ),
              ( ['in', 'out'], POINTER(c_int), 'MaxFailedSubSteps' ),
              ( ['in', 'out'], POINTER(c_int), 'MaxIterCS' ),
              ( ['in', 'out'], POINTER(c_int), 'MaxIterNR' ),
              ( ['in', 'out'], POINTER(c_double), 'TolConvD' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UseEventStepping' ),
              ( ['in', 'out'], POINTER(c_double), 'TolEventD' ),
              ( ['in', 'out'], POINTER(c_int), 'MaxLineSearchPerIter' ),
              ( ['in', 'out'], POINTER(c_double), 'TolLineSearch' ),
              ( ['in', 'out'], POINTER(c_double), 'LineSearchStepFact' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetTargetForceParameters',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'TolConvF' ),
              ( ['in', 'out'], POINTER(c_int), 'MaxIter' ),
              ( ['in', 'out'], POINTER(c_double), 'AccelFact' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'NoStop' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'SetCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'SetGeometricNonlinearity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NLGeomType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'SetHingeUnloading',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'UnloadType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'SetInitialCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'InitialCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'SetLoadApplication',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'LoadControl' ),
              ( ['in'], c_int, 'DispType' ),
              ( ['in'], c_double, 'Displ' ),
              ( ['in'], c_int, 'Monitor' ),
              ( ['in'], c_int, 'DOF' ),
              ( ['in'], BSTR, 'PointName' ),
              ( ['in'], BSTR, 'GDispl' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'SetLoads',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'SetModalCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'ModalCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'SetResultsSaved',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'SaveMultipleSteps' ),
              ( ['in', 'optional'], c_int, 'MinSavedStates', 10 ),
              ( ['in', 'optional'], c_int, 'MaxSavedStates', 100 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'PositiveOnly', True ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'SetSolControlParameters',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'MaxTotalSteps' ),
              ( ['in'], c_int, 'MaxFailedSubSteps' ),
              ( ['in'], c_int, 'MaxIterCS' ),
              ( ['in'], c_int, 'MaxIterNR' ),
              ( ['in'], c_double, 'TolConvD' ),
              ( ['in'], VARIANT_BOOL, 'UseEventStepping' ),
              ( ['in'], c_double, 'TolEventD' ),
              ( ['in'], c_int, 'MaxLineSearchPerIter' ),
              ( ['in'], c_double, 'TolLineSearch' ),
              ( ['in'], c_double, 'LineSearchStepFact' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'SetTargetForceParameters',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'TolConvF' ),
              ( ['in'], c_int, 'MaxIter' ),
              ( ['in'], c_double, 'AccelFact' ),
              ( ['in'], VARIANT_BOOL, 'NoStop' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'GetMassSource',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'mSource' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'SetMassSource',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'mSource' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cCaseStaticNonlinear implementation
##class cCaseStaticNonlinear_Impl(object):
##    def GetGeometricNonlinearity(self, Name):
##        '-no docstring-'
##        #return NLGeomType, pRetVal
##
##    def GetHingeUnloading(self, Name):
##        '-no docstring-'
##        #return UnloadType, pRetVal
##
##    def GetInitialCase(self, Name):
##        '-no docstring-'
##        #return InitialCase, pRetVal
##
##    def GetLoadApplication(self, Name):
##        '-no docstring-'
##        #return LoadControl, DispType, Displ, Monitor, DOF, PointName, GDispl, pRetVal
##
##    def GetLoads(self, Name):
##        '-no docstring-'
##        #return NumberLoads, LoadType, LoadName, SF, pRetVal
##
##    def GetModalCase(self, Name):
##        '-no docstring-'
##        #return ModalCase, pRetVal
##
##    def GetResultsSaved(self, Name):
##        '-no docstring-'
##        #return SaveMultipleSteps, MinSavedStates, MaxSavedStates, PositiveOnly, pRetVal
##
##    def GetSolControlParameters(self, Name):
##        '-no docstring-'
##        #return MaxTotalSteps, MaxFailedSubSteps, MaxIterCS, MaxIterNR, TolConvD, UseEventStepping, TolEventD, MaxLineSearchPerIter, TolLineSearch, LineSearchStepFact, pRetVal
##
##    def GetTargetForceParameters(self, Name):
##        '-no docstring-'
##        #return TolConvF, MaxIter, AccelFact, NoStop, pRetVal
##
##    def SetCase(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetGeometricNonlinearity(self, Name, NLGeomType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetHingeUnloading(self, Name, UnloadType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetInitialCase(self, Name, InitialCase):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoadApplication(self, Name, LoadControl, DispType, Displ, Monitor, DOF, PointName, GDispl):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoads(self, Name, NumberLoads):
##        '-no docstring-'
##        #return LoadType, LoadName, SF, pRetVal
##
##    def SetModalCase(self, Name, ModalCase):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetResultsSaved(self, Name, SaveMultipleSteps, MinSavedStates, MaxSavedStates, PositiveOnly):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSolControlParameters(self, Name, MaxTotalSteps, MaxFailedSubSteps, MaxIterCS, MaxIterNR, TolConvD, UseEventStepping, TolEventD, MaxLineSearchPerIter, TolLineSearch, LineSearchStepFact):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetTargetForceParameters(self, Name, TolConvF, MaxIter, AccelFact, NoStop):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetMassSource(self, Name):
##        '-no docstring-'
##        #return mSource, pRetVal
##
##    def SetMassSource(self, Name, mSource):
##        '-no docstring-'
##        #return pRetVal
##


# values for enumeration 'eSuperObjectClass'
eSuperObjectClass_None = 0
eSuperObjectClass_SuperObject = 1
eSuperObjectClass_Foundation = 2
eSuperObjectClass_BridgeFoundation = 3
eSuperObjectClass = c_int # enum
cDStItalianNTC2008S._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDStItalianNTC2008S implementation
##class cDStItalianNTC2008S_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cPropRebar._methods_ = [
    COMMETHOD([dispid(3)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(1)], HRESULT, 'GetRebarProps',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Area' ),
              ( ['in', 'out'], POINTER(c_double), 'Diameter' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetRebarPropsWithGUID',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Area' ),
              ( ['in', 'out'], POINTER(c_double), 'Diameter' ),
              ( ['in', 'out'], POINTER(BSTR), 'MyGUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetNameListWithData',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Areas' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Diameters' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyGUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cPropRebar implementation
##class cPropRebar_Impl(object):
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetRebarProps(self, Name):
##        '-no docstring-'
##        #return Area, Diameter, pRetVal
##
##    def GetRebarPropsWithGUID(self, Name):
##        '-no docstring-'
##        #return Area, Diameter, MyGUID, pRetVal
##
##    def GetNameListWithData(self):
##        '-no docstring-'
##        #return NumberNames, MyName, Areas, Diameters, MyGUID, pRetVal
##

cDesignShearWall._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetPierSummaryResults',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Story' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PierLabel' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Station' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'DesignType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PierSecType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'EdgeBar' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'EndBar' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BarSpacing' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ReinfPercent' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CurrPercent' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DCRatio' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PierLeg' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LegX1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LegY1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LegX2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LegY2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EdgeLeft' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EdgeRight' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AsLeft' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AsRight' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ShearAv' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StressCompLeft' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StressCompRight' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StressLimitLeft' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StressLimitRight' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CDepthLeft' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CLimitLeft' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CDepthRight' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CLimitRight' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'InelasticRotDemand' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'InelasticRotCapacity' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'NormCompStress' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'NormCompStressLimit' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CDepth' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BZoneL' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BZoneR' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BZoneLength' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'WarnMsg' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ErrMsg' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetRebar',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaObjName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StoryName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PierLabel' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StationLocation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LegID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LeftX1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LeftY1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RightX2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RightY2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Length' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Thickness' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Fc' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'fys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Flexural' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ShearAndConfinement' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetSpandrelSummaryResults',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Story' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Spandrel' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Station' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TopRebar' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TopRebarRatio' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TopRebarCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MuTop' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BotRebar' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BotRebarRatio' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BotRebarCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MuBot' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AVert' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AHorz' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ShearCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Vu' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ADiag' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ShearDiagCombo' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VuDiag' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'WarnMsg' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ErrMsg' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetRebarPrefsPier',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetRebarPrefsSpandrel',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDesignShearWall implementation
##class cDesignShearWall_Impl(object):
##    def GetPierSummaryResults(self):
##        '-no docstring-'
##        #return Story, PierLabel, Station, DesignType, PierSecType, EdgeBar, EndBar, BarSpacing, ReinfPercent, CurrPercent, DCRatio, PierLeg, LegX1, LegY1, LegX2, LegY2, EdgeLeft, EdgeRight, AsLeft, AsRight, ShearAv, StressCompLeft, StressCompRight, StressLimitLeft, StressLimitRight, CDepthLeft, CLimitLeft, CDepthRight, CLimitRight, InelasticRotDemand, InelasticRotCapacity, NormCompStress, NormCompStressLimit, CDepth, BZoneL, BZoneR, BZoneLength, WarnMsg, ErrMsg, pRetVal
##
##    def GetRebar(self):
##        '-no docstring-'
##        #return AreaObjName, StoryName, PierLabel, StationLocation, LegID, LeftX1, LeftY1, RightX2, RightY2, Length, Thickness, Fc, FY, fys, Flexural, ShearAndConfinement, pRetVal
##
##    def GetSpandrelSummaryResults(self):
##        '-no docstring-'
##        #return Story, Spandrel, Station, TopRebar, TopRebarRatio, TopRebarCombo, MuTop, BotRebar, BotRebarRatio, BotRebarCombo, MuBot, AVert, AHorz, ShearCombo, Vu, ADiag, ShearDiagCombo, VuDiag, WarnMsg, ErrMsg, pRetVal
##
##    def GetRebarPrefsPier(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetRebarPrefsSpandrel(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##


# values for enumeration 'e2DFrameType'
e2DFrameType_PortalFrame = 0
e2DFrameType_ConcentricBraced = 1
e2DFrameType_EccentricBraced = 2
e2DFrameType = c_int # enum
cDCoSP63133302011._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDCoSP63133302011 implementation
##class cDCoSP63133302011_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##


# values for enumeration 'eFramePropType'
eFramePropType_I = 1
eFramePropType_Channel = 2
eFramePropType_T = 3
eFramePropType_Angle = 4
eFramePropType_DblAngle = 5
eFramePropType_Box = 6
eFramePropType_Pipe = 7
eFramePropType_Rectangular = 8
eFramePropType_Circle = 9
eFramePropType_General = 10
eFramePropType_DbChannel = 11
eFramePropType_Auto = 12
eFramePropType_SD = 13
eFramePropType_Variable = 14
eFramePropType_Joist = 15
eFramePropType_Bridge = 16
eFramePropType_Cold_C = 17
eFramePropType_Cold_2C = 18
eFramePropType_Cold_Z = 19
eFramePropType_Cold_L = 20
eFramePropType_Cold_2L = 21
eFramePropType_Cold_Hat = 22
eFramePropType_BuiltupICoverplate = 23
eFramePropType_PCCGirderI = 24
eFramePropType_PCCGirderU = 25
eFramePropType_BuiltupIHybrid = 26
eFramePropType_BuiltupUHybrid = 27
eFramePropType_Concrete_L = 28
eFramePropType_FilledTube = 29
eFramePropType_FilledPipe = 30
eFramePropType_EncasedRectangle = 31
eFramePropType_EncasedCircle = 32
eFramePropType_BucklingRestrainedBrace = 33
eFramePropType_CoreBrace_BRB = 34
eFramePropType_ConcreteTee = 35
eFramePropType_ConcreteBox = 36
eFramePropType_ConcretePipe = 37
eFramePropType_ConcreteCross = 38
eFramePropType_SteelPlate = 39
eFramePropType_SteelRod = 40
eFramePropType = c_int # enum
cDesignResults._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'DesignForces',
              ( ['out', 'retval'], POINTER(POINTER(cDesignForces)), 'pRetVal' )),
]
################################################################
## code template for cDesignResults implementation
##class cDesignResults_Impl(object):
##    @property
##    def DesignForces(self):
##        '-no docstring-'
##        #return pRetVal
##

cEditFrame._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'ChangeConnectivity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Point1' ),
              ( ['in'], BSTR, 'Point2' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cEditFrame implementation
##class cEditFrame_Impl(object):
##    def ChangeConnectivity(self, Name, Point1, Point2):
##        '-no docstring-'
##        #return pRetVal
##

cDCoAS_3600_09._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDCoAS_3600_09 implementation
##class cDCoAS_3600_09_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cPattern._methods_ = [
]
################################################################
## code template for cPattern implementation
##class cPattern_Impl(object):

cStory._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetElevation',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Elevation' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetGUID',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetHeight',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Height' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetMasterStory',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IsMasterStory' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetSimilarTo',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IsMasterStory' ),
              ( ['in', 'out'], POINTER(BSTR), 'SimilarToStory' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetSplice',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'SpliceAbove' ),
              ( ['in', 'out'], POINTER(c_double), 'SpliceHeight' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetStories',
              ( ['in', 'out'], POINTER(c_int), 'NumberStories' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StoryNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StoryElevations' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StoryHeights' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'IsMasterStory' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SimilarToStory' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'SpliceAbove' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SpliceHeight' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'SetGUID',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'SetElevation',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'Elevation' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'SetHeight',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'Height' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'SetMasterStory',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'IsMasterStory' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'SetSimilarTo',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'SimilarToStory' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'SetSplice',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'SpliceAbove' ),
              ( ['in'], c_double, 'SpliceHeight' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'SetStories',
              ( ['in'], _midlSAFEARRAY(BSTR), 'StoryNames' ),
              ( ['in'], _midlSAFEARRAY(c_double), 'StoryElevations' ),
              ( ['in'], _midlSAFEARRAY(c_double), 'StoryHeights' ),
              ( ['in'], _midlSAFEARRAY(VARIANT_BOOL), 'IsMasterStory' ),
              ( ['in'], _midlSAFEARRAY(BSTR), 'SimilarToStory' ),
              ( ['in'], _midlSAFEARRAY(VARIANT_BOOL), 'SpliceAbove' ),
              ( ['in'], _midlSAFEARRAY(c_double), 'SpliceHeight' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'GetStories_2',
              ( ['in', 'out'], POINTER(c_double), 'BaseElevation' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberStories' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StoryNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StoryElevations' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StoryHeights' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'IsMasterStory' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SimilarToStory' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'SpliceAbove' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SpliceHeight' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'color' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'SetStories_2',
              ( ['in'], c_double, 'BaseElevation' ),
              ( ['in'], c_int, 'NumberStories' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StoryNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StoryHeights' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'IsMasterStory' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SimilarToStory' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'SpliceAbove' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SpliceHeight' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'color' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cStory implementation
##class cStory_Impl(object):
##    def GetElevation(self, Name):
##        '-no docstring-'
##        #return Elevation, pRetVal
##
##    def GetGUID(self, Name):
##        '-no docstring-'
##        #return GUID, pRetVal
##
##    def GetHeight(self, Name):
##        '-no docstring-'
##        #return Height, pRetVal
##
##    def GetMasterStory(self, Name):
##        '-no docstring-'
##        #return IsMasterStory, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetSimilarTo(self, Name):
##        '-no docstring-'
##        #return IsMasterStory, SimilarToStory, pRetVal
##
##    def GetSplice(self, Name):
##        '-no docstring-'
##        #return SpliceAbove, SpliceHeight, pRetVal
##
##    def GetStories(self):
##        '-no docstring-'
##        #return NumberStories, StoryNames, StoryElevations, StoryHeights, IsMasterStory, SimilarToStory, SpliceAbove, SpliceHeight, pRetVal
##
##    def SetGUID(self, Name, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetElevation(self, Name, Elevation):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetHeight(self, Name, Height):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetMasterStory(self, Name, IsMasterStory):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSimilarTo(self, Name, SimilarToStory):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSplice(self, Name, SpliceAbove, SpliceHeight):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetStories(self, StoryNames, StoryElevations, StoryHeights, IsMasterStory, SimilarToStory, SpliceAbove, SpliceHeight):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetStories_2(self):
##        '-no docstring-'
##        #return BaseElevation, NumberStories, StoryNames, StoryElevations, StoryHeights, IsMasterStory, SimilarToStory, SpliceAbove, SpliceHeight, color, pRetVal
##
##    def SetStories_2(self, BaseElevation, NumberStories):
##        '-no docstring-'
##        #return StoryNames, StoryHeights, IsMasterStory, SimilarToStory, SpliceAbove, SpliceHeight, color, pRetVal
##

cCaseStaticNonlinearStaged._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetGeometricNonlinearity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NLGeomType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetHingeUnloading',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'UnloadType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetInitialCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'InitialCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetMaterialNonlinearity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'TimeDepMatProp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetResultsSaved',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'StagedSaveOption' ),
              ( ['in', 'out'], POINTER(c_int), 'StagedMinSteps' ),
              ( ['in', 'out'], POINTER(c_int), 'StagedMinStepsTD' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetSolControlParameters',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'MaxTotalSteps' ),
              ( ['in', 'out'], POINTER(c_int), 'MaxFailedSubSteps' ),
              ( ['in', 'out'], POINTER(c_int), 'MaxIterCS' ),
              ( ['in', 'out'], POINTER(c_int), 'MaxIterNR' ),
              ( ['in', 'out'], POINTER(c_double), 'TolConvD' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UseEventStepping' ),
              ( ['in', 'out'], POINTER(c_double), 'TolEventD' ),
              ( ['in', 'out'], POINTER(c_int), 'MaxLineSearchPerIter' ),
              ( ['in', 'out'], POINTER(c_double), 'TolLineSearch' ),
              ( ['in', 'out'], POINTER(c_double), 'LineSearchStepFact' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetStageData',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'Stage' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberOperations' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Operation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GroupName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Age' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetStageData_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'Stage' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberOperations' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Operation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Age' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetStageDefinitions',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberStages' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Duration' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Comment' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetStageDefinitions_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberStages' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Duration' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Output' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'OutputName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Comment' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetTargetForceParameters',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'TolConvF' ),
              ( ['in', 'out'], POINTER(c_int), 'MaxIter' ),
              ( ['in', 'out'], POINTER(c_double), 'AccelFact' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'NoStop' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'SetCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'SetGeometricNonlinearity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NLGeomType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'SetHingeUnloading',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'UnloadType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'SetInitialCase',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'InitialCase' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'SetMaterialNonlinearity',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'TimeDepMatProp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'SetResultsSaved',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'StagedSaveOption' ),
              ( ['in', 'optional'], c_int, 'StagedMinSteps', 1 ),
              ( ['in', 'optional'], c_int, 'StagedMinStepsTD', 1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'SetSolControlParameters',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'MaxTotalSteps' ),
              ( ['in'], c_int, 'MaxFailedSubSteps' ),
              ( ['in'], c_int, 'MaxIterCS' ),
              ( ['in'], c_int, 'MaxIterNR' ),
              ( ['in'], c_double, 'TolConvD' ),
              ( ['in'], VARIANT_BOOL, 'UseEventStepping' ),
              ( ['in'], c_double, 'TolEventD' ),
              ( ['in'], c_int, 'MaxLineSearchPerIter' ),
              ( ['in'], c_double, 'TolLineSearch' ),
              ( ['in'], c_double, 'LineSearchStepFact' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'SetStageData',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Stage' ),
              ( ['in'], c_int, 'NumberOperations' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Operation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GroupName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Age' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'SetStageData_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Stage' ),
              ( ['in'], c_int, 'NumberOperations' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Operation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Age' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'SetStageDefinitions',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberStages' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Duration' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Comment' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'SetStageDefinitions_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberStages' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Duration' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Output' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'OutputName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Comment' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(23)], HRESULT, 'SetTargetForceParameters',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'TolConvF' ),
              ( ['in'], c_int, 'MaxIter' ),
              ( ['in'], c_double, 'AccelFact' ),
              ( ['in'], VARIANT_BOOL, 'NoStop' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(25)], HRESULT, 'GetMassSource',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'mSource' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(26)], HRESULT, 'SetMassSource',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'mSource' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(27)], HRESULT, 'GetStageData_2',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'Stage' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberOperations' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Operation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Age' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(28)], HRESULT, 'GetStageDefinitions_2',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberStages' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Duration' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Output' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'OutputName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Comment' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(29)], HRESULT, 'SetStageData_2',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Stage' ),
              ( ['in'], c_int, 'NumberOperations' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Operation' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Age' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(30)], HRESULT, 'SetStageDefinitions_2',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberStages' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Duration' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Output' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'OutputName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Comment' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cCaseStaticNonlinearStaged implementation
##class cCaseStaticNonlinearStaged_Impl(object):
##    def GetGeometricNonlinearity(self, Name):
##        '-no docstring-'
##        #return NLGeomType, pRetVal
##
##    def GetHingeUnloading(self, Name):
##        '-no docstring-'
##        #return UnloadType, pRetVal
##
##    def GetInitialCase(self, Name):
##        '-no docstring-'
##        #return InitialCase, pRetVal
##
##    def GetMaterialNonlinearity(self, Name):
##        '-no docstring-'
##        #return TimeDepMatProp, pRetVal
##
##    def GetResultsSaved(self, Name):
##        '-no docstring-'
##        #return StagedSaveOption, StagedMinSteps, StagedMinStepsTD, pRetVal
##
##    def GetSolControlParameters(self, Name):
##        '-no docstring-'
##        #return MaxTotalSteps, MaxFailedSubSteps, MaxIterCS, MaxIterNR, TolConvD, UseEventStepping, TolEventD, MaxLineSearchPerIter, TolLineSearch, LineSearchStepFact, pRetVal
##
##    def GetStageData(self, Name):
##        '-no docstring-'
##        #return Stage, NumberOperations, Operation, GroupName, Age, LoadType, LoadName, SF, pRetVal
##
##    def GetStageData_1(self, Name):
##        '-no docstring-'
##        #return Stage, NumberOperations, Operation, ObjectType, ObjectName, Age, MyType, MyName, SF, pRetVal
##
##    def GetStageDefinitions(self, Name):
##        '-no docstring-'
##        #return NumberStages, Duration, Comment, pRetVal
##
##    def GetStageDefinitions_1(self, Name):
##        '-no docstring-'
##        #return NumberStages, Duration, Output, OutputName, Comment, pRetVal
##
##    def GetTargetForceParameters(self, Name):
##        '-no docstring-'
##        #return TolConvF, MaxIter, AccelFact, NoStop, pRetVal
##
##    def SetCase(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetGeometricNonlinearity(self, Name, NLGeomType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetHingeUnloading(self, Name, UnloadType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetInitialCase(self, Name, InitialCase):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetMaterialNonlinearity(self, Name, TimeDepMatProp):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetResultsSaved(self, Name, StagedSaveOption, StagedMinSteps, StagedMinStepsTD):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSolControlParameters(self, Name, MaxTotalSteps, MaxFailedSubSteps, MaxIterCS, MaxIterNR, TolConvD, UseEventStepping, TolEventD, MaxLineSearchPerIter, TolLineSearch, LineSearchStepFact):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetStageData(self, Name, Stage, NumberOperations):
##        '-no docstring-'
##        #return Operation, GroupName, Age, LoadType, LoadName, SF, pRetVal
##
##    def SetStageData_1(self, Name, Stage, NumberOperations):
##        '-no docstring-'
##        #return Operation, ObjectType, ObjectName, Age, MyType, MyName, SF, pRetVal
##
##    def SetStageDefinitions(self, Name, NumberStages):
##        '-no docstring-'
##        #return Duration, Comment, pRetVal
##
##    def SetStageDefinitions_1(self, Name, NumberStages):
##        '-no docstring-'
##        #return Duration, Output, OutputName, Comment, pRetVal
##
##    def SetTargetForceParameters(self, Name, TolConvF, MaxIter, AccelFact, NoStop):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetMassSource(self, Name):
##        '-no docstring-'
##        #return mSource, pRetVal
##
##    def SetMassSource(self, Name, mSource):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetStageData_2(self, Name):
##        '-no docstring-'
##        #return Stage, NumberOperations, Operation, ObjectType, ObjectName, Age, MyType, MyName, SF, pRetVal
##
##    def GetStageDefinitions_2(self, Name):
##        '-no docstring-'
##        #return NumberStages, Duration, Output, OutputName, Comment, pRetVal
##
##    def SetStageData_2(self, Name, Stage, NumberOperations):
##        '-no docstring-'
##        #return Operation, ObjectType, ObjectName, Age, MyType, MyName, SF, pRetVal
##
##    def SetStageDefinitions_2(self, Name, NumberStages):
##        '-no docstring-'
##        #return Duration, Output, OutputName, Comment, pRetVal
##

cFile._methods_ = [
    COMMETHOD([dispid(3)], HRESULT, 'NewBlank',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(1)], HRESULT, 'OpenFile',
              ( ['in'], BSTR, 'FileName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Save',
              ( ['in', 'optional'], BSTR, 'FileName', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetFilePath',
              ( ['in', 'out'], POINTER(BSTR), 'FilePath' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'NewSteelDeck',
              ( ['in'], c_int, 'NumberStorys' ),
              ( ['in'], c_double, 'TypicalStoryHeight' ),
              ( ['in'], c_double, 'BottomStoryHeight' ),
              ( ['in'], c_int, 'NumberLinesX' ),
              ( ['in'], c_int, 'NumberLinesY' ),
              ( ['in'], c_double, 'SpacingX' ),
              ( ['in'], c_double, 'SpacingY' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'NewGridOnly',
              ( ['in'], c_int, 'NumberStorys' ),
              ( ['in'], c_double, 'TypicalStoryHeight' ),
              ( ['in'], c_double, 'BottomStoryHeight' ),
              ( ['in'], c_int, 'NumberLinesX' ),
              ( ['in'], c_int, 'NumberLinesY' ),
              ( ['in'], c_double, 'SpacingX' ),
              ( ['in'], c_double, 'SpacingY' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cFile implementation
##class cFile_Impl(object):
##    def NewBlank(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def OpenFile(self, FileName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Save(self, FileName):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetFilePath(self):
##        '-no docstring-'
##        #return FilePath, pRetVal
##
##    def NewSteelDeck(self, NumberStorys, TypicalStoryHeight, BottomStoryHeight, NumberLinesX, NumberLinesY, SpacingX, SpacingY):
##        '-no docstring-'
##        #return pRetVal
##
##    def NewGridOnly(self, NumberStorys, TypicalStoryHeight, BottomStoryHeight, NumberLinesX, NumberLinesY, SpacingX, SpacingY):
##        '-no docstring-'
##        #return pRetVal
##

cAutoSeismic._methods_ = [
    COMMETHOD([dispid(9)], HRESULT, 'GetIBC2006',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'DirFlag' ),
              ( ['in', 'out'], POINTER(c_double), 'Eccen' ),
              ( ['in', 'out'], POINTER(c_int), 'PeriodFlag' ),
              ( ['in', 'out'], POINTER(c_int), 'CtType' ),
              ( ['in', 'out'], POINTER(c_double), 'UserT' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ' ),
              ( ['in', 'out'], POINTER(c_double), 'TopZ' ),
              ( ['in', 'out'], POINTER(c_double), 'BottomZ' ),
              ( ['in', 'out'], POINTER(c_double), 'R' ),
              ( ['in', 'out'], POINTER(c_double), 'Omega' ),
              ( ['in', 'out'], POINTER(c_double), 'Cd' ),
              ( ['in', 'out'], POINTER(c_double), 'I' ),
              ( ['in', 'out'], POINTER(c_int), 'IBC2006Option' ),
              ( ['in', 'out'], POINTER(c_double), 'Latitude' ),
              ( ['in', 'out'], POINTER(c_double), 'Longitude' ),
              ( ['in', 'out'], POINTER(BSTR), 'ZipCode' ),
              ( ['in', 'out'], POINTER(c_double), 'Ss' ),
              ( ['in', 'out'], POINTER(c_double), 'S1' ),
              ( ['in', 'out'], POINTER(c_double), 'Tl' ),
              ( ['in', 'out'], POINTER(c_int), 'SiteClass' ),
              ( ['in', 'out'], POINTER(c_double), 'Fa' ),
              ( ['in', 'out'], POINTER(c_double), 'Fv' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(28)], HRESULT, 'SetIBC2006',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'DirFlag' ),
              ( ['in'], c_double, 'Eccen' ),
              ( ['in'], c_int, 'PeriodFlag' ),
              ( ['in'], c_int, 'CtType' ),
              ( ['in'], c_double, 'UserT' ),
              ( ['in'], VARIANT_BOOL, 'UserZ' ),
              ( ['in'], c_double, 'TopZ' ),
              ( ['in'], c_double, 'BottomZ' ),
              ( ['in'], c_double, 'R' ),
              ( ['in'], c_double, 'Omega' ),
              ( ['in'], c_double, 'Cd' ),
              ( ['in'], c_double, 'I' ),
              ( ['in'], c_int, 'IBC2006Option' ),
              ( ['in'], c_double, 'Latitude' ),
              ( ['in'], c_double, 'Longitude' ),
              ( ['in'], BSTR, 'ZipCode' ),
              ( ['in'], c_double, 'Ss' ),
              ( ['in'], c_double, 'S1' ),
              ( ['in'], c_double, 'Tl' ),
              ( ['in'], c_int, 'SiteClass' ),
              ( ['in'], c_double, 'Fa' ),
              ( ['in'], c_double, 'Fv' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cAutoSeismic implementation
##class cAutoSeismic_Impl(object):
##    def GetIBC2006(self, Name):
##        '-no docstring-'
##        #return DirFlag, Eccen, PeriodFlag, CtType, UserT, UserZ, TopZ, BottomZ, R, Omega, Cd, I, IBC2006Option, Latitude, Longitude, ZipCode, Ss, S1, Tl, SiteClass, Fa, Fv, pRetVal
##
##    def SetIBC2006(self, Name, DirFlag, Eccen, PeriodFlag, CtType, UserT, UserZ, TopZ, BottomZ, R, Omega, Cd, I, IBC2006Option, Latitude, Longitude, ZipCode, Ss, S1, Tl, SiteClass, Fa, Fv):
##        '-no docstring-'
##        #return pRetVal
##


# values for enumeration 'eBridgeCodeAASHTO'
eBridgeCodeAASHTO_AASHTO_STD_2002 = 0
eBridgeCodeAASHTO_AASHTO_LRFD_2007 = 1
eBridgeCodeAASHTO_AASHTO_LRFD_2012 = 2
eBridgeCodeAASHTO_AASHTO_LRFD_2014 = 3
eBridgeCodeAASHTO_AASHTO_LRFD_2017 = 4
eBridgeCodeAASHTO = c_int # enum
cDesignStrip._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetDesignStrip',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Point' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GlobalX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GlobalY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GlobalZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WBLeft' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WBRight' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WALeft' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WARight' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'AutoWiden' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetGUID',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetDesignStrip_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'DesignType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Point' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GlobalX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GlobalY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GlobalZ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WBLeft' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WBRight' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WALeft' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WARight' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'AutoWiden' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'SetGUID',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDesignStrip implementation
##class cDesignStrip_Impl(object):
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetDesignStrip(self, Name):
##        '-no docstring-'
##        #return Point, GlobalX, GlobalY, GlobalZ, WBLeft, WBRight, WALeft, WARight, AutoWiden, pRetVal
##
##    def GetGUID(self, Name):
##        '-no docstring-'
##        #return GUID, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetDesignStrip_1(self, Name):
##        '-no docstring-'
##        #return DesignType, Point, GlobalX, GlobalY, GlobalZ, WBLeft, WBRight, WALeft, WARight, AutoWiden, pRetVal
##
##    def SetGUID(self, Name, GUID):
##        '-no docstring-'
##        #return pRetVal
##


# values for enumeration 'e3DFrameType'
e3DFrameType_OpenFrame = 0
e3DFrameType_PerimeterFrame = 1
e3DFrameType_BeamSlab = 2
e3DFrameType_FlatPlate = 3
e3DFrameType = c_int # enum
cDStCanadian_S16_09._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDStCanadian_S16_09 implementation
##class cDStCanadian_S16_09_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##

cAutoWind._methods_ = [
]
################################################################
## code template for cAutoWind implementation
##class cAutoWind_Impl(object):

cAreaElm._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetLoadTemperature',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName' ),
              ( ['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetLoadUniform',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Dir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetLocalAxes',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Ang' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetMaterialOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetModifiers',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetObj',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'Obj' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetOffsets',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'OffsetType' ),
              ( ['in', 'out'], POINTER(BSTR), 'OffsetPattern' ),
              ( ['in', 'out'], POINTER(c_double), 'OffsetPatternSF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetPoints',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Point' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetProperty',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetThickness',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'ThicknessType' ),
              ( ['in', 'out'], POINTER(BSTR), 'ThicknessPattern' ),
              ( ['in', 'out'], POINTER(c_double), 'ThicknessPatternSF' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Thickness' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'GetTransformationMatrix',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cAreaElm implementation
##class cAreaElm_Impl(object):
##    def Count(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetLoadTemperature(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberItems, AreaName, LoadPat, MyType, Value, PatternName, pRetVal
##
##    def GetLoadUniform(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberItems, AreaName, LoadPat, CSys, Dir, Value, pRetVal
##
##    def GetLocalAxes(self, Name):
##        '-no docstring-'
##        #return Ang, pRetVal
##
##    def GetMaterialOverwrite(self, Name):
##        '-no docstring-'
##        #return PropName, pRetVal
##
##    def GetModifiers(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetObj(self, Name):
##        '-no docstring-'
##        #return Obj, pRetVal
##
##    def GetOffsets(self, Name):
##        '-no docstring-'
##        #return OffsetType, OffsetPattern, OffsetPatternSF, Offset, pRetVal
##
##    def GetPoints(self, Name):
##        '-no docstring-'
##        #return NumberPoints, Point, pRetVal
##
##    def GetProperty(self, Name):
##        '-no docstring-'
##        #return PropName, pRetVal
##
##    def GetThickness(self, Name):
##        '-no docstring-'
##        #return ThicknessType, ThicknessPattern, ThicknessPatternSF, Thickness, pRetVal
##
##    def GetTransformationMatrix(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##

cDConcSlabACI318_14._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'textValue' ),
              ( ['in', 'out'], POINTER(c_double), 'numericValue' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDConcSlabACI318_14 implementation
##class cDConcSlabACI318_14_Impl(object):
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return textValue, numericValue, pRetVal
##

cDStAISC360_05_IBC2006._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(c_double), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], c_double, 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDStAISC360_05_IBC2006 implementation
##class cDStAISC360_05_IBC2006_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return Value, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOverwrite(self, Name, Item, Value, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, Value):
##        '-no docstring-'
##        #return pRetVal
##


# values for enumeration 'eConstraintType'
eConstraintType_Body = 1
eConstraintType_Diaphragm = 2
eConstraintType_Plate = 3
eConstraintType_Rod = 4
eConstraintType_Beam = 5
eConstraintType_Equal = 6
eConstraintType_Local = 7
eConstraintType_Weld = 8
eConstraintType_Line = 13
eConstraintType = c_int # enum
cPropPointSpring._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetLinks',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberLinks' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LinkNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LinkAxialDirs' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LinkAngles' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetPointSpringProp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'SpringOption' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'out'], POINTER(BSTR), 'CSys' ),
              ( ['in', 'out'], POINTER(BSTR), 'SoilProfile' ),
              ( ['in', 'out'], POINTER(BSTR), 'Footing' ),
              ( ['in', 'out'], POINTER(c_double), 'Period' ),
              ( ['in', 'out'], POINTER(c_int), 'color' ),
              ( ['in', 'out'], POINTER(BSTR), 'notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'iGUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'SetLinks',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberLinks' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LinkNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LinkAxialDirs' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LinkAngles' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'SetPointSpringProp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'SpringOption' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K' ),
              ( ['in', 'optional'], BSTR, 'CSys', '' ),
              ( ['in', 'optional'], BSTR, 'SoilProfile', '' ),
              ( ['in', 'optional'], BSTR, 'Footing', '' ),
              ( ['in', 'optional'], c_double, 'Period', 0.0 ),
              ( ['in', 'optional'], c_int, 'color', 0 ),
              ( ['in', 'optional'], BSTR, 'notes', '' ),
              ( ['in', 'optional'], BSTR, 'iGUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cPropPointSpring implementation
##class cPropPointSpring_Impl(object):
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetLinks(self, Name):
##        '-no docstring-'
##        #return NumberLinks, LinkNames, LinkAxialDirs, LinkAngles, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetPointSpringProp(self, Name):
##        '-no docstring-'
##        #return SpringOption, K, CSys, SoilProfile, Footing, Period, color, notes, iGUID, pRetVal
##
##    def SetLinks(self, Name, NumberLinks):
##        '-no docstring-'
##        #return LinkNames, LinkAxialDirs, LinkAngles, pRetVal
##
##    def SetPointSpringProp(self, Name, SpringOption, CSys, SoilProfile, Footing, Period, color, notes, iGUID):
##        '-no docstring-'
##        #return K, pRetVal
##


# values for enumeration 'eBridgeCodeInterims'
eBridgeCodeInterims_NoInterims = 0
eBridgeCodeInterims_Interim_2011 = 1
eBridgeCodeInterims_Interim_2012 = 2
eBridgeCodeInterims_Interim_2013 = 3
eBridgeCodeInterims_Interim_2014 = 4
eBridgeCodeInterims_Interim_2015 = 5
eBridgeCodeInterims = c_int # enum
cPropMaterial._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'AddMaterial',
              ( ['in', 'out'], POINTER(BSTR), 'Name' ),
              ( ['in'], eMatType, 'MatType' ),
              ( ['in'], BSTR, 'Region' ),
              ( ['in'], BSTR, 'Standard' ),
              ( ['in'], BSTR, 'Grade' ),
              ( ['in', 'optional'], BSTR, 'UserName', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'Count',
              ( ['in', 'optional'], eMatType, 'MatType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetDamping',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'ModalRatio' ),
              ( ['in', 'out'], POINTER(c_double), 'ViscousMassCoeff' ),
              ( ['in', 'out'], POINTER(c_double), 'ViscousStiffCoeff' ),
              ( ['in', 'out'], POINTER(c_double), 'HystereticMassCoeff' ),
              ( ['in', 'out'], POINTER(c_double), 'HystereticStiffCoeff' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetMassSource',
              ( ['in', 'out'], POINTER(c_int), 'MyOption' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetMaterial',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(eMatType), 'MatType' ),
              ( ['in', 'out'], POINTER(c_int), 'color' ),
              ( ['in', 'out'], POINTER(BSTR), 'notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetMPAnisotropic',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'E' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'A' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'G' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetMPIsotropic',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'E' ),
              ( ['in', 'out'], POINTER(c_double), 'U' ),
              ( ['in', 'out'], POINTER(c_double), 'A' ),
              ( ['in', 'out'], POINTER(c_double), 'G' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetMPOrthotropic',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'E' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'A' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'G' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetMPUniaxial',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'E' ),
              ( ['in', 'out'], POINTER(c_double), 'A' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'optional'], eMatType, 'MatType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'GetOConcrete',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Fc' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IsLightweight' ),
              ( ['in', 'out'], POINTER(c_double), 'FcsFactor' ),
              ( ['in', 'out'], POINTER(c_int), 'SSType' ),
              ( ['in', 'out'], POINTER(c_int), 'SSHysType' ),
              ( ['in', 'out'], POINTER(c_double), 'StrainAtFc' ),
              ( ['in', 'out'], POINTER(c_double), 'StrainUltimate' ),
              ( ['in', 'out'], POINTER(c_double), 'FrictionAngle' ),
              ( ['in', 'out'], POINTER(c_double), 'DilatationalAngle' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'GetOConcrete_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Fc' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IsLightweight' ),
              ( ['in', 'out'], POINTER(c_double), 'FcsFactor' ),
              ( ['in', 'out'], POINTER(c_int), 'SSType' ),
              ( ['in', 'out'], POINTER(c_int), 'SSHysType' ),
              ( ['in', 'out'], POINTER(c_double), 'StrainAtFc' ),
              ( ['in', 'out'], POINTER(c_double), 'StrainUltimate' ),
              ( ['in', 'out'], POINTER(c_double), 'FinalSlope' ),
              ( ['in', 'out'], POINTER(c_double), 'FrictionAngle' ),
              ( ['in', 'out'], POINTER(c_double), 'DilatationalAngle' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'GetONoDesign',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'FrictionAngle' ),
              ( ['in', 'out'], POINTER(c_double), 'DilatationalAngle' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'GetORebar',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'FY' ),
              ( ['in', 'out'], POINTER(c_double), 'Fu' ),
              ( ['in', 'out'], POINTER(c_double), 'EFy' ),
              ( ['in', 'out'], POINTER(c_double), 'EFu' ),
              ( ['in', 'out'], POINTER(c_int), 'SSType' ),
              ( ['in', 'out'], POINTER(c_int), 'SSHysType' ),
              ( ['in', 'out'], POINTER(c_double), 'StrainAtHardening' ),
              ( ['in', 'out'], POINTER(c_double), 'StrainUltimate' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UseCaltransSSDefaults' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'GetORebar_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'FY' ),
              ( ['in', 'out'], POINTER(c_double), 'Fu' ),
              ( ['in', 'out'], POINTER(c_double), 'EFy' ),
              ( ['in', 'out'], POINTER(c_double), 'EFu' ),
              ( ['in', 'out'], POINTER(c_int), 'SSType' ),
              ( ['in', 'out'], POINTER(c_int), 'SSHysType' ),
              ( ['in', 'out'], POINTER(c_double), 'StrainAtHardening' ),
              ( ['in', 'out'], POINTER(c_double), 'StrainUltimate' ),
              ( ['in', 'out'], POINTER(c_double), 'FinalSlope' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'UseCaltransSSDefaults' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'GetOSteel',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'FY' ),
              ( ['in', 'out'], POINTER(c_double), 'Fu' ),
              ( ['in', 'out'], POINTER(c_double), 'EFy' ),
              ( ['in', 'out'], POINTER(c_double), 'EFu' ),
              ( ['in', 'out'], POINTER(c_int), 'SSType' ),
              ( ['in', 'out'], POINTER(c_int), 'SSHysType' ),
              ( ['in', 'out'], POINTER(c_double), 'StrainAtHardening' ),
              ( ['in', 'out'], POINTER(c_double), 'StrainAtMaxStress' ),
              ( ['in', 'out'], POINTER(c_double), 'StrainAtRupture' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'GetOSteel_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'FY' ),
              ( ['in', 'out'], POINTER(c_double), 'Fu' ),
              ( ['in', 'out'], POINTER(c_double), 'EFy' ),
              ( ['in', 'out'], POINTER(c_double), 'EFu' ),
              ( ['in', 'out'], POINTER(c_int), 'SSType' ),
              ( ['in', 'out'], POINTER(c_int), 'SSHysType' ),
              ( ['in', 'out'], POINTER(c_double), 'StrainAtHardening' ),
              ( ['in', 'out'], POINTER(c_double), 'StrainAtMaxStress' ),
              ( ['in', 'out'], POINTER(c_double), 'StrainAtRupture' ),
              ( ['in', 'out'], POINTER(c_double), 'FinalSlope' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'GetOTendon',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'FY' ),
              ( ['in', 'out'], POINTER(c_double), 'Fu' ),
              ( ['in', 'out'], POINTER(c_int), 'SSType' ),
              ( ['in', 'out'], POINTER(c_int), 'SSHysType' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'GetOTendon_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'FY' ),
              ( ['in', 'out'], POINTER(c_double), 'Fu' ),
              ( ['in', 'out'], POINTER(c_int), 'SSType' ),
              ( ['in', 'out'], POINTER(c_int), 'SSHysType' ),
              ( ['in', 'out'], POINTER(c_double), 'FinalSlope' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'GetSSCurve',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PointID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Strain' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Stress' ),
              ( ['in', 'optional'], BSTR, 'SectName', '' ),
              ( ['in', 'optional'], c_double, 'RebarArea', 0.0 ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(23)], HRESULT, 'GetTemp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Temp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(53)], HRESULT, 'GetTypeOAPI',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(eMatType), 'MatType' ),
              ( ['in', 'out'], POINTER(c_int), 'SymType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(25)], HRESULT, 'GetWeightAndMass',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'W' ),
              ( ['in', 'out'], POINTER(c_double), 'M' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(26)], HRESULT, 'SetDamping',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'ModalRatio' ),
              ( ['in'], c_double, 'ViscousMassCoeff' ),
              ( ['in'], c_double, 'ViscousStiffCoeff' ),
              ( ['in'], c_double, 'HystereticMassCoeff' ),
              ( ['in'], c_double, 'HystereticStiffCoeff' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(27)], HRESULT, 'SetMassSource',
              ( ['in'], c_int, 'MyOption' ),
              ( ['in'], c_int, 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(28)], HRESULT, 'SetMaterial',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], eMatType, 'MatType' ),
              ( ['in', 'optional'], c_int, 'color', -1 ),
              ( ['in', 'optional'], BSTR, 'notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(29)], HRESULT, 'SetMPAnisotropic',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'E' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'A' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'G' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(30)], HRESULT, 'SetMPIsotropic',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'E' ),
              ( ['in'], c_double, 'U' ),
              ( ['in'], c_double, 'A' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(31)], HRESULT, 'SetMPOrthotropic',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'E' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'A' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'G' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(32)], HRESULT, 'SetMPUniaxial',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'E' ),
              ( ['in'], c_double, 'A' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(33)], HRESULT, 'SetOConcrete',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'Fc' ),
              ( ['in'], VARIANT_BOOL, 'IsLightweight' ),
              ( ['in'], c_double, 'FcsFactor' ),
              ( ['in'], c_int, 'SSType' ),
              ( ['in'], c_int, 'SSHysType' ),
              ( ['in'], c_double, 'StrainAtFc' ),
              ( ['in'], c_double, 'StrainUltimate' ),
              ( ['in', 'optional'], c_double, 'FrictionAngle', 0.0 ),
              ( ['in', 'optional'], c_double, 'DilatationalAngle', 0.0 ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(34)], HRESULT, 'SetOConcrete_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'Fc' ),
              ( ['in'], VARIANT_BOOL, 'IsLightweight' ),
              ( ['in'], c_double, 'FcsFactor' ),
              ( ['in'], c_int, 'SSType' ),
              ( ['in'], c_int, 'SSHysType' ),
              ( ['in'], c_double, 'StrainAtFc' ),
              ( ['in'], c_double, 'StrainUltimate' ),
              ( ['in'], c_double, 'FinalSlope' ),
              ( ['in', 'optional'], c_double, 'FrictionAngle', 0.0 ),
              ( ['in', 'optional'], c_double, 'DilatationalAngle', 0.0 ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(35)], HRESULT, 'SetONoDesign',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], c_double, 'FrictionAngle', 0.0 ),
              ( ['in', 'optional'], c_double, 'DilatationalAngle', 0.0 ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(36)], HRESULT, 'SetORebar',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'FY' ),
              ( ['in'], c_double, 'Fu' ),
              ( ['in'], c_double, 'EFy' ),
              ( ['in'], c_double, 'EFu' ),
              ( ['in'], c_int, 'SSType' ),
              ( ['in'], c_int, 'SSHysType' ),
              ( ['in'], c_double, 'StrainAtHardening' ),
              ( ['in'], c_double, 'StrainUltimate' ),
              ( ['in'], VARIANT_BOOL, 'UseCaltransSSDefaults' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(37)], HRESULT, 'SetORebar_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'FY' ),
              ( ['in'], c_double, 'Fu' ),
              ( ['in'], c_double, 'EFy' ),
              ( ['in'], c_double, 'EFu' ),
              ( ['in'], c_int, 'SSType' ),
              ( ['in'], c_int, 'SSHysType' ),
              ( ['in'], c_double, 'StrainAtHardening' ),
              ( ['in'], c_double, 'StrainUltimate' ),
              ( ['in'], c_double, 'FinalSlope' ),
              ( ['in'], VARIANT_BOOL, 'UseCaltransSSDefaults' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(38)], HRESULT, 'SetOSteel',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'FY' ),
              ( ['in'], c_double, 'Fu' ),
              ( ['in'], c_double, 'EFy' ),
              ( ['in'], c_double, 'EFu' ),
              ( ['in'], c_int, 'SSType' ),
              ( ['in'], c_int, 'SSHysType' ),
              ( ['in'], c_double, 'StrainAtHardening' ),
              ( ['in'], c_double, 'StrainAtMaxStress' ),
              ( ['in'], c_double, 'StrainAtRupture' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(39)], HRESULT, 'SetOSteel_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'FY' ),
              ( ['in'], c_double, 'Fu' ),
              ( ['in'], c_double, 'EFy' ),
              ( ['in'], c_double, 'EFu' ),
              ( ['in'], c_int, 'SSType' ),
              ( ['in'], c_int, 'SSHysType' ),
              ( ['in'], c_double, 'StrainAtHardening' ),
              ( ['in'], c_double, 'StrainAtMaxStress' ),
              ( ['in'], c_double, 'StrainAtRupture' ),
              ( ['in'], c_double, 'FinalSlope' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(40)], HRESULT, 'SetOTendon',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'FY' ),
              ( ['in'], c_double, 'Fu' ),
              ( ['in'], c_int, 'SSType' ),
              ( ['in'], c_int, 'SSHysType' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(41)], HRESULT, 'SetOTendon_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'FY' ),
              ( ['in'], c_double, 'Fu' ),
              ( ['in'], c_int, 'SSType' ),
              ( ['in'], c_int, 'SSHysType' ),
              ( ['in'], c_double, 'FinalSlope' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(42)], HRESULT, 'SetSSCurve',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PointID' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Strain' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Stress' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(43)], HRESULT, 'SetTemp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Temp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(44)], HRESULT, 'SetWeightAndMass',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'MyOption' ),
              ( ['in'], c_double, 'Value' ),
              ( ['in', 'optional'], c_double, 'Temp', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(45), 'propget'], HRESULT, 'TimeDep',
              ( ['out', 'retval'], POINTER(POINTER(cPropMaterialTD)), 'pRetVal' )),
    COMMETHOD([dispid(46)], HRESULT, 'GetMassSource_1',
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IncludeElements' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IncludeAddedMass' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IncludeLoads' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(47)], HRESULT, 'SetMassSource_1',
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IncludeElements' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IncludeAddedMass' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IncludeLoads' ),
              ( ['in'], c_int, 'NumberLoads' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cPropMaterial implementation
##class cPropMaterial_Impl(object):
##    def AddMaterial(self, MatType, Region, Standard, Grade, UserName):
##        '-no docstring-'
##        #return Name, pRetVal
##
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self, MatType):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetDamping(self, Name, Temp):
##        '-no docstring-'
##        #return ModalRatio, ViscousMassCoeff, ViscousStiffCoeff, HystereticMassCoeff, HystereticStiffCoeff, pRetVal
##
##    def GetMassSource(self):
##        '-no docstring-'
##        #return MyOption, NumberLoads, LoadPat, SF, pRetVal
##
##    def GetMaterial(self, Name):
##        '-no docstring-'
##        #return MatType, color, notes, GUID, pRetVal
##
##    def GetMPAnisotropic(self, Name, Temp):
##        '-no docstring-'
##        #return E, U, A, G, pRetVal
##
##    def GetMPIsotropic(self, Name, Temp):
##        '-no docstring-'
##        #return E, U, A, G, pRetVal
##
##    def GetMPOrthotropic(self, Name, Temp):
##        '-no docstring-'
##        #return E, U, A, G, pRetVal
##
##    def GetMPUniaxial(self, Name, Temp):
##        '-no docstring-'
##        #return E, A, pRetVal
##
##    def GetNameList(self, MatType):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetOConcrete(self, Name, Temp):
##        '-no docstring-'
##        #return Fc, IsLightweight, FcsFactor, SSType, SSHysType, StrainAtFc, StrainUltimate, FrictionAngle, DilatationalAngle, pRetVal
##
##    def GetOConcrete_1(self, Name, Temp):
##        '-no docstring-'
##        #return Fc, IsLightweight, FcsFactor, SSType, SSHysType, StrainAtFc, StrainUltimate, FinalSlope, FrictionAngle, DilatationalAngle, pRetVal
##
##    def GetONoDesign(self, Name, Temp):
##        '-no docstring-'
##        #return FrictionAngle, DilatationalAngle, pRetVal
##
##    def GetORebar(self, Name, Temp):
##        '-no docstring-'
##        #return FY, Fu, EFy, EFu, SSType, SSHysType, StrainAtHardening, StrainUltimate, UseCaltransSSDefaults, pRetVal
##
##    def GetORebar_1(self, Name, Temp):
##        '-no docstring-'
##        #return FY, Fu, EFy, EFu, SSType, SSHysType, StrainAtHardening, StrainUltimate, FinalSlope, UseCaltransSSDefaults, pRetVal
##
##    def GetOSteel(self, Name, Temp):
##        '-no docstring-'
##        #return FY, Fu, EFy, EFu, SSType, SSHysType, StrainAtHardening, StrainAtMaxStress, StrainAtRupture, pRetVal
##
##    def GetOSteel_1(self, Name, Temp):
##        '-no docstring-'
##        #return FY, Fu, EFy, EFu, SSType, SSHysType, StrainAtHardening, StrainAtMaxStress, StrainAtRupture, FinalSlope, pRetVal
##
##    def GetOTendon(self, Name, Temp):
##        '-no docstring-'
##        #return FY, Fu, SSType, SSHysType, pRetVal
##
##    def GetOTendon_1(self, Name, Temp):
##        '-no docstring-'
##        #return FY, Fu, SSType, SSHysType, FinalSlope, pRetVal
##
##    def GetSSCurve(self, Name, SectName, RebarArea, Temp):
##        '-no docstring-'
##        #return NumberPoints, PointID, Strain, Stress, pRetVal
##
##    def GetTemp(self, Name):
##        '-no docstring-'
##        #return NumberItems, Temp, pRetVal
##
##    def GetTypeOAPI(self, Name):
##        '-no docstring-'
##        #return MatType, SymType, pRetVal
##
##    def GetWeightAndMass(self, Name, Temp):
##        '-no docstring-'
##        #return W, M, pRetVal
##
##    def SetDamping(self, Name, ModalRatio, ViscousMassCoeff, ViscousStiffCoeff, HystereticMassCoeff, HystereticStiffCoeff, Temp):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetMassSource(self, MyOption, NumberLoads):
##        '-no docstring-'
##        #return LoadPat, SF, pRetVal
##
##    def SetMaterial(self, Name, MatType, color, notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetMPAnisotropic(self, Name, Temp):
##        '-no docstring-'
##        #return E, U, A, G, pRetVal
##
##    def SetMPIsotropic(self, Name, E, U, A, Temp):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetMPOrthotropic(self, Name, Temp):
##        '-no docstring-'
##        #return E, U, A, G, pRetVal
##
##    def SetMPUniaxial(self, Name, E, A, Temp):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetOConcrete(self, Name, Fc, IsLightweight, FcsFactor, SSType, SSHysType, StrainAtFc, StrainUltimate, FrictionAngle, DilatationalAngle, Temp):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetOConcrete_1(self, Name, Fc, IsLightweight, FcsFactor, SSType, SSHysType, StrainAtFc, StrainUltimate, FinalSlope, FrictionAngle, DilatationalAngle, Temp):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetONoDesign(self, Name, FrictionAngle, DilatationalAngle, Temp):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetORebar(self, Name, FY, Fu, EFy, EFu, SSType, SSHysType, StrainAtHardening, StrainUltimate, UseCaltransSSDefaults, Temp):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetORebar_1(self, Name, FY, Fu, EFy, EFu, SSType, SSHysType, StrainAtHardening, StrainUltimate, FinalSlope, UseCaltransSSDefaults, Temp):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetOSteel(self, Name, FY, Fu, EFy, EFu, SSType, SSHysType, StrainAtHardening, StrainAtMaxStress, StrainAtRupture, Temp):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetOSteel_1(self, Name, FY, Fu, EFy, EFu, SSType, SSHysType, StrainAtHardening, StrainAtMaxStress, StrainAtRupture, FinalSlope, Temp):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetOTendon(self, Name, FY, Fu, SSType, SSHysType, Temp):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetOTendon_1(self, Name, FY, Fu, SSType, SSHysType, FinalSlope, Temp):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSSCurve(self, Name, NumberPoints, Temp):
##        '-no docstring-'
##        #return PointID, Strain, Stress, pRetVal
##
##    def SetTemp(self, Name, NumberItems):
##        '-no docstring-'
##        #return Temp, pRetVal
##
##    def SetWeightAndMass(self, Name, MyOption, Value, Temp):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def TimeDep(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetMassSource_1(self):
##        '-no docstring-'
##        #return IncludeElements, IncludeAddedMass, IncludeLoads, NumberLoads, LoadPat, SF, pRetVal
##
##    def SetMassSource_1(self, NumberLoads):
##        '-no docstring-'
##        #return IncludeElements, IncludeAddedMass, IncludeLoads, LoadPat, SF, pRetVal
##

cLineElm._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetEndLengthOffset',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Length1' ),
              ( ['in', 'out'], POINTER(c_double), 'Length2' ),
              ( ['in', 'out'], POINTER(c_double), 'RZ' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'GetInsertionPoint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset2' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetLoadDistributed',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LineName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Dir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RD1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RD2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Val1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Val2' ),
              ( ['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetLoadPoint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LineName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Dir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RelDist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Val' ),
              ( ['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetLoadTemperature',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LineName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Val' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName' ),
              ( ['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetLocalAxes',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Ang' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetMaterialOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetModifiers',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetObj',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'Obj' ),
              ( ['in', 'out'], POINTER(c_int), 'ObjType' ),
              ( ['in', 'out'], POINTER(c_double), 'RDI' ),
              ( ['in', 'out'], POINTER(c_double), 'RDJ' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetPoints',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'Point1' ),
              ( ['in', 'out'], POINTER(BSTR), 'Point2' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'GetProperty',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['in', 'out'], POINTER(c_int), 'ObjType' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Var' ),
              ( ['in', 'out'], POINTER(c_double), 'SVarRelStartLoc' ),
              ( ['in', 'out'], POINTER(c_double), 'SVarTotalLength' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'GetReleases',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'II' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'JJ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartValue' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndValue' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'GetTCLimits',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'LimitCompressionExists' ),
              ( ['in', 'out'], POINTER(c_double), 'LimitCompression' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'LimitTensionExists' ),
              ( ['in', 'out'], POINTER(c_double), 'LimitTension' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'GetTransformationMatrix',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cLineElm implementation
##class cLineElm_Impl(object):
##    def Count(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetEndLengthOffset(self, Name):
##        '-no docstring-'
##        #return Length1, Length2, RZ, pRetVal
##
##    def GetInsertionPoint(self, Name):
##        '-no docstring-'
##        #return Offset1, Offset2, pRetVal
##
##    def GetLoadDistributed(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberItems, LineName, LoadPat, MyType, CSys, Dir, RD1, RD2, Dist1, Dist2, Val1, Val2, pRetVal
##
##    def GetLoadPoint(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberItems, LineName, LoadPat, MyType, CSys, Dir, RelDist, Dist, Val, pRetVal
##
##    def GetLoadTemperature(self, Name, ItemTypeElm):
##        '-no docstring-'
##        #return NumberItems, LineName, LoadPat, MyType, Val, PatternName, pRetVal
##
##    def GetLocalAxes(self, Name):
##        '-no docstring-'
##        #return Ang, pRetVal
##
##    def GetMaterialOverwrite(self, Name):
##        '-no docstring-'
##        #return PropName, pRetVal
##
##    def GetModifiers(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetObj(self, Name):
##        '-no docstring-'
##        #return Obj, ObjType, RDI, RDJ, pRetVal
##
##    def GetPoints(self, Name):
##        '-no docstring-'
##        #return Point1, Point2, pRetVal
##
##    def GetProperty(self, Name):
##        '-no docstring-'
##        #return PropName, ObjType, Var, SVarRelStartLoc, SVarTotalLength, pRetVal
##
##    def GetReleases(self, Name):
##        '-no docstring-'
##        #return II, JJ, StartValue, EndValue, pRetVal
##
##    def GetTCLimits(self, Name):
##        '-no docstring-'
##        #return LimitCompressionExists, LimitCompression, LimitTensionExists, LimitTension, pRetVal
##
##    def GetTransformationMatrix(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##

cFrameObj._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'AddByCoord',
              ( ['in'], c_double, 'XI' ),
              ( ['in'], c_double, 'YI' ),
              ( ['in'], c_double, 'ZI' ),
              ( ['in'], c_double, 'XJ' ),
              ( ['in'], c_double, 'YJ' ),
              ( ['in'], c_double, 'ZJ' ),
              ( ['in', 'out'], POINTER(BSTR), 'Name' ),
              ( ['in', 'optional'], BSTR, 'PropName', 'Default' ),
              ( ['in', 'optional'], BSTR, 'UserName', '' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'AddByPoint',
              ( ['in'], BSTR, 'Point1' ),
              ( ['in'], BSTR, 'Point2' ),
              ( ['in', 'out'], POINTER(BSTR), 'Name' ),
              ( ['in', 'optional'], BSTR, 'PropName', 'Default' ),
              ( ['in', 'optional'], BSTR, 'UserName', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'Count',
              ( ['in', 'optional'], BSTR, 'MyType', 'All' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'DeleteLateralBracing',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], c_int, 'MyType', 3 ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'DeleteLoadDistributed',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'DeleteLoadPoint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'DeleteLoadTemperature',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'DeleteMass',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'DeleteModifiers',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'DeleteSpring',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'GetDesignProcedure',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'MyType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'GetElm',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NElm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RDI' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RDJ' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'GetEndLengthOffset',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'AutoOffset' ),
              ( ['in', 'out'], POINTER(c_double), 'Length1' ),
              ( ['in', 'out'], POINTER(c_double), 'Length2' ),
              ( ['in', 'out'], POINTER(c_double), 'RZ' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'GetGUID',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'GetHingeAssigns',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberHinges' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'HingeNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Prop' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Behavior' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Source' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RD' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(122)], HRESULT, 'GetHingeAssigns_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberHinges' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'HingeNum' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Prop' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Behavior' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Source' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(eHingeLocationType)), 'LocType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RD' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AD' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(23)], HRESULT, 'GetInsertionPoint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'CardinalPoint' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Mirror2' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'StiffTransform' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset2' ),
              ( ['in', 'out'], POINTER(BSTR), 'CSys' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(24)], HRESULT, 'GetLateralBracing',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Loc' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RD1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RD2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist2' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(25)], HRESULT, 'GetLoadDistributed',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Dir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RD1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RD2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Val1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Val2' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(26)], HRESULT, 'GetLoadPoint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Dir' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RelDist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Val' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(27)], HRESULT, 'GetLoadTemperature',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Val' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(28)], HRESULT, 'GetLocalAxes',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Ang' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Advanced' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(30)], HRESULT, 'GetMass',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'MassOverL' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(31)], HRESULT, 'GetMaterialOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(33)], HRESULT, 'GetModifiers',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(34)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(35)], HRESULT, 'GetOutputStations',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'MyType' ),
              ( ['in', 'out'], POINTER(c_double), 'MaxSegSize' ),
              ( ['in', 'out'], POINTER(c_int), 'MinSections' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'NoOutPutAndDesignAtElementEnds' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'NoOutPutAndDesignAtPointLoads' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(36)], HRESULT, 'GetPoints',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'Point1' ),
              ( ['in', 'out'], POINTER(BSTR), 'Point2' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(37)], HRESULT, 'GetReleases',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'II' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'JJ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartValue' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndValue' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(38)], HRESULT, 'GetSection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['in', 'out'], POINTER(BSTR), 'SAuto' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(39)], HRESULT, 'GetSectionNonPrismatic',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'PropName' ),
              ( ['in', 'out'], POINTER(c_double), 'SVarTotalLength' ),
              ( ['in', 'out'], POINTER(c_double), 'SVarRelStartLoc' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(40)], HRESULT, 'GetSelected',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Selected' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(42)], HRESULT, 'GetTCLimits',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'LimitCompressionExists' ),
              ( ['in', 'out'], POINTER(c_double), 'LimitCompression' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'LimitTensionExists' ),
              ( ['in', 'out'], POINTER(c_double), 'LimitTension' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(43)], HRESULT, 'GetTransformationMatrix',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'IsGlobal', True ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(71)], HRESULT, 'GetTypeOAPI',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'MyType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(47)], HRESULT, 'SetDesignProcedure',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'MyType' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(48)], HRESULT, 'SetEndLengthOffset',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'AutoOffset' ),
              ( ['in'], c_double, 'Length1' ),
              ( ['in'], c_double, 'Length2' ),
              ( ['in'], c_double, 'RZ' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(51)], HRESULT, 'SetGroupAssign',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'GroupName' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Remove', False ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(52)], HRESULT, 'SetGUID',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(53)], HRESULT, 'SetInsertionPoint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'CardinalPoint' ),
              ( ['in'], VARIANT_BOOL, 'Mirror2' ),
              ( ['in'], VARIANT_BOOL, 'StiffTransform' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset2' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Local' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(54)], HRESULT, 'SetLateralBracing',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'MyType' ),
              ( ['in'], c_int, 'Loc' ),
              ( ['in'], c_double, 'MyDist1' ),
              ( ['in'], c_double, 'MyDist2' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'RelDist', True ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(55)], HRESULT, 'SetLoadDistributed',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in'], c_int, 'MyType' ),
              ( ['in'], c_int, 'Dir' ),
              ( ['in'], c_double, 'Dist1' ),
              ( ['in'], c_double, 'Dist2' ),
              ( ['in'], c_double, 'Val1' ),
              ( ['in'], c_double, 'Val2' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'RelDist', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', True ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(56)], HRESULT, 'SetLoadPoint',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in'], c_int, 'MyType' ),
              ( ['in'], c_int, 'Dir' ),
              ( ['in'], c_double, 'Dist' ),
              ( ['in'], c_double, 'Val' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'RelDist', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', True ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(57)], HRESULT, 'SetLoadTemperature',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'LoadPat' ),
              ( ['in'], c_int, 'MyType' ),
              ( ['in'], c_double, 'Val' ),
              ( ['in', 'optional'], BSTR, 'PatternName', '' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', True ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(58)], HRESULT, 'SetLocalAxes',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'Ang' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(60)], HRESULT, 'SetMass',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_double, 'MassOverL' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'Replace', False ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(61)], HRESULT, 'SetMaterialOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'PropName' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(62)], HRESULT, 'SetModifiers',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(63)], HRESULT, 'SetOutputStations',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'MyType' ),
              ( ['in'], c_double, 'MaxSegSize' ),
              ( ['in'], c_int, 'MinSections' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'NoOutPutAndDesignAtElementEnds', False ),
              ( ['in', 'optional'], VARIANT_BOOL, 'NoOutPutAndDesignAtPointLoads', False ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(64)], HRESULT, 'SetReleases',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'II' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'JJ' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartValue' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndValue' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(65)], HRESULT, 'SetSection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'PropName' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['in', 'optional'], c_double, 'SVarRelStartLoc', 0.0 ),
              ( ['in', 'optional'], c_double, 'SVarTotalLength', 0.0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(66)], HRESULT, 'SetSelected',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'Selected' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(69)], HRESULT, 'SetTCLimits',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'LimitCompressionExists' ),
              ( ['in'], c_double, 'LimitCompression' ),
              ( ['in'], VARIANT_BOOL, 'LimitTensionExists' ),
              ( ['in'], c_double, 'LimitTension' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(116)], HRESULT, 'GetGroupAssign',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberGroups' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Groups' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(112)], HRESULT, 'GetColumnSpliceOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'SpliceOption' ),
              ( ['in', 'out'], POINTER(c_double), 'Height' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(70)], HRESULT, 'GetNameListOnStory',
              ( ['in'], BSTR, 'StoryName' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(95)], HRESULT, 'GetLabelNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyLabel' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyStory' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(96)], HRESULT, 'GetLabelFromName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'Label' ),
              ( ['in', 'out'], POINTER(BSTR), 'Story' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(97)], HRESULT, 'GetNameFromLabel',
              ( ['in'], BSTR, 'Label' ),
              ( ['in'], BSTR, 'Story' ),
              ( ['in', 'out'], POINTER(BSTR), 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(105)], HRESULT, 'GetSupports',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'SupportName1' ),
              ( ['in', 'out'], POINTER(eObjType), 'SupportType1' ),
              ( ['in', 'out'], POINTER(BSTR), 'SupportName2' ),
              ( ['in', 'out'], POINTER(eObjType), 'SupportType2' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(106)], HRESULT, 'GetAllFrames',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PropName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StoryName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointName1' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointName2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Point1X' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Point1Y' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Point1Z' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Point2X' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Point2Y' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Point2Z' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Angle' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset1X' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset2X' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset1Y' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset2Y' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset1Z' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset2Z' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'CardinalPoint' ),
              ( ['in', 'optional'], BSTR, 'CSys', 'Global' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(107)], HRESULT, 'GetDesignOrientation',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(eFrameDesignOrientation), 'DesignOrientation' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(108)], HRESULT, 'GetPier',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'PierName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(109)], HRESULT, 'SetPier',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'PierName' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(110)], HRESULT, 'GetSpandrel',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'SpandrelName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(113)], HRESULT, 'SetColumnSpliceOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'SpliceOption' ),
              ( ['in'], c_double, 'Height' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(111)], HRESULT, 'SetSpandrel',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'SpandrelName' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(114)], HRESULT, 'GetSpringAssignment',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'SpringProp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(115)], HRESULT, 'SetSpringAssignment',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'SpringProp' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(117)], HRESULT, 'GetCurved_2',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'CurveType' ),
              ( ['in', 'out'], POINTER(c_double), 'Tension' ),
              ( ['in', 'out'], POINTER(c_int), 'NumPnts' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GX' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GY' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GZ' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cFrameObj implementation
##class cFrameObj_Impl(object):
##    def AddByCoord(self, XI, YI, ZI, XJ, YJ, ZJ, PropName, UserName, CSys):
##        '-no docstring-'
##        #return Name, pRetVal
##
##    def AddByPoint(self, Point1, Point2, PropName, UserName):
##        '-no docstring-'
##        #return Name, pRetVal
##
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self, MyType):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteLateralBracing(self, Name, MyType, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteLoadDistributed(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteLoadPoint(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteLoadTemperature(self, Name, LoadPat, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteMass(self, Name, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteModifiers(self, Name, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def DeleteSpring(self, Name, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetDesignProcedure(self, Name):
##        '-no docstring-'
##        #return MyType, pRetVal
##
##    def GetElm(self, Name):
##        '-no docstring-'
##        #return NElm, Elm, RDI, RDJ, pRetVal
##
##    def GetEndLengthOffset(self, Name):
##        '-no docstring-'
##        #return AutoOffset, Length1, Length2, RZ, pRetVal
##
##    def GetGUID(self, Name):
##        '-no docstring-'
##        #return GUID, pRetVal
##
##    def GetHingeAssigns(self, Name):
##        '-no docstring-'
##        #return NumberHinges, HingeNum, Prop, MyType, Behavior, Source, RD, pRetVal
##
##    def GetHingeAssigns_1(self, Name):
##        '-no docstring-'
##        #return NumberHinges, HingeNum, Prop, MyType, Behavior, Source, LocType, RD, AD, pRetVal
##
##    def GetInsertionPoint(self, Name):
##        '-no docstring-'
##        #return CardinalPoint, Mirror2, StiffTransform, Offset1, Offset2, CSys, pRetVal
##
##    def GetLateralBracing(self, Name):
##        '-no docstring-'
##        #return NumberItems, FrameName, MyType, Loc, RD1, RD2, Dist1, Dist2, pRetVal
##
##    def GetLoadDistributed(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, FrameName, LoadPat, MyType, CSys, Dir, RD1, RD2, Dist1, Dist2, Val1, Val2, pRetVal
##
##    def GetLoadPoint(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, FrameName, LoadPat, MyType, CSys, Dir, RelDist, Dist, Val, pRetVal
##
##    def GetLoadTemperature(self, Name, ItemType):
##        '-no docstring-'
##        #return NumberItems, FrameName, LoadPat, MyType, Val, PatternName, pRetVal
##
##    def GetLocalAxes(self, Name):
##        '-no docstring-'
##        #return Ang, Advanced, pRetVal
##
##    def GetMass(self, Name):
##        '-no docstring-'
##        #return MassOverL, pRetVal
##
##    def GetMaterialOverwrite(self, Name):
##        '-no docstring-'
##        #return PropName, pRetVal
##
##    def GetModifiers(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetOutputStations(self, Name):
##        '-no docstring-'
##        #return MyType, MaxSegSize, MinSections, NoOutPutAndDesignAtElementEnds, NoOutPutAndDesignAtPointLoads, pRetVal
##
##    def GetPoints(self, Name):
##        '-no docstring-'
##        #return Point1, Point2, pRetVal
##
##    def GetReleases(self, Name):
##        '-no docstring-'
##        #return II, JJ, StartValue, EndValue, pRetVal
##
##    def GetSection(self, Name):
##        '-no docstring-'
##        #return PropName, SAuto, pRetVal
##
##    def GetSectionNonPrismatic(self, Name):
##        '-no docstring-'
##        #return PropName, SVarTotalLength, SVarRelStartLoc, pRetVal
##
##    def GetSelected(self, Name):
##        '-no docstring-'
##        #return Selected, pRetVal
##
##    def GetTCLimits(self, Name):
##        '-no docstring-'
##        #return LimitCompressionExists, LimitCompression, LimitTensionExists, LimitTension, pRetVal
##
##    def GetTransformationMatrix(self, Name, IsGlobal):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetTypeOAPI(self, Name):
##        '-no docstring-'
##        #return MyType, pRetVal
##
##    def SetDesignProcedure(self, Name, MyType, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetEndLengthOffset(self, Name, AutoOffset, Length1, Length2, RZ, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetGroupAssign(self, Name, GroupName, Remove, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetGUID(self, Name, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetInsertionPoint(self, Name, CardinalPoint, Mirror2, StiffTransform, CSys, ItemType):
##        '-no docstring-'
##        #return Offset1, Offset2, pRetVal
##
##    def SetLateralBracing(self, Name, MyType, Loc, MyDist1, MyDist2, RelDist, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoadDistributed(self, Name, LoadPat, MyType, Dir, Dist1, Dist2, Val1, Val2, CSys, RelDist, Replace, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoadPoint(self, Name, LoadPat, MyType, Dir, Dist, Val, CSys, RelDist, Replace, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLoadTemperature(self, Name, LoadPat, MyType, Val, PatternName, Replace, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetLocalAxes(self, Name, Ang, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetMass(self, Name, MassOverL, Replace, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetMaterialOverwrite(self, Name, PropName, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetModifiers(self, Name, ItemType):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetOutputStations(self, Name, MyType, MaxSegSize, MinSections, NoOutPutAndDesignAtElementEnds, NoOutPutAndDesignAtPointLoads, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetReleases(self, Name, ItemType):
##        '-no docstring-'
##        #return II, JJ, StartValue, EndValue, pRetVal
##
##    def SetSection(self, Name, PropName, ItemType, SVarRelStartLoc, SVarTotalLength):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSelected(self, Name, Selected, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetTCLimits(self, Name, LimitCompressionExists, LimitCompression, LimitTensionExists, LimitTension, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetGroupAssign(self, Name):
##        '-no docstring-'
##        #return NumberGroups, Groups, pRetVal
##
##    def GetColumnSpliceOverwrite(self, Name):
##        '-no docstring-'
##        #return SpliceOption, Height, pRetVal
##
##    def GetNameListOnStory(self, StoryName):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetLabelNameList(self):
##        '-no docstring-'
##        #return NumberNames, MyName, MyLabel, MyStory, pRetVal
##
##    def GetLabelFromName(self, Name):
##        '-no docstring-'
##        #return Label, Story, pRetVal
##
##    def GetNameFromLabel(self, Label, Story):
##        '-no docstring-'
##        #return Name, pRetVal
##
##    def GetSupports(self, Name):
##        '-no docstring-'
##        #return SupportName1, SupportType1, SupportName2, SupportType2, pRetVal
##
##    def GetAllFrames(self, CSys):
##        '-no docstring-'
##        #return NumberNames, MyName, PropName, StoryName, PointName1, PointName2, Point1X, Point1Y, Point1Z, Point2X, Point2Y, Point2Z, Angle, Offset1X, Offset2X, Offset1Y, Offset2Y, Offset1Z, Offset2Z, CardinalPoint, pRetVal
##
##    def GetDesignOrientation(self, Name):
##        '-no docstring-'
##        #return DesignOrientation, pRetVal
##
##    def GetPier(self, Name):
##        '-no docstring-'
##        #return PierName, pRetVal
##
##    def SetPier(self, Name, PierName, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetSpandrel(self, Name):
##        '-no docstring-'
##        #return SpandrelName, pRetVal
##
##    def SetColumnSpliceOverwrite(self, Name, SpliceOption, Height, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSpandrel(self, Name, SpandrelName, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetSpringAssignment(self, Name):
##        '-no docstring-'
##        #return SpringProp, pRetVal
##
##    def SetSpringAssignment(self, Name, SpringProp, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetCurved_2(self, Name):
##        '-no docstring-'
##        #return CurveType, Tension, NumPnts, GX, GY, GZ, pRetVal
##

cDStItalianNTC2018S._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'GetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'textValue' ),
              ( ['in', 'out'], POINTER(c_double), 'numericValue' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'GetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in', 'out'], POINTER(BSTR), 'textValue' ),
              ( ['in', 'out'], POINTER(c_double), 'numericValue' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'SetOverwrite',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Item' ),
              ( ['in'], BSTR, 'textValue' ),
              ( ['in'], c_double, 'numericValue' ),
              ( ['in', 'optional'], eItemType, 'ItemType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'SetPreference',
              ( ['in'], c_int, 'Item' ),
              ( ['in'], BSTR, 'textValue' ),
              ( ['in'], c_double, 'numericValue' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cDStItalianNTC2018S implementation
##class cDStItalianNTC2018S_Impl(object):
##    def GetOverwrite(self, Name, Item):
##        '-no docstring-'
##        #return textValue, numericValue, ProgDet, pRetVal
##
##    def GetPreference(self, Item):
##        '-no docstring-'
##        #return textValue, numericValue, pRetVal
##
##    def SetOverwrite(self, Name, Item, textValue, numericValue, ItemType):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPreference(self, Item, textValue, numericValue):
##        '-no docstring-'
##        #return pRetVal
##

cPropFrame._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'ChangeName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'NewName' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(2)], HRESULT, 'Count',
              ( ['in', 'optional'], eFramePropType, 'PropType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3)], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4)], HRESULT, 'GetAngle',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_double), 'T2' ),
              ( ['in', 'out'], POINTER(c_double), 'Tf' ),
              ( ['in', 'out'], POINTER(c_double), 'Tw' ),
              ( ['in', 'out'], POINTER(c_int), 'color' ),
              ( ['in', 'out'], POINTER(BSTR), 'notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5)], HRESULT, 'GetAutoSelectSteel',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SectName' ),
              ( ['in', 'out'], POINTER(BSTR), 'AutoStartSection' ),
              ( ['in', 'out'], POINTER(BSTR), 'notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(6)], HRESULT, 'GetChannel',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_double), 'T2' ),
              ( ['in', 'out'], POINTER(c_double), 'Tf' ),
              ( ['in', 'out'], POINTER(c_double), 'Tw' ),
              ( ['in', 'out'], POINTER(c_int), 'color' ),
              ( ['in', 'out'], POINTER(BSTR), 'notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(7)], HRESULT, 'GetCircle',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_int), 'color' ),
              ( ['in', 'out'], POINTER(BSTR), 'notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8)], HRESULT, 'GetCoverPlatedI',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'SectName' ),
              ( ['in', 'out'], POINTER(c_double), 'FyTopFlange' ),
              ( ['in', 'out'], POINTER(c_double), 'FyWeb' ),
              ( ['in', 'out'], POINTER(c_double), 'FyBotFlange' ),
              ( ['in', 'out'], POINTER(c_double), 'Tc' ),
              ( ['in', 'out'], POINTER(c_double), 'Bc' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatPropTop' ),
              ( ['in', 'out'], POINTER(c_double), 'Tcb' ),
              ( ['in', 'out'], POINTER(c_double), 'Bcb' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatPropBot' ),
              ( ['in', 'out'], POINTER(c_int), 'color' ),
              ( ['in', 'out'], POINTER(BSTR), 'notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9)], HRESULT, 'GetDblAngle',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_double), 'T2' ),
              ( ['in', 'out'], POINTER(c_double), 'Tf' ),
              ( ['in', 'out'], POINTER(c_double), 'Tw' ),
              ( ['in', 'out'], POINTER(c_double), 'Dis' ),
              ( ['in', 'out'], POINTER(c_int), 'color' ),
              ( ['in', 'out'], POINTER(BSTR), 'notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10)], HRESULT, 'GetDblChannel',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_double), 'T2' ),
              ( ['in', 'out'], POINTER(c_double), 'Tf' ),
              ( ['in', 'out'], POINTER(c_double), 'Tw' ),
              ( ['in', 'out'], POINTER(c_double), 'Dis' ),
              ( ['in', 'out'], POINTER(c_int), 'color' ),
              ( ['in', 'out'], POINTER(BSTR), 'notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(11)], HRESULT, 'GetGeneral',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_double), 'T2' ),
              ( ['in', 'out'], POINTER(c_double), 'Area' ),
              ( ['in', 'out'], POINTER(c_double), 'As2' ),
              ( ['in', 'out'], POINTER(c_double), 'As3' ),
              ( ['in', 'out'], POINTER(c_double), 'Torsion' ),
              ( ['in', 'out'], POINTER(c_double), 'I22' ),
              ( ['in', 'out'], POINTER(c_double), 'I33' ),
              ( ['in', 'out'], POINTER(c_double), 'S22' ),
              ( ['in', 'out'], POINTER(c_double), 'S33' ),
              ( ['in', 'out'], POINTER(c_double), 'Z22' ),
              ( ['in', 'out'], POINTER(c_double), 'Z33' ),
              ( ['in', 'out'], POINTER(c_double), 'R22' ),
              ( ['in', 'out'], POINTER(c_double), 'R33' ),
              ( ['in', 'out'], POINTER(c_int), 'color' ),
              ( ['in', 'out'], POINTER(BSTR), 'notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12)], HRESULT, 'GetISection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_double), 'T2' ),
              ( ['in', 'out'], POINTER(c_double), 'Tf' ),
              ( ['in', 'out'], POINTER(c_double), 'Tw' ),
              ( ['in', 'out'], POINTER(c_double), 'T2b' ),
              ( ['in', 'out'], POINTER(c_double), 'Tfb' ),
              ( ['in', 'out'], POINTER(c_int), 'color' ),
              ( ['in', 'out'], POINTER(BSTR), 'notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13)], HRESULT, 'GetModifiers',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14)], HRESULT, 'GetNameInPropFile',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'NameInFile' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(eFramePropType), 'PropType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15)], HRESULT, 'GetNameList',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'optional'], eFramePropType, 'PropType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16)], HRESULT, 'GetNonPrismatic',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StartSec' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'EndSec' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MyLength' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'EI33' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'EI22' ),
              ( ['in', 'out'], POINTER(c_int), 'color' ),
              ( ['in', 'out'], POINTER(BSTR), 'notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17)], HRESULT, 'GetPipe',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_double), 'Tw' ),
              ( ['in', 'out'], POINTER(c_int), 'color' ),
              ( ['in', 'out'], POINTER(BSTR), 'notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18)], HRESULT, 'GetPropFileNameList',
              ( ['in'], BSTR, 'FileName' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(eFramePropType)), 'MyPropType' ),
              ( ['in', 'optional'], eFramePropType, 'PropType', 0 ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19)], HRESULT, 'GetRebarBeam',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatPropLong' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatPropConfine' ),
              ( ['in', 'out'], POINTER(c_double), 'CoverTop' ),
              ( ['in', 'out'], POINTER(c_double), 'CoverBot' ),
              ( ['in', 'out'], POINTER(c_double), 'TopLeftArea' ),
              ( ['in', 'out'], POINTER(c_double), 'TopRightArea' ),
              ( ['in', 'out'], POINTER(c_double), 'BotLeftArea' ),
              ( ['in', 'out'], POINTER(c_double), 'BotRightArea' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20)], HRESULT, 'GetRebarColumn',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatPropLong' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatPropConfine' ),
              ( ['in', 'out'], POINTER(c_int), 'Pattern' ),
              ( ['in', 'out'], POINTER(c_int), 'ConfineType' ),
              ( ['in', 'out'], POINTER(c_double), 'Cover' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberCBars' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberR3Bars' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberR2Bars' ),
              ( ['in', 'out'], POINTER(BSTR), 'RebarSize' ),
              ( ['in', 'out'], POINTER(BSTR), 'TieSize' ),
              ( ['in', 'out'], POINTER(c_double), 'TieSpacingLongit' ),
              ( ['in', 'out'], POINTER(c_int), 'Number2DirTieBars' ),
              ( ['in', 'out'], POINTER(c_int), 'Number3DirTieBars' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ToBeDesigned' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21)], HRESULT, 'GetRectangle',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_double), 'T2' ),
              ( ['in', 'out'], POINTER(c_int), 'color' ),
              ( ['in', 'out'], POINTER(BSTR), 'notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(23)], HRESULT, 'GetSectProps',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_double), 'Area' ),
              ( ['in', 'out'], POINTER(c_double), 'As2' ),
              ( ['in', 'out'], POINTER(c_double), 'As3' ),
              ( ['in', 'out'], POINTER(c_double), 'Torsion' ),
              ( ['in', 'out'], POINTER(c_double), 'I22' ),
              ( ['in', 'out'], POINTER(c_double), 'I33' ),
              ( ['in', 'out'], POINTER(c_double), 'S22' ),
              ( ['in', 'out'], POINTER(c_double), 'S33' ),
              ( ['in', 'out'], POINTER(c_double), 'Z22' ),
              ( ['in', 'out'], POINTER(c_double), 'Z33' ),
              ( ['in', 'out'], POINTER(c_double), 'R22' ),
              ( ['in', 'out'], POINTER(c_double), 'R33' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(24)], HRESULT, 'GetTee',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_double), 'T2' ),
              ( ['in', 'out'], POINTER(c_double), 'Tf' ),
              ( ['in', 'out'], POINTER(c_double), 'Tw' ),
              ( ['in', 'out'], POINTER(c_int), 'color' ),
              ( ['in', 'out'], POINTER(BSTR), 'notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(25)], HRESULT, 'GetTube',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_double), 'T2' ),
              ( ['in', 'out'], POINTER(c_double), 'Tf' ),
              ( ['in', 'out'], POINTER(c_double), 'Tw' ),
              ( ['in', 'out'], POINTER(c_int), 'color' ),
              ( ['in', 'out'], POINTER(BSTR), 'notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(26)], HRESULT, 'GetTypeOAPI',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(eFramePropType), 'PropType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(27)], HRESULT, 'GetTypeRebar',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(c_int), 'MyType' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(28)], HRESULT, 'ImportProp',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], BSTR, 'FileName' ),
              ( ['in'], BSTR, 'PropName' ),
              ( ['in', 'optional'], c_int, 'color', -1 ),
              ( ['in', 'optional'], BSTR, 'notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(29), 'propget'], HRESULT, 'SDShape',
              ( ['out', 'retval'], POINTER(POINTER(cPropFrameSDShape)), 'pRetVal' )),
    COMMETHOD([dispid(30)], HRESULT, 'SetAngle',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'T3' ),
              ( ['in'], c_double, 'T2' ),
              ( ['in'], c_double, 'Tf' ),
              ( ['in'], c_double, 'Tw' ),
              ( ['in', 'optional'], c_int, 'color', -1 ),
              ( ['in', 'optional'], BSTR, 'notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(31)], HRESULT, 'SetAutoSelectSteel',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SectName' ),
              ( ['in', 'optional'], BSTR, 'AutoStartSection', 'Median' ),
              ( ['in', 'optional'], BSTR, 'notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(32)], HRESULT, 'SetChannel',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'T3' ),
              ( ['in'], c_double, 'T2' ),
              ( ['in'], c_double, 'Tf' ),
              ( ['in'], c_double, 'Tw' ),
              ( ['in', 'optional'], c_int, 'color', -1 ),
              ( ['in', 'optional'], BSTR, 'notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(33)], HRESULT, 'SetCircle',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'T3' ),
              ( ['in', 'optional'], c_int, 'color', -1 ),
              ( ['in', 'optional'], BSTR, 'notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(34)], HRESULT, 'SetCoverPlatedI',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'SectName' ),
              ( ['in'], c_double, 'FyTopFlange' ),
              ( ['in'], c_double, 'FyWeb' ),
              ( ['in'], c_double, 'FyBotFlange' ),
              ( ['in'], c_double, 'Tc' ),
              ( ['in'], c_double, 'Bc' ),
              ( ['in'], BSTR, 'MatPropTop' ),
              ( ['in'], c_double, 'Tcb' ),
              ( ['in'], c_double, 'Bcb' ),
              ( ['in'], BSTR, 'MatPropBot' ),
              ( ['in', 'optional'], c_int, 'color', -1 ),
              ( ['in', 'optional'], BSTR, 'notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(35)], HRESULT, 'SetDblAngle',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'T3' ),
              ( ['in'], c_double, 'T2' ),
              ( ['in'], c_double, 'Tf' ),
              ( ['in'], c_double, 'Tw' ),
              ( ['in'], c_double, 'Dis' ),
              ( ['in', 'optional'], c_int, 'color', -1 ),
              ( ['in', 'optional'], BSTR, 'notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(36)], HRESULT, 'SetDblChannel',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'T3' ),
              ( ['in'], c_double, 'T2' ),
              ( ['in'], c_double, 'Tf' ),
              ( ['in'], c_double, 'Tw' ),
              ( ['in'], c_double, 'Dis' ),
              ( ['in', 'optional'], c_int, 'color', -1 ),
              ( ['in', 'optional'], BSTR, 'notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(37)], HRESULT, 'SetGeneral',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'T3' ),
              ( ['in'], c_double, 'T2' ),
              ( ['in'], c_double, 'Area' ),
              ( ['in'], c_double, 'As2' ),
              ( ['in'], c_double, 'As3' ),
              ( ['in'], c_double, 'Torsion' ),
              ( ['in'], c_double, 'I22' ),
              ( ['in'], c_double, 'I33' ),
              ( ['in'], c_double, 'S22' ),
              ( ['in'], c_double, 'S33' ),
              ( ['in'], c_double, 'Z22' ),
              ( ['in'], c_double, 'Z33' ),
              ( ['in'], c_double, 'R22' ),
              ( ['in'], c_double, 'R33' ),
              ( ['in', 'optional'], c_int, 'color', -1 ),
              ( ['in', 'optional'], BSTR, 'notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(38)], HRESULT, 'SetISection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'T3' ),
              ( ['in'], c_double, 'T2' ),
              ( ['in'], c_double, 'Tf' ),
              ( ['in'], c_double, 'Tw' ),
              ( ['in'], c_double, 'T2b' ),
              ( ['in'], c_double, 'Tfb' ),
              ( ['in', 'optional'], c_int, 'color', -1 ),
              ( ['in', 'optional'], BSTR, 'notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(39)], HRESULT, 'SetModifiers',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(40)], HRESULT, 'SetNonPrismatic',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StartSec' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'EndSec' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MyLength' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'EI33' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'EI22' ),
              ( ['in', 'optional'], c_int, 'color', -1 ),
              ( ['in', 'optional'], BSTR, 'notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(41)], HRESULT, 'SetPipe',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'T3' ),
              ( ['in'], c_double, 'Tw' ),
              ( ['in', 'optional'], c_int, 'color', -1 ),
              ( ['in', 'optional'], BSTR, 'notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(42)], HRESULT, 'SetRebarBeam',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatPropLong' ),
              ( ['in'], BSTR, 'MatPropConfine' ),
              ( ['in'], c_double, 'CoverTop' ),
              ( ['in'], c_double, 'CoverBot' ),
              ( ['in'], c_double, 'TopLeftArea' ),
              ( ['in'], c_double, 'TopRightArea' ),
              ( ['in'], c_double, 'BotLeftArea' ),
              ( ['in'], c_double, 'BotRightArea' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(43)], HRESULT, 'SetRebarColumn',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatPropLong' ),
              ( ['in'], BSTR, 'MatPropConfine' ),
              ( ['in'], c_int, 'Pattern' ),
              ( ['in'], c_int, 'ConfineType' ),
              ( ['in'], c_double, 'Cover' ),
              ( ['in'], c_int, 'NumberCBars' ),
              ( ['in'], c_int, 'NumberR3Bars' ),
              ( ['in'], c_int, 'NumberR2Bars' ),
              ( ['in'], BSTR, 'RebarSize' ),
              ( ['in'], BSTR, 'TieSize' ),
              ( ['in'], c_double, 'TieSpacingLongit' ),
              ( ['in'], c_int, 'Number2DirTieBars' ),
              ( ['in'], c_int, 'Number3DirTieBars' ),
              ( ['in'], VARIANT_BOOL, 'ToBeDesigned' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(44)], HRESULT, 'SetRectangle',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'T3' ),
              ( ['in'], c_double, 'T2' ),
              ( ['in', 'optional'], c_int, 'color', -1 ),
              ( ['in', 'optional'], BSTR, 'notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(46)], HRESULT, 'SetTee',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'T3' ),
              ( ['in'], c_double, 'T2' ),
              ( ['in'], c_double, 'Tf' ),
              ( ['in'], c_double, 'Tw' ),
              ( ['in', 'optional'], c_int, 'color', -1 ),
              ( ['in', 'optional'], BSTR, 'notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(47)], HRESULT, 'SetTube',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'T3' ),
              ( ['in'], c_double, 'T2' ),
              ( ['in'], c_double, 'Tf' ),
              ( ['in'], c_double, 'Tw' ),
              ( ['in', 'optional'], c_int, 'color', -1 ),
              ( ['in', 'optional'], BSTR, 'notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(22)], HRESULT, 'GetSDSection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberItems' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ShapeName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType' ),
              ( ['in', 'out'], POINTER(c_int), 'DesignType' ),
              ( ['in', 'out'], POINTER(c_int), 'color' ),
              ( ['in', 'out'], POINTER(BSTR), 'notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(45)], HRESULT, 'SetSDSection',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in', 'optional'], c_int, 'DesignType', 0 ),
              ( ['in', 'optional'], c_int, 'color', -1 ),
              ( ['in', 'optional'], BSTR, 'notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(88)], HRESULT, 'GetMaterial',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(89)], HRESULT, 'SetMaterial',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(73)], HRESULT, 'GetTrapezoidal',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_double), 'T2' ),
              ( ['in', 'out'], POINTER(c_double), 'T2b' ),
              ( ['in', 'out'], POINTER(c_int), 'color' ),
              ( ['in', 'out'], POINTER(BSTR), 'notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(74)], HRESULT, 'SetTrapezoidal',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'T3' ),
              ( ['in'], c_double, 'T2' ),
              ( ['in'], c_double, 'T2b' ),
              ( ['in', 'optional'], c_int, 'color', -1 ),
              ( ['in', 'optional'], BSTR, 'notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(86)], HRESULT, 'GetConcreteL',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_double), 'T2' ),
              ( ['in', 'out'], POINTER(c_double), 'Tf' ),
              ( ['in', 'out'], POINTER(c_double), 'TwC' ),
              ( ['in', 'out'], POINTER(c_double), 'TwT' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'MirrorAbout2' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'MirrorAbout3' ),
              ( ['in', 'out'], POINTER(c_int), 'color' ),
              ( ['in', 'out'], POINTER(BSTR), 'notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(82)], HRESULT, 'GetConcreteTee',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_double), 'T2' ),
              ( ['in', 'out'], POINTER(c_double), 'Tf' ),
              ( ['in', 'out'], POINTER(c_double), 'TwF' ),
              ( ['in', 'out'], POINTER(c_double), 'TwT' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'MirrorAbout3' ),
              ( ['in', 'out'], POINTER(c_int), 'color' ),
              ( ['in', 'out'], POINTER(BSTR), 'notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(77)], HRESULT, 'GetPlate',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_double), 'T2' ),
              ( ['in', 'out'], POINTER(c_int), 'color' ),
              ( ['in', 'out'], POINTER(BSTR), 'notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(75)], HRESULT, 'GetRod',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_int), 'color' ),
              ( ['in', 'out'], POINTER(BSTR), 'notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(84)], HRESULT, 'GetSteelAngle',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_double), 'T2' ),
              ( ['in', 'out'], POINTER(c_double), 'Tf' ),
              ( ['in', 'out'], POINTER(c_double), 'Tw' ),
              ( ['in', 'out'], POINTER(c_double), 'R' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'MirrorAbout2' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'MirrorAbout3' ),
              ( ['in', 'out'], POINTER(c_int), 'color' ),
              ( ['in', 'out'], POINTER(BSTR), 'notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(80)], HRESULT, 'GetSteelTee',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'FileName' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatProp' ),
              ( ['in', 'out'], POINTER(c_double), 'T3' ),
              ( ['in', 'out'], POINTER(c_double), 'T2' ),
              ( ['in', 'out'], POINTER(c_double), 'Tf' ),
              ( ['in', 'out'], POINTER(c_double), 'Tw' ),
              ( ['in', 'out'], POINTER(c_double), 'R' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'MirrorAbout3' ),
              ( ['in', 'out'], POINTER(c_int), 'color' ),
              ( ['in', 'out'], POINTER(BSTR), 'notes' ),
              ( ['in', 'out'], POINTER(BSTR), 'GUID' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(87)], HRESULT, 'SetConcreteL',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'T3' ),
              ( ['in'], c_double, 'T2' ),
              ( ['in'], c_double, 'Tf' ),
              ( ['in'], c_double, 'TwC' ),
              ( ['in'], c_double, 'TwT' ),
              ( ['in'], VARIANT_BOOL, 'MirrorAbout2' ),
              ( ['in'], VARIANT_BOOL, 'MirrorAbout3' ),
              ( ['in', 'optional'], c_int, 'color', -1 ),
              ( ['in', 'optional'], BSTR, 'notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(83)], HRESULT, 'SetConcreteTee',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'T3' ),
              ( ['in'], c_double, 'T2' ),
              ( ['in'], c_double, 'Tf' ),
              ( ['in'], c_double, 'TwF' ),
              ( ['in'], c_double, 'TwT' ),
              ( ['in'], VARIANT_BOOL, 'MirrorAbout3' ),
              ( ['in', 'optional'], c_int, 'color', -1 ),
              ( ['in', 'optional'], BSTR, 'notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(78)], HRESULT, 'SetPlate',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'T3' ),
              ( ['in'], c_double, 'T2' ),
              ( ['in', 'optional'], c_int, 'color', -1 ),
              ( ['in', 'optional'], BSTR, 'notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(76)], HRESULT, 'SetRod',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'T3' ),
              ( ['in', 'optional'], c_int, 'color', -1 ),
              ( ['in', 'optional'], BSTR, 'notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(85)], HRESULT, 'SetSteelAngle',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'T3' ),
              ( ['in'], c_double, 'T2' ),
              ( ['in'], c_double, 'Tf' ),
              ( ['in'], c_double, 'Tw' ),
              ( ['in'], c_double, 'R' ),
              ( ['in'], VARIANT_BOOL, 'MirrorAbout2' ),
              ( ['in'], VARIANT_BOOL, 'MirrorAbout3' ),
              ( ['in', 'optional'], c_int, 'color', -1 ),
              ( ['in', 'optional'], BSTR, 'notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(81)], HRESULT, 'SetSteelTee',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'MatProp' ),
              ( ['in'], c_double, 'T3' ),
              ( ['in'], c_double, 'T2' ),
              ( ['in'], c_double, 'Tf' ),
              ( ['in'], c_double, 'Tw' ),
              ( ['in'], c_double, 'R' ),
              ( ['in'], VARIANT_BOOL, 'MirrorAbout3' ),
              ( ['in', 'optional'], c_int, 'color', -1 ),
              ( ['in', 'optional'], BSTR, 'notes', '' ),
              ( ['in', 'optional'], BSTR, 'GUID', '' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(79)], HRESULT, 'GetAllFrameProperties',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(eFramePropType)), 'PropType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Tf' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Tw' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T2b' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Tfb' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(90)], HRESULT, 'GetAllFrameProperties_2',
              ( ['in', 'out'], POINTER(c_int), 'NumberNames' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(eFramePropType)), 'PropType' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T3' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T2' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Tf' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Tw' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T2b' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Tfb' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Area' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(91)], HRESULT, 'GetRebarColumn_1',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatPropLong' ),
              ( ['in', 'out'], POINTER(BSTR), 'MatPropConfine' ),
              ( ['in', 'out'], POINTER(c_int), 'Pattern' ),
              ( ['in', 'out'], POINTER(c_int), 'ConfineType' ),
              ( ['in', 'out'], POINTER(c_double), 'Cover' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberCBars' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberR3Bars' ),
              ( ['in', 'out'], POINTER(c_int), 'NumberR2Bars' ),
              ( ['in', 'out'], POINTER(BSTR), 'RebarSize' ),
              ( ['in', 'out'], POINTER(BSTR), 'TieSize' ),
              ( ['in', 'out'], POINTER(c_double), 'TieSpacingLongit' ),
              ( ['in', 'out'], POINTER(c_int), 'Number2DirTieBars' ),
              ( ['in', 'out'], POINTER(c_int), 'Number3DirTieBars' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'ToBeDesigned' ),
              ( ['in', 'out'], POINTER(BSTR), 'LongitCornerRebarSize' ),
              ( ['in', 'out'], POINTER(c_double), 'LongitRebarArea' ),
              ( ['in', 'out'], POINTER(c_double), 'LongitCornerRebarArea' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for cPropFrame implementation
##class cPropFrame_Impl(object):
##    def ChangeName(self, Name, NewName):
##        '-no docstring-'
##        #return pRetVal
##
##    def Count(self, PropType):
##        '-no docstring-'
##        #return pRetVal
##
##    def Delete(self, Name):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetAngle(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, T3, T2, Tf, Tw, color, notes, GUID, pRetVal
##
##    def GetAutoSelectSteel(self, Name):
##        '-no docstring-'
##        #return NumberItems, SectName, AutoStartSection, notes, GUID, pRetVal
##
##    def GetChannel(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, T3, T2, Tf, Tw, color, notes, GUID, pRetVal
##
##    def GetCircle(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, T3, color, notes, GUID, pRetVal
##
##    def GetCoverPlatedI(self, Name):
##        '-no docstring-'
##        #return SectName, FyTopFlange, FyWeb, FyBotFlange, Tc, Bc, MatPropTop, Tcb, Bcb, MatPropBot, color, notes, GUID, pRetVal
##
##    def GetDblAngle(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, T3, T2, Tf, Tw, Dis, color, notes, GUID, pRetVal
##
##    def GetDblChannel(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, T3, T2, Tf, Tw, Dis, color, notes, GUID, pRetVal
##
##    def GetGeneral(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, T3, T2, Area, As2, As3, Torsion, I22, I33, S22, S33, Z22, Z33, R22, R33, color, notes, GUID, pRetVal
##
##    def GetISection(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, T3, T2, Tf, Tw, T2b, Tfb, color, notes, GUID, pRetVal
##
##    def GetModifiers(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def GetNameInPropFile(self, Name):
##        '-no docstring-'
##        #return NameInFile, FileName, MatProp, PropType, pRetVal
##
##    def GetNameList(self, PropType):
##        '-no docstring-'
##        #return NumberNames, MyName, pRetVal
##
##    def GetNonPrismatic(self, Name):
##        '-no docstring-'
##        #return NumberItems, StartSec, EndSec, MyLength, MyType, EI33, EI22, color, notes, GUID, pRetVal
##
##    def GetPipe(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, T3, Tw, color, notes, GUID, pRetVal
##
##    def GetPropFileNameList(self, FileName, PropType):
##        '-no docstring-'
##        #return NumberNames, MyName, MyPropType, pRetVal
##
##    def GetRebarBeam(self, Name):
##        '-no docstring-'
##        #return MatPropLong, MatPropConfine, CoverTop, CoverBot, TopLeftArea, TopRightArea, BotLeftArea, BotRightArea, pRetVal
##
##    def GetRebarColumn(self, Name):
##        '-no docstring-'
##        #return MatPropLong, MatPropConfine, Pattern, ConfineType, Cover, NumberCBars, NumberR3Bars, NumberR2Bars, RebarSize, TieSize, TieSpacingLongit, Number2DirTieBars, Number3DirTieBars, ToBeDesigned, pRetVal
##
##    def GetRectangle(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, T3, T2, color, notes, GUID, pRetVal
##
##    def GetSectProps(self, Name):
##        '-no docstring-'
##        #return Area, As2, As3, Torsion, I22, I33, S22, S33, Z22, Z33, R22, R33, pRetVal
##
##    def GetTee(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, T3, T2, Tf, Tw, color, notes, GUID, pRetVal
##
##    def GetTube(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, T3, T2, Tf, Tw, color, notes, GUID, pRetVal
##
##    def GetTypeOAPI(self, Name):
##        '-no docstring-'
##        #return PropType, pRetVal
##
##    def GetTypeRebar(self, Name):
##        '-no docstring-'
##        #return MyType, pRetVal
##
##    def ImportProp(self, Name, MatProp, FileName, PropName, color, notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    @property
##    def SDShape(self):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetAngle(self, Name, MatProp, T3, T2, Tf, Tw, color, notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetAutoSelectSteel(self, Name, NumberItems, AutoStartSection, notes, GUID):
##        '-no docstring-'
##        #return SectName, pRetVal
##
##    def SetChannel(self, Name, MatProp, T3, T2, Tf, Tw, color, notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCircle(self, Name, MatProp, T3, color, notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetCoverPlatedI(self, Name, SectName, FyTopFlange, FyWeb, FyBotFlange, Tc, Bc, MatPropTop, Tcb, Bcb, MatPropBot, color, notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDblAngle(self, Name, MatProp, T3, T2, Tf, Tw, Dis, color, notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetDblChannel(self, Name, MatProp, T3, T2, Tf, Tw, Dis, color, notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetGeneral(self, Name, MatProp, T3, T2, Area, As2, As3, Torsion, I22, I33, S22, S33, Z22, Z33, R22, R33, color, notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetISection(self, Name, MatProp, T3, T2, Tf, Tw, T2b, Tfb, color, notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetModifiers(self, Name):
##        '-no docstring-'
##        #return Value, pRetVal
##
##    def SetNonPrismatic(self, Name, NumberItems, color, notes, GUID):
##        '-no docstring-'
##        #return StartSec, EndSec, MyLength, MyType, EI33, EI22, pRetVal
##
##    def SetPipe(self, Name, MatProp, T3, Tw, color, notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetRebarBeam(self, Name, MatPropLong, MatPropConfine, CoverTop, CoverBot, TopLeftArea, TopRightArea, BotLeftArea, BotRightArea):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetRebarColumn(self, Name, MatPropLong, MatPropConfine, Pattern, ConfineType, Cover, NumberCBars, NumberR3Bars, NumberR2Bars, RebarSize, TieSize, TieSpacingLongit, Number2DirTieBars, Number3DirTieBars, ToBeDesigned):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetRectangle(self, Name, MatProp, T3, T2, color, notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetTee(self, Name, MatProp, T3, T2, Tf, Tw, color, notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetTube(self, Name, MatProp, T3, T2, Tf, Tw, color, notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetSDSection(self, Name):
##        '-no docstring-'
##        #return MatProp, NumberItems, ShapeName, MyType, DesignType, color, notes, GUID, pRetVal
##
##    def SetSDSection(self, Name, MatProp, DesignType, color, notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetMaterial(self, Name):
##        '-no docstring-'
##        #return MatProp, pRetVal
##
##    def SetMaterial(self, Name, MatProp):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetTrapezoidal(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, T3, T2, T2b, color, notes, GUID, pRetVal
##
##    def SetTrapezoidal(self, Name, MatProp, T3, T2, T2b, color, notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetConcreteL(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, T3, T2, Tf, TwC, TwT, MirrorAbout2, MirrorAbout3, color, notes, GUID, pRetVal
##
##    def GetConcreteTee(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, T3, T2, Tf, TwF, TwT, MirrorAbout3, color, notes, GUID, pRetVal
##
##    def GetPlate(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, T3, T2, color, notes, GUID, pRetVal
##
##    def GetRod(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, T3, color, notes, GUID, pRetVal
##
##    def GetSteelAngle(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, T3, T2, Tf, Tw, R, MirrorAbout2, MirrorAbout3, color, notes, GUID, pRetVal
##
##    def GetSteelTee(self, Name):
##        '-no docstring-'
##        #return FileName, MatProp, T3, T2, Tf, Tw, R, MirrorAbout3, color, notes, GUID, pRetVal
##
##    def SetConcreteL(self, Name, MatProp, T3, T2, Tf, TwC, TwT, MirrorAbout2, MirrorAbout3, color, notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetConcreteTee(self, Name, MatProp, T3, T2, Tf, TwF, TwT, MirrorAbout3, color, notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetPlate(self, Name, MatProp, T3, T2, color, notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetRod(self, Name, MatProp, T3, color, notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSteelAngle(self, Name, MatProp, T3, T2, Tf, Tw, R, MirrorAbout2, MirrorAbout3, color, notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def SetSteelTee(self, Name, MatProp, T3, T2, Tf, Tw, R, MirrorAbout3, color, notes, GUID):
##        '-no docstring-'
##        #return pRetVal
##
##    def GetAllFrameProperties(self):
##        '-no docstring-'
##        #return NumberNames, MyName, PropType, T3, T2, Tf, Tw, T2b, Tfb, pRetVal
##
##    def GetAllFrameProperties_2(self):
##        '-no docstring-'
##        #return NumberNames, MyName, PropType, T3, T2, Tf, Tw, T2b, Tfb, Area, pRetVal
##
##    def GetRebarColumn_1(self, Name):
##        '-no docstring-'
##        #return MatPropLong, MatPropConfine, Pattern, ConfineType, Cover, NumberCBars, NumberR3Bars, NumberR2Bars, RebarSize, TieSize, TieSpacingLongit, Number2DirTieBars, Number3DirTieBars, ToBeDesigned, LongitCornerRebarSize, LongitRebarArea, LongitCornerRebarArea, pRetVal
##

__all__ = [
           'eBridgeResponseDesignRating_Design_Shear_Longit_Rebar_Area_Bot_Slab',
           'eBridgeResponseDesignRating_Design_Fatigue_DC_Ratio_Web_Shear',
           'eBridgeResponseDesignRating_S11_Longitudinal_Bot_Envelope',
           'eItemTypeElm',
           'eBridgeResponseDisplDOF_Longitudinal_Displacement',
           'eBridgeResponseDesignRating_Design_Shear_Required_Extra_Shear_Rebar_Area_PerL',
           'eBridgeResponsePart_All_Webs',
           'eBridgeResponseDesignRating_S11_Longitudinal_Bot_Left',
           'eBridgeResponseDesignRating_S11_Longitudinal_Bot_Right_Corner',
           'eMatTypeConcrete_EN_C45_NormalWeight',
           'eLoadPatternType_VerticalEarthPressure',
           'e2DFrameType_EccentricBraced',
           'eBridgeResponseDesignRating_Design_Strength_DC_Ratio_Shear',
           'eLoadPatternType_Hyperstatic', 'eBridgeObjectType',
           'eBridgeResponseDesignRating_Design_Principal_Stress_Beam_Web_Top',
           'eWallPierRebarLayerType_Vertical_Distributed_MiddleZone_Eachface',
           'eDiaphragmOption_DefinedDiaphragm',
           'eBridgeResponseDesignRating_Design_Shear_Required_Extra_Longit_Rebar_Area_Beam',
           'eBridgeCodeInterims', 'eWallPropType',
           'eBridgeTendonCategory_General',
           'eBridgeResponseDesignRating_S11_Longitudinal_Beam_Bot_Center',
           'eBridgeResponseStress_S11_Lateral_Bending_Top_ULeft',
           'cEditPoint', 'eLength_NotApplicable',
           'eMatTypeRebar_Indian_HYSD550',
           'eBridgeResponseDesignRating_Design_Strength_DC_Ratio_FlexureShearInteract_Pos',
           'cCaseStaticNonlinear',
           'eBridgeResponseDesignRating_Rating_Strength_Shear_Rating',
           'cDStNewZealand_NZS3404_97',
           'eHingeLocationType_RelativeDistance',
           'eBridgeResponseStress_S11_Longitudinal_Top_ULeft_Center',
           'eLoadPatternType',
           'eBridgeResponseDisplDOF_Longitudinal_Rotation',
           'eMatTypeAluminum_SubType_6063_T6',
           'eBridgeResponseDesignRating_Design_Shear_Required_Extra_Longit_Rebar_Area',
           'eBridgeResponseDesignRating_Rating_Shear_Factored_Shear_Resistance_UVr',
           'eForce_tonf', 'e3DFrameType_BeamSlab',
           'eMatTypeRebar_Chinese_HRB335', 'eConstraintType_Line',
           'eMatTypeSteel_EN100252_S235',
           'eTemplateType_VerticalTruss',
           'cCaseModalHistoryNonlinear',
           'eBridgeResponseStress_S11_Longitudinal_Top_URight_Envelope',
           'eTemplateType_SlopedTruss',
           'eBridgeCodeInterims_Interim_2013',
           'e3DFrameType_PerimeterFrame',
           'eSuperObjectClass_BridgeFoundation',
           'eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Beam_Right',
           'eWallPierRebarLayerType_Vertical_Distributed_EndZoneJ_Total',
           'eBridgeResponseDesignRating_Design_Shear_Required_Extra_Longit_Rebar_Area_Slab',
           'eBridgeResponseDesignRating_Design_Strength_Total_Nominal_Shear_Force_6_10_10_4_2',
           'eConstraintType_Weld',
           'eBridgeResponseForce_Moment_About_Vertical_Axis_M2',
           'eBridgeResponsePart_All_Slabs', 'eLinkPropType_Gap',
           'eUnits_Ton_mm_C', 'eFramePropType_SteelRod',
           'eBridgeSegmentType_PierTable',
           'eLoadPatternType_EarthSurcharge',
           'eMatTypeConcrete_Indian_M55_NormalWeight', 'cAnalyze',
           'eBridgeSegmentType_Rigid',
           'eFramePropType_BuiltupICoverplate', 'cOptions',
           'eObjType_Solid',
           'eBridgeResponseStress_S11_Longitudinal_Top_Envelope',
           'cPropLineSpring',
           'eBridgeResponseDesignRating_Design_Crack_Top_Crack_Width',
           'cDCoACI318_14', 'eBridgeResponseDisplLoc_Slab_Center',
           'eShellType_Layered', 'eShellType', 'eShellType_Membrane',
           'eMatTypeTendon', 'cDatabaseTables',
           'eTemplateType_Frame3D', 'cCaseStaticNonlinearStaged',
           'eMatTypeSteel_ASTM_A53GrB', 'eMatType',
           'eBridgeObjectUserPointType_General', 'cGroup',
           'eLoadPatternType_Braking',
           'eFramePropType_BuiltupUHybrid', 'eItemTypeElm_GroupElm',
           'cDesignResults', 'cDStChinese_2010',
           'eBridgeResponsePart_Entire_Bridge_Section',
           'eDeckType_SolidSlab',
           'eMatTypeConcrete_FC5000_NormalWeight',
           'eBridgeResponseDesignRating_Design_Strength_DC_Ratio_FlexureShearInteract_Neg',
           'eBridgeResponseDesignRating_S11_Longitudinal_Top_Envelope',
           'eFramePropType_PCCGirderU', 'cPropFrameSDShape',
           'eMatTypeRebar_Indian_Mild250',
           'eMatTypeTendon_ASTM_A416Gr270',
           'eBridgeResponsePart_Beam', 'eDiaphragmOption', 'cView',
           'eAreaDesignOrientation_Null', 'eBridgeCodeAASHTO',
           'eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Beam_Center',
           'cFrameObj', 'eBridgeResponseDesignRating',
           'eWallPierRebarLayerType_Horizontal_Distributed_MiddleZone_Eachface',
           'eDiaphragmOption_FromShellObject',
           'cCaseDirectHistoryNonlinear',
           'eMatCoupledType_ModifiedDarwinPecknoldConcrete',
           'eLoadPatternType_DeadWater',
           'eAreaDesignOrientation_Floor',
           'eMatTypeConcrete_Chinese_C30_NormalWeight',
           'eFramePropType_ConcreteTee', 'eObjType_Frame',
           'cCaseBuckling', 'eMatType_NoDesign',
           'eWallPierRebarLayerType_Vertical_Distributed_EndZoneI_Total',
           'cDesignCompositeBeam', 'eLinkPropType_Isolator3',
           'eUnits_N_mm_C',
           'eMatTypeConcrete_Indian_M60_NormalWeight',
           'eBridgeResponseDesignRating_Rating_MinRebar_Min_Of_Abs_1_2Mcr_And_Abs_1_33Mu_For_Neg',
           'eBridgeResponseDesignRating_S11_Longitudinal_Top_Left',
           'eBridgeResponsePart_All_Beams', 'eTemplateType_Truss2D',
           'cPropFrame', 'eBridgeResponseDisplLoc_Web',
           'eUnits_kN_m_C', 'eMatCoupledType_None',
           'eBridgeResponseDesignRating_Rating_Service',
           'eFramePropType_Angle', 'eFramePropType_ConcreteBox',
           'eWallPierRebarLayerType_Confinement_EndZoneJ',
           'eSlabType_Slab',
           'eBridgeResponseDesignRating_S11_Longitudinal_Slab_Top_Left',
           'eMatTypeRebar', 'eItemType_SelectedObjects',
           'e2DFrameType_PortalFrame',
           'eBridgeCodeAASHTO_AASHTO_LRFD_2017',
           'eAreaDesignOrientation',
           'eBridgeCodeInterims_Interim_2012',
           'eBridgeResponseDesignRating_S11_Longitudinal_Beam_Bot_Envelope',
           'eBridgeCodeInterims_Interim_2014',
           'eSlabType_Stiff_DO_NOT_USE', 'cDCoHong_Kong_CP_2013',
           'eLength_m', 'eMatTypeSteel_ASTM_A500GrB_Fy42',
           'eBridgeResponseDesignRating_Design_Strength_DC_Ratio_Negative_Moment',
           'eBridgeResponseDesignRating_Design_Strength_DC_Ratio_Positive_Moment',
           'cNamedDisplay',
           'eBridgeResponseDesignRating_Design_Flexure_Moment_About_Horizontal_Axis_M3',
           'eItemTypeElm_SelectionElm',
           'eLinkPropType_MultilinearElastic', 'cDesignSteel',
           'cDCoIndian_IS_456_2000',
           'eBridgeResponseDesignRating_Design_Shear_Required_Extra_Longit_Rebar_Area_Top_Slab',
           'eBridgeResponseDesignRating_Design_Strength_DC_Ratio_Net_Section_Fracture_Neg',
           'eFramePropType_Cold_2L',
           'eBridgeResponseForce_Axial_Force_P',
           'eBridgeObjectType_Segmental',
           'eMatTypeConcrete_FC5000_LightWeight',
           'eMatTypeConcrete_Chinese_C20_NormalWeight',
           'eLoadPatternType_PedestrianLLReduced',
           'eLoadPatternType_LiveLoadSurcharge', 'eSlabType_Footing',
           'eMatTypeConcrete_Indian_M20_NormalWeight',
           'eSuperObjectClass', 'cTendonObj', 'cDCoItalianNTC2008C',
           'eBridgeResponseDesignRating_S11_Longitudinal_Top_Right',
           'eBridgeResponseDisplLoc_Web_Top',
           'eMatTypeSteel_EN100252_S450',
           'eLoadCaseType_LinearDynamic',
           'eLoadPatternType_DeadWearing', 'eFramePropType_Joist',
           'eMatTypeConcrete_EN_C35_NormalWeight',
           'eConstraintType_Rod', 'cDCoACI318_19',
           'eBridgeObjectFoundationPart_Footing',
           'eLinkPropType_Isolator2', 'eMatCoupledType',
           'eFramePropType_DbChannel', 'eUnits_lb_in_F',
           'cDesignShearWall', 'cDStCanadian_S16_09',
           'eBridgeResponseDisplDOF_Vertical_Displacement',
           'eLoadPatternType_Shrinkage', 'eBridgeResponsePart_Girder',
           'eTemplateType_Beam',
           'eMatTypeConcrete_FC6000_LightWeight', 'cGridSys',
           'eBridgeResponseDesignRating_Design_Principal_Stress_Web_Bot',
           'eMatTypeColdFormed_ASTM_A653SQGr50',
           'eLoadCaseType_LinearStatic',
           'eLoadPatternType_ReduceLive',
           'eMatTypeConcrete_Indian_M50_NormalWeight',
           'eTemplateType_UndergoundConcrete',
           'eBridgeResponseDesignRating_Design_Shear_Controlling_Torsion_DC_Ratio',
           'eMatTypeConcrete_EN_C30_NormalWeight', 'cPluginCallback',
           'eBridgeResponseDesignRating_S11_Longitudinal_Slab_Top_Beam_Center',
           'eBridgeResponsePart', 'eMatTypeSteel_Chinese_Q235',
           'eLoadCaseType_MovingLoad', 'eSuperObjectClass_None',
           'eAreaDesignOrientation_Wall',
           'eTemplateType_PerimeterFrame', 'eTemplateType_SpaceFrame',
           'eBridgeResponseDesignRating_S11_Longitudinal_Bot_Left_Corner',
           'eLoadPatternType_Live', 'eLoadPatternType_Ice',
           'eTemplateType_SpaceTruss',
           'eBridgeResponseDesignRating_Rating_Shear',
           'eBridgeResponseStress_S11_Longitudinal_Bot_Left',
           'eDesignActionType_ShortTermComposite',
           'eMatTypeRebar_Chinese_HPB235',
           'eLinkPropType_MultilinearPlastic',
           'eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Right',
           'eBridgeResponseDesignRating_S11_Longitudinal_Bot_Right',
           'eMatTypeConcrete_Indian_M15_NormalWeight',
           'eMatTypeConcrete_FC4000_LightWeight',
           'eLoadPatternType_SuperDead',
           'eBridgeResponseDesignRating_Design_Shear_Longit_Rebar_Area_Bot_Flange',
           'eBridgeResponseDisplLoc', 'eFramePropType_Circle',
           'cAnalysisResults',
           'eMatTypeConcrete_Chinese_C40_NormalWeight',
           'eLoadPatternType_DeadManufacture', 'cGenRefLine',
           'cPropMaterialTD',
           'eBridgeResponseDesignRating_Rating_Flexure_Factored_Moment_Resistance',
           'eMatTypeSteel_EN100252_S355',
           'eBridgeResponseDesignRating_Rating_MinRebar_Flexure_Rating',
           'eBridgeSegmentType', 'eFramePropType_ConcretePipe',
           'eTemplateType_Shells', 'eLoadPatternType_Snow',
           'eBridgeResponseDisplLoc_Right_Web_Top',
           'eMatType_ColdFormed',
           'eBridgeResponseStress_S11_Longitudinal_Bot_Beam_Left',
           'eMatTypeSteel_ASTM_A992_Fy50', 'cPropTendon',
           'eBridgeResponseStress_S11_Longitudinal_Top_Right',
           'eBridgeResponseStress_S11_Lateral_Bending_Top_URight',
           'eBridgeResponseDesignRating_Design_Shear_Longit_Rebar_Area_Beam',
           'cSelect',
           'eBridgeResponseDesignRating_Design_Crack_Bot_Crack_Width',
           'eMatTypeAluminum_SubType_5052_H34',
           'eFramePropType_Cold_Hat', 'cDiaphragm',
           'eMatTypeConcrete_EN_C60_NormalWeight',
           'eTemplateType_SolidModels',
           'eBridgeResponseDisplLoc_Left_Web_Top',
           'eLoadPatternType_WaterloadPressure',
           'eBridgeResponseDesignRating_Rating_Shear_Factored_Shear_Resistance',
           'eWallPropType_Specified', 'eForce_N',
           'eWallPierRebarLayerType_Diagonal_Each',
           'eBridgeObjectFoundationPart_Pile',
           'eMatTypeConcrete_FC3000_NormalWeight',
           'eFramePropType_EncasedCircle', 'eFramePropType_Cold_Z',
           'eFramePropType', 'eMatTypeConcrete',
           'eBridgeTendonCategory_BottomSpan', 'eMatType_Tendon',
           'eBridgeSegmentConstructionMethod_CastInPlace',
           'eBridgeObjectBentPart_CapBeam',
           'eLoadPatternType_Prestress', 'eBridgeResponseDisplDOF',
           'cCaseModalHistoryLinear',
           'eBridgeObjectFoundationPart_FoundationSpring',
           'cAutoWindBridge', 'eFramePropType_Variable',
           'eFrameDesignOrientation_Column',
           'eBridgeCodeInterims_NoInterims', 'eTemplateType_Dome',
           'cDStItalianNTC2018S', 'cFunction',
           'eLinkPropType_Isolator1',
           'eBridgeResponseStress_S11_Longitudinal_Top_Bot_Center',
           'eDesignActionType', 'eBridgeSegmentConstructionMethod',
           'eBridgeResponseDesignRating_S11_Longitudinal_Girder_Bot_Envelope',
           'eBridgeResponseDesignRating_Design_Principal_Stress_Web_Top',
           'eLoadPatternType_Dead', 'cNamedSet',
           'eMatTypeRebar_ASTM_A615Gr75', 'cDStAustralian_AS4100_98',
           'eMatTypeRebar_Chinese_HRB400', 'cStory',
           'eBridgeResponseDesignRating_Design_Crack_Top_Bot_Crack_Widths',
           'eUnits_kip_in_F', 'eFramePropType_ConcreteCross',
           'eSlabType_Waffle', 'cDStChinese_2018',
           'eFrameDesignOrientation',
           'eLoadPatternType_HorizontalEarthPressure',
           'eFramePropType_SteelPlate', 'cDCoTS_500_2000',
           'eBridgeObjectBentPart_Bearing', 'cLoadCases',
           'eMatTypeRebar_Indian_HYSD500',
           'eLoadCaseType_NonlinearStatic', 'eLoadPatternType_Wind',
           'eMatTypeConcrete_Indian_M25_NormalWeight',
           'eTemplateType_Barrel', 'eHingeLocationType', 'cPointElm',
           'eTemplateType_Advanced', 'cTower',
           'eMatTypeConcrete_EN_C20_NormalWeight',
           'eShellType_ShellThick',
           'eBridgeResponseDesignRating_S11_Longitudinal_Beam_Top_Right',
           'cDCoTS_500_2000_R2018', 'eReturnCode',
           'eLoadPatternType_Quake', 'eFramePropType_Concrete_L',
           'eCNameType', 'eMatType_Steel', 'eForce_kN',
           'cDStSP16_13330_2011',
           'eMatTypeConcrete_EN_C70_NormalWeight',
           'eLinkPropType_Damper',
           'eBridgeResponseDesignRating_Design_Shear_Required_Extra_Longit_Rebar_Area_Bot_Slab',
           'cDStAISC360_05_IBC2006', 'eLoadPatternType_StreamFlow',
           'eMatTypeRebar_ASTM_A706', 'eSlabType_Mat',
           'eWallSpandrelRebarLayerType', 'eLinkPropType_PlasticWen',
           'eSlabType_Drop',
           'eBridgeResponseStress_S11_Longitudinal_Bot_Center',
           'eLoadPatternType_DownDrag', 'eReturnCode_NotImplemented',
           'eBridgeResponseDisplLoc_Web_Bottom', 'cDStAISC_ASD89',
           'eShellType_PlateThick_DO_NOT_USE', 'eForce',
           'eLoadPatternType_VesselCollision',
           'eAreaDesignOrientation_Ramp_DO_NOT_USE', 'cDCoBS8110_97',
           'cDStAISC_LRFD93',
           'eBridgeResponseStress_S11_Lateral_Bending_Top',
           'eBridgeResponseDesignRating_S11_Longitudinal_Slab_Top_Center',
           'cSapModel', 'cCaseModalRitz', 'eConstraintType_Plate',
           'eBridgeResponseDesignRating_Design_Principal_Stress_Envelope',
           'eBridgeObjectBentPart_Column', 'cDesignStrip',
           'eBridgeResponsePart_Entire_Section_Plus_All_Girders',
           'eBridgeResponseDesignRating_Design_Shear_Torsion_Plus_Shear_Rebar_Area_PerL',
           'eBridgeResponseDesignRating_Design_Shear_Longit_Rebar_Area_Top_Slab',
           'eLoadPatternType_Construction',
           'eBridgeResponseDisplDOF_Transverse_Displacement',
           'eMatType_Rebar', 'cCombo', 'eItemType_Group',
           'eConstraintType_Equal', 'eTemplateType_ShearWall',
           'eTemplateType_StorageStructures',
           'eBridgeResponseDesignRating_S11_Longitudinal_Girder_Bot_Right',
           'eMatTypeAluminum',
           'eMatTypeConcrete_Indian_M45_NormalWeight', 'e2DFrameType',
           'eLoadPatternType_Notional', 'eDiaphragmOption_Disconnect',
           'cDetailing',
           'eBridgeResponseDesignRating_S11_Longitudinal_Beam_Bot_Left',
           'cHelper', 'cPropArea', 'eDeckType_Filled',
           'eUnits_lb_ft_F', 'eUnits_kN_mm_C',
           'eReturnCode_UnspecifiedError', 'cDCoAS_3600_2018',
           'eTemplateType_Truss3D',
           'eBridgeResponseDesignRating_Design_Shear_Torsion_Rebar_Area_PerL',
           'eBridgeObjectUserPointType',
           'eBridgeResponseDesignRating_Design_Shear_Demand_Concrete_Shear_Capacity_Ratio',
           'Helper', 'eFramePropType_EncasedRectangle',
           'eBridgeResponseDisplLoc_Right_Web_Bottom',
           'eCNameType_LoadCombo', 'eLoadCaseType',
           'eAreaDesignOrientation_Other', 'eFramePropType_General',
           'eBridgeResponseDesignRating_Rating_MinRebar_Min_Of_Abs_1_2Mcr_And_Abs_1_33Mu_For_Pos',
           'eBridgeResponseStress_S11_Longitudinal_Bot_Envelope',
           'eSlabType_Ribbed', 'eLoadCaseType_PowerSpectralDensity',
           'cPropRebar',
           'eBridgeResponseForce_Moment_About_Horizontal_Axis_M3',
           'eMatTypeConcrete_EN_C40_NormalWeight',
           'eTemplateType_EccentricFrame',
           'eMatTypeTendon_ASTM_A416Gr250',
           'eBridgeResponseDisplLoc_Left_Web_Bottom',
           'eSuperObjectClass_Foundation',
           'eLoadPatternType_VehicleCollision',
           'eLoadCaseType_SteadyState', 'cDStIndian_IS_800_2007',
           'cPointObj', 'eConstraintType_Diaphragm',
           'eLoadPatternType_PedestrianLL', 'eDeckType',
           'e3DFrameType_OpenFrame',
           'eBridgeCodeAASHTO_AASHTO_LRFD_2007', 'eDeckType_Unfilled',
           'eLoadPatternType_Impact', 'eCNameType_LoadCase',
           'eBridgeResponseStress_S11_Longitudinal_Top_Bot_Right',
           'eMatType_Concrete', 'eLength_mm',
           'eBridgeResponseStress_S11_Longitudinal_Bot_Right',
           'eItemTypeElm_Element',
           'eBridgeResponseForce_Shear_Horizontal_V3',
           'eBridgeResponseDesignRating_Rating_Strength_Live_load_Capacity_Factor_F_Shear_V2',
           'cDStSP16_13330_2017',
           'eBridgeResponseDesignRating_Rating_Flexure_Factored_Moment_Resistance_UMr',
           'eBridgeResponseDesignRating_Rating_Flexure_Live_load_Capacity_Factor_F',
           'eBridgeResponseStress_S11_Longitudinal_Top_URight_Center',
           'eFramePropType_Bridge', 'eBridgeTendonCategory',
           'eItemType_Objects', 'eBridgeResponseDisplLoc_Right_Web',
           'eLoadPatternType_EuroLm1Char', 'cPropPointSpring',
           'eUnits_N_cm_C', 'cLineElm',
           'eWallSpandrelRebarLayerType_Diagonal_Each',
           'eLoadCaseType_NonlinearHistory',
           'eLoadCaseType_HyperStatic',
           'eMatTypeConcrete_FC6000_NormalWeight',
           'eMatTypeConcrete_Indian_M30_NormalWeight',
           'eLinkPropType_Linear', 'eBridgeResponsePart_Web',
           'eBridgeCodeAASHTO_AASHTO_LRFD_2012',
           'eFrameDesignOrientation_Null',
           'eLoadPatternType_PatternLive', 'eUnits_kgf_cm_C',
           'eBridgeTendonCategory_Continuity',
           'eFramePropType_BuiltupIHybrid', 'eLoadPatternType_Other',
           'eBridgeResponseDesignRating_Design_Strength_DC_Ratio_Net_Section_Fracture_Pos',
           'eMatTypeConcrete_EN_C25_NormalWeight',
           'eForce_NotApplicable', 'eMatTypeSteel_ASTM_A572Gr50',
           'cAutoWind', 'eTemperature', 'eConstraintType_Body',
           'eFramePropType_CoreBrace_BRB',
           'eFramePropType_FilledPipe',
           'eWallSpandrelRebarLayerType_Horizontal_Distributed_Eachface',
           'eBridgeResponseDesignRating_Design_Fatigue_Top_Flange_Tensile_Stress_Range_Without_FLB',
           'eDesignActionType_Other',
           'eBridgeResponseDesignRating_Rating_Strength_Flexure_Rating',
           'cDCoMexican_RCDF_2017', 'eTemperature_F',
           'eMatTypeConcrete_FC4000_NormalWeight',
           'eConstraintAxis_AutoAxis', 'cDCoNZS_3101_2006',
           'eBridgeResponseDesignRating_Design_Principal_Stress_Beam_Web_Bot',
           'eBridgeResponseDisplLoc_Left_Web', 'eUnits_kip_ft_F',
           'cEditGeneral', 'eForce_kgf', 'eFramePropType_I',
           'e2DFrameType_ConcentricBraced', 'eMatTypeSteel',
           'eShellType_ShellThin', 'eLoadCaseType_NonlinearDynamic',
           'eTemplateType_BridgeWizard', 'eObjType_Area',
           'cDStBS5950_2000', 'cFile',
           'eBridgeObjectUserPointType_SegmentalTendon',
           'eMatTypeRebar_ASTM_A615Gr60', 'cSpandrelLabel',
           'eBridgeResponseDesignRating_Design_Tendon_Stress_Controlling_DC_Ratio',
           'eMatType_Aluminum',
           'eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Center',
           'eBridgeResponseStress_S11_Longitudinal_Top_ULeft_Left',
           'eLoadCaseType_LinearStaticMultiStep',
           'eLoadPatternType_Friction', 'cDCoACI318_11',
           'eWallPierRebarLayerType',
           'eWallSpandrelRebarLayerType_Vertical_Ties_Distributed',
           'eWallPierRebarLayerType_Confinement_EndZoneI',
           'eDesignActionType_NonComposite',
           'eLoadPatternType_WindOnLiveLoad',
           'eBridgeResponseDesignRating_S11_Longitudinal_Beam_Top_Left',
           'eBridgeObjectBentPart', 'eMatTypeColdFormed',
           'eLoadPatternType_PassiveEarthPressure', 'eForce_kip',
           'eWallPropType_AutoSelectList', 'cPattern',
           'eMatTypeSteel_ASTM_A913Gr50', 'eLinkPropType',
           'eLoadCaseType_LinearHistory', 'cDesignConcrete',
           'cDCoChinese_2010', 'eMatTypeSteel_ASTM_A36',
           'eBridgeResponseDesignRating_Design_Principal_Stress_Neutral_Axis',
           'eBridgeResponseStress_S11_Longitudinal_Top_URight_Right',
           'cDConcSlabACI318_14', 'eFrameDesignOrientation_Brace',
           'eLoadCaseType_Modal', 'eConstraintAxis_X',
           'cPropAreaSpring', 'eFramePropType_Cold_2C',
           'eBridgeResponseDesignRating_Design_Shear_Controlling_DC_Ratio',
           'cAutoSeismic', 'eTemperature_NotApplicable',
           'eBridgeResponseDesignRating_Design_Shear_Required_Extra_Longit_Rebar_Area_For_Torsion',
           'cCaseDirectHistoryLinear', 'eFramePropType_Cold_L',
           'cDCoSP63133302011',
           'eBridgeResponseStress_S11_Longitudinal_Top_Center',
           'eObjType',
           'eBridgeResponseStress_S11_Longitudinal_Top_ULeft_Envelope',
           'eItemTypeElm_ObjectElm',
           'eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Envelope',
           'eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Left',
           'cDStEurocode_3_2005', 'eBridgeObjectBentPart_Wall',
           'eBridgeResponseStress_S11_Longitudinal_Top_URight_Left',
           'eTemplateType_Floor',
           'eMatTypeConcrete_EN_C55_NormalWeight', 'cAreaObj',
           'cLoadPatterns', 'eTemplateType_Staircases',
           'eLoadPatternType_EuroLm3', 'cDStAISC360_10',
           'eFramePropType_BucklingRestrainedBrace',
           'eBridgeResponseDesignRating_S11_Longitudinal_Beam_Top_Center',
           'cDStCanadian_S16_14', 'eBridgeResponseStress',
           'eMatType_Masonry', 'cCaseModalEigen', 'eLength_micron',
           'eLength_ft', 'eConstraintType_Local',
           'eConstraintType_Beam',
           'eBridgeResponseDesignRating_S11_Longitudinal_Slab_Top_Envelope',
           'eWallSpandrelRebarLayerType_Horizontal_Top_Total',
           'eBridgeObjectFoundationPart',
           'eMatTypeSteel_ASTM_A500GrB_Fy46',
           'eBridgeResponseStress_S11_Longitudinal_Top_Beam_Center',
           'eBridgeResponseStress_S11_Lateral_Bending_Bot',
           'eMatTypeConcrete_EN_C50_NormalWeight',
           'eTemplateType_PortalFrame',
           'eBridgeCodeInterims_Interim_2011', 'eTemplateType_Bridge',
           'eSuperObjectClass_SuperObject', 'cAreaElm',
           'cDesignConcreteSlab', 'cFunctionRS',
           'eBridgeResponseDisplDOF_Avg_Longitudinal_Rotation',
           'eUnits_Ton_cm_C', 'eFramePropType_PCCGirderI',
           'eBridgeResponseDesignRating_S11_Longitudinal_Bot_Center',
           'eBridgeResponsePart_Slab', 'eObjType_Point',
           'eMatTypeConcrete_EN_C90_NormalWeight', 'eTemperature_C',
           'eDesignActionType_LongTermComposite',
           'cCaseResponseSpectrum',
           'eBridgeResponseStress_S11_Longitudinal_Bot_Beam_Right',
           'eLength_inch', 'StartService',
           'eLoadPatternType_Rooflive',
           'eFrameDesignOrientation_Other',
           'eBridgeResponseDesignRating_S11_Longitudinal_Girder_Bot_Left',
           'eLoadPatternType_EuroLm2', 'eUnits_kN_cm_C',
           'eBridgeResponseDesignRating_Rating_Shear_Live_load_Capacity_Factor_F',
           'eFrameDesignOrientation_Beam',
           'eBridgeResponseDesignRating_S11_Longitudinal_Beam_Top_Envelope',
           'eUnits', 'eFramePropType_Box', 'cEditFrame',
           'cConstraint', 'eMatTypeSteel_Indian_Fe250',
           'cDCoEurocode_2_2004', 'eMatTypeAluminum_SubType_6061_T6',
           'eBridgeResponseDesignRating_Design_Shear_Controlling_Shear_DC_Ratio',
           'eBridgeResponseStress_S11_Longitudinal_Top_Bot_Left',
           'eLoadPatternType_Move', 'cDCoAS_3600_09',
           'eBridgeSegmentConstructionMethod_Precast',
           'cPropMaterial', 'cFunctionTH', 'eLinkPropType_Hook',
           'eBridgeResponseDesignRating_S11_Longitudinal_Slab_Top_Right',
           'eLoadPatternType_Wave', 'eConstraintAxis',
           'cDCoACI318_08_IBC2009', 'cLinkObj', 'cDStItalianNTC2008S',
           'eBridgeCodeInterims_Interim_2015',
           'eTemplateType_BracedFrame', 'eMatTypeSteel_Indian_Fe345',
           'eMatTypeConcrete_EN_C16_NormalWeight',
           'eFramePropType_DblAngle',
           'eBridgeResponseDesignRating_Design_Shear_Longit_Rebar_Area_Slab',
           'eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Beam_Left',
           'cLinkElm', 'eFramePropType_Auto',
           'eHingeLocationType_OffsetFromIEnd',
           'eLoadPatternType_TemperatureGradient',
           'eLoadPatternType_LockedInForces',
           'eLoadCaseType_Buckling', 'eLoadPatternType_Temperature',
           'eLoadPatternType_Bouyancy',
           'eBridgeResponseStress_S11_Longitudinal_Top_ULeft_Right',
           'cEditArea', 'eTemplateType_CableBridges',
           'eBridgeResponseForce_Shear_Vertical_V2',
           'eMatTypeConcrete_EN_C12_NormalWeight',
           'eFramePropType_Pipe',
           'eBridgeResponseDesignRating_S11_Longitudinal_Beam_Bot_Right',
           'eBridgeObjectFoundationPart_PileCap', 'eUnits_N_m_C',
           '_StartService', 'eBridgeTendonCategory_TopSpan',
           'eHingeLocationType_OffsetFromJEnd',
           'eMatCoupledType_VonMisesPlasticity',
           'eMatTypeConcrete_EN_C80_NormalWeight', 'eForce_lb',
           'eMatTypeRebar_Indian_HYSD415', 'eDesignActionType_Staged',
           'eShellType_PlateThin_DO_NOT_USE',
           'eTemplateType_PipesAndPlates',
           'eBridgeResponseDesignRating_Rating_Flexure',
           'eFramePropType_Cold_C', 'eBridgeResponseForce_Torsion_T',
           'eSlabType', 'eLoadPatternType_EuroLm4',
           'cDCoMexican_RCDF_2004', 'e3DFrameType_FlatPlate',
           'eBridgeTendonCategory_Cantilever', 'cDesignForces',
           'eFramePropType_T', 'eMatTypeColdFormed_ASTM_A653SQGr33',
           'eTemplateType', 'eMatTypeRebar_ASTM_A615Gr40',
           'eItemType', 'eMatTypeSteel_Chinese_Q355',
           'eReturnCode_NoError', 'eLoadPatternType_Centrifugal',
           'eLoadPatternType_Settlement', 'eReturnCode_NotApplicable',
           'eFramePropType_Rectangular', 'cPropLink',
           'eMatTypeSteel_EN100252_S275',
           'eBridgeSegmentType_Closure', 'eLength',
           'eFramePropType_Channel', 'eTemplateType_Grid',
           'eLoadPatternType_EarthHydrostatic', 'eConstraintAxis_Y',
           'eMatTypeConcrete_Indian_M35_NormalWeight',
           'eTemplateType_Frame2D',
           'eBridgeResponseStress_S11_Longitudinal_Top_Left',
           'eTemplateType_Clear',
           'eBridgeResponseDesignRating_Rating_Service_Flexure_Rating',
           'eFramePropType_SD',
           'eBridgeResponseDesignRating_Design_Shear_Rebar_Area_PerL',
           'eBridgeObjectType_General', 'eConstraintAxis_Z',
           'eBridgeResponseDesignRating_Design_Fatigue_Bot_Flange_Lateral_Bending_Stress_Range',
           'cCaseStaticLinear',
           'eLoadPatternType_ActiveEarthPressure', 'eUnits_kgf_mm_C',
           'eBridgeSegmentType_Segment', 'cCaseHyperStatic',
           'eMatTypeConcrete_FC3000_LightWeight', 'cPierLabel',
           'eBridgeCodeAASHTO_AASHTO_LRFD_2014', 'cGenDispl',
           'eFramePropType_FilledTube', 'cOAPI',
           'eBridgeResponseDesignRating_Design_Shear_Longit_Rebar_Area',
           'eLoadPatternType_EuroLm1Freq', 'e3DFrameType',
           'eUnits_kgf_m_C', 'cAnalysisResultsSetup',
           'eBridgeCodeAASHTO_AASHTO_STD_2002',
           'eLoadPatternType_SnowHighAltitude',
           'eBridgeResponsePart_All_Girders', 'eConstraintType',
           'eMatTypeConcrete_Indian_M40_NormalWeight',
           'eLoadCaseType_ResponseSpectrum', 'eBridgeResponseForce',
           'eBridgeResponseDesignRating_Design_Fatigue_Bot_Flange_Tensile_Stress_Range_Without_FLB',
           'eBridgeResponseDesignRating_Design_Shear_Longit_Torsional_Rebar_Area_PerL',
           'eLength_cm', 'eTemplateType_Cylinder',
           'eBridgeResponseDesignRating_Rating_Strength_Live_load_Capacity_Factor_F_Moment_M3',
           'eUnits_Ton_m_C',
           'eWallSpandrelRebarLayerType_Horizontal_Bottom_Total',
           'eLoadPatternType_Creep',
           'eBridgeResponseDesignRating_S11_Longitudinal_Top_Center']
from comtypes import _check_version; _check_version('', 1618633621.750912)
